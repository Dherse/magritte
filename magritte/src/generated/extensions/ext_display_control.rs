//![VK_EXT_display_control](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_EXT_display_control.html) - device extension
//!# Description
//!This extension defines a set of utility functions for use with the
//!`[`khr_display`]` and `[`khr_display_swapchain`]` extensions.
//!# Revision
//!1
//!# Dependencies
//! - Requires Vulkan 1.0
//! - Requires `[`ext_display_surface_counter`]`
//! - Requires `[`khr_swapchain`]`
//!# Contacts
//! - James Jones [cubanismo](https://github.com/KhronosGroup/Vulkan-Docs/issues/new?body=[VK_EXT_display_control]
//!   @cubanismo%0A<<Here describe the issue or question you have about the VK_EXT_display_control
//!   extension>>)
//!# New functions & commands
//! - [`display_power_control_ext`]
//! - [`get_swapchain_counter_ext`]
//! - [`register_device_event_ext`]
//! - [`register_display_event_ext`]
//!# New structures
//! - [`DeviceEventInfoEXT`]
//! - [`DisplayEventInfoEXT`]
//! - [`DisplayPowerInfoEXT`]
//! - Extending [`SwapchainCreateInfoKHR`]:  - [`SwapchainCounterCreateInfoEXT`]
//!# New enums
//! - [`DeviceEventTypeEXT`]
//! - [`DisplayEventTypeEXT`]
//! - [`DisplayPowerStateEXT`]
//!# New constants
//! - [`EXT_DISPLAY_CONTROL_EXTENSION_NAME`]
//! - [`EXT_DISPLAY_CONTROL_SPEC_VERSION`]
//! - Extending [`StructureType`]:  - `VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT`  -
//!   `VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT`  - `VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT`  -
//!   `VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT`
//!# Known issues & F.A.Q
//!1) Should this extension add an explicit “WaitForVsync” API or a fence
//!signaled at vsync that the application can wait on? **RESOLVED** : A fence.
//!A separate API could later be provided that allows exporting the fence to a
//!native object that could be inserted into standard run loops on POSIX and
//!Windows systems.2) Should callbacks be added for a vsync event, or in general to monitor
//!events in Vulkan? **RESOLVED** : No, fences should be used.
//!Some events are generated by interrupts which are managed in the kernel.
//!In order to use a callback provided by the application, drivers would need
//!to have the userspace driver spawn threads that would wait on the kernel
//!event, and hence the callbacks could be difficult for the application to
//!synchronize with its other work given they would arrive on a foreign thread.3) Should vblank or
//! scanline events be exposed? **RESOLVED** : Vblank events.
//!Scanline events could be added by a separate extension, but the latency of
//!processing an interrupt and waking up a userspace event is high enough that
//!the accuracy of a scanline event would be rather low.
//!Further, per-scanline interrupts are not supported by all hardware.
//!# Version History
//! - Revision 1, 2016-12-13 (James Jones)  - Initial draft
//!# Other info
//! * 2016-12-13
//! * No known IP claims.
//! * - Pierre Boudier, NVIDIA  - James Jones, NVIDIA  - Damien Leone, NVIDIA  - Pierre-Loup
//!   Griffais, Valve  - Daniel Vetter, Intel
//!# Related
//! - [`DeviceEventInfoEXT`]
//! - [`DeviceEventTypeEXT`]
//! - [`DisplayEventInfoEXT`]
//! - [`DisplayEventTypeEXT`]
//! - [`DisplayPowerInfoEXT`]
//! - [`DisplayPowerStateEXT`]
//! - [`SwapchainCounterCreateInfoEXT`]
//! - [`display_power_control_ext`]
//! - [`get_swapchain_counter_ext`]
//! - [`register_device_event_ext`]
//! - [`register_display_event_ext`]
//!
//!# Notes and documentation
//!For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
//!
//!This documentation is generated from the Vulkan specification and documentation.
//!The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
//! Commons Attribution 4.0 International*.
//!This license explicitely allows adapting the source material as long as proper credit is given.
use crate::{
    extensions::{
        ext_display_surface_counter::{SurfaceCounterFlagBitsEXT, SurfaceCounterFlagsEXT},
        khr_display::DisplayKHR,
        khr_swapchain::SwapchainKHR,
    },
    vulkan1_0::{AllocationCallbacks, BaseInStructure, Device, Fence, StructureType, VulkanResultCodes},
    AsRaw, Unique, VulkanResult,
};
#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};
use std::{ffi::CStr, marker::PhantomData, mem::MaybeUninit, sync::atomic::AtomicBool};
///This element is not documented in the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html).
///See the module level documentation where a description may be given.
#[doc(alias = "VK_EXT_DISPLAY_CONTROL_SPEC_VERSION")]
pub const EXT_DISPLAY_CONTROL_SPEC_VERSION: u32 = 1;
///This element is not documented in the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html).
///See the module level documentation where a description may be given.
#[doc(alias = "VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME")]
pub const EXT_DISPLAY_CONTROL_EXTENSION_NAME: &'static CStr = crate::cstr!("VK_EXT_display_control");
///[vkDisplayPowerControlEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkDisplayPowerControlEXT.html) - Set the power state of a display
///# C Specifications
///To set the power state of a display, call:
///```c
///// Provided by VK_EXT_display_control
///VkResult vkDisplayPowerControlEXT(
///    VkDevice                                    device,
///    VkDisplayKHR                                display,
///    const VkDisplayPowerInfoEXT*                pDisplayPowerInfo);
///```
///# Parameters
/// - [`device`] is a logical device associated with [`display`].
/// - [`display`] is the display whose power state is modified.
/// - [`p_display_power_info`] is a pointer to a [`DisplayPowerInfoEXT`] structure specifying the
///   new power state of [`display`].
///# Description
///## Valid Usage (Implicit)
/// - [`device`] **must**  be a valid [`Device`] handle
/// - [`display`] **must**  be a valid [`DisplayKHR`] handle
/// - [`p_display_power_info`] **must**  be a valid pointer to a valid [`DisplayPowerInfoEXT`]
///   structure
/// - Both of [`device`], and [`display`] **must**  have been created, allocated, or retrieved from
///   the same [`PhysicalDevice`]
///
///## Return Codes
/// * - `VK_SUCCESS`
/// * - `VK_ERROR_OUT_OF_HOST_MEMORY`
///# Related
/// - [`ext_display_control`]
/// - [`Device`]
/// - [`DisplayKHR`]
/// - [`DisplayPowerInfoEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "vkDisplayPowerControlEXT")]
pub type FNDisplayPowerControlExt = Option<
    for<'lt> unsafe extern "system" fn(
        device: Device,
        display: DisplayKHR,
        p_display_power_info: *const DisplayPowerInfoEXT<'lt>,
    ) -> VulkanResultCodes,
>;
///[vkRegisterDeviceEventEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkRegisterDeviceEventEXT.html) - Signal a fence when a device event occurs
///# C Specifications
///To create a fence that will be signaled when an event occurs on a device,
///call:
///```c
///// Provided by VK_EXT_display_control
///VkResult vkRegisterDeviceEventEXT(
///    VkDevice                                    device,
///    const VkDeviceEventInfoEXT*                 pDeviceEventInfo,
///    const VkAllocationCallbacks*                pAllocator,
///    VkFence*                                    pFence);
///```
///# Parameters
/// - [`device`] is a logical device on which the event  **may**  occur.
/// - [`p_device_event_info`] is a pointer to a [`DeviceEventInfoEXT`] structure describing the
///   event of interest to the application.
/// - [`p_allocator`] controls host memory allocation as described in the [Memory Allocation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-allocation)
///   chapter.
/// - [`p_fence`] is a pointer to a handle in which the resulting fence object is returned.
///# Description
///## Valid Usage (Implicit)
/// - [`device`] **must**  be a valid [`Device`] handle
/// - [`p_device_event_info`] **must**  be a valid pointer to a valid [`DeviceEventInfoEXT`]
///   structure
/// - If [`p_allocator`] is not `NULL`, [`p_allocator`] **must**  be a valid pointer to a valid
///   [`AllocationCallbacks`] structure
/// - [`p_fence`] **must**  be a valid pointer to a [`Fence`] handle
///
///## Return Codes
/// * - `VK_SUCCESS`
/// * - `VK_ERROR_OUT_OF_HOST_MEMORY`
///# Related
/// - [`ext_display_control`]
/// - [`AllocationCallbacks`]
/// - [`Device`]
/// - [`DeviceEventInfoEXT`]
/// - [`Fence`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "vkRegisterDeviceEventEXT")]
pub type FNRegisterDeviceEventExt = Option<
    for<'lt> unsafe extern "system" fn(
        device: Device,
        p_device_event_info: *const DeviceEventInfoEXT<'lt>,
        p_allocator: *const AllocationCallbacks<'lt>,
        p_fence: *mut Fence,
    ) -> VulkanResultCodes,
>;
///[vkRegisterDisplayEventEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkRegisterDisplayEventEXT.html) - Signal a fence when a display event occurs
///# C Specifications
///To create a fence that will be signaled when an event occurs on a
///[`DisplayKHR`] object, call:
///```c
///// Provided by VK_EXT_display_control
///VkResult vkRegisterDisplayEventEXT(
///    VkDevice                                    device,
///    VkDisplayKHR                                display,
///    const VkDisplayEventInfoEXT*                pDisplayEventInfo,
///    const VkAllocationCallbacks*                pAllocator,
///    VkFence*                                    pFence);
///```
///# Parameters
/// - [`device`] is a logical device associated with [`display`]
/// - [`display`] is the display on which the event  **may**  occur.
/// - [`p_display_event_info`] is a pointer to a [`DisplayEventInfoEXT`] structure describing the
///   event of interest to the application.
/// - [`p_allocator`] controls host memory allocation as described in the [Memory Allocation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-allocation)
///   chapter.
/// - [`p_fence`] is a pointer to a handle in which the resulting fence object is returned.
///# Description
///## Valid Usage (Implicit)
/// - [`device`] **must**  be a valid [`Device`] handle
/// - [`display`] **must**  be a valid [`DisplayKHR`] handle
/// - [`p_display_event_info`] **must**  be a valid pointer to a valid [`DisplayEventInfoEXT`]
///   structure
/// - If [`p_allocator`] is not `NULL`, [`p_allocator`] **must**  be a valid pointer to a valid
///   [`AllocationCallbacks`] structure
/// - [`p_fence`] **must**  be a valid pointer to a [`Fence`] handle
/// - Both of [`device`], and [`display`] **must**  have been created, allocated, or retrieved from
///   the same [`PhysicalDevice`]
///
///## Return Codes
/// * - `VK_SUCCESS`
/// * - `VK_ERROR_OUT_OF_HOST_MEMORY`
///# Related
/// - [`ext_display_control`]
/// - [`AllocationCallbacks`]
/// - [`Device`]
/// - [`DisplayEventInfoEXT`]
/// - [`DisplayKHR`]
/// - [`Fence`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "vkRegisterDisplayEventEXT")]
pub type FNRegisterDisplayEventExt = Option<
    for<'lt> unsafe extern "system" fn(
        device: Device,
        display: DisplayKHR,
        p_display_event_info: *const DisplayEventInfoEXT<'lt>,
        p_allocator: *const AllocationCallbacks<'lt>,
        p_fence: *mut Fence,
    ) -> VulkanResultCodes,
>;
///[vkGetSwapchainCounterEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainCounterEXT.html) - Query the current value of a surface counter
///# C Specifications
///The requested counters become active when the first presentation command for
///the associated swapchain is processed by the presentation engine.
///To query the value of an active counter, use:
///```c
///// Provided by VK_EXT_display_control
///VkResult vkGetSwapchainCounterEXT(
///    VkDevice                                    device,
///    VkSwapchainKHR                              swapchain,
///    VkSurfaceCounterFlagBitsEXT                 counter,
///    uint64_t*                                   pCounterValue);
///```
///# Parameters
/// - [`device`] is the [`Device`] associated with [`swapchain`].
/// - [`swapchain`] is the swapchain from which to query the counter value.
/// - [`counter`] is a [`SurfaceCounterFlagBitsEXT`] value specifying the counter to query.
/// - [`p_counter_value`] will return the current value of the counter.
///# Description
///If a counter is not available because the swapchain is out of date, the
///implementation  **may**  return `VK_ERROR_OUT_OF_DATE_KHR`.
///## Valid Usage
/// - One or more present commands on [`swapchain`] **must**  have been processed by the
///   presentation engine
///
///## Valid Usage (Implicit)
/// - [`device`] **must**  be a valid [`Device`] handle
/// - [`swapchain`] **must**  be a valid [`SwapchainKHR`] handle
/// - [`counter`] **must**  be a valid [`SurfaceCounterFlagBitsEXT`] value
/// - [`p_counter_value`] **must**  be a valid pointer to a `uint64_t` value
/// - Both of [`device`], and [`swapchain`] **must**  have been created, allocated, or retrieved
///   from the same [`Instance`]
///
///## Return Codes
/// * - `VK_SUCCESS`
/// * - `VK_ERROR_OUT_OF_HOST_MEMORY`  - `VK_ERROR_DEVICE_LOST`  - `VK_ERROR_OUT_OF_DATE_KHR`
///# Related
/// - [`ext_display_control`]
/// - [`Device`]
/// - [`SurfaceCounterFlagBitsEXT`]
/// - [`SwapchainKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "vkGetSwapchainCounterEXT")]
pub type FNGetSwapchainCounterExt = Option<
    unsafe extern "system" fn(
        device: Device,
        swapchain: SwapchainKHR,
        counter: SurfaceCounterFlagBitsEXT,
        p_counter_value: *mut u64,
    ) -> VulkanResultCodes,
>;
///[VkDisplayPowerStateEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDisplayPowerStateEXT.html) - Possible power states for a display
///# C Specifications
///Possible values of [`DisplayPowerInfoEXT::power_state`], specifying
///the new power state of a display, are:
///```c
///// Provided by VK_EXT_display_control
///typedef enum VkDisplayPowerStateEXT {
///    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
///    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
///    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
///} VkDisplayPowerStateEXT;
///```
///# Description
/// - [`OFF`] specifies that the display is powered down.
/// - [`SUSPEND`] specifies that the display is put into a low power mode, from which it  **may**
///   be able to transition back to [`ON`] more quickly than if it were in [`OFF`]. This state
///   **may**  be the same as [`OFF`].
/// - [`ON`] specifies that the display is powered on.
///# Related
/// - [`ext_display_control`]
/// - [`DisplayPowerInfoEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDisplayPowerStateEXT")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(transparent)]
pub struct DisplayPowerStateEXT(i32);
impl const Default for DisplayPowerStateEXT {
    fn default() -> Self {
        Self(0)
    }
}
impl DisplayPowerStateEXT {
    ///[`OFF`] specifies that the display is
    ///powered down.
    pub const OFF: Self = Self(0);
    ///[`SUSPEND`] specifies that the display is
    ///put into a low power mode, from which it  **may**  be able to transition back
    ///to [`ON`] more quickly than if it were in
    ///[`OFF`].
    ///This state  **may**  be the same as [`OFF`].
    pub const SUSPEND: Self = Self(1);
    ///[`ON`] specifies that the display is
    ///powered on.
    pub const ON: Self = Self(2);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe.
    ///
    ///# Safety
    ///The caller of this function must ensure that all of the bits are valid.
    #[inline]
    pub const unsafe fn from_bits_unchecked(bits: i32) -> Self {
        Self(bits)
    }
}
impl std::fmt::Debug for DisplayPowerStateEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple(stringify!(DisplayPowerStateEXT))
            .field(match *self {
                Self::OFF => &"OFF",
                Self::SUSPEND => &"SUSPEND",
                Self::ON => &"ON",
                other => unreachable!(
                    concat!("invalid value for", stringify!(DisplayPowerStateEXT), ": {:?}"),
                    other
                ),
            })
            .finish()
    }
}
impl std::fmt::Display for DisplayPowerStateEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.write_str(match *self {
            Self::OFF => &"OFF",
            Self::SUSPEND => &"SUSPEND",
            Self::ON => &"ON",
            other => unreachable!(
                concat!("invalid value for", stringify!(DisplayPowerStateEXT), ": {:?}"),
                other
            ),
        })
    }
}
///[VkDeviceEventTypeEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceEventTypeEXT.html) - Events that can occur on a device object
///# C Specifications
///Possible values of [`DeviceEventInfoEXT`]`::device`, specifying when
///a fence will be signaled, are:
///```c
///// Provided by VK_EXT_display_control
///typedef enum VkDeviceEventTypeEXT {
///    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
///} VkDeviceEventTypeEXT;
///```
///# Description
/// - [`DISPLAY_HOTPLUG`] specifies that the fence is signaled when a display is plugged into or
///   unplugged from the specified device. Applications  **can**  use this notification to determine
///   when they need to re-enumerate the available displays on a device.
///# Related
/// - [`ext_display_control`]
/// - [`DeviceEventInfoEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDeviceEventTypeEXT")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(transparent)]
pub struct DeviceEventTypeEXT(i32);
impl const Default for DeviceEventTypeEXT {
    fn default() -> Self {
        Self(0)
    }
}
impl DeviceEventTypeEXT {
    ///[`DISPLAY_HOTPLUG`] specifies that the fence
    ///is signaled when a display is plugged into or unplugged from the
    ///specified device.
    ///Applications  **can**  use this notification to determine when they need to
    ///re-enumerate the available displays on a device.
    pub const DISPLAY_HOTPLUG: Self = Self(0);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe.
    ///
    ///# Safety
    ///The caller of this function must ensure that all of the bits are valid.
    #[inline]
    pub const unsafe fn from_bits_unchecked(bits: i32) -> Self {
        Self(bits)
    }
}
impl std::fmt::Debug for DeviceEventTypeEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple(stringify!(DeviceEventTypeEXT))
            .field(match *self {
                Self::DISPLAY_HOTPLUG => &"DISPLAY_HOTPLUG",
                other => unreachable!(
                    concat!("invalid value for", stringify!(DeviceEventTypeEXT), ": {:?}"),
                    other
                ),
            })
            .finish()
    }
}
impl std::fmt::Display for DeviceEventTypeEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.write_str(match *self {
            Self::DISPLAY_HOTPLUG => &"DISPLAY_HOTPLUG",
            other => unreachable!(
                concat!("invalid value for", stringify!(DeviceEventTypeEXT), ": {:?}"),
                other
            ),
        })
    }
}
///[VkDisplayEventTypeEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDisplayEventTypeEXT.html) - Events that can occur on a display object
///# C Specifications
///Possible values of [`DisplayEventInfoEXT::display_event`],
///specifying when a fence will be signaled, are:
///```c
///// Provided by VK_EXT_display_control
///typedef enum VkDisplayEventTypeEXT {
///    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
///} VkDisplayEventTypeEXT;
///```
///# Description
/// - [`FIRST_PIXEL_OUT`] specifies that the fence is signaled when the first pixel of the next
///   display refresh cycle leaves the display engine for the display.
///# Related
/// - [`ext_display_control`]
/// - [`DisplayEventInfoEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDisplayEventTypeEXT")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(transparent)]
pub struct DisplayEventTypeEXT(i32);
impl const Default for DisplayEventTypeEXT {
    fn default() -> Self {
        Self(0)
    }
}
impl DisplayEventTypeEXT {
    ///[`FIRST_PIXEL_OUT`] specifies that the fence
    ///is signaled when the first pixel of the next display refresh cycle
    ///leaves the display engine for the display.
    pub const FIRST_PIXEL_OUT: Self = Self(0);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe.
    ///
    ///# Safety
    ///The caller of this function must ensure that all of the bits are valid.
    #[inline]
    pub const unsafe fn from_bits_unchecked(bits: i32) -> Self {
        Self(bits)
    }
}
impl std::fmt::Debug for DisplayEventTypeEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple(stringify!(DisplayEventTypeEXT))
            .field(match *self {
                Self::FIRST_PIXEL_OUT => &"FIRST_PIXEL_OUT",
                other => unreachable!(
                    concat!("invalid value for", stringify!(DisplayEventTypeEXT), ": {:?}"),
                    other
                ),
            })
            .finish()
    }
}
impl std::fmt::Display for DisplayEventTypeEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.write_str(match *self {
            Self::FIRST_PIXEL_OUT => &"FIRST_PIXEL_OUT",
            other => unreachable!(
                concat!("invalid value for", stringify!(DisplayEventTypeEXT), ": {:?}"),
                other
            ),
        })
    }
}
///[VkDisplayPowerInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDisplayPowerInfoEXT.html) - Describe the power state of a display
///# C Specifications
///The [`DisplayPowerInfoEXT`] structure is defined as:
///```c
///// Provided by VK_EXT_display_control
///typedef struct VkDisplayPowerInfoEXT {
///    VkStructureType           sType;
///    const void*               pNext;
///    VkDisplayPowerStateEXT    powerState;
///} VkDisplayPowerInfoEXT;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`power_state`] is a [`DisplayPowerStateEXT`] value specifying the new power state of the
///   display.
///# Description
///## Valid Usage (Implicit)
/// - [`s_type`] **must**  be `VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT`
/// - [`p_next`] **must**  be `NULL`
/// - [`power_state`] **must**  be a valid [`DisplayPowerStateEXT`] value
///# Related
/// - [`ext_display_control`]
/// - [`DisplayPowerStateEXT`]
/// - [`StructureType`]
/// - [`display_power_control_ext`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDisplayPowerInfoEXT")]
#[derive(Debug, Clone, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[repr(C)]
pub struct DisplayPowerInfoEXT<'lt> {
    ///Lifetime field
    pub _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    pub s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    pub p_next: *const BaseInStructure<'lt>,
    ///[`power_state`] is a [`DisplayPowerStateEXT`] value specifying the
    ///new power state of the display.
    pub power_state: DisplayPowerStateEXT,
}
impl<'lt> Default for DisplayPowerInfoEXT<'lt> {
    fn default() -> Self {
        Self {
            _lifetime: PhantomData,
            s_type: StructureType::DISPLAY_POWER_INFO_EXT,
            p_next: std::ptr::null(),
            power_state: Default::default(),
        }
    }
}
impl<'lt> DisplayPowerInfoEXT<'lt> {
    ///Gets the raw value of [`Self::p_next`]
    pub fn p_next_raw(&self) -> *const BaseInStructure<'lt> {
        self.p_next
    }
    ///Sets the raw value of [`Self::p_next`]
    pub fn set_p_next_raw(mut self, value: *const BaseInStructure<'lt>) -> Self {
        self.p_next = value;
        self
    }
    ///Gets the value of [`Self::s_type`]
    pub fn s_type(&self) -> StructureType {
        self.s_type
    }
    ///Gets the value of [`Self::p_next`]
    ///# Safety
    ///This function converts a pointer into a value which may be invalid, make sure
    ///that the pointer is valid before dereferencing.
    pub unsafe fn p_next(&self) -> &BaseInStructure<'lt> {
        &*self.p_next
    }
    ///Gets the value of [`Self::power_state`]
    pub fn power_state(&self) -> DisplayPowerStateEXT {
        self.power_state
    }
    ///Gets a mutable reference to the value of [`Self::s_type`]
    pub fn s_type_mut(&mut self) -> &mut StructureType {
        &mut self.s_type
    }
    ///Gets a mutable reference to the value of [`Self::power_state`]
    pub fn power_state_mut(&mut self) -> &mut DisplayPowerStateEXT {
        &mut self.power_state
    }
    ///Sets the value of [`Self::s_type`]
    pub fn set_s_type(mut self, value: crate::vulkan1_0::StructureType) -> Self {
        self.s_type = value;
        self
    }
    ///Sets the value of [`Self::p_next`]
    pub fn set_p_next(mut self, value: &'lt crate::vulkan1_0::BaseInStructure<'lt>) -> Self {
        self.p_next = value as *const _;
        self
    }
    ///Sets the value of [`Self::power_state`]
    pub fn set_power_state(mut self, value: crate::extensions::ext_display_control::DisplayPowerStateEXT) -> Self {
        self.power_state = value;
        self
    }
}
///[VkDeviceEventInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceEventInfoEXT.html) - Describe a device event to create
///# C Specifications
///The [`DeviceEventInfoEXT`] structure is defined as:
///```c
///// Provided by VK_EXT_display_control
///typedef struct VkDeviceEventInfoEXT {
///    VkStructureType         sType;
///    const void*             pNext;
///    VkDeviceEventTypeEXT    deviceEvent;
///} VkDeviceEventInfoEXT;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - `device` is a [`DeviceEventTypeEXT`] value specifying when the fence will be signaled.
///# Description
///## Valid Usage (Implicit)
/// - [`s_type`] **must**  be `VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT`
/// - [`p_next`] **must**  be `NULL`
/// - [`device_event`] **must**  be a valid [`DeviceEventTypeEXT`] value
///# Related
/// - [`ext_display_control`]
/// - [`DeviceEventTypeEXT`]
/// - [`StructureType`]
/// - [`register_device_event_ext`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDeviceEventInfoEXT")]
#[derive(Debug, Clone, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[repr(C)]
pub struct DeviceEventInfoEXT<'lt> {
    ///Lifetime field
    pub _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    pub s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    pub p_next: *const BaseInStructure<'lt>,
    ///No documentation found
    pub device_event: DeviceEventTypeEXT,
}
impl<'lt> Default for DeviceEventInfoEXT<'lt> {
    fn default() -> Self {
        Self {
            _lifetime: PhantomData,
            s_type: StructureType::DEVICE_EVENT_INFO_EXT,
            p_next: std::ptr::null(),
            device_event: Default::default(),
        }
    }
}
impl<'lt> DeviceEventInfoEXT<'lt> {
    ///Gets the raw value of [`Self::p_next`]
    pub fn p_next_raw(&self) -> *const BaseInStructure<'lt> {
        self.p_next
    }
    ///Sets the raw value of [`Self::p_next`]
    pub fn set_p_next_raw(mut self, value: *const BaseInStructure<'lt>) -> Self {
        self.p_next = value;
        self
    }
    ///Gets the value of [`Self::s_type`]
    pub fn s_type(&self) -> StructureType {
        self.s_type
    }
    ///Gets the value of [`Self::p_next`]
    ///# Safety
    ///This function converts a pointer into a value which may be invalid, make sure
    ///that the pointer is valid before dereferencing.
    pub unsafe fn p_next(&self) -> &BaseInStructure<'lt> {
        &*self.p_next
    }
    ///Gets the value of [`Self::device_event`]
    pub fn device_event(&self) -> DeviceEventTypeEXT {
        self.device_event
    }
    ///Gets a mutable reference to the value of [`Self::s_type`]
    pub fn s_type_mut(&mut self) -> &mut StructureType {
        &mut self.s_type
    }
    ///Gets a mutable reference to the value of [`Self::device_event`]
    pub fn device_event_mut(&mut self) -> &mut DeviceEventTypeEXT {
        &mut self.device_event
    }
    ///Sets the value of [`Self::s_type`]
    pub fn set_s_type(mut self, value: crate::vulkan1_0::StructureType) -> Self {
        self.s_type = value;
        self
    }
    ///Sets the value of [`Self::p_next`]
    pub fn set_p_next(mut self, value: &'lt crate::vulkan1_0::BaseInStructure<'lt>) -> Self {
        self.p_next = value as *const _;
        self
    }
    ///Sets the value of [`Self::device_event`]
    pub fn set_device_event(mut self, value: crate::extensions::ext_display_control::DeviceEventTypeEXT) -> Self {
        self.device_event = value;
        self
    }
}
///[VkDisplayEventInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDisplayEventInfoEXT.html) - Describe a display event to create
///# C Specifications
///The [`DisplayEventInfoEXT`] structure is defined as:
///```c
///// Provided by VK_EXT_display_control
///typedef struct VkDisplayEventInfoEXT {
///    VkStructureType          sType;
///    const void*              pNext;
///    VkDisplayEventTypeEXT    displayEvent;
///} VkDisplayEventInfoEXT;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`display_event`] is a [`DisplayEventTypeEXT`] specifying when the fence will be signaled.
///# Description
///## Valid Usage (Implicit)
/// - [`s_type`] **must**  be `VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT`
/// - [`p_next`] **must**  be `NULL`
/// - [`display_event`] **must**  be a valid [`DisplayEventTypeEXT`] value
///# Related
/// - [`ext_display_control`]
/// - [`DisplayEventTypeEXT`]
/// - [`StructureType`]
/// - [`register_display_event_ext`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDisplayEventInfoEXT")]
#[derive(Debug, Clone, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[repr(C)]
pub struct DisplayEventInfoEXT<'lt> {
    ///Lifetime field
    pub _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    pub s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    pub p_next: *const BaseInStructure<'lt>,
    ///[`display_event`] is a [`DisplayEventTypeEXT`] specifying when the
    ///fence will be signaled.
    pub display_event: DisplayEventTypeEXT,
}
impl<'lt> Default for DisplayEventInfoEXT<'lt> {
    fn default() -> Self {
        Self {
            _lifetime: PhantomData,
            s_type: StructureType::DISPLAY_EVENT_INFO_EXT,
            p_next: std::ptr::null(),
            display_event: Default::default(),
        }
    }
}
impl<'lt> DisplayEventInfoEXT<'lt> {
    ///Gets the raw value of [`Self::p_next`]
    pub fn p_next_raw(&self) -> *const BaseInStructure<'lt> {
        self.p_next
    }
    ///Sets the raw value of [`Self::p_next`]
    pub fn set_p_next_raw(mut self, value: *const BaseInStructure<'lt>) -> Self {
        self.p_next = value;
        self
    }
    ///Gets the value of [`Self::s_type`]
    pub fn s_type(&self) -> StructureType {
        self.s_type
    }
    ///Gets the value of [`Self::p_next`]
    ///# Safety
    ///This function converts a pointer into a value which may be invalid, make sure
    ///that the pointer is valid before dereferencing.
    pub unsafe fn p_next(&self) -> &BaseInStructure<'lt> {
        &*self.p_next
    }
    ///Gets the value of [`Self::display_event`]
    pub fn display_event(&self) -> DisplayEventTypeEXT {
        self.display_event
    }
    ///Gets a mutable reference to the value of [`Self::s_type`]
    pub fn s_type_mut(&mut self) -> &mut StructureType {
        &mut self.s_type
    }
    ///Gets a mutable reference to the value of [`Self::display_event`]
    pub fn display_event_mut(&mut self) -> &mut DisplayEventTypeEXT {
        &mut self.display_event
    }
    ///Sets the value of [`Self::s_type`]
    pub fn set_s_type(mut self, value: crate::vulkan1_0::StructureType) -> Self {
        self.s_type = value;
        self
    }
    ///Sets the value of [`Self::p_next`]
    pub fn set_p_next(mut self, value: &'lt crate::vulkan1_0::BaseInStructure<'lt>) -> Self {
        self.p_next = value as *const _;
        self
    }
    ///Sets the value of [`Self::display_event`]
    pub fn set_display_event(mut self, value: crate::extensions::ext_display_control::DisplayEventTypeEXT) -> Self {
        self.display_event = value;
        self
    }
}
///[VkSwapchainCounterCreateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSwapchainCounterCreateInfoEXT.html) - Specify the surface counters desired
///# C Specifications
///To enable surface counters when creating a swapchain, add a
///[`SwapchainCounterCreateInfoEXT`] structure to the [`p_next`] chain of
///[`SwapchainCreateInfoKHR`].
///[`SwapchainCounterCreateInfoEXT`] is defined as:
///```c
///// Provided by VK_EXT_display_control
///typedef struct VkSwapchainCounterCreateInfoEXT {
///    VkStructureType             sType;
///    const void*                 pNext;
///    VkSurfaceCounterFlagsEXT    surfaceCounters;
///} VkSwapchainCounterCreateInfoEXT;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`surface_counters`] is a bitmask of [`SurfaceCounterFlagBitsEXT`] specifying surface counters
///   to enable for the swapchain.
///# Description
///## Valid Usage
/// - The bits in [`surface_counters`] **must**  be supported by
///   [`SwapchainCreateInfoKHR::surface`], as reported by
///   [`get_physical_device_surface_capabilities2_ext`]
///
///## Valid Usage (Implicit)
/// - [`s_type`] **must**  be `VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT`
/// - [`surface_counters`] **must**  be a valid combination of [`SurfaceCounterFlagBitsEXT`] values
///# Related
/// - [`ext_display_control`]
/// - [`StructureType`]
/// - [`SurfaceCounterFlagsEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSwapchainCounterCreateInfoEXT")]
#[derive(Debug, Clone, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[repr(C)]
pub struct SwapchainCounterCreateInfoEXT<'lt> {
    ///Lifetime field
    pub _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    pub s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    pub p_next: *const BaseInStructure<'lt>,
    ///[`surface_counters`] is a bitmask of [`SurfaceCounterFlagBitsEXT`]
    ///specifying surface counters to enable for the swapchain.
    pub surface_counters: SurfaceCounterFlagsEXT,
}
impl<'lt> Default for SwapchainCounterCreateInfoEXT<'lt> {
    fn default() -> Self {
        Self {
            _lifetime: PhantomData,
            s_type: StructureType::SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
            p_next: std::ptr::null(),
            surface_counters: Default::default(),
        }
    }
}
impl<'lt> SwapchainCounterCreateInfoEXT<'lt> {
    ///Gets the raw value of [`Self::p_next`]
    pub fn p_next_raw(&self) -> *const BaseInStructure<'lt> {
        self.p_next
    }
    ///Sets the raw value of [`Self::p_next`]
    pub fn set_p_next_raw(mut self, value: *const BaseInStructure<'lt>) -> Self {
        self.p_next = value;
        self
    }
    ///Gets the value of [`Self::s_type`]
    pub fn s_type(&self) -> StructureType {
        self.s_type
    }
    ///Gets the value of [`Self::p_next`]
    ///# Safety
    ///This function converts a pointer into a value which may be invalid, make sure
    ///that the pointer is valid before dereferencing.
    pub unsafe fn p_next(&self) -> &BaseInStructure<'lt> {
        &*self.p_next
    }
    ///Gets the value of [`Self::surface_counters`]
    pub fn surface_counters(&self) -> SurfaceCounterFlagsEXT {
        self.surface_counters
    }
    ///Gets a mutable reference to the value of [`Self::s_type`]
    pub fn s_type_mut(&mut self) -> &mut StructureType {
        &mut self.s_type
    }
    ///Gets a mutable reference to the value of [`Self::surface_counters`]
    pub fn surface_counters_mut(&mut self) -> &mut SurfaceCounterFlagsEXT {
        &mut self.surface_counters
    }
    ///Sets the value of [`Self::s_type`]
    pub fn set_s_type(mut self, value: crate::vulkan1_0::StructureType) -> Self {
        self.s_type = value;
        self
    }
    ///Sets the value of [`Self::p_next`]
    pub fn set_p_next(mut self, value: &'lt crate::vulkan1_0::BaseInStructure<'lt>) -> Self {
        self.p_next = value as *const _;
        self
    }
    ///Sets the value of [`Self::surface_counters`]
    pub fn set_surface_counters(
        mut self,
        value: crate::extensions::ext_display_surface_counter::SurfaceCounterFlagsEXT,
    ) -> Self {
        self.surface_counters = value;
        self
    }
}
impl Device {
    ///[vkDisplayPowerControlEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkDisplayPowerControlEXT.html) - Set the power state of a display
    ///# C Specifications
    ///To set the power state of a display, call:
    ///```c
    ///// Provided by VK_EXT_display_control
    ///VkResult vkDisplayPowerControlEXT(
    ///    VkDevice                                    device,
    ///    VkDisplayKHR                                display,
    ///    const VkDisplayPowerInfoEXT*                pDisplayPowerInfo);
    ///```
    ///# Parameters
    /// - [`device`] is a logical device associated with [`display`].
    /// - [`display`] is the display whose power state is modified.
    /// - [`p_display_power_info`] is a pointer to a [`DisplayPowerInfoEXT`] structure specifying
    ///   the new power state of [`display`].
    ///# Description
    ///## Valid Usage (Implicit)
    /// - [`device`] **must**  be a valid [`Device`] handle
    /// - [`display`] **must**  be a valid [`DisplayKHR`] handle
    /// - [`p_display_power_info`] **must**  be a valid pointer to a valid [`DisplayPowerInfoEXT`]
    ///   structure
    /// - Both of [`device`], and [`display`] **must**  have been created, allocated, or retrieved
    ///   from the same [`PhysicalDevice`]
    ///
    ///## Return Codes
    /// * - `VK_SUCCESS`
    /// * - `VK_ERROR_OUT_OF_HOST_MEMORY`
    ///# Related
    /// - [`ext_display_control`]
    /// - [`Device`]
    /// - [`DisplayKHR`]
    /// - [`DisplayPowerInfoEXT`]
    ///
    ///# Notes and documentation
    ///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
    ///
    ///This documentation is generated from the Vulkan specification and documentation.
    ///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
    /// Commons Attribution 4.0 International*.
    ///This license explicitely allows adapting the source material as long as proper credit is
    /// given.
    #[doc(alias = "vkDisplayPowerControlEXT")]
    #[track_caller]
    #[inline]
    pub unsafe fn display_power_control_ext<'lt>(
        self: &Unique<Device>,
        display: DisplayKHR,
        p_display_power_info: &DisplayPowerInfoEXT<'lt>,
    ) -> VulkanResult<()> {
        #[cfg(any(debug_assertions, feature = "assertions"))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.display_power_control_ext())
            .expect("function not loaded");
        #[cfg(not(any(debug_assertions, feature = "assertions")))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.display_power_control_ext())
            .unwrap_unchecked();
        let _return = _function(
            self.as_raw(),
            display,
            p_display_power_info as *const DisplayPowerInfoEXT<'lt>,
        );
        match _return {
            VulkanResultCodes::SUCCESS => VulkanResult::Success(_return, ()),
            e => VulkanResult::Err(e),
        }
    }
}
impl Device {
    ///[vkRegisterDeviceEventEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkRegisterDeviceEventEXT.html) - Signal a fence when a device event occurs
    ///# C Specifications
    ///To create a fence that will be signaled when an event occurs on a device,
    ///call:
    ///```c
    ///// Provided by VK_EXT_display_control
    ///VkResult vkRegisterDeviceEventEXT(
    ///    VkDevice                                    device,
    ///    const VkDeviceEventInfoEXT*                 pDeviceEventInfo,
    ///    const VkAllocationCallbacks*                pAllocator,
    ///    VkFence*                                    pFence);
    ///```
    ///# Parameters
    /// - [`device`] is a logical device on which the event  **may**  occur.
    /// - [`p_device_event_info`] is a pointer to a [`DeviceEventInfoEXT`] structure describing the
    ///   event of interest to the application.
    /// - [`p_allocator`] controls host memory allocation as described in the [Memory Allocation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-allocation)
    ///   chapter.
    /// - [`p_fence`] is a pointer to a handle in which the resulting fence object is returned.
    ///# Description
    ///## Valid Usage (Implicit)
    /// - [`device`] **must**  be a valid [`Device`] handle
    /// - [`p_device_event_info`] **must**  be a valid pointer to a valid [`DeviceEventInfoEXT`]
    ///   structure
    /// - If [`p_allocator`] is not `NULL`, [`p_allocator`] **must**  be a valid pointer to a valid
    ///   [`AllocationCallbacks`] structure
    /// - [`p_fence`] **must**  be a valid pointer to a [`Fence`] handle
    ///
    ///## Return Codes
    /// * - `VK_SUCCESS`
    /// * - `VK_ERROR_OUT_OF_HOST_MEMORY`
    ///# Related
    /// - [`ext_display_control`]
    /// - [`AllocationCallbacks`]
    /// - [`Device`]
    /// - [`DeviceEventInfoEXT`]
    /// - [`Fence`]
    ///
    ///# Notes and documentation
    ///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
    ///
    ///This documentation is generated from the Vulkan specification and documentation.
    ///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
    /// Commons Attribution 4.0 International*.
    ///This license explicitely allows adapting the source material as long as proper credit is
    /// given.
    #[doc(alias = "vkRegisterDeviceEventEXT")]
    #[track_caller]
    #[inline]
    pub unsafe fn register_device_event_ext<'lt>(
        self: &Unique<Device>,
        p_device_event_info: &DeviceEventInfoEXT<'lt>,
        p_allocator: Option<&AllocationCallbacks<'lt>>,
    ) -> VulkanResult<Unique<Fence>> {
        #[cfg(any(debug_assertions, feature = "assertions"))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.register_device_event_ext())
            .expect("function not loaded");
        #[cfg(not(any(debug_assertions, feature = "assertions")))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.register_device_event_ext())
            .unwrap_unchecked();
        let mut p_fence = MaybeUninit::<Fence>::uninit();
        let _return = _function(
            self.as_raw(),
            p_device_event_info as *const DeviceEventInfoEXT<'lt>,
            p_allocator
                .map(|v| v as *const AllocationCallbacks<'lt>)
                .unwrap_or_else(std::ptr::null),
            p_fence.as_mut_ptr(),
        );
        match _return {
            VulkanResultCodes::SUCCESS => {
                VulkanResult::Success(_return, Unique::new(self, p_fence.assume_init(), AtomicBool::default()))
            },
            e => VulkanResult::Err(e),
        }
    }
}
impl Device {
    ///[vkRegisterDisplayEventEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkRegisterDisplayEventEXT.html) - Signal a fence when a display event occurs
    ///# C Specifications
    ///To create a fence that will be signaled when an event occurs on a
    ///[`DisplayKHR`] object, call:
    ///```c
    ///// Provided by VK_EXT_display_control
    ///VkResult vkRegisterDisplayEventEXT(
    ///    VkDevice                                    device,
    ///    VkDisplayKHR                                display,
    ///    const VkDisplayEventInfoEXT*                pDisplayEventInfo,
    ///    const VkAllocationCallbacks*                pAllocator,
    ///    VkFence*                                    pFence);
    ///```
    ///# Parameters
    /// - [`device`] is a logical device associated with [`display`]
    /// - [`display`] is the display on which the event  **may**  occur.
    /// - [`p_display_event_info`] is a pointer to a [`DisplayEventInfoEXT`] structure describing
    ///   the event of interest to the application.
    /// - [`p_allocator`] controls host memory allocation as described in the [Memory Allocation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-allocation)
    ///   chapter.
    /// - [`p_fence`] is a pointer to a handle in which the resulting fence object is returned.
    ///# Description
    ///## Valid Usage (Implicit)
    /// - [`device`] **must**  be a valid [`Device`] handle
    /// - [`display`] **must**  be a valid [`DisplayKHR`] handle
    /// - [`p_display_event_info`] **must**  be a valid pointer to a valid [`DisplayEventInfoEXT`]
    ///   structure
    /// - If [`p_allocator`] is not `NULL`, [`p_allocator`] **must**  be a valid pointer to a valid
    ///   [`AllocationCallbacks`] structure
    /// - [`p_fence`] **must**  be a valid pointer to a [`Fence`] handle
    /// - Both of [`device`], and [`display`] **must**  have been created, allocated, or retrieved
    ///   from the same [`PhysicalDevice`]
    ///
    ///## Return Codes
    /// * - `VK_SUCCESS`
    /// * - `VK_ERROR_OUT_OF_HOST_MEMORY`
    ///# Related
    /// - [`ext_display_control`]
    /// - [`AllocationCallbacks`]
    /// - [`Device`]
    /// - [`DisplayEventInfoEXT`]
    /// - [`DisplayKHR`]
    /// - [`Fence`]
    ///
    ///# Notes and documentation
    ///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
    ///
    ///This documentation is generated from the Vulkan specification and documentation.
    ///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
    /// Commons Attribution 4.0 International*.
    ///This license explicitely allows adapting the source material as long as proper credit is
    /// given.
    #[doc(alias = "vkRegisterDisplayEventEXT")]
    #[track_caller]
    #[inline]
    pub unsafe fn register_display_event_ext<'lt>(
        self: &Unique<Device>,
        display: DisplayKHR,
        p_display_event_info: &DisplayEventInfoEXT<'lt>,
        p_allocator: Option<&AllocationCallbacks<'lt>>,
    ) -> VulkanResult<Unique<Fence>> {
        #[cfg(any(debug_assertions, feature = "assertions"))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.register_display_event_ext())
            .expect("function not loaded");
        #[cfg(not(any(debug_assertions, feature = "assertions")))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.register_display_event_ext())
            .unwrap_unchecked();
        let mut p_fence = MaybeUninit::<Fence>::uninit();
        let _return = _function(
            self.as_raw(),
            display,
            p_display_event_info as *const DisplayEventInfoEXT<'lt>,
            p_allocator
                .map(|v| v as *const AllocationCallbacks<'lt>)
                .unwrap_or_else(std::ptr::null),
            p_fence.as_mut_ptr(),
        );
        match _return {
            VulkanResultCodes::SUCCESS => {
                VulkanResult::Success(_return, Unique::new(self, p_fence.assume_init(), AtomicBool::default()))
            },
            e => VulkanResult::Err(e),
        }
    }
}
impl Device {
    ///[vkGetSwapchainCounterEXT](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetSwapchainCounterEXT.html) - Query the current value of a surface counter
    ///# C Specifications
    ///The requested counters become active when the first presentation command for
    ///the associated swapchain is processed by the presentation engine.
    ///To query the value of an active counter, use:
    ///```c
    ///// Provided by VK_EXT_display_control
    ///VkResult vkGetSwapchainCounterEXT(
    ///    VkDevice                                    device,
    ///    VkSwapchainKHR                              swapchain,
    ///    VkSurfaceCounterFlagBitsEXT                 counter,
    ///    uint64_t*                                   pCounterValue);
    ///```
    ///# Parameters
    /// - [`device`] is the [`Device`] associated with [`swapchain`].
    /// - [`swapchain`] is the swapchain from which to query the counter value.
    /// - [`counter`] is a [`SurfaceCounterFlagBitsEXT`] value specifying the counter to query.
    /// - [`p_counter_value`] will return the current value of the counter.
    ///# Description
    ///If a counter is not available because the swapchain is out of date, the
    ///implementation  **may**  return `VK_ERROR_OUT_OF_DATE_KHR`.
    ///## Valid Usage
    /// - One or more present commands on [`swapchain`] **must**  have been processed by the
    ///   presentation engine
    ///
    ///## Valid Usage (Implicit)
    /// - [`device`] **must**  be a valid [`Device`] handle
    /// - [`swapchain`] **must**  be a valid [`SwapchainKHR`] handle
    /// - [`counter`] **must**  be a valid [`SurfaceCounterFlagBitsEXT`] value
    /// - [`p_counter_value`] **must**  be a valid pointer to a `uint64_t` value
    /// - Both of [`device`], and [`swapchain`] **must**  have been created, allocated, or retrieved
    ///   from the same [`Instance`]
    ///
    ///## Return Codes
    /// * - `VK_SUCCESS`
    /// * - `VK_ERROR_OUT_OF_HOST_MEMORY`  - `VK_ERROR_DEVICE_LOST`  - `VK_ERROR_OUT_OF_DATE_KHR`
    ///# Related
    /// - [`ext_display_control`]
    /// - [`Device`]
    /// - [`SurfaceCounterFlagBitsEXT`]
    /// - [`SwapchainKHR`]
    ///
    ///# Notes and documentation
    ///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
    ///
    ///This documentation is generated from the Vulkan specification and documentation.
    ///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
    /// Commons Attribution 4.0 International*.
    ///This license explicitely allows adapting the source material as long as proper credit is
    /// given.
    #[doc(alias = "vkGetSwapchainCounterEXT")]
    #[track_caller]
    #[inline]
    pub unsafe fn get_swapchain_counter_ext(
        self: &Unique<Device>,
        swapchain: SwapchainKHR,
        counter: SurfaceCounterFlagBitsEXT,
    ) -> VulkanResult<u64> {
        #[cfg(any(debug_assertions, feature = "assertions"))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.get_swapchain_counter_ext())
            .expect("function not loaded");
        #[cfg(not(any(debug_assertions, feature = "assertions")))]
        let _function = self
            .vtable()
            .ext_display_control()
            .and_then(|vtable| vtable.get_swapchain_counter_ext())
            .unwrap_unchecked();
        let mut p_counter_value = Default::default();
        let _return = _function(self.as_raw(), swapchain, counter, &mut p_counter_value);
        match _return {
            VulkanResultCodes::SUCCESS => VulkanResult::Success(_return, p_counter_value),
            e => VulkanResult::Err(e),
        }
    }
}
///The V-table of [`Device`] for functions from `VK_EXT_display_control`
pub struct DeviceExtDisplayControlVTable {
    ///See [`FNDisplayPowerControlExt`] for more information.
    pub display_power_control_ext: FNDisplayPowerControlExt,
    ///See [`FNRegisterDeviceEventExt`] for more information.
    pub register_device_event_ext: FNRegisterDeviceEventExt,
    ///See [`FNRegisterDisplayEventExt`] for more information.
    pub register_display_event_ext: FNRegisterDisplayEventExt,
    ///See [`FNGetSwapchainCounterExt`] for more information.
    pub get_swapchain_counter_ext: FNGetSwapchainCounterExt,
}
impl DeviceExtDisplayControlVTable {
    ///Loads the VTable from the owner and the names
    #[track_caller]
    pub fn load(
        loader_fn: unsafe extern "system" fn(
            Device,
            *const std::os::raw::c_char,
        ) -> Option<unsafe extern "system" fn()>,
        loader: Device,
    ) -> Self {
        Self {
            display_power_control_ext: unsafe {
                std::mem::transmute(loader_fn(loader, crate::cstr!("vkDisplayPowerControlEXT").as_ptr()))
            },
            register_device_event_ext: unsafe {
                std::mem::transmute(loader_fn(loader, crate::cstr!("vkRegisterDeviceEventEXT").as_ptr()))
            },
            register_display_event_ext: unsafe {
                std::mem::transmute(loader_fn(loader, crate::cstr!("vkRegisterDisplayEventEXT").as_ptr()))
            },
            get_swapchain_counter_ext: unsafe {
                std::mem::transmute(loader_fn(loader, crate::cstr!("vkGetSwapchainCounterEXT").as_ptr()))
            },
        }
    }
    ///Gets [`Self::display_power_control_ext`]. See [`FNDisplayPowerControlExt`] for more
    /// information.
    pub fn display_power_control_ext(&self) -> FNDisplayPowerControlExt {
        self.display_power_control_ext
    }
    ///Gets [`Self::register_device_event_ext`]. See [`FNRegisterDeviceEventExt`] for more
    /// information.
    pub fn register_device_event_ext(&self) -> FNRegisterDeviceEventExt {
        self.register_device_event_ext
    }
    ///Gets [`Self::register_display_event_ext`]. See [`FNRegisterDisplayEventExt`] for more
    /// information.
    pub fn register_display_event_ext(&self) -> FNRegisterDisplayEventExt {
        self.register_display_event_ext
    }
    ///Gets [`Self::get_swapchain_counter_ext`]. See [`FNGetSwapchainCounterExt`] for more
    /// information.
    pub fn get_swapchain_counter_ext(&self) -> FNGetSwapchainCounterExt {
        self.get_swapchain_counter_ext
    }
}
