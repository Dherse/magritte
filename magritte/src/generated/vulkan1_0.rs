use crate::core::{
    MAX_DESCRIPTION_SIZE, MAX_EXTENSION_NAME_SIZE, MAX_MEMORY_HEAPS, MAX_MEMORY_TYPES, MAX_PHYSICAL_DEVICE_NAME_SIZE,
    UUID_SIZE,
};
#[cfg(feature = "bytemuck")]
use bytemuck::{Pod, Zeroable};
#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};
use std::{
    ffi::{c_void, CStr},
    marker::PhantomData,
    os::raw::c_char,
};
///[VK_LOD_CLAMP_NONE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_LOD_CLAMP_NONE.html) - Maximum level of detail unclamped access sentinel
///# C Specifications
///[`LOD_CLAMP_NONE`] is a special constant value used for
///[`SamplerCreateInfo::max_lod`] to indicate that maximum LOD
///clamping should not be performed.
///```c
///#define VK_LOD_CLAMP_NONE                 1000.0F
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_LOD_CLAMP_NONE")]
pub const LOD_CLAMP_NONE: f32 = 1000.0;
///[VK_REMAINING_MIP_LEVELS](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_REMAINING_MIP_LEVELS.html) - Sentinel for all remaining mipmap levels
///# C Specifications
///[`REMAINING_MIP_LEVELS`] is a special constant value used for image
///views to indicate that all remaining mipmap levels in an image after the
///base level should be included in the view.
///```c
///#define VK_REMAINING_MIP_LEVELS           (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_REMAINING_MIP_LEVELS")]
pub const REMAINING_MIP_LEVELS: u32 = !0;
///[VK_REMAINING_ARRAY_LAYERS](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_REMAINING_ARRAY_LAYERS.html) - Sentinel for all remaining array layers
///# C Specifications
///[`REMAINING_ARRAY_LAYERS`] is a special constant value used for image
///views to indicate that all remaining array layers in an image after the base
///layer should be included in the view.
///```c
///#define VK_REMAINING_ARRAY_LAYERS         (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_REMAINING_ARRAY_LAYERS")]
pub const REMAINING_ARRAY_LAYERS: u32 = !0;
///[VK_WHOLE_SIZE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_WHOLE_SIZE.html) - Sentinel value to use entire remaining array length
///# C Specifications
///[`WHOLE_SIZE`] is a special value indicating that the entire remaining
///length of a buffer following a given `offset` should be used.
///It **can** be specified for [`BufferMemoryBarrier::size`] and other
///structures.
///```c
///#define VK_WHOLE_SIZE                     (~0ULL)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_WHOLE_SIZE")]
pub const WHOLE_SIZE: u64 = !0;
///[VK_ATTACHMENT_UNUSED](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_ATTACHMENT_UNUSED.html) - Unused attachment sentinel
///# C Specifications
///[`ATTACHMENT_UNUSED`] is a constant indicating that a render pass
///attachment is not used.
///```c
///#define VK_ATTACHMENT_UNUSED              (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_ATTACHMENT_UNUSED")]
pub const ATTACHMENT_UNUSED: u32 = !0;
///[VK_TRUE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_TRUE.html) - Boolean true value
///# C Specifications
///[`TRUE`] is a constant representing a [`Bool32`]**True** value.
///```c
///#define VK_TRUE                           1U
///```
///# Related
/// - [`FALSE`]
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_TRUE")]
pub const TRUE: u32 = 1;
///[VK_FALSE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_FALSE.html) - Boolean false value
///# C Specifications
///[`FALSE`] is a constant representing a [`Bool32`]**False** value.
///```c
///#define VK_FALSE                          0U
///```
///# Related
/// - [`TRUE`]
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_FALSE")]
pub const FALSE: u32 = 0;
///[VK_QUEUE_FAMILY_IGNORED](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_QUEUE_FAMILY_IGNORED.html) - Ignored queue family index sentinel
///# C Specifications
///The special queue family index [`QUEUE_FAMILY_IGNORED`] indicates that
///a queue family parameter or member is ignored.
///```c
///#define VK_QUEUE_FAMILY_IGNORED           (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_QUEUE_FAMILY_IGNORED")]
pub const QUEUE_FAMILY_IGNORED: u32 = !0;
///[VK_SUBPASS_EXTERNAL](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_SUBPASS_EXTERNAL.html) - Subpass index sentinel expanding synchronization scope outside a subpass
///# C Specifications
///[`SUBPASS_EXTERNAL`] is a special subpass index value expanding
///synchronization scope outside a subpass.
///It is described in more detail by [`SubpassDependency`].
///```c
///#define VK_SUBPASS_EXTERNAL               (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_SUBPASS_EXTERNAL")]
pub const SUBPASS_EXTERNAL: u32 = !0;
///[VkSampleMask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSampleMask.html) - Mask of sample coverage information
///# C Specifications
///The elements of the sample mask array are of type [`SampleMask`],
///each representing 32 bits of coverage information:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint32_t VkSampleMask;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineMultisampleStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSampleMask")]
pub type SampleMask = u32;
///[VkBool32](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBool32.html) - Vulkan boolean type
///# C Specifications
///[`Bool32`] represents boolean `True` and `False` values, since C does
///not have a sufficiently portable built-in boolean type:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint32_t VkBool32;
///```
///# Related
/// - [`FALSE`]
/// - [`TRUE`]
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureGeometryInstancesDataKHR`]
/// - [`CommandBufferInheritanceConditionalRenderingInfoEXT`]
/// - [`CommandBufferInheritanceInfo`]
/// - [`CommandBufferInheritanceViewportScissorInfoNV`]
/// - [`DedicatedAllocationBufferCreateInfoNV`]
/// - [`DedicatedAllocationImageCreateInfoNV`]
/// - [`DescriptorSetLayoutSupport`]
/// - [`DisplayNativeHdrSurfaceCapabilitiesAMD`]
/// - [`DisplayPresentInfoKHR`]
/// - [`DisplayPropertiesKHR`]
/// - [`FilterCubicImageViewImageFormatPropertiesEXT`]
/// - [`IndirectCommandsLayoutTokenNV`]
/// - [`MemoryDedicatedRequirements`]
/// - [`MultiviewPerViewAttributesInfoNVX`]
/// - [`PerformanceOverrideInfoINTEL`]
/// - [`PerformanceValueDataINTEL`]
/// - [`PhysicalDevice16BitStorageFeatures`]
/// - [`PhysicalDevice4444FormatsFeaturesEXT`]
/// - [`PhysicalDevice8BitStorageFeatures`]
/// - [`PhysicalDeviceAstcDecodeFeaturesEXT`]
/// - [`PhysicalDeviceAccelerationStructureFeaturesKHR`]
/// - [`PhysicalDeviceBlendOperationAdvancedFeaturesEXT`]
/// - [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT`]
/// - [`PhysicalDeviceBorderColorSwizzleFeaturesEXT`]
/// - [`PhysicalDeviceBufferDeviceAddressFeatures`]
/// - [`PhysicalDeviceBufferDeviceAddressFeaturesEXT`]
/// - [`PhysicalDeviceCoherentMemoryFeaturesAMD`]
/// - [`PhysicalDeviceColorWriteEnableFeaturesEXT`]
/// - [`PhysicalDeviceComputeShaderDerivativesFeaturesNV`]
/// - [`PhysicalDeviceConditionalRenderingFeaturesEXT`]
/// - [`PhysicalDeviceConservativeRasterizationPropertiesEXT`]
/// - [`PhysicalDeviceCooperativeMatrixFeaturesNV`]
/// - [`PhysicalDeviceCornerSampledImageFeaturesNV`]
/// - [`PhysicalDeviceCoverageReductionModeFeaturesNV`]
/// - [`PhysicalDeviceCustomBorderColorFeaturesEXT`]
/// - [`PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV`]
/// - [`PhysicalDeviceDepthClipControlFeaturesEXT`]
/// - [`PhysicalDeviceDepthClipEnableFeaturesEXT`]
/// - [`PhysicalDeviceDepthStencilResolveProperties`]
/// - [`PhysicalDeviceDescriptorIndexingFeatures`]
/// - [`PhysicalDeviceDescriptorIndexingProperties`]
/// - [`PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE`]
/// - [`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV`]
/// - [`PhysicalDeviceDeviceMemoryReportFeaturesEXT`]
/// - [`PhysicalDeviceDiagnosticsConfigFeaturesNV`]
/// - [`PhysicalDeviceDrmPropertiesEXT`]
/// - [`PhysicalDeviceDynamicRenderingFeatures`]
/// - [`PhysicalDeviceExclusiveScissorFeaturesNV`]
/// - [`PhysicalDeviceExtendedDynamicState2FeaturesEXT`]
/// - [`PhysicalDeviceExtendedDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceExternalMemoryRdmaFeaturesNV`]
/// - [`PhysicalDeviceFeatures`]
/// - [`PhysicalDeviceFloatControlsProperties`]
/// - [`PhysicalDeviceFragmentDensityMap2FeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMap2PropertiesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapFeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapPropertiesEXT`]
/// - [`PhysicalDeviceFragmentShaderBarycentricFeaturesNV`]
/// - [`PhysicalDeviceFragmentShaderInterlockFeaturesEXT`]
/// - [`PhysicalDeviceFragmentShadingRateEnumsFeaturesNV`]
/// - [`PhysicalDeviceFragmentShadingRateFeaturesKHR`]
/// - [`PhysicalDeviceFragmentShadingRatePropertiesKHR`]
/// - [`PhysicalDeviceGlobalPriorityQueryFeaturesKHR`]
/// - [`PhysicalDeviceGroupProperties`]
/// - [`PhysicalDeviceHostQueryResetFeatures`]
/// - [`PhysicalDeviceIdProperties`]
/// - [`PhysicalDeviceImageRobustnessFeatures`]
/// - [`PhysicalDeviceImageViewMinLodFeaturesEXT`]
/// - [`PhysicalDeviceImagelessFramebufferFeatures`]
/// - [`PhysicalDeviceIndexTypeUint8FeaturesEXT`]
/// - [`PhysicalDeviceInheritedViewportScissorFeaturesNV`]
/// - [`PhysicalDeviceInlineUniformBlockFeatures`]
/// - [`PhysicalDeviceInvocationMaskFeaturesHUAWEI`]
/// - [`PhysicalDeviceLimits`]
/// - [`PhysicalDeviceLineRasterizationFeaturesEXT`]
/// - [`PhysicalDeviceLinearColorAttachmentFeaturesNV`]
/// - [`PhysicalDeviceMaintenance4Features`]
/// - [`PhysicalDeviceMemoryPriorityFeaturesEXT`]
/// - [`PhysicalDeviceMeshShaderFeaturesNV`]
/// - [`PhysicalDeviceMultiDrawFeaturesEXT`]
/// - [`PhysicalDeviceMultiviewFeatures`]
/// - [`PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX`]
/// - [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE`]
/// - [`PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT`]
/// - [`PhysicalDevicePerformanceQueryFeaturesKHR`]
/// - [`PhysicalDevicePerformanceQueryPropertiesKHR`]
/// - [`PhysicalDevicePipelineCreationCacheControlFeatures`]
/// - [`PhysicalDevicePipelineExecutablePropertiesFeaturesKHR`]
/// - [`PhysicalDevicePortabilitySubsetFeaturesKHR`]
/// - [`PhysicalDevicePresentIdFeaturesKHR`]
/// - [`PhysicalDevicePresentWaitFeaturesKHR`]
/// - [`PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT`]
/// - [`PhysicalDevicePrivateDataFeatures`]
/// - [`PhysicalDeviceProtectedMemoryFeatures`]
/// - [`PhysicalDeviceProtectedMemoryProperties`]
/// - [`PhysicalDeviceProvokingVertexFeaturesEXT`]
/// - [`PhysicalDeviceProvokingVertexPropertiesEXT`]
/// - [`PhysicalDeviceRgba10X6FormatsFeaturesEXT`]
/// - [`PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM`]
/// - [`PhysicalDeviceRayQueryFeaturesKHR`]
/// - [`PhysicalDeviceRayTracingMotionBlurFeaturesNV`]
/// - [`PhysicalDeviceRayTracingPipelineFeaturesKHR`]
/// - [`PhysicalDeviceRepresentativeFragmentTestFeaturesNV`]
/// - [`PhysicalDeviceRobustness2FeaturesEXT`]
/// - [`PhysicalDeviceSampleLocationsPropertiesEXT`]
/// - [`PhysicalDeviceSamplerFilterMinmaxProperties`]
/// - [`PhysicalDeviceSamplerYcbcrConversionFeatures`]
/// - [`PhysicalDeviceScalarBlockLayoutFeatures`]
/// - [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`]
/// - [`PhysicalDeviceShaderAtomicFloat2FeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicFloatFeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicInt64Features`]
/// - [`PhysicalDeviceShaderClockFeaturesKHR`]
/// - [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`]
/// - [`PhysicalDeviceShaderDrawParametersFeatures`]
/// - [`PhysicalDeviceShaderFloat16Int8Features`]
/// - [`PhysicalDeviceShaderImageAtomicInt64FeaturesEXT`]
/// - [`PhysicalDeviceShaderImageFootprintFeaturesNV`]
/// - [`PhysicalDeviceShaderIntegerDotProductFeatures`]
/// - [`PhysicalDeviceShaderIntegerDotProductProperties`]
/// - [`PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL`]
/// - [`PhysicalDeviceShaderSmBuiltinsFeaturesNV`]
/// - [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`]
/// - [`PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR`]
/// - [`PhysicalDeviceShaderTerminateInvocationFeatures`]
/// - [`PhysicalDeviceShadingRateImageFeaturesNV`]
/// - [`PhysicalDeviceSparseProperties`]
/// - [`PhysicalDeviceSubgroupProperties`]
/// - [`PhysicalDeviceSubgroupSizeControlFeatures`]
/// - [`PhysicalDeviceSubpassShadingFeaturesHUAWEI`]
/// - [`PhysicalDeviceSynchronization2Features`]
/// - [`PhysicalDeviceTexelBufferAlignmentFeaturesEXT`]
/// - [`PhysicalDeviceTexelBufferAlignmentProperties`]
/// - [`PhysicalDeviceTextureCompressionAstchdrFeatures`]
/// - [`PhysicalDeviceTimelineSemaphoreFeatures`]
/// - [`PhysicalDeviceTransformFeedbackFeaturesEXT`]
/// - [`PhysicalDeviceTransformFeedbackPropertiesEXT`]
/// - [`PhysicalDeviceUniformBufferStandardLayoutFeatures`]
/// - [`PhysicalDeviceVariablePointersFeatures`]
/// - [`PhysicalDeviceVertexAttributeDivisorFeaturesEXT`]
/// - [`PhysicalDeviceVertexInputDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceVulkan11Features`]
/// - [`PhysicalDeviceVulkan11Properties`]
/// - [`PhysicalDeviceVulkan12Features`]
/// - [`PhysicalDeviceVulkan12Properties`]
/// - [`PhysicalDeviceVulkan13Features`]
/// - [`PhysicalDeviceVulkan13Properties`]
/// - [`PhysicalDeviceVulkanMemoryModelFeatures`]
/// - [`PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR`]
/// - [`PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT`]
/// - [`PhysicalDeviceYcbcrImageArraysFeaturesEXT`]
/// - [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`]
/// - [`PipelineColorBlendAdvancedStateCreateInfoEXT`]
/// - [`PipelineColorBlendAttachmentState`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`PipelineColorWriteCreateInfoEXT`]
/// - [`PipelineCoverageModulationStateCreateInfoNV`]
/// - [`PipelineCoverageToColorStateCreateInfoNV`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`PipelineExecutableInternalRepresentationKHR`]
/// - [`PipelineExecutableStatisticValueKHR`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`PipelineMultisampleStateCreateInfo`]
/// - [`PipelineRasterizationDepthClipStateCreateInfoEXT`]
/// - [`PipelineRasterizationLineStateCreateInfoEXT`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`PipelineRepresentativeFragmentTestStateCreateInfoNV`]
/// - [`PipelineSampleLocationsStateCreateInfoEXT`]
/// - [`PipelineViewportDepthClipControlCreateInfoEXT`]
/// - [`PipelineViewportShadingRateImageStateCreateInfoNV`]
/// - [`PipelineViewportWScalingStateCreateInfoNV`]
/// - [`ProtectedSubmitInfo`]
/// - [`QueueFamilyQueryResultStatusProperties2KHR`]
/// - [`SamplerBorderColorComponentMappingCreateInfoEXT`]
/// - [`SamplerCreateInfo`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`SurfaceCapabilitiesFullScreenExclusiveEXT`]
/// - [`SurfaceProtectedCapabilitiesKHR`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`SwapchainDisplayNativeHdrCreateInfoAMD`]
/// - [`TextureLodGatherFormatPropertiesAMD`]
/// - [`VideoEncodeH264CapabilitiesEXT`]
/// - [`VideoEncodeH264EmitPictureParametersEXT`]
/// - [`VideoEncodeH264RateControlLayerInfoEXT`]
/// - [`VideoEncodeH265EmitPictureParametersEXT`]
/// - [`VideoEncodeH265RateControlLayerInfoEXT`]
/// - [`CmdBuildAccelerationStructureNV`]
/// - [`CmdExecuteGeneratedCommandsNV`]
/// - [`CmdSetColorWriteEnableEXT`]
/// - [`CmdSetDepthBiasEnable`]
/// - [`CmdSetDepthBiasEnableEXT`]
/// - [`CmdSetDepthBoundsTestEnable`]
/// - [`CmdSetDepthBoundsTestEnableEXT`]
/// - [`CmdSetDepthTestEnable`]
/// - [`CmdSetDepthTestEnableEXT`]
/// - [`CmdSetDepthWriteEnable`]
/// - [`CmdSetDepthWriteEnableEXT`]
/// - [`CmdSetPrimitiveRestartEnable`]
/// - [`CmdSetPrimitiveRestartEnableEXT`]
/// - [`CmdSetRasterizerDiscardEnable`]
/// - [`CmdSetRasterizerDiscardEnableEXT`]
/// - [`CmdSetStencilTestEnable`]
/// - [`CmdSetStencilTestEnableEXT`]
/// - [`GetPhysicalDeviceSurfaceSupportKHR`]
/// - [`SetLocalDimmingAMD`]
/// - [`WaitForFences`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBool32")]
pub type Bool32 = u32;
///[VkFlags](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFlags.html) - Vulkan bitmasks
///# C Specifications
///A collection of flags is represented by a bitmask using the type
///[`Flags`]:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint32_t VkFlags;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ColorComponentFlags`]
/// - [`Flags64`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFlags")]
pub type Flags = u32;
///[VkDeviceSize](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceSize.html) - Vulkan device memory size and offsets
///# C Specifications
///[`DeviceSize`] represents device memory size and offset values:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint64_t VkDeviceSize;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureBuildSizesInfoKHR`]
/// - [`AccelerationStructureCreateInfoKHR`]
/// - [`AccelerationStructureCreateInfoNV`]
/// - [`AccelerationStructureGeometryAabbsDataKHR`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`AndroidHardwareBufferPropertiesANDROID`]
/// - [`BindAccelerationStructureMemoryInfoNV`]
/// - [`BindBufferMemoryInfo`]
/// - [`BindImageMemoryInfo`]
/// - [`BufferCopy`]
/// - [`BufferCopy2`]
/// - [`BufferCreateInfo`]
/// - [`BufferImageCopy`]
/// - [`BufferImageCopy2`]
/// - [`BufferMemoryBarrier`]
/// - [`BufferMemoryBarrier2`]
/// - [`BufferViewCreateInfo`]
/// - [`ConditionalRenderingBeginInfoEXT`]
/// - [`DescriptorBufferInfo`]
/// - [`DeviceMemoryReportCallbackDataEXT`]
/// - [`GeneratedCommandsInfoNV`]
/// - [`GeometryAabbNV`]
/// - [`GeometryTrianglesNV`]
/// - [`ImageFormatProperties`]
/// - [`ImageViewAddressPropertiesNVX`]
/// - [`IndirectCommandsStreamNV`]
/// - [`MappedMemoryRange`]
/// - [`MemoryAllocateInfo`]
/// - [`MemoryHeap`]
/// - [`MemoryRequirements`]
/// - [`PhysicalDeviceExternalMemoryHostPropertiesEXT`]
/// - [`PhysicalDeviceLimits`]
/// - [`PhysicalDeviceMaintenance3Properties`]
/// - [`PhysicalDeviceMaintenance4Properties`]
/// - [`PhysicalDeviceMemoryBudgetPropertiesEXT`]
/// - [`PhysicalDeviceRobustness2PropertiesEXT`]
/// - [`PhysicalDeviceTexelBufferAlignmentProperties`]
/// - [`PhysicalDeviceTransformFeedbackPropertiesEXT`]
/// - [`PhysicalDeviceVulkan11Properties`]
/// - [`PhysicalDeviceVulkan13Properties`]
/// - [`SparseImageMemoryBind`]
/// - [`SparseImageMemoryRequirements`]
/// - [`SparseMemoryBind`]
/// - [`StridedDeviceAddressRegionKHR`]
/// - [`SubresourceLayout`]
/// - [`VideoBindMemoryKHR`]
/// - [`VideoCapabilitiesKHR`]
/// - [`VideoDecodeInfoKHR`]
/// - [`VideoEncodeInfoKHR`]
/// - [`BindBufferMemory`]
/// - [`BindImageMemory`]
/// - [`CmdBeginTransformFeedbackEXT`]
/// - [`CmdBindIndexBuffer`]
/// - [`CmdBindTransformFeedbackBuffersEXT`]
/// - [`CmdBindVertexBuffers`]
/// - [`CmdBindVertexBuffers2`]
/// - [`CmdBindVertexBuffers2EXT`]
/// - [`CmdBuildAccelerationStructureNV`]
/// - [`CmdCopyQueryPoolResults`]
/// - [`CmdDispatchIndirect`]
/// - [`CmdDrawIndexedIndirect`]
/// - [`CmdDrawIndexedIndirectCount`]
/// - [`CmdDrawIndexedIndirectCountAMD`]
/// - [`CmdDrawIndexedIndirectCountKHR`]
/// - [`CmdDrawIndirect`]
/// - [`CmdDrawIndirectByteCountEXT`]
/// - [`CmdDrawIndirectCount`]
/// - [`CmdDrawIndirectCountAMD`]
/// - [`CmdDrawIndirectCountKHR`]
/// - [`CmdDrawMeshTasksIndirectCountNV`]
/// - [`CmdDrawMeshTasksIndirectNV`]
/// - [`CmdEndTransformFeedbackEXT`]
/// - [`CmdFillBuffer`]
/// - [`CmdTraceRaysNV`]
/// - [`CmdUpdateBuffer`]
/// - [`CmdWriteBufferMarker2AMD`]
/// - [`CmdWriteBufferMarkerAMD`]
/// - [`GetDeviceMemoryCommitment`]
/// - [`GetQueryPoolResults`]
/// - [`MapMemory`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDeviceSize")]
pub type DeviceSize = u64;
///[VkDeviceAddress](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceAddress.html) - Vulkan device address type
///# C Specifications
///[`DeviceAddress`] represents device buffer address values:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint64_t VkDeviceAddress;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureCreateInfoKHR`]
/// - [`BindIndexBufferIndirectCommandNV`]
/// - [`BindVertexBufferIndirectCommandNV`]
/// - [`BufferDeviceAddressCreateInfoEXT`]
/// - [`DeviceOrHostAddressConstKHR`]
/// - [`DeviceOrHostAddressKHR`]
/// - [`ImageViewAddressPropertiesNVX`]
/// - [`StridedDeviceAddressRegionKHR`]
/// - [`CmdBuildAccelerationStructuresIndirectKHR`]
/// - [`CmdTraceRaysIndirectKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDeviceAddress")]
pub type DeviceAddress = u64;
///[VkImageLayout](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageLayout.html) - Layout of image and image subresources
///# C Specifications
///The set of image layouts consists of:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageLayout {
///    VK_IMAGE_LAYOUT_UNDEFINED = 0,
///    VK_IMAGE_LAYOUT_GENERAL = 1,
///    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
///    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
///    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
///    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
///    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
///    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
///    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
///  // Provided by VK_VERSION_1_1
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
///  // Provided by VK_VERSION_1_1
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
///  // Provided by VK_VERSION_1_3
///    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
///  // Provided by VK_VERSION_1_3
///    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
///  // Provided by VK_KHR_swapchain
///    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
///#endif
///  // Provided by VK_KHR_shared_presentable_image
///    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
///  // Provided by VK_EXT_fragment_density_map
///    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002,
///#endif
///  // Provided by VK_KHR_maintenance2
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR =
/// VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
///  // Provided by VK_KHR_maintenance2
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR =
/// VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
///  // Provided by VK_NV_shading_rate_image
///    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV =
/// VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
///  // Provided by VK_KHR_synchronization2
///    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
///  // Provided by VK_KHR_synchronization2
///    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
///} VkImageLayout;
///```
///# Description
///The type(s) of device access supported by each layout are:
/// - [`Undefined`] specifies that the layout is unknown. Image memory **cannot** be transitioned
///   into this layout. This layout **can** be used as the `initialLayout` member of
///   [`ImageCreateInfo`]. This layout **can** be used in place of the current image layout in a
///   layout transition, but doing so will cause the contents of the image’s memory to be undefined.
/// - [`Preinitialized`] specifies that an image’s memory is in a defined layout and **can** be populated by data, but that it has not yet been initialized by the driver. Image memory **cannot** be transitioned into this layout. This layout **can** be used as the `initialLayout` member of [`ImageCreateInfo`]. This layout is intended to be used as the initial layout for an image whose contents are written by the host, and hence the data **can** be written to memory immediately, without first executing a layout transition. Currently, [`Preinitialized`] is only useful with [linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource) images because there is not a standard layout defined for `VK_IMAGE_TILING_OPTIMAL` images.
/// - [`General`] supports all types of device access.
/// - [`AttachmentOptimal`] specifies a layout that **must** only be used with attachment accesses
///   in the graphics pipeline.
/// - [`ReadOnlyOptimal`] specifies a layout allowing read only access as an attachment, or in
///   shaders as a sampled image, combined image/sampler, or input attachment.
/// - [`ColorAttachmentOptimal`]**must** only be used as a color or resolve attachment in a
///   [`Framebuffer`]. This layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT` usage bit enabled.
/// - [`DepthStencilAttachmentOptimal`] specifies a layout for both the depth and stencil aspects of
///   a depth/stencil format image allowing read and write access as a depth/stencil attachment. It
///   is equivalent to [`DepthAttachmentOptimal`] and [`StencilAttachmentOptimal`].
/// - [`DepthStencilReadOnlyOptimal`] specifies a layout for both the depth and stencil aspects of a
///   depth/stencil format image allowing read only access as a depth/stencil attachment or in
///   shaders as a sampled image, combined image/sampler, or input attachment. It is equivalent to
///   [`DepthReadOnlyOptimal`] and [`StencilReadOnlyOptimal`].
/// - [`DepthReadOnlyStencilAttachmentOptimal`] specifies a layout for depth/stencil format images
///   allowing read and write access to the stencil aspect as a stencil attachment, and read only
///   access to the depth aspect as a depth attachment or in shaders as a sampled image, combined
///   image/sampler, or input attachment. It is equivalent to [`DepthReadOnlyOptimal`] and
///   [`StencilAttachmentOptimal`].
/// - [`DepthAttachmentStencilReadOnlyOptimal`] specifies a layout for depth/stencil format images
///   allowing read and write access to the depth aspect as a depth attachment, and read only access
///   to the stencil aspect as a stencil attachment or in shaders as a sampled image, combined
///   image/sampler, or input attachment. It is equivalent to [`DepthAttachmentOptimal`] and
///   [`StencilReadOnlyOptimal`].
/// - [`DepthAttachmentOptimal`] specifies a layout for the depth aspect of a depth/stencil format
///   image allowing read and write access as a depth attachment.
/// - [`DepthReadOnlyOptimal`] specifies a layout for the depth aspect of a depth/stencil format
///   image allowing read-only access as a depth attachment or in shaders as a sampled image,
///   combined image/sampler, or input attachment.
/// - [`StencilAttachmentOptimal`] specifies a layout for the stencil aspect of a depth/stencil
///   format image allowing read and write access as a stencil attachment.
/// - [`StencilReadOnlyOptimal`] specifies a layout for the stencil aspect of a depth/stencil format
///   image allowing read-only access as a stencil attachment or in shaders as a sampled image,
///   combined image/sampler, or input attachment.
/// - [`ShaderReadOnlyOptimal`] specifies a layout allowing read-only access in a shader as a
///   sampled image, combined image/sampler, or input attachment. This layout is valid only for
///   image subresources of images created with the `VK_IMAGE_USAGE_SAMPLED_BIT` or
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT` usage bits enabled.
/// - [`TransferSrcOptimal`]**must** only be used as a source image of a transfer command (see the definition of [`VK_PIPELINE_STAGE_TRANSFER_BIT`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-transfer)). This layout is valid only for image subresources of images created with the `VK_IMAGE_USAGE_TRANSFER_SRC_BIT` usage bit enabled.
/// - [`TransferDstOptimal`]**must** only be used as a destination image of a transfer command. This
///   layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_TRANSFER_DST_BIT` usage bit enabled.
/// - [`PresentSrcKhr`]**must** only be used for presenting a presentable image for display. A
///   swapchain’s image **must** be transitioned to this layout before calling [`QueuePresentKHR`],
///   and **must** be transitioned away from this layout after calling [`AcquireNextImageKHR`].
/// - [`SharedPresentKhr`] is valid only for shared presentable images, and **must** be used for any
///   usage the image supports.
/// - [`FragmentShadingRateAttachmentOptimalKhr`]**must**     only be used as a     [fragment shading rate     attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment) or     [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-shading-rate-image).     This layout is valid only for image subresources of images created with     the `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR` usage     bit enabled.
/// - [`FragmentDensityMapOptimalExt`]**must** only be used as a fragment density map attachment in
///   a [`RenderPass`]. This layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT` usage bit enabled.
/// - [`VideoDecodeDstKhr`]**must** only be used as a decode output image of a [video decode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
///   This layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR` usage bit enabled.
/// - [`VideoDecodeSrcKhr`] is reserved for future use.
/// - [`VideoDecodeDpbKhr`]**must** only be used as a decode source or destination image of a [video
///   decode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
///   This layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR` usage bit enabled.
/// - [`VideoEncodeDstKhr`] is reserved for future use.
/// - [`VideoEncodeSrcKhr`]**must** only be used as a encode source image of a [video encode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
///   This layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR` usage bit enabled.
/// - [`VideoEncodeDpbKhr`]**must** only be used as a encode source or destination image of a [video
///   encode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
///   This layout is valid only for image subresources of images created with the
///   `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR` usage bit enabled.
///The layout of each image subresource is not a state of the image subresource
///itself, but is rather a property of how the data in memory is organized, and
///thus for each mechanism of accessing an image in the API the application
///**must** specify a parameter or structure member that indicates which image
///layout the image subresource(s) are considered to be in when the image will
///be accessed.
///For transfer commands, this is a parameter to the command (see [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#clears](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#clears)
///and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#copies](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#copies)).
///For use as a framebuffer attachment, this is a member in the substructures
///of the [`RenderPassCreateInfo`] (see [Render Pass](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass)).
///For use in a descriptor set, this is a member in the
///[`DescriptorImageInfo`] structure (see [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates)).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`AttachmentDescriptionStencilLayout`]
/// - [`AttachmentReference`]
/// - [`AttachmentReference2`]
/// - [`AttachmentReferenceStencilLayout`]
/// - [`BlitImageInfo2`]
/// - [`CopyBufferToImageInfo2`]
/// - [`CopyImageInfo2`]
/// - [`CopyImageToBufferInfo2`]
/// - [`DescriptorImageInfo`]
/// - [`ImageCreateInfo`]
/// - [`ImageMemoryBarrier`]
/// - [`ImageMemoryBarrier2`]
/// - [`RenderingAttachmentInfo`]
/// - [`RenderingFragmentDensityMapAttachmentInfoEXT`]
/// - [`RenderingFragmentShadingRateAttachmentInfoKHR`]
/// - [`ResolveImageInfo2`]
/// - [`CmdBindInvocationMaskHUAWEI`]
/// - [`CmdBindShadingRateImageNV`]
/// - [`CmdBlitImage`]
/// - [`CmdClearColorImage`]
/// - [`CmdClearDepthStencilImage`]
/// - [`CmdCopyBufferToImage`]
/// - [`CmdCopyImage`]
/// - [`CmdCopyImageToBuffer`]
/// - [`CmdResolveImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageLayout")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum ImageLayout {
    ///[`Undefined`] specifies that the layout is unknown.
    ///Image memory **cannot** be transitioned into this layout.
    ///This layout **can** be used as the `initialLayout` member of
    ///[`ImageCreateInfo`].
    ///This layout **can** be used in place of the current image layout in a
    ///layout transition, but doing so will cause the contents of the image’s
    ///memory to be undefined.
    Undefined = 0,
    ///[`General`] supports all types of device access.
    General = 1,
    ///[`ColorAttachmentOptimal`]**must** only be used as a
    ///color or resolve attachment in a [`Framebuffer`].
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT` usage bit enabled.
    ColorAttachmentOptimal = 2,
    ///[`DepthStencilAttachmentOptimal`] specifies a
    ///layout for both the depth and stencil aspects of a depth/stencil format
    ///image allowing read and write access as a depth/stencil attachment.
    ///It is equivalent to [`DepthAttachmentOptimal`] and
    ///[`StencilAttachmentOptimal`].
    DepthStencilAttachmentOptimal = 3,
    ///[`DepthStencilReadOnlyOptimal`] specifies a layout
    ///for both the depth and stencil aspects of a depth/stencil format image
    ///allowing read only access as a depth/stencil attachment or in shaders as
    ///a sampled image, combined image/sampler, or input attachment.
    ///It is equivalent to [`DepthReadOnlyOptimal`] and
    ///[`StencilReadOnlyOptimal`].
    DepthStencilReadOnlyOptimal = 4,
    ///[`ShaderReadOnlyOptimal`] specifies a layout
    ///allowing read-only access in a shader as a sampled image, combined
    ///image/sampler, or input attachment.
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_SAMPLED_BIT` or
    ///`VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT` usage bits enabled.
    ShaderReadOnlyOptimal = 5,
    ///[`TransferSrcOptimal`]**must** only be used as a
    ///source image of a transfer command (see the definition of
    ///[`VK_PIPELINE_STAGE_TRANSFER_BIT`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-transfer)).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_TRANSFER_SRC_BIT` usage bit enabled.
    TransferSrcOptimal = 6,
    ///[`TransferDstOptimal`]**must** only be used as a
    ///destination image of a transfer command.
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_TRANSFER_DST_BIT` usage bit enabled.
    TransferDstOptimal = 7,
    ///[`Preinitialized`] specifies that an image’s memory is
    ///in a defined layout and **can** be populated by data, but that it has not
    ///yet been initialized by the driver.
    ///Image memory **cannot** be transitioned into this layout.
    ///This layout **can** be used as the `initialLayout` member of
    ///[`ImageCreateInfo`].
    ///This layout is intended to be used as the initial layout for an image
    ///whose contents are written by the host, and hence the data **can** be
    ///written to memory immediately, without first executing a layout
    ///transition.
    ///Currently, [`Preinitialized`] is only useful with
    ///[linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource) images because there is not a
    ///standard layout defined for `VK_IMAGE_TILING_OPTIMAL` images.
    Preinitialized = 8,
    ///[`DepthReadOnlyStencilAttachmentOptimal`]
    ///specifies a layout for depth/stencil format images allowing read and
    ///write access to the stencil aspect as a stencil attachment, and read
    ///only access to the depth aspect as a depth attachment or in shaders as a
    ///sampled image, combined image/sampler, or input attachment.
    ///It is equivalent to [`DepthReadOnlyOptimal`] and
    ///[`StencilAttachmentOptimal`].
    ///
    ///Provided by [`crate::vulkan1_1`]
    DepthReadOnlyStencilAttachmentOptimal = 1000117000,
    ///[`DepthAttachmentStencilReadOnlyOptimal`]
    ///specifies a layout for depth/stencil format images allowing read and
    ///write access to the depth aspect as a depth attachment, and read only
    ///access to the stencil aspect as a stencil attachment or in shaders as a
    ///sampled image, combined image/sampler, or input attachment.
    ///It is equivalent to [`DepthAttachmentOptimal`] and
    ///[`StencilReadOnlyOptimal`].
    ///
    ///Provided by [`crate::vulkan1_1`]
    DepthAttachmentStencilReadOnlyOptimal = 1000117001,
    ///[`DepthAttachmentOptimal`] specifies a layout for
    ///the depth aspect of a depth/stencil format image allowing read and write
    ///access as a depth attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    DepthAttachmentOptimal = 1000241000,
    ///[`DepthReadOnlyOptimal`] specifies a layout for the
    ///depth aspect of a depth/stencil format image allowing read-only access
    ///as a depth attachment or in shaders as a sampled image, combined
    ///image/sampler, or input attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    DepthReadOnlyOptimal = 1000241001,
    ///[`StencilAttachmentOptimal`] specifies a layout for
    ///the stencil aspect of a depth/stencil format image allowing read and
    ///write access as a stencil attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    StencilAttachmentOptimal = 1000241002,
    ///[`StencilReadOnlyOptimal`] specifies a layout for
    ///the stencil aspect of a depth/stencil format image allowing read-only
    ///access as a stencil attachment or in shaders as a sampled image,
    ///combined image/sampler, or input attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    StencilReadOnlyOptimal = 1000241003,
    ///[`ReadOnlyOptimal`] specifies a layout allowing read
    ///only access as an attachment, or in shaders as a sampled image, combined
    ///image/sampler, or input attachment.
    ///
    ///Provided by [`crate::vulkan1_3`]
    ReadOnlyOptimal = 1000314000,
    ///[`AttachmentOptimal`] specifies a layout that **must**
    ///only be used with attachment accesses in the graphics pipeline.
    ///
    ///Provided by [`crate::vulkan1_3`]
    AttachmentOptimal = 1000314001,
    ///[`PresentSrcKhr`]**must** only be used for presenting
    ///a presentable image for display.
    ///A swapchain’s image **must** be transitioned to this layout before calling
    ///[`QueuePresentKHR`], and **must** be transitioned away from this layout
    ///after calling [`AcquireNextImageKHR`].
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    PresentSrcKhr = 1000001002,
    ///[`VideoDecodeDstKhr`]**must** only be used as a
    ///decode output image of a [video decode
    ///operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    VideoDecodeDstKhr = 1000024000,
    ///[`VideoDecodeSrcKhr`] is reserved for future use.
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    VideoDecodeSrcKhr = 1000024001,
    ///[`VideoDecodeDpbKhr`]**must** only be used as a
    ///decode source or destination image of a [video
    ///decode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    VideoDecodeDpbKhr = 1000024002,
    ///[`SharedPresentKhr`] is valid only for shared
    ///presentable images, and **must** be used for any usage the image supports.
    ///
    ///Provided by [`crate::extensions::khr_shared_presentable_image`]
    SharedPresentKhr = 1000111000,
    ///[`FragmentDensityMapOptimalExt`]**must** only be
    ///used as a fragment density map attachment in a [`RenderPass`].
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    FragmentDensityMapOptimalExt = 1000218000,
    ///[`FragmentShadingRateAttachmentOptimalKhr`]**must**
    ///    only be used as a
    ///    [fragment shading rate
    ///    attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)
    ///or
    ///    [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-shading-rate-image).
    ///    This layout is valid only for image subresources of images created with
    ///    the `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR` usage
    ///    bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    FragmentShadingRateAttachmentOptimalKhr = 1000164003,
    ///[`VideoEncodeDstKhr`] is reserved for future use.
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeDstKhr = 1000299000,
    ///[`VideoEncodeSrcKhr`]**must** only be used as a
    ///encode source image of a [video encode
    ///operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeSrcKhr = 1000299001,
    ///[`VideoEncodeDpbKhr`]**must** only be used as a
    ///encode source or destination image of a [video
    ///encode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeDpbKhr = 1000299002,
}
impl const Default for ImageLayout {
    fn default() -> Self {
        Undefined
    }
}
impl ImageLayout {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkAttachmentLoadOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentLoadOp.html) - Specify how contents of an attachment are treated at the beginning of a subpass
///# C Specifications
///Possible values of [`AttachmentDescription::load_op`] and
///`stencilLoadOp`, specifying how the contents of the attachment are
///treated, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkAttachmentLoadOp {
///    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
///    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
///    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
///  // Provided by VK_EXT_load_store_op_none
///    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
///} VkAttachmentLoadOp;
///```
///# Description
/// - [`Load`] specifies that the previous contents of the image within the render area will be
///   preserved. For attachments with a depth/stencil format, this uses the access type
///   `VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT`. For attachments with a color format, this uses
///   the access type `VK_ACCESS_COLOR_ATTACHMENT_READ_BIT`.
/// - [`Clear`] specifies that the contents within the render area will be cleared to a uniform
///   value, which is specified when a render pass instance is begun. For attachments with a
///   depth/stencil format, this uses the access type
///   `VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`. For attachments with a color format, this uses
///   the access type `VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`DontCare`] specifies that the previous contents within the area need not be preserved; the
///   contents of the attachment will be undefined inside the render area. For attachments with a
///   depth/stencil format, this uses the access type
///   `VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`. For attachments with a color format, this uses
///   the access type `VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`NoneExt`] specifies that the previous contents of the image within the render area will be
///   preserved, but the contents of the attachment will be undefined inside the render pass. No
///   access type is used as the image is not accessed.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`RenderingAttachmentInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkAttachmentLoadOp")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum AttachmentLoadOp {
    ///[`Load`] specifies that the previous contents of
    ///the image within the render area will be preserved.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_READ_BIT`.
    Load = 0,
    ///[`Clear`] specifies that the contents within the
    ///render area will be cleared to a uniform value, which is specified when
    ///a render pass instance is begun.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    Clear = 1,
    ///[`DontCare`] specifies that the previous
    ///contents within the area need not be preserved; the contents of the
    ///attachment will be undefined inside the render area.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    DontCare = 2,
    ///[`NoneExt`] specifies that the previous
    ///contents of the image within the render area will be preserved, but the
    ///contents of the attachment will be undefined inside the render pass.
    ///No access type is used as the image is not accessed.
    ///
    ///Provided by [`crate::extensions::ext_load_store_op_none`]
    NoneExt = 1000400000,
}
impl const Default for AttachmentLoadOp {
    fn default() -> Self {
        Load
    }
}
impl AttachmentLoadOp {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkAttachmentStoreOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentStoreOp.html) - Specify how contents of an attachment are treated at the end of a subpass
///# C Specifications
///Possible values of [`AttachmentDescription::store_op`] and
///`stencilStoreOp`, specifying how the contents of the attachment are
///treated, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkAttachmentStoreOp {
///    VK_ATTACHMENT_STORE_OP_STORE = 0,
///    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
///  // Provided by VK_VERSION_1_3
///    VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,
///  // Provided by VK_QCOM_render_pass_store_ops
///    VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,
///  // Provided by VK_EXT_load_store_op_none
///    VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,
///} VkAttachmentStoreOp;
///```
///# Description
/// - [`Store`] specifies the contents generated during the render pass and within the render area
///   are written to memory. For attachments with a depth/stencil format, this uses the access type
///   `VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`. For attachments with a color format, this uses
///   the access type `VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`DontCare`] specifies the contents within the render area are not needed after rendering, and
///   **may** be discarded; the contents of the attachment will be undefined inside the render area.
///   For attachments with a depth/stencil format, this uses the access type
///   `VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`. For attachments with a color format, this uses
///   the access type `VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`None`] specifies the contents within the render area are not accessed by the store
///   operation. However, if the attachment was written to during the render pass, the contents of
///   the attachment will be undefined inside the render area.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`RenderingAttachmentInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkAttachmentStoreOp")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum AttachmentStoreOp {
    ///[`Store`] specifies the contents generated
    ///during the render pass and within the render area are written to memory.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    Store = 0,
    ///[`DontCare`] specifies the contents within the
    ///render area are not needed after rendering, and **may** be discarded; the
    ///contents of the attachment will be undefined inside the render area.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    DontCare = 1,
    ///[`None`] specifies the contents within the
    ///render area are not accessed by the store operation.
    ///However, if the attachment was written to during the render pass, the
    ///contents of the attachment will be undefined inside the render area.
    ///
    ///Provided by [`crate::vulkan1_3`]
    None = 1000301000,
}
impl const Default for AttachmentStoreOp {
    fn default() -> Self {
        Store
    }
}
impl AttachmentStoreOp {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkImageType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageType.html) - Specifies the type of an image object
///# C Specifications
///Possible values of [`ImageCreateInfo::image_type`], specifying the
///basic dimensionality of an image, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageType {
///    VK_IMAGE_TYPE_1D = 0,
///    VK_IMAGE_TYPE_2D = 1,
///    VK_IMAGE_TYPE_3D = 2,
///} VkImageType;
///```
///# Description
/// - [`1D`] specifies a one-dimensional image.
/// - [`2D`] specifies a two-dimensional image.
/// - [`3D`] specifies a three-dimensional image.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageCreateInfo`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`GetPhysicalDeviceExternalImageFormatPropertiesNV`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum ImageType {
    ///[`1D`] specifies a one-dimensional image.
    _1D = 0,
    ///[`2D`] specifies a two-dimensional image.
    _2D = 1,
    ///[`3D`] specifies a three-dimensional image.
    _3D = 2,
}
impl const Default for ImageType {
    fn default() -> Self {
        _1D
    }
}
impl ImageType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkImageTiling](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageTiling.html) - Specifies the tiling arrangement of data in an image
///# C Specifications
///Possible values of [`ImageCreateInfo::tiling`], specifying the
///tiling arrangement of texel blocks in an image, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageTiling {
///    VK_IMAGE_TILING_OPTIMAL = 0,
///    VK_IMAGE_TILING_LINEAR = 1,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
///} VkImageTiling;
///```
///# Description
/// - [`Optimal`] specifies optimal tiling (texels are laid out in an implementation-dependent
///   arrangement, for more efficient memory access).
/// - [`Linear`] specifies linear tiling (texels are laid out in memory in row-major order, possibly
///   with some padding on each row).
/// - [`DrmFormatModifierExt`] indicates that the image’s tiling is defined by a [Linux DRM format modifier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-drm-format-modifier).
///   The modifier is specified at image creation with [`ImageDrmFormatModifierListCreateInfoEXT`]
///   or [`ImageDrmFormatModifierExplicitCreateInfoEXT`], and **can** be queried with
///   [`GetImageDrmFormatModifierPropertiesEXT`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageCreateInfo`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`GetPhysicalDeviceExternalImageFormatPropertiesNV`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageTiling")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum ImageTiling {
    ///[`Optimal`] specifies optimal tiling (texels are laid
    ///out in an implementation-dependent arrangement, for more efficient
    ///memory access).
    Optimal = 0,
    ///[`Linear`] specifies linear tiling (texels are laid
    ///out in memory in row-major order, possibly with some padding on each
    ///row).
    Linear = 1,
    ///[`DrmFormatModifierExt`] indicates that the image’s
    ///tiling is defined by a [Linux DRM format
    ///modifier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-drm-format-modifier).
    ///The modifier is specified at image creation with
    ///[`ImageDrmFormatModifierListCreateInfoEXT`] or
    ///[`ImageDrmFormatModifierExplicitCreateInfoEXT`], and **can** be queried
    ///with [`GetImageDrmFormatModifierPropertiesEXT`].
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    DrmFormatModifierExt = 1000158000,
}
impl const Default for ImageTiling {
    fn default() -> Self {
        Optimal
    }
}
impl ImageTiling {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkImageViewType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageViewType.html) - Image view types
///# C Specifications
///The types of image views that **can** be created are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageViewType {
///    VK_IMAGE_VIEW_TYPE_1D = 0,
///    VK_IMAGE_VIEW_TYPE_2D = 1,
///    VK_IMAGE_VIEW_TYPE_3D = 2,
///    VK_IMAGE_VIEW_TYPE_CUBE = 3,
///    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
///    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
///    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
///} VkImageViewType;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageViewCreateInfo`]
/// - [`PhysicalDeviceImageViewImageFormatInfoEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageViewType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum ImageViewType {
    ///No documentation found
    _1D = 0,
    ///No documentation found
    _2D = 1,
    ///No documentation found
    _3D = 2,
    ///No documentation found
    Cube = 3,
    ///No documentation found
    _1DArray = 4,
    ///No documentation found
    _2DArray = 5,
    ///No documentation found
    CubeArray = 6,
}
impl const Default for ImageViewType {
    fn default() -> Self {
        _1D
    }
}
impl ImageViewType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkCommandBufferLevel](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferLevel.html) - Enumerant specifying a command buffer level
///# C Specifications
///Possible values of [`CommandBufferAllocateInfo::level`],
///specifying the command buffer level, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkCommandBufferLevel {
///    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
///    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
///} VkCommandBufferLevel;
///```
///# Description
/// - [`Primary`] specifies a primary command buffer.
/// - [`Secondary`] specifies a secondary command buffer.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandBufferAllocateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkCommandBufferLevel")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum CommandBufferLevel {
    ///[`Primary`] specifies a primary command
    ///buffer.
    Primary = 0,
    ///[`Secondary`] specifies a secondary command
    ///buffer.
    Secondary = 1,
}
impl const Default for CommandBufferLevel {
    fn default() -> Self {
        Primary
    }
}
impl CommandBufferLevel {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkComponentSwizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkComponentSwizzle.html) - Specify how a component is swizzled
///# C Specifications
///Possible values of the members of [`ComponentMapping`], specifying the
///component values placed in each component of the output vector, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkComponentSwizzle {
///    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
///    VK_COMPONENT_SWIZZLE_ZERO = 1,
///    VK_COMPONENT_SWIZZLE_ONE = 2,
///    VK_COMPONENT_SWIZZLE_R = 3,
///    VK_COMPONENT_SWIZZLE_G = 4,
///    VK_COMPONENT_SWIZZLE_B = 5,
///    VK_COMPONENT_SWIZZLE_A = 6,
///} VkComponentSwizzle;
///```
///# Description
/// - [`Identity`] specifies that the component is set to the identity swizzle.
/// - [`Zero`] specifies that the component is set to zero.
/// - [`One`] specifies that the component is set to either 1 or 1.0, depending on whether the type of the image view format is integer or floating-point respectively, as determined by the [Format Definition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-definition) section for each [`Format`].
/// - [`R`] specifies that the component is set to the value of the R component of the image.
/// - [`G`] specifies that the component is set to the value of the G component of the image.
/// - [`B`] specifies that the component is set to the value of the B component of the image.
/// - [`A`] specifies that the component is set to the value of the A component of the image.
///Setting the identity swizzle on a component is equivalent to setting the
///identity mapping on that component.
///That is:
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ComponentMapping`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkComponentSwizzle")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum ComponentSwizzle {
    ///[`Identity`] specifies that the component is set
    ///to the identity swizzle.
    Identity = 0,
    ///[`Zero`] specifies that the component is set to
    ///zero.
    Zero = 1,
    ///[`One`] specifies that the component is set to
    ///either 1 or 1.0, depending on whether the type of the image view format
    ///is integer or floating-point respectively, as determined by the
    ///[Format Definition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-definition) section for each
    ///[`Format`].
    One = 2,
    ///[`R`] specifies that the component is set to the
    ///value of the R component of the image.
    R = 3,
    ///[`G`] specifies that the component is set to the
    ///value of the G component of the image.
    G = 4,
    ///[`B`] specifies that the component is set to the
    ///value of the B component of the image.
    B = 5,
    ///[`A`] specifies that the component is set to the
    ///value of the A component of the image.
    A = 6,
}
impl const Default for ComponentSwizzle {
    fn default() -> Self {
        Identity
    }
}
impl ComponentSwizzle {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkDescriptorType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorType.html) - Specifies the type of a descriptor in a descriptor set
///# C Specifications
///The type of descriptors in a descriptor set is specified by
///[`WriteDescriptorSet::descriptor_type`], which **must** be one of the
///values:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkDescriptorType {
///    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
///    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
///    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
///    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
///    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
///    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
///    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
///    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
///    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
///    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
///    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
///  // Provided by VK_VERSION_1_3
///    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
///  // Provided by VK_NV_ray_tracing
///    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
///  // Provided by VK_VALVE_mutable_descriptor_type
///    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
///} VkDescriptorType;
///```
///# Description
/// - [`Sampler`] specifies a [sampler descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler).
/// - [`CombinedImageSampler`] specifies a [combined image sampler descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
/// - [`SampledImage`] specifies a [sampled image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage).
/// - [`StorageImage`] specifies a [storage image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage).
/// - [`UniformTexelBuffer`] specifies a [uniform texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
/// - [`StorageTexelBuffer`] specifies a [storage texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
/// - [`UniformBuffer`] specifies a [uniform buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer).
/// - [`StorageBuffer`] specifies a [storage buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer).
/// - [`UniformBufferDynamic`] specifies a [dynamic uniform buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
/// - [`StorageBufferDynamic`] specifies a [dynamic storage buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
/// - [`InputAttachment`] specifies an [input attachment descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
/// - [`InlineUniformBlock`] specifies an [inline uniform block](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inlineuniformblock).
/// - [`MutableValve`] specifies a [descriptor of mutable type](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-mutable).
///When a descriptor set is updated via elements of [`WriteDescriptorSet`],
///members of `pImageInfo`, `pBufferInfo` and `pTexelBufferView`
///are only accessed by the implementation when they correspond to descriptor
///type being defined - otherwise they are ignored.
///The members accessed are as follows for each descriptor type:
/// - For [`Sampler`], only the `sampler` member of each element of
///   [`WriteDescriptorSet::p_image_info`] is accessed.
/// - For [`SampledImage`], [`StorageImage`], or [`InputAttachment`], only the `imageView` and
///   `imageLayout` members of each element of [`WriteDescriptorSet::p_image_info`] are accessed.
/// - For [`CombinedImageSampler`], all members of each element of
///   [`WriteDescriptorSet::p_image_info`] are accessed.
/// - For [`UniformBuffer`], [`StorageBuffer`], [`UniformBufferDynamic`], or
///   [`StorageBufferDynamic`], all members of each element of [`WriteDescriptorSet::p_buffer_info`]
///   are accessed.
/// - For [`UniformTexelBuffer`] or [`StorageTexelBuffer`], each element of
///   [`WriteDescriptorSet::p_texel_buffer_view`] is accessed.
///When updating descriptors with a `descriptorType` of
///[`InlineUniformBlock`], none of the `pImageInfo`,
///`pBufferInfo`, or `pTexelBufferView` members are accessed, instead
///the source data of the descriptor update operation is taken from the
///[`WriteDescriptorSetInlineUniformBlock`] structure in the `pNext`
///chain of [`WriteDescriptorSet`].
///When updating descriptors with a `descriptorType` of
///[`AccelerationStructureKhr`], none of the
///`pImageInfo`, `pBufferInfo`, or `pTexelBufferView` members are
///accessed, instead the source data of the descriptor update operation is
///taken from the [`WriteDescriptorSetAccelerationStructureKHR`] structure
///in the `pNext` chain of [`WriteDescriptorSet`].
///When updating descriptors with a `descriptorType` of
///[`AccelerationStructureNv`], none of the
///`pImageInfo`, `pBufferInfo`, or `pTexelBufferView` members are
///accessed, instead the source data of the descriptor update operation is
///taken from the [`WriteDescriptorSetAccelerationStructureNV`] structure
///in the `pNext` chain of [`WriteDescriptorSet`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorPoolSize`]
/// - [`DescriptorSetLayoutBinding`]
/// - [`DescriptorUpdateTemplateEntry`]
/// - [`ImageViewHandleInfoNVX`]
/// - [`MutableDescriptorTypeListVALVE`]
/// - [`WriteDescriptorSet`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDescriptorType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum DescriptorType {
    ///[`Sampler`] specifies a [sampler descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler).
    Sampler = 0,
    ///[`CombinedImageSampler`] specifies a
    ///[combined image sampler
    ///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
    CombinedImageSampler = 1,
    ///[`SampledImage`] specifies a
    ///[sampled image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage).
    SampledImage = 2,
    ///[`StorageImage`] specifies a
    ///[storage image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage).
    StorageImage = 3,
    ///[`UniformTexelBuffer`] specifies a
    ///[uniform texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
    UniformTexelBuffer = 4,
    ///[`StorageTexelBuffer`] specifies a
    ///[storage texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
    StorageTexelBuffer = 5,
    ///[`UniformBuffer`] specifies a
    ///[uniform buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer).
    UniformBuffer = 6,
    ///[`StorageBuffer`] specifies a
    ///[storage buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer).
    StorageBuffer = 7,
    ///[`UniformBufferDynamic`] specifies a
    ///[dynamic uniform buffer
    ///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
    UniformBufferDynamic = 8,
    ///[`StorageBufferDynamic`] specifies a
    ///[dynamic storage buffer
    ///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
    StorageBufferDynamic = 9,
    ///[`InputAttachment`] specifies an
    ///[input attachment descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
    InputAttachment = 10,
    ///[`InlineUniformBlock`] specifies an
    ///[inline uniform block](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inlineuniformblock).
    ///
    ///Provided by [`crate::vulkan1_3`]
    InlineUniformBlock = 1000138000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureKhr = 1000150000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    AccelerationStructureNv = 1000165000,
    ///[`MutableValve`] specifies a
    ///[descriptor of mutable type](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-mutable).
    ///
    ///Provided by [`crate::extensions::valve_mutable_descriptor_type`]
    MutableValve = 1000351000,
}
impl const Default for DescriptorType {
    fn default() -> Self {
        Sampler
    }
}
impl DescriptorType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkQueryType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueryType.html) - Specify the type of queries managed by a query pool
///# C Specifications
///Possible values of [`QueryPoolCreateInfo::query_type`], specifying
///the type of queries managed by the pool, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkQueryType {
///    VK_QUERY_TYPE_OCCLUSION = 0,
///    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
///    VK_QUERY_TYPE_TIMESTAMP = 2,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
///#endif
///  // Provided by VK_EXT_transform_feedback
///    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
///  // Provided by VK_KHR_performance_query
///    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
///  // Provided by VK_NV_ray_tracing
///    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
///  // Provided by VK_INTEL_performance_query
///    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR = 1000299000,
///#endif
///} VkQueryType;
///```
///# Description
/// - [`Occlusion`] specifies an [occlusion query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-occlusion).
/// - [`PipelineStatistics`] specifies a [pipeline statistics query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats).
/// - [`Timestamp`] specifies a [timestamp query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
/// - [`PerformanceQueryKhr`] specifies a [performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance).
/// - [`TransformFeedbackStreamExt`] specifies a [transform feedback query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-transform-feedback).
/// - [`AccelerationStructureCompactedSizeKhr`] specifies a [acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
///   for use with [`CmdWriteAccelerationStructuresPropertiesKHR`] or
///   [`WriteAccelerationStructuresPropertiesKHR`].
/// - [`AccelerationStructureSerializationSizeKhr`] specifies a [serialization acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
/// - [`AccelerationStructureCompactedSizeNv`] specifies a [acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
///   for use with [`CmdWriteAccelerationStructuresPropertiesNV`].
/// - [`PerformanceQueryIntel`] specifies a [Intel performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance-intel).
/// - [`ResultStatusOnlyKhr`] specifies a [result status query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-result-status-only).
/// - [`VideoEncodeBitstreamBufferRangeKhr`] specifies a [video encode bitstream range query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-video-encode-bitstream-buffer-range).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`QueryPoolCreateInfo`]
/// - [`CmdWriteAccelerationStructuresPropertiesKHR`]
/// - [`CmdWriteAccelerationStructuresPropertiesNV`]
/// - [`WriteAccelerationStructuresPropertiesKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkQueryType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum QueryType {
    ///[`Occlusion`] specifies an [occlusion query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-occlusion).
    Occlusion = 0,
    ///[`PipelineStatistics`] specifies a [pipeline statistics query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats).
    PipelineStatistics = 1,
    ///[`Timestamp`] specifies a [timestamp query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
    Timestamp = 2,
    ///[`ResultStatusOnlyKhr`] specifies a
    ///[result status query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-result-status-only).
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    ResultStatusOnlyKhr = 1000023000,
    ///[`TransformFeedbackStreamExt`] specifies a
    ///[transform feedback query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-transform-feedback).
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    TransformFeedbackStreamExt = 1000028004,
    ///[`PerformanceQueryKhr`] specifies a
    ///[performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance).
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    PerformanceQueryKhr = 1000116000,
    ///[`AccelerationStructureCompactedSizeKhr`] specifies
    ///a [acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
    ///for use with [`CmdWriteAccelerationStructuresPropertiesKHR`] or
    ///[`WriteAccelerationStructuresPropertiesKHR`].
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureCompactedSizeKhr = 1000150000,
    ///[`AccelerationStructureSerializationSizeKhr`]
    ///specifies a [serialization acceleration
    ///structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureSerializationSizeKhr = 1000150001,
    ///[`AccelerationStructureCompactedSizeNv`] specifies a
    ///[acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
    ///for use with [`CmdWriteAccelerationStructuresPropertiesNV`].
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    AccelerationStructureCompactedSizeNv = 1000165000,
    ///[`PerformanceQueryIntel`] specifies a
    ///[Intel performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance-intel).
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    PerformanceQueryIntel = 1000210000,
    ///[`VideoEncodeBitstreamBufferRangeKhr`] specifies a
    ///[video encode bitstream
    ///range query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-video-encode-bitstream-buffer-range).
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeBitstreamBufferRangeKhr = 1000299000,
}
impl const Default for QueryType {
    fn default() -> Self {
        Occlusion
    }
}
impl QueryType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkBorderColor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBorderColor.html) - Specify border color used for texture lookups
///# C Specifications
///Possible values of [`SamplerCreateInfo::border_color`], specifying
///the border color used for texture lookups, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkBorderColor {
///    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
///    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
///    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
///    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
///    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
///    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
///  // Provided by VK_EXT_custom_border_color
///    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
///  // Provided by VK_EXT_custom_border_color
///    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
///} VkBorderColor;
///```
///# Description
/// - [`FloatTransparentBlack`] specifies a transparent, floating-point format, black color.
/// - [`IntTransparentBlack`] specifies a transparent, integer format, black color.
/// - [`FloatOpaqueBlack`] specifies an opaque, floating-point format, black color.
/// - [`IntOpaqueBlack`] specifies an opaque, integer format, black color.
/// - [`FloatOpaqueWhite`] specifies an opaque, floating-point format, white color.
/// - [`IntOpaqueWhite`] specifies an opaque, integer format, white color.
/// - [`FloatCustomExt`] indicates that a [`SamplerCustomBorderColorCreateInfoEXT`] structure is
///   included in the [`SamplerCreateInfo::p_next`] chain containing the color data in
///   floating-point format.
/// - [`IntCustomExt`] indicates that a [`SamplerCustomBorderColorCreateInfoEXT`] structure is
///   included in the [`SamplerCreateInfo::p_next`] chain containing the color data in integer
///   format.
///These colors are described in detail in [Texel
///Replacement](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-replacement).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SamplerCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBorderColor")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum BorderColor {
    ///[`FloatTransparentBlack`] specifies a transparent,
    ///floating-point format, black color.
    FloatTransparentBlack = 0,
    ///[`IntTransparentBlack`] specifies a transparent,
    ///integer format, black color.
    IntTransparentBlack = 1,
    ///[`FloatOpaqueBlack`] specifies an opaque,
    ///floating-point format, black color.
    FloatOpaqueBlack = 2,
    ///[`IntOpaqueBlack`] specifies an opaque, integer
    ///format, black color.
    IntOpaqueBlack = 3,
    ///[`FloatOpaqueWhite`] specifies an opaque,
    ///floating-point format, white color.
    FloatOpaqueWhite = 4,
    ///[`IntOpaqueWhite`] specifies an opaque, integer
    ///format, white color.
    IntOpaqueWhite = 5,
    ///[`FloatCustomExt`] indicates that a
    ///[`SamplerCustomBorderColorCreateInfoEXT`] structure is included in
    ///the [`SamplerCreateInfo`]::`pNext` chain containing the color
    ///data in floating-point format.
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    FloatCustomExt = 1000287003,
    ///[`IntCustomExt`] indicates that a
    ///[`SamplerCustomBorderColorCreateInfoEXT`] structure is included in
    ///the [`SamplerCreateInfo`]::`pNext` chain containing the color
    ///data in integer format.
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    IntCustomExt = 1000287004,
}
impl const Default for BorderColor {
    fn default() -> Self {
        FloatTransparentBlack
    }
}
impl BorderColor {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkPipelineBindPoint](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineBindPoint.html) - Specify the bind point of a pipeline object to a command buffer
///# C Specifications
///Possible values of [`CmdBindPipeline`]`::pipelineBindPoint`,
///specifying the bind point of a pipeline object, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPipelineBindPoint {
///    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
///    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
///  // Provided by VK_NV_ray_tracing
///    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
///} VkPipelineBindPoint;
///```
///# Description
/// - [`Compute`] specifies binding as a compute pipeline.
/// - [`Graphics`] specifies binding as a graphics pipeline.
/// - [`RayTracingKhr`] specifies binding as a ray tracing pipeline.
/// - [`SubpassShadingHuawei`] specifies binding as a subpass shading pipeline.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorUpdateTemplateCreateInfo`]
/// - [`GeneratedCommandsInfoNV`]
/// - [`GeneratedCommandsMemoryRequirementsInfoNV`]
/// - [`IndirectCommandsLayoutCreateInfoNV`]
/// - [`SubpassDescription`]
/// - [`SubpassDescription2`]
/// - [`CmdBindDescriptorSets`]
/// - [`CmdBindPipeline`]
/// - [`CmdBindPipelineShaderGroupNV`]
/// - [`CmdPushDescriptorSetKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPipelineBindPoint")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum PipelineBindPoint {
    ///[`Graphics`] specifies binding as a graphics
    ///pipeline.
    Graphics = 0,
    ///[`Compute`] specifies binding as a compute
    ///pipeline.
    Compute = 1,
    ///[`RayTracingKhr`] specifies binding as a ray
    ///tracing pipeline.
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    RayTracingKhr = 1000165000,
    ///[`SubpassShadingHuawei`] specifies binding as
    ///a subpass shading pipeline.
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    SubpassShadingHuawei = 1000369003,
}
impl const Default for PipelineBindPoint {
    fn default() -> Self {
        Graphics
    }
}
impl PipelineBindPoint {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkPipelineCacheHeaderVersion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheHeaderVersion.html) - Encode pipeline cache version
///# C Specifications
///Possible values of the `headerVersion` value of the pipeline cache
///header are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPipelineCacheHeaderVersion {
///    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
///} VkPipelineCacheHeaderVersion;
///```
///# Description
/// - [`One`] specifies version one of the pipeline cache.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineCacheHeaderVersionOne`]
/// - [`CreatePipelineCache`]
/// - [`GetPipelineCacheData`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPipelineCacheHeaderVersion")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum PipelineCacheHeaderVersion {
    #[doc(hidden)]
    Empty = 0,
    ///[`One`] specifies version one of the
    ///pipeline cache.
    One = 1,
}
impl const Default for PipelineCacheHeaderVersion {
    fn default() -> Self {
        Empty
    }
}
impl PipelineCacheHeaderVersion {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkPrimitiveTopology](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPrimitiveTopology.html) - Supported primitive topologies
///# C Specifications
///The primitive topologies defined by [`PrimitiveTopology`] are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPrimitiveTopology {
///    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
///    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
///    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
///    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
///    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
///    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
///} VkPrimitiveTopology;
///```
///# Description
/// - [`PointList`] specifies a series of [separate point primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-point-lists).
/// - [`LineList`] specifies a series of [separate line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists).
/// - [`LineStrip`] specifies a series of [connected line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips)
///   with consecutive lines sharing a vertex.
/// - [`TriangleList`] specifies a series of [separate triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists).
/// - [`TriangleStrip`] specifies a series of [connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips)
///   with consecutive triangles sharing an edge.
/// - [`TriangleFan`] specifies a series of [connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-fans)
///   with all triangles sharing a common vertex. If the `[`VK_KHR_portability_subset`]` extension
///   is enabled, and [`PhysicalDevicePortabilitySubsetFeaturesKHR::triangle_fans`] is [`FALSE`],
///   then triangle fans are not supported by the implementation, and [`TriangleFan`]**must** not be
///   used.
/// - [`LineListWithAdjacency`] specifies a series of [separate line primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists-with-adjacency).
/// - [`LineStripWithAdjacency`] specifies a series of [connected line primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips-with-adjacency),
///   with consecutive primitives sharing three vertices.
/// - [`TriangleListWithAdjacency`] specifies a series of [separate triangle primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists-with-adjacency).
/// - [`TriangleStripWithAdjacency`] specifies [connected triangle primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips-with-adjacency),
///   with consecutive triangles sharing an edge.
/// - [`PatchList`] specifies [separate patch primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-patch-lists).
///Each primitive topology, and its construction from a list of vertices, is
///described in detail below with a supporting diagram, according to the
///following key:The diagrams are supported with mathematical definitions where the vertices
///(v) and primitives (p) are numbered starting from 0;
///v<sub>0</sub> is the first vertex in the provided data and p<sub>0</sub> is the
///first primitive in the set of primitives defined by the vertices and
///topology.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`CmdSetPrimitiveTopology`]
/// - [`CmdSetPrimitiveTopologyEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPrimitiveTopology")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum PrimitiveTopology {
    ///[`PointList`] specifies a series of
    ///[separate point primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-point-lists).
    PointList = 0,
    ///[`LineList`] specifies a series of
    ///[separate line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists).
    LineList = 1,
    ///[`LineStrip`] specifies a series of
    ///[connected line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips) with consecutive lines
    ///sharing a vertex.
    LineStrip = 2,
    ///[`TriangleList`] specifies a series of
    ///[separate triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists).
    TriangleList = 3,
    ///[`TriangleStrip`] specifies a series of
    ///[connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips) with
    ///consecutive triangles sharing an edge.
    TriangleStrip = 4,
    ///[`TriangleFan`] specifies a series of
    ///[connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-fans) with all
    ///triangles sharing a common vertex.
    ///If the `[`VK_KHR_portability_subset`]` extension is enabled, and
    ///[`PhysicalDevicePortabilitySubsetFeaturesKHR`]::`triangleFans`
    ///is [`FALSE`], then triangle fans are not supported by the
    ///implementation, and [`TriangleFan`]**must** not
    ///be used.
    TriangleFan = 5,
    ///[`LineListWithAdjacency`] specifies a series
    ///of [separate line primitives with
    ///adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists-with-adjacency).
    LineListWithAdjacency = 6,
    ///[`LineStripWithAdjacency`] specifies a series
    ///of [connected line primitives with
    ///adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips-with-adjacency), with consecutive primitives sharing three vertices.
    LineStripWithAdjacency = 7,
    ///[`TriangleListWithAdjacency`] specifies a
    ///series of [separate triangle
    ///primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists-with-adjacency).
    TriangleListWithAdjacency = 8,
    ///[`TriangleStripWithAdjacency`] specifies
    ///[connected triangle primitives
    ///with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips-with-adjacency), with consecutive triangles sharing an edge.
    TriangleStripWithAdjacency = 9,
    ///[`PatchList`] specifies
    ///[separate patch primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-patch-lists).
    PatchList = 10,
}
impl const Default for PrimitiveTopology {
    fn default() -> Self {
        PointList
    }
}
impl PrimitiveTopology {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkSharingMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSharingMode.html) - Buffer and image sharing modes
///# C Specifications
///Buffer and image objects are created with a *sharing mode* controlling how
///they **can** be accessed from queues.
///The supported sharing modes are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSharingMode {
///    VK_SHARING_MODE_EXCLUSIVE = 0,
///    VK_SHARING_MODE_CONCURRENT = 1,
///} VkSharingMode;
///```
///# Description
/// - [`Exclusive`] specifies that access to any range or image subresource of the object will be
///   exclusive to a single queue family at a time.
/// - [`Concurrent`] specifies that concurrent access to any range or image subresource of the
///   object from multiple queue families is supported.
///Ranges of buffers and image subresources of image objects created using
///[`Exclusive`]**must** only be accessed by queues in the
///queue family that has *ownership* of the resource.
///Upon creation, such resources are not owned by any queue family; ownership
///is implicitly acquired upon first use within a queue.
///Once a resource using [`Exclusive`] is owned by some queue
///family, the application **must** perform a
///[queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers) to make
///the memory contents of a range or image subresource accessible to a
///different queue family.A queue family **can** take ownership of an image subresource or buffer
/// range
///of a resource created with [`Exclusive`], without an
///ownership transfer, in the same way as for a resource that was just created;
///however, taking ownership in this way has the effect that the contents of
///the image subresource or buffer range are undefined.Ranges of buffers and image subresources of
/// image objects created using
///[`Concurrent`]**must** only be accessed by queues from the
///queue families specified through the `queueFamilyIndexCount` and
///`pQueueFamilyIndices` members of the corresponding create info
///structures.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferCreateInfo`]
/// - [`ImageCreateInfo`]
/// - [`PhysicalDeviceImageDrmFormatModifierInfoEXT`]
/// - [`SwapchainCreateInfoKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSharingMode")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum SharingMode {
    ///[`Exclusive`] specifies that access to any range or
    ///image subresource of the object will be exclusive to a single queue
    ///family at a time.
    Exclusive = 0,
    ///[`Concurrent`] specifies that concurrent access to any
    ///range or image subresource of the object from multiple queue families is
    ///supported.
    Concurrent = 1,
}
impl const Default for SharingMode {
    fn default() -> Self {
        Exclusive
    }
}
impl SharingMode {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkIndexType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkIndexType.html) - Type of index buffer indices
///# C Specifications
///Possible values of [`CmdBindIndexBuffer`]`::indexType`, specifying
///the size of indices, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkIndexType {
///    VK_INDEX_TYPE_UINT16 = 0,
///    VK_INDEX_TYPE_UINT32 = 1,
///  // Provided by VK_KHR_acceleration_structure
///    VK_INDEX_TYPE_NONE_KHR = 1000165000,
///  // Provided by VK_EXT_index_type_uint8
///    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
///  // Provided by VK_NV_ray_tracing
///    VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
///} VkIndexType;
///```
///# Description
/// - [`Uint16`] specifies that indices are 16-bit unsigned integer values.
/// - [`Uint32`] specifies that indices are 32-bit unsigned integer values.
/// - [`NoneKhr`] specifies that no indices are provided.
/// - [`Uint8Ext`] specifies that indices are 8-bit unsigned integer values.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`BindIndexBufferIndirectCommandNV`]
/// - [`GeometryTrianglesNV`]
/// - [`IndirectCommandsLayoutTokenNV`]
/// - [`CmdBindIndexBuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkIndexType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum IndexType {
    ///[`Uint16`] specifies that indices are 16-bit unsigned
    ///integer values.
    Uint16 = 0,
    ///[`Uint32`] specifies that indices are 32-bit unsigned
    ///integer values.
    Uint32 = 1,
    ///[`NoneKhr`] specifies that no indices are provided.
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    NoneKhr = 1000165000,
    ///[`Uint8Ext`] specifies that indices are 8-bit unsigned
    ///integer values.
    ///
    ///Provided by [`crate::extensions::ext_index_type_uint_8`]
    Uint8Ext = 1000265000,
}
impl const Default for IndexType {
    fn default() -> Self {
        Uint16
    }
}
impl IndexType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkFilter](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFilter.html) - Specify filters used for texture lookups
///# C Specifications
///Possible values of the [`SamplerCreateInfo::mag_filter`] and
///`minFilter` parameters, specifying filters used for texture lookups,
///are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkFilter {
///    VK_FILTER_NEAREST = 0,
///    VK_FILTER_LINEAR = 1,
///  // Provided by VK_IMG_filter_cubic
///    VK_FILTER_CUBIC_IMG = 1000015000,
///  // Provided by VK_EXT_filter_cubic
///    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
///} VkFilter;
///```
///# Description
/// - [`Nearest`] specifies nearest filtering.
/// - [`Linear`] specifies linear filtering.
/// - [`CubicExt`] specifies cubic filtering.
///These filters are described in detail in [Texel
///Filtering](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-filtering).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BlitImageInfo2`]
/// - [`SamplerCreateInfo`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`CmdBlitImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFilter")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum Filter {
    ///[`Nearest`] specifies nearest filtering.
    Nearest = 0,
    ///[`Linear`] specifies linear filtering.
    Linear = 1,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::img_filter_cubic`]
    CubicImg = 1000015000,
}
impl const Default for Filter {
    fn default() -> Self {
        Nearest
    }
}
impl Filter {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkSamplerMipmapMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerMipmapMode.html) - Specify mipmap mode used for texture lookups
///# C Specifications
///Possible values of the [`SamplerCreateInfo::mipmap_mode`],
///specifying the mipmap mode used for texture lookups, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSamplerMipmapMode {
///    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
///    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
///} VkSamplerMipmapMode;
///```
///# Description
/// - [`Nearest`] specifies nearest filtering.
/// - [`Linear`] specifies linear filtering.
///These modes are described in detail in [Texel
///Filtering](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-filtering).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SamplerCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSamplerMipmapMode")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum SamplerMipmapMode {
    ///[`Nearest`] specifies nearest filtering.
    Nearest = 0,
    ///[`Linear`] specifies linear filtering.
    Linear = 1,
}
impl const Default for SamplerMipmapMode {
    fn default() -> Self {
        Nearest
    }
}
impl SamplerMipmapMode {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkSamplerAddressMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerAddressMode.html) - Specify behavior of sampling with texture coordinates outside an image
///# C Specifications
///Possible values of the [`SamplerCreateInfo`]::`addressMode*`
///parameters, specifying the behavior of sampling with coordinates outside the
///range [0,1] for the respective u, v, or w coordinate
///as defined in the [Wrapping Operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-wrapping-operation)
///section, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSamplerAddressMode {
///    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
///    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
///    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
///    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
///  // Provided by VK_VERSION_1_2, VK_KHR_sampler_mirror_clamp_to_edge
///    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
///  // Provided by VK_KHR_sampler_mirror_clamp_to_edge
///    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR =
/// VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
///} VkSamplerAddressMode;
///```
///# Description
/// - [`Repeat`] specifies that the repeat wrap mode will be used.
/// - [`MirroredRepeat`] specifies that the mirrored repeat wrap mode will be used.
/// - [`ClampToEdge`] specifies that the clamp to edge wrap mode will be used.
/// - [`ClampToBorder`] specifies that the clamp to border wrap mode will be used.
/// - [`MirrorClampToEdge`] specifies that the     mirror clamp to edge wrap mode will be used.     This is only valid if [samplerMirrorClampToEdge](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-samplerMirrorClampToEdge) is enabled, or if     the `[`VK_KHR_sampler_mirror_clamp_to_edge`]` extension is enabled.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SamplerCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSamplerAddressMode")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum SamplerAddressMode {
    ///[`Repeat`] specifies that the repeat wrap mode
    ///will be used.
    Repeat = 0,
    ///[`MirroredRepeat`] specifies that the
    ///mirrored repeat wrap mode will be used.
    MirroredRepeat = 1,
    ///[`ClampToEdge`] specifies that the clamp to
    ///edge wrap mode will be used.
    ClampToEdge = 2,
    ///[`ClampToBorder`] specifies that the clamp
    ///to border wrap mode will be used.
    ClampToBorder = 3,
    ///[`MirrorClampToEdge`] specifies that the
    ///    mirror clamp to edge wrap mode will be used.
    ///    This is only valid if
    ///[samplerMirrorClampToEdge](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-samplerMirrorClampToEdge) is enabled, or if
    ///    the `[`VK_KHR_sampler_mirror_clamp_to_edge`]` extension is enabled.
    ///
    ///Provided by [`crate::extensions::khr_sampler_mirror_clamp_to_edge`]
    MirrorClampToEdge = 4,
}
impl const Default for SamplerAddressMode {
    fn default() -> Self {
        Repeat
    }
}
impl SamplerAddressMode {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkCompareOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCompareOp.html) - Stencil comparison function
///# C Specifications
///Possible values of [`StencilOpState::compare_op`], specifying the
///stencil comparison function, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkCompareOp {
///    VK_COMPARE_OP_NEVER = 0,
///    VK_COMPARE_OP_LESS = 1,
///    VK_COMPARE_OP_EQUAL = 2,
///    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
///    VK_COMPARE_OP_GREATER = 4,
///    VK_COMPARE_OP_NOT_EQUAL = 5,
///    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
///    VK_COMPARE_OP_ALWAYS = 7,
///} VkCompareOp;
///```
///# Description
/// - [`Never`] specifies that the test evaluates to false.
/// - [`Less`] specifies that the test evaluates A < B.
/// - [`Equal`] specifies that the test evaluates A = B.
/// - [`LessOrEqual`] specifies that the test evaluates A ≤ B.
/// - [`Greater`] specifies that the test evaluates A > B.
/// - [`NotEqual`] specifies that the test evaluates A ≠ B.
/// - [`GreaterOrEqual`] specifies that the test evaluates A ≥ B.
/// - [`Always`] specifies that the test evaluates to true.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`SamplerCreateInfo`]
/// - [`StencilOpState`]
/// - [`CmdSetDepthCompareOp`]
/// - [`CmdSetDepthCompareOpEXT`]
/// - [`CmdSetStencilOp`]
/// - [`CmdSetStencilOpEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkCompareOp")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum CompareOp {
    ///[`Never`] specifies that the test evaluates to false.
    Never = 0,
    ///[`Less`] specifies that the test evaluates A < B.
    Less = 1,
    ///[`Equal`] specifies that the test evaluates A = B.
    Equal = 2,
    ///[`LessOrEqual`] specifies that the test evaluates
    ///A ≤ B.
    LessOrEqual = 3,
    ///[`Greater`] specifies that the test evaluates A >
    ///B.
    Greater = 4,
    ///[`NotEqual`] specifies that the test evaluates A
    ///≠ B.
    NotEqual = 5,
    ///[`GreaterOrEqual`] specifies that the test evaluates
    ///A ≥ B.
    GreaterOrEqual = 6,
    ///[`Always`] specifies that the test evaluates to true.
    Always = 7,
}
impl const Default for CompareOp {
    fn default() -> Self {
        Never
    }
}
impl CompareOp {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkPolygonMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPolygonMode.html) - Control polygon rasterization mode
///# C Specifications
///Possible values of the
///[`PipelineRasterizationStateCreateInfo::polygon_mode`] property of
///the currently active pipeline, specifying the method of rasterization for
///polygons, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPolygonMode {
///    VK_POLYGON_MODE_FILL = 0,
///    VK_POLYGON_MODE_LINE = 1,
///    VK_POLYGON_MODE_POINT = 2,
///  // Provided by VK_NV_fill_rectangle
///    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
///} VkPolygonMode;
///```
///# Description
/// - [`Point`] specifies that polygon vertices are drawn as points.
/// - [`Line`] specifies that polygon edges are drawn as line segments.
/// - [`Fill`] specifies that polygons are rendered using the polygon rasterization rules in this
///   section.
/// - [`FillRectangleNv`] specifies that polygons are rendered using polygon rasterization rules,
///   modified to consider a sample within the primitive if the sample location is inside the
///   axis-aligned bounding box of the triangle after projection. Note that the barycentric weights
///   used in attribute interpolation **can** extend outside the range [0,1] when these primitives
///   are shaded. Special treatment is given to a sample position on the boundary edge of the
///   bounding box. In such a case, if two rectangles lie on either side of a common edge (with
///   identical endpoints) on which a sample position lies, then exactly one of the triangles
///   **must** produce a fragment that covers that sample during rasterization.Polygons rendered in
///   [`FillRectangleNv`] mode **may** be clipped by the frustum or by user clip planes. If clipping
///   is applied, the triangle is culled rather than clipped.Area calculation and facingness are
///   determined for [`FillRectangleNv`] mode using the triangle’s vertices.
///These modes affect only the final rasterization of polygons: in particular,
///a polygon’s vertices are shaded and the polygon is clipped and possibly
///culled before these modes are applied.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineRasterizationStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPolygonMode")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum PolygonMode {
    ///[`Fill`] specifies that polygons are rendered using
    ///the polygon rasterization rules in this section.
    Fill = 0,
    ///[`Line`] specifies that polygon edges are drawn as
    ///line segments.
    Line = 1,
    ///[`Point`] specifies that polygon vertices are drawn as
    ///points.
    Point = 2,
    ///[`FillRectangleNv`] specifies that polygons are
    ///rendered using polygon rasterization rules, modified to consider a
    ///sample within the primitive if the sample location is inside the
    ///axis-aligned bounding box of the triangle after projection.
    ///Note that the barycentric weights used in attribute interpolation **can**
    ///extend outside the range [0,1] when these primitives are shaded.
    ///Special treatment is given to a sample position on the boundary edge of
    ///the bounding box.
    ///In such a case, if two rectangles lie on either side of a common edge
    ///(with identical endpoints) on which a sample position lies, then exactly
    ///one of the triangles **must** produce a fragment that covers that sample
    ///during rasterization.Polygons rendered in [`FillRectangleNv`] mode **may** be
    ///clipped by the frustum or by user clip planes.
    ///If clipping is applied, the triangle is culled rather than clipped.Area calculation and
    /// facingness are determined for [`FillRectangleNv`] mode using the triangle’s vertices.
    ///
    ///Provided by [`crate::extensions::nv_fill_rectangle`]
    FillRectangleNv = 1000153000,
}
impl const Default for PolygonMode {
    fn default() -> Self {
        Fill
    }
}
impl PolygonMode {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkFrontFace](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFrontFace.html) - Interpret polygon front-facing orientation
///# C Specifications
///The first step of polygon rasterization is to determine whether the triangle
///is *back-facing* or *front-facing*.
///This determination is made based on the sign of the (clipped or unclipped)
///polygon’s area computed in framebuffer coordinates.
///One way to compute this area is:<span class="katex"><span aria-hidden="true"
/// class="katex-html"><span class="base"><span class="strut"
/// style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span class="strut"
/// style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span
/// class="mord">−</span><span class="mord"><span class="mord"><span class="mopen
/// nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span
/// style="height:3em;" class="pstrut"></span><span class="mord"><span
/// class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut"
/// style="height:3em;"></span><span style="border-bottom-width:0.04em;"
/// class="frac-line"></span></span><span style="top:-3.677em;"><span class="pstrut"
/// style="height:3em;"></span><span class="mord"><span
/// class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.686em;"
/// class="vlist"><span></span></span></span></span></span><span class="mclose
/// nulldelimiter"></span></span></span><span style="margin-right:0.16666666666666666em;"
/// class="mspace"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span
/// style="top:-1.872331em;margin-left:0em;"><span class="pstrut"
/// style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span
/// class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span
/// class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol
/// large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span
/// style="height:3.05em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin
/// mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord
/// mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.874664em;"><span
/// style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.383108em;"><span></span></span></span></span></span></span><span
/// class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">y</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.874664em;"><span
/// style="top:-2.4085610000000006em;margin-left:-0.03588em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.10764em;" class="mord mathdefault mtight">f</span></span></span><span
/// style="top:-3.113em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">⊕</span><span
/// class="mord mtight">1</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.4275469999999999em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span
/// class="strut"
/// style="height:1.3022109999999998em;vertical-align:-0.4275469999999999em;"></span><span
/// class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span style="height:0.874664em;" class="vlist"><span
/// style="top:-2.4085610000000006em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.10764em;" class="mord mathdefault mtight">f</span></span></span><span
/// style="top:-3.113em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">⊕</span><span
/// class="mord mtight">1</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.4275469999999999em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mord"><span
/// class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.874664em;"
/// class="vlist"><span
/// style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></
/// span>where <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span class="strut"
/// style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"></span><span
/// class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span style="height:0.824664em;" class="vlist"><span
/// style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.063em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></
/// span></span> and <span class="katex"><span aria-hidden="true" class="katex-html"><span
/// class="base"><span style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"
/// class="strut"></span><span class="mord"><span class="mord mathdefault"
/// style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span style="height:0.824664em;" class="vlist"><span
/// style="top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"
/// class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></
/// span></span> are the x and y
///framebuffer coordinates of the ith vertex of the n-vertex
///polygon (vertices are numbered starting at zero for the purposes of this
///computation) and i ⊕ 1 is (i +  1) mod n.The interpretation of the sign of a is determined by
/// the
///[`PipelineRasterizationStateCreateInfo::front_face`] property of
///the currently active pipeline.
///Possible values are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkFrontFace {
///    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
///    VK_FRONT_FACE_CLOCKWISE = 1,
///} VkFrontFace;
///```
///# Description
/// - [`CounterClockwise`] specifies that a triangle with positive area is considered front-facing.
/// - [`Clockwise`] specifies that a triangle with negative area is considered front-facing.
///Any triangle which is not front-facing is back-facing, including zero-area
///triangles.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`CmdSetFrontFace`]
/// - [`CmdSetFrontFaceEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFrontFace")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum FrontFace {
    ///[`CounterClockwise`] specifies that a triangle with
    ///positive area is considered front-facing.
    CounterClockwise = 0,
    ///[`Clockwise`] specifies that a triangle with negative
    ///area is considered front-facing.
    Clockwise = 1,
}
impl const Default for FrontFace {
    fn default() -> Self {
        CounterClockwise
    }
}
impl FrontFace {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkBlendFactor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBlendFactor.html) - Framebuffer blending factors
///# C Specifications
///The source and destination color and alpha blending factors are selected
///from the enum:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkBlendFactor {
///    VK_BLEND_FACTOR_ZERO = 0,
///    VK_BLEND_FACTOR_ONE = 1,
///    VK_BLEND_FACTOR_SRC_COLOR = 2,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
///    VK_BLEND_FACTOR_DST_COLOR = 4,
///    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
///    VK_BLEND_FACTOR_SRC_ALPHA = 6,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
///    VK_BLEND_FACTOR_DST_ALPHA = 8,
///    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
///    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
///    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
///    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
///    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
///    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
///    VK_BLEND_FACTOR_SRC1_COLOR = 15,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
///    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
///} VkBlendFactor;
///```
///# Description
///The semantics of the enum values are described in the table below:In this table, the following
/// conventions are used:
/// - R<sub>s0</sub>,G<sub>s0</sub>,B<sub>s0</sub> and A<sub>s0</sub> represent the first source
///   color R, G, B, and A components, respectively, for the fragment output location corresponding
///   to the color attachment being blended.
/// - R<sub>s1</sub>,G<sub>s1</sub>,B<sub>s1</sub> and A<sub>s1</sub> represent the second source
///   color R, G, B, and A components, respectively, used in dual source blending modes, for the
///   fragment output location corresponding to the color attachment being blended.
/// - R<sub>d</sub>,G<sub>d</sub>,B<sub>d</sub> and A<sub>d</sub> represent the R, G, B, and A
///   components of the destination color. That is, the color currently in the corresponding color
///   attachment for this fragment/sample.
/// - R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub> and A<sub>c</sub> represent the blend constant R, G,
///   B, and A components, respectively.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineColorBlendAttachmentState`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBlendFactor")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum BlendFactor {
    ///No documentation found
    Zero = 0,
    ///No documentation found
    One = 1,
    ///No documentation found
    SrcColor = 2,
    ///No documentation found
    OneMinusSrcColor = 3,
    ///No documentation found
    DstColor = 4,
    ///No documentation found
    OneMinusDstColor = 5,
    ///No documentation found
    SrcAlpha = 6,
    ///No documentation found
    OneMinusSrcAlpha = 7,
    ///No documentation found
    DstAlpha = 8,
    ///No documentation found
    OneMinusDstAlpha = 9,
    ///No documentation found
    ConstantColor = 10,
    ///No documentation found
    OneMinusConstantColor = 11,
    ///No documentation found
    ConstantAlpha = 12,
    ///No documentation found
    OneMinusConstantAlpha = 13,
    ///No documentation found
    SrcAlphaSaturate = 14,
    ///No documentation found
    Src1Color = 15,
    ///No documentation found
    OneMinusSrc1Color = 16,
    ///No documentation found
    Src1Alpha = 17,
    ///No documentation found
    OneMinusSrc1Alpha = 18,
}
impl const Default for BlendFactor {
    fn default() -> Self {
        Zero
    }
}
impl BlendFactor {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkBlendOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBlendOp.html) - Framebuffer blending operations
///# C Specifications
///Once the source and destination blend factors have been selected, they along
///with the source and destination components are passed to the blending
///operations.
///RGB and alpha components **can** use different operations.
///Possible values of [`BlendOp`], specifying the operations, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkBlendOp {
///    VK_BLEND_OP_ADD = 0,
///    VK_BLEND_OP_SUBTRACT = 1,
///    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
///    VK_BLEND_OP_MIN = 3,
///    VK_BLEND_OP_MAX = 4,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_ZERO_EXT = 1000148000,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_EXT = 1000148001,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_EXT = 1000148002,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_IN_EXT = 1000148006,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_XOR_EXT = 1000148011,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SCREEN_EXT = 1000148013,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DARKEN_EXT = 1000148015,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_INVERT_EXT = 1000148023,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_EXT = 1000148035,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_MINUS_EXT = 1000148039,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_RED_EXT = 1000148043,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_GREEN_EXT = 1000148044,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_BLUE_EXT = 1000148045,
///} VkBlendOp;
///```
///# Description
///The semantics of the basic blend operations are described in the table
///below:In this table, the following conventions are used:
/// - R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub> and A<sub>s0</sub> represent the first source
///   color R, G, B, and A components, respectively.
/// - R<sub>d</sub>, G<sub>d</sub>, B<sub>d</sub> and A<sub>d</sub> represent the R, G, B, and A
///   components of the destination color. That is, the color currently in the corresponding color
///   attachment for this fragment/sample.
/// - S<sub>r</sub>, S<sub>g</sub>, S<sub>b</sub> and S<sub>a</sub> represent the source blend
///   factor R, G, B, and A components, respectively.
/// - D<sub>r</sub>, D<sub>g</sub>, D<sub>b</sub> and D<sub>a</sub> represent the destination blend
///   factor R, G, B, and A components, respectively.
///The blending operation produces a new set of values R, G, B and
///A, which are written to the framebuffer attachment.
///If blending is not enabled for this attachment, then R, G, B and
///A are assigned R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub> and A<sub>s0</sub>,
///respectively.If the color attachment is fixed-point, the components of the source and
///destination values and blend factors are each clamped to [0,1] or
///[-1,1] respectively for an unsigned normalized or signed normalized
///color attachment prior to evaluating the blend operations.
///If the color attachment is floating-point, no clamping occurs.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineColorBlendAttachmentState`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBlendOp")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum BlendOp {
    ///No documentation found
    Add = 0,
    ///No documentation found
    Subtract = 1,
    ///No documentation found
    ReverseSubtract = 2,
    ///No documentation found
    Min = 3,
    ///No documentation found
    Max = 4,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    ZeroExt = 1000148000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    SrcExt = 1000148001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DstExt = 1000148002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    SrcOverExt = 1000148003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DstOverExt = 1000148004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    SrcInExt = 1000148005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DstInExt = 1000148006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    SrcOutExt = 1000148007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DstOutExt = 1000148008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    SrcAtopExt = 1000148009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DstAtopExt = 1000148010,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    XorExt = 1000148011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    MultiplyExt = 1000148012,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    ScreenExt = 1000148013,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    OverlayExt = 1000148014,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DarkenExt = 1000148015,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    LightenExt = 1000148016,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    ColordodgeExt = 1000148017,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    ColorburnExt = 1000148018,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    HardlightExt = 1000148019,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    SoftlightExt = 1000148020,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    DifferenceExt = 1000148021,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    ExclusionExt = 1000148022,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    InvertExt = 1000148023,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    InvertRgbExt = 1000148024,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    LineardodgeExt = 1000148025,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    LinearburnExt = 1000148026,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    VividlightExt = 1000148027,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    LinearlightExt = 1000148028,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PinlightExt = 1000148029,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    HardmixExt = 1000148030,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    HslHueExt = 1000148031,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    HslSaturationExt = 1000148032,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    HslColorExt = 1000148033,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    HslLuminosityExt = 1000148034,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PlusExt = 1000148035,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PlusClampedExt = 1000148036,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PlusClampedAlphaExt = 1000148037,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PlusDarkerExt = 1000148038,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    MinusExt = 1000148039,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    MinusClampedExt = 1000148040,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    ContrastExt = 1000148041,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    InvertOvgExt = 1000148042,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    RedExt = 1000148043,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    GreenExt = 1000148044,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    BlueExt = 1000148045,
}
impl const Default for BlendOp {
    fn default() -> Self {
        Add
    }
}
impl BlendOp {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkStencilOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkStencilOp.html) - Stencil comparison function
///# C Specifications
///Possible values of the `failOp`, `passOp`, and `depthFailOp`
///members of [`StencilOpState`], specifying what happens to the stored
///stencil value if this or certain subsequent tests fail or pass, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkStencilOp {
///    VK_STENCIL_OP_KEEP = 0,
///    VK_STENCIL_OP_ZERO = 1,
///    VK_STENCIL_OP_REPLACE = 2,
///    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
///    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
///    VK_STENCIL_OP_INVERT = 5,
///    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
///    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
///} VkStencilOp;
///```
///# Description
/// - [`Keep`] keeps the current value.
/// - [`Zero`] sets the value to 0.
/// - [`Replace`] sets the value to `reference`.
/// - [`IncrementAndClamp`] increments the current value and clamps to the maximum representable
///   unsigned value.
/// - [`DecrementAndClamp`] decrements the current value and clamps to 0.
/// - [`Invert`] bitwise-inverts the current value.
/// - [`IncrementAndWrap`] increments the current value and wraps to 0 when the maximum value would
///   have been exceeded.
/// - [`DecrementAndWrap`] decrements the current value and wraps to the maximum possible value when
///   the value would go below 0.
///For purposes of increment and decrement, the stencil bits are considered as
///an unsigned integer.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`StencilOpState`]
/// - [`CmdSetStencilOp`]
/// - [`CmdSetStencilOpEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkStencilOp")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum StencilOp {
    ///[`Keep`] keeps the current value.
    Keep = 0,
    ///[`Zero`] sets the value to 0.
    Zero = 1,
    ///[`Replace`] sets the value to `reference`.
    Replace = 2,
    ///[`IncrementAndClamp`] increments the current value and
    ///clamps to the maximum representable unsigned value.
    IncrementAndClamp = 3,
    ///[`DecrementAndClamp`] decrements the current value and
    ///clamps to 0.
    DecrementAndClamp = 4,
    ///[`Invert`] bitwise-inverts the current value.
    Invert = 5,
    ///[`IncrementAndWrap`] increments the current value and
    ///wraps to 0 when the maximum value would have been exceeded.
    IncrementAndWrap = 6,
    ///[`DecrementAndWrap`] decrements the current value and
    ///wraps to the maximum possible value when the value would go below 0.
    DecrementAndWrap = 7,
}
impl const Default for StencilOp {
    fn default() -> Self {
        Keep
    }
}
impl StencilOp {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkLogicOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkLogicOp.html) - Framebuffer logical operations
///# C Specifications
///Logical operations are controlled by the `logicOpEnable` and
///`logicOp` members of [`PipelineColorBlendStateCreateInfo`].
///It can also be controlled by [`CmdSetLogicOpEXT`] if graphics pipeline
///is created with `VK_DYNAMIC_STATE_LOGIC_OP_EXT` set in
///[`PipelineDynamicStateCreateInfo::p_dynamic_states`].
///If `logicOpEnable` is [`TRUE`], then a logical operation selected
///by `logicOp` is applied between each color attachment and the fragment’s
///corresponding output value, and blending of all attachments is treated as if
///it were disabled.
///Any attachments using color formats for which logical operations are not
///supported simply pass through the color values unmodified.
///The logical operation is applied independently for each of the red, green,
///blue, and alpha components.
///The `logicOp` is selected from the following operations:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkLogicOp {
///    VK_LOGIC_OP_CLEAR = 0,
///    VK_LOGIC_OP_AND = 1,
///    VK_LOGIC_OP_AND_REVERSE = 2,
///    VK_LOGIC_OP_COPY = 3,
///    VK_LOGIC_OP_AND_INVERTED = 4,
///    VK_LOGIC_OP_NO_OP = 5,
///    VK_LOGIC_OP_XOR = 6,
///    VK_LOGIC_OP_OR = 7,
///    VK_LOGIC_OP_NOR = 8,
///    VK_LOGIC_OP_EQUIVALENT = 9,
///    VK_LOGIC_OP_INVERT = 10,
///    VK_LOGIC_OP_OR_REVERSE = 11,
///    VK_LOGIC_OP_COPY_INVERTED = 12,
///    VK_LOGIC_OP_OR_INVERTED = 13,
///    VK_LOGIC_OP_NAND = 14,
///    VK_LOGIC_OP_SET = 15,
///} VkLogicOp;
///```
///# Description
///The logical operations supported by Vulkan are summarized in the following
///table in which
/// - ¬ is bitwise invert,
/// - ∧ is bitwise and,
/// - ∨ is bitwise or,
/// - ⊕ is bitwise exclusive or,
/// - s is the fragment’s R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub> or A<sub>s0</sub> component
///   value for the fragment output corresponding to the color attachment being updated, and
/// - d is the color attachment’s R, G, B or A component value:
///The result of the logical operation is then written to the color attachment
///as controlled by the component write mask, described in
///[Blend Operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blendoperations).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`CmdSetLogicOpEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkLogicOp")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum LogicOp {
    ///No documentation found
    Clear = 0,
    ///No documentation found
    And = 1,
    ///No documentation found
    AndReverse = 2,
    ///No documentation found
    Copy = 3,
    ///No documentation found
    AndInverted = 4,
    ///No documentation found
    NoOp = 5,
    ///No documentation found
    Xor = 6,
    ///No documentation found
    Or = 7,
    ///No documentation found
    Nor = 8,
    ///No documentation found
    Equivalent = 9,
    ///No documentation found
    Invert = 10,
    ///No documentation found
    OrReverse = 11,
    ///No documentation found
    CopyInverted = 12,
    ///No documentation found
    OrInverted = 13,
    ///No documentation found
    Nand = 14,
    ///No documentation found
    Set = 15,
}
impl const Default for LogicOp {
    fn default() -> Self {
        Clear
    }
}
impl LogicOp {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkInternalAllocationType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkInternalAllocationType.html) - Allocation type
///# C Specifications
///The `allocationType` parameter to the `pfnInternalAllocation` and
///`pfnInternalFree` functions **may** be one of the following values:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkInternalAllocationType {
///    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
///} VkInternalAllocationType;
///```
///# Description
/// - [`Executable`] specifies that the allocation is intended for execution by the host.
///# Related
/// - [`PFNInternalAllocationNotification`]
/// - [`PFNInternalFreeNotification`]
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkInternalAllocationType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum InternalAllocationType {
    ///[`Executable`] specifies that the
    ///allocation is intended for execution by the host.
    Executable = 0,
}
impl const Default for InternalAllocationType {
    fn default() -> Self {
        Executable
    }
}
impl InternalAllocationType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkSystemAllocationScope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSystemAllocationScope.html) - Allocation scope
///# C Specifications
///Each allocation has an *allocation scope* defining its lifetime and which
///object it is associated with.
///Possible values passed to the `allocationScope` parameter of the
///callback functions specified by [`AllocationCallbacks`], indicating the
///allocation scope, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSystemAllocationScope {
///    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
///    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
///    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
///    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
///    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
///} VkSystemAllocationScope;
///```
///# Description
/// - [`Command`] specifies that the allocation is scoped to the duration of the Vulkan command.
/// - [`Object`] specifies that the allocation is scoped to the lifetime of the Vulkan object that
///   is being created or used.
/// - [`Cache`] specifies that the allocation is scoped to the lifetime of a [`PipelineCache`] or
///   [`ValidationCacheEXT`] object.
/// - [`Device`] specifies that the allocation is scoped to the lifetime of the Vulkan device.
/// - [`Instance`] specifies that the allocation is scoped to the lifetime of the Vulkan instance.
///Most Vulkan commands operate on a single object, or there is a sole object
///that is being created or manipulated.
///When an allocation uses an allocation scope of
///[`Object`] or
///[`Cache`], the allocation is scoped to the
///object being created or manipulated.When an implementation requires host memory, it will make
/// callbacks to the
///application using the most specific allocator and allocation scope
///available:
/// - If an allocation is scoped to the duration of a command, the allocator will use the
///   [`Command`] allocation scope. The most specific allocator available is used: if the object
///   being created or manipulated has an allocator, that object’s allocator will be used, else if
///   the parent [`Device`] has an allocator it will be used, else if the parent [`Instance`] has an
///   allocator it will be used. Else,
/// - If an allocation is associated with a [`ValidationCacheEXT`] or [`PipelineCache`] object, the
///   allocator will use the [`Cache`] allocation scope. The most specific allocator available is
///   used (cache, else device, else instance). Else,
/// - If an allocation is scoped to the lifetime of an object, that object is being created or
///   manipulated by the command, and that object’s type is not [`Device`] or [`Instance`], the
///   allocator will use an allocation scope of [`Object`]. The most specific allocator available is
///   used (object, else device, else instance). Else,
/// - If an allocation is scoped to the lifetime of a device, the allocator will use an allocation
///   scope of [`Device`]. The most specific allocator available is used (device, else instance).
///   Else,
/// - If the allocation is scoped to the lifetime of an instance and the instance has an allocator,
///   its allocator will be used with an allocation scope of [`Instance`].
/// - Otherwise an implementation will allocate memory through an alternative mechanism that is
///   unspecified.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AllocationCallbacks`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSystemAllocationScope")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum SystemAllocationScope {
    ///[`Command`] specifies that the allocation
    ///is scoped to the duration of the Vulkan command.
    Command = 0,
    ///[`Object`] specifies that the allocation is
    ///scoped to the lifetime of the Vulkan object that is being created or
    ///used.
    Object = 1,
    ///[`Cache`] specifies that the allocation is
    ///scoped to the lifetime of a [`PipelineCache`]
    ///or [`ValidationCacheEXT`]
    ///object.
    Cache = 2,
    ///[`Device`] specifies that the allocation is
    ///scoped to the lifetime of the Vulkan device.
    Device = 3,
    ///[`Instance`] specifies that the allocation
    ///is scoped to the lifetime of the Vulkan instance.
    Instance = 4,
}
impl const Default for SystemAllocationScope {
    fn default() -> Self {
        Command
    }
}
impl SystemAllocationScope {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkPhysicalDeviceType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceType.html) - Supported physical device types
///# C Specifications
///The physical device types which **may** be returned in
///[`PhysicalDeviceProperties::device_type`] are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPhysicalDeviceType {
///    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
///    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
///    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
///    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
///    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
///} VkPhysicalDeviceType;
///```
///# Description
/// - [`Other`] - the device does not match any other available types.
/// - [`IntegratedGpu`] - the device is typically one embedded in or tightly coupled with the host.
/// - [`DiscreteGpu`] - the device is typically a separate processor connected to the host via an
///   interlink.
/// - [`VirtualGpu`] - the device is typically a virtual node in a virtualization environment.
/// - [`Cpu`] - the device is typically running on the same processors as the host.
///The physical device type is advertised for informational purposes only, and
///does not directly affect the operation of the system.
///However, the device type **may** correlate with other advertised properties or
///capabilities of the system, such as how many memory heaps there are.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PhysicalDeviceProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPhysicalDeviceType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum PhysicalDeviceType {
    ///[`Other`] - the device does not match any
    ///other available types.
    Other = 0,
    ///[`IntegratedGpu`] - the device is typically
    ///one embedded in or tightly coupled with the host.
    IntegratedGpu = 1,
    ///[`DiscreteGpu`] - the device is typically a
    ///separate processor connected to the host via an interlink.
    DiscreteGpu = 2,
    ///[`VirtualGpu`] - the device is typically a
    ///virtual node in a virtualization environment.
    VirtualGpu = 3,
    ///[`Cpu`] - the device is typically running on
    ///the same processors as the host.
    Cpu = 4,
}
impl const Default for PhysicalDeviceType {
    fn default() -> Self {
        Other
    }
}
impl PhysicalDeviceType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkVertexInputRate](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVertexInputRate.html) - Specify rate at which vertex attributes are pulled from buffers
///# C Specifications
///Possible values of [`VertexInputBindingDescription::input_rate`],
///specifying the rate at which vertex attributes are pulled from buffers, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkVertexInputRate {
///    VK_VERTEX_INPUT_RATE_VERTEX = 0,
///    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
///} VkVertexInputRate;
///```
///# Description
/// - [`Vertex`] specifies that vertex attribute addressing is a function of the vertex index.
/// - [`Instance`] specifies that vertex attribute addressing is a function of the instance index.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`VertexInputBindingDescription`]
/// - [`VertexInputBindingDescription2EXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkVertexInputRate")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum VertexInputRate {
    ///[`Vertex`] specifies that vertex attribute
    ///addressing is a function of the vertex index.
    Vertex = 0,
    ///[`Instance`] specifies that vertex attribute
    ///addressing is a function of the instance index.
    Instance = 1,
}
impl const Default for VertexInputRate {
    fn default() -> Self {
        Vertex
    }
}
impl VertexInputRate {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkFormat](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFormat.html) - Available image formats
///# C Specifications
///The following image formats **can** be passed to, and **may** be returned from
///Vulkan commands.
///The memory required to store each format is discussed with that format, and
///also summarized in the [Representation and Texel Block
///Size](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#texel-block-size) section and the [Compatible formats](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility) table.
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkFormat {
///    VK_FORMAT_UNDEFINED = 0,
///    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
///    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
///    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
///    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
///    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
///    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
///    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
///    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
///    VK_FORMAT_R8_UNORM = 9,
///    VK_FORMAT_R8_SNORM = 10,
///    VK_FORMAT_R8_USCALED = 11,
///    VK_FORMAT_R8_SSCALED = 12,
///    VK_FORMAT_R8_UINT = 13,
///    VK_FORMAT_R8_SINT = 14,
///    VK_FORMAT_R8_SRGB = 15,
///    VK_FORMAT_R8G8_UNORM = 16,
///    VK_FORMAT_R8G8_SNORM = 17,
///    VK_FORMAT_R8G8_USCALED = 18,
///    VK_FORMAT_R8G8_SSCALED = 19,
///    VK_FORMAT_R8G8_UINT = 20,
///    VK_FORMAT_R8G8_SINT = 21,
///    VK_FORMAT_R8G8_SRGB = 22,
///    VK_FORMAT_R8G8B8_UNORM = 23,
///    VK_FORMAT_R8G8B8_SNORM = 24,
///    VK_FORMAT_R8G8B8_USCALED = 25,
///    VK_FORMAT_R8G8B8_SSCALED = 26,
///    VK_FORMAT_R8G8B8_UINT = 27,
///    VK_FORMAT_R8G8B8_SINT = 28,
///    VK_FORMAT_R8G8B8_SRGB = 29,
///    VK_FORMAT_B8G8R8_UNORM = 30,
///    VK_FORMAT_B8G8R8_SNORM = 31,
///    VK_FORMAT_B8G8R8_USCALED = 32,
///    VK_FORMAT_B8G8R8_SSCALED = 33,
///    VK_FORMAT_B8G8R8_UINT = 34,
///    VK_FORMAT_B8G8R8_SINT = 35,
///    VK_FORMAT_B8G8R8_SRGB = 36,
///    VK_FORMAT_R8G8B8A8_UNORM = 37,
///    VK_FORMAT_R8G8B8A8_SNORM = 38,
///    VK_FORMAT_R8G8B8A8_USCALED = 39,
///    VK_FORMAT_R8G8B8A8_SSCALED = 40,
///    VK_FORMAT_R8G8B8A8_UINT = 41,
///    VK_FORMAT_R8G8B8A8_SINT = 42,
///    VK_FORMAT_R8G8B8A8_SRGB = 43,
///    VK_FORMAT_B8G8R8A8_UNORM = 44,
///    VK_FORMAT_B8G8R8A8_SNORM = 45,
///    VK_FORMAT_B8G8R8A8_USCALED = 46,
///    VK_FORMAT_B8G8R8A8_SSCALED = 47,
///    VK_FORMAT_B8G8R8A8_UINT = 48,
///    VK_FORMAT_B8G8R8A8_SINT = 49,
///    VK_FORMAT_B8G8R8A8_SRGB = 50,
///    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
///    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
///    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
///    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
///    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
///    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
///    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
///    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
///    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
///    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
///    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
///    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
///    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
///    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
///    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
///    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
///    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
///    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
///    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
///    VK_FORMAT_R16_UNORM = 70,
///    VK_FORMAT_R16_SNORM = 71,
///    VK_FORMAT_R16_USCALED = 72,
///    VK_FORMAT_R16_SSCALED = 73,
///    VK_FORMAT_R16_UINT = 74,
///    VK_FORMAT_R16_SINT = 75,
///    VK_FORMAT_R16_SFLOAT = 76,
///    VK_FORMAT_R16G16_UNORM = 77,
///    VK_FORMAT_R16G16_SNORM = 78,
///    VK_FORMAT_R16G16_USCALED = 79,
///    VK_FORMAT_R16G16_SSCALED = 80,
///    VK_FORMAT_R16G16_UINT = 81,
///    VK_FORMAT_R16G16_SINT = 82,
///    VK_FORMAT_R16G16_SFLOAT = 83,
///    VK_FORMAT_R16G16B16_UNORM = 84,
///    VK_FORMAT_R16G16B16_SNORM = 85,
///    VK_FORMAT_R16G16B16_USCALED = 86,
///    VK_FORMAT_R16G16B16_SSCALED = 87,
///    VK_FORMAT_R16G16B16_UINT = 88,
///    VK_FORMAT_R16G16B16_SINT = 89,
///    VK_FORMAT_R16G16B16_SFLOAT = 90,
///    VK_FORMAT_R16G16B16A16_UNORM = 91,
///    VK_FORMAT_R16G16B16A16_SNORM = 92,
///    VK_FORMAT_R16G16B16A16_USCALED = 93,
///    VK_FORMAT_R16G16B16A16_SSCALED = 94,
///    VK_FORMAT_R16G16B16A16_UINT = 95,
///    VK_FORMAT_R16G16B16A16_SINT = 96,
///    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
///    VK_FORMAT_R32_UINT = 98,
///    VK_FORMAT_R32_SINT = 99,
///    VK_FORMAT_R32_SFLOAT = 100,
///    VK_FORMAT_R32G32_UINT = 101,
///    VK_FORMAT_R32G32_SINT = 102,
///    VK_FORMAT_R32G32_SFLOAT = 103,
///    VK_FORMAT_R32G32B32_UINT = 104,
///    VK_FORMAT_R32G32B32_SINT = 105,
///    VK_FORMAT_R32G32B32_SFLOAT = 106,
///    VK_FORMAT_R32G32B32A32_UINT = 107,
///    VK_FORMAT_R32G32B32A32_SINT = 108,
///    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
///    VK_FORMAT_R64_UINT = 110,
///    VK_FORMAT_R64_SINT = 111,
///    VK_FORMAT_R64_SFLOAT = 112,
///    VK_FORMAT_R64G64_UINT = 113,
///    VK_FORMAT_R64G64_SINT = 114,
///    VK_FORMAT_R64G64_SFLOAT = 115,
///    VK_FORMAT_R64G64B64_UINT = 116,
///    VK_FORMAT_R64G64B64_SINT = 117,
///    VK_FORMAT_R64G64B64_SFLOAT = 118,
///    VK_FORMAT_R64G64B64A64_UINT = 119,
///    VK_FORMAT_R64G64B64A64_SINT = 120,
///    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
///    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
///    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
///    VK_FORMAT_D16_UNORM = 124,
///    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
///    VK_FORMAT_D32_SFLOAT = 126,
///    VK_FORMAT_S8_UINT = 127,
///    VK_FORMAT_D16_UNORM_S8_UINT = 128,
///    VK_FORMAT_D24_UNORM_S8_UINT = 129,
///    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
///    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
///    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
///    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
///    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
///    VK_FORMAT_BC2_UNORM_BLOCK = 135,
///    VK_FORMAT_BC2_SRGB_BLOCK = 136,
///    VK_FORMAT_BC3_UNORM_BLOCK = 137,
///    VK_FORMAT_BC3_SRGB_BLOCK = 138,
///    VK_FORMAT_BC4_UNORM_BLOCK = 139,
///    VK_FORMAT_BC4_SNORM_BLOCK = 140,
///    VK_FORMAT_BC5_UNORM_BLOCK = 141,
///    VK_FORMAT_BC5_SNORM_BLOCK = 142,
///    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
///    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
///    VK_FORMAT_BC7_UNORM_BLOCK = 145,
///    VK_FORMAT_BC7_SRGB_BLOCK = 146,
///    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
///    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
///    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
///    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
///    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
///    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
///    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
///    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
///    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
///    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
///    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
///    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
///    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
///    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
///    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
///    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
///    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
///    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
///    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
///    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
///    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
///    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
///    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
///    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
///    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
///    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
///    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
///    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
///    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
///    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
///    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
///    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
///    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
///    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
///    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
///    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
///    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
///    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR =
/// VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR =
/// VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT =
/// VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT =
/// VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
///  // Provided by VK_EXT_4444_formats
///    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
///  // Provided by VK_EXT_4444_formats
///    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
///} VkFormat;
///```
///# Description
/// - [`Undefined`] specifies that the format is not specified.
/// - [`R4G4UnormPack8`] specifies a two-component, 8-bit packed unsigned normalized format that has
///   a 4-bit R component in bits 4..7, and a 4-bit G component in bits 0..3.
/// - [`R4G4B4A4UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 4-bit R component in bits 12..15, a 4-bit G component in bits 8..11, a 4-bit B
///   component in bits 4..7, and a 4-bit A component in bits 0..3.
/// - [`B4G4R4A4UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 4-bit B component in bits 12..15, a 4-bit G component in bits 8..11, a 4-bit R
///   component in bits 4..7, and a 4-bit A component in bits 0..3.
/// - [`A4R4G4B4UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 4-bit A component in bits 12..15, a 4-bit R component in bits 8..11, a 4-bit G
///   component in bits 4..7, and a 4-bit B component in bits 0..3.
/// - [`A4B4G4R4UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 4-bit A component in bits 12..15, a 4-bit B component in bits 8..11, a 4-bit G
///   component in bits 4..7, and a 4-bit R component in bits 0..3.
/// - [`R5G6B5UnormPack16`] specifies a three-component, 16-bit packed unsigned normalized format
///   that has a 5-bit R component in bits 11..15, a 6-bit G component in bits 5..10, and a 5-bit B
///   component in bits 0..4.
/// - [`B5G6R5UnormPack16`] specifies a three-component, 16-bit packed unsigned normalized format
///   that has a 5-bit B component in bits 11..15, a 6-bit G component in bits 5..10, and a 5-bit R
///   component in bits 0..4.
/// - [`R5G5B5A1UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 5-bit R component in bits 11..15, a 5-bit G component in bits 6..10, a 5-bit B
///   component in bits 1..5, and a 1-bit A component in bit 0.
/// - [`B5G5R5A1UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 5-bit B component in bits 11..15, a 5-bit G component in bits 6..10, a 5-bit R
///   component in bits 1..5, and a 1-bit A component in bit 0.
/// - [`A1R5G5B5UnormPack16`] specifies a four-component, 16-bit packed unsigned normalized format
///   that has a 1-bit A component in bit 15, a 5-bit R component in bits 10..14, a 5-bit G
///   component in bits 5..9, and a 5-bit B component in bits 0..4.
/// - [`R8Unorm`] specifies a one-component, 8-bit unsigned normalized format that has a single
///   8-bit R component.
/// - [`R8Snorm`] specifies a one-component, 8-bit signed normalized format that has a single 8-bit
///   R component.
/// - [`R8Uscaled`] specifies a one-component, 8-bit unsigned scaled integer format that has a
///   single 8-bit R component.
/// - [`R8Sscaled`] specifies a one-component, 8-bit signed scaled integer format that has a single
///   8-bit R component.
/// - [`R8Uint`] specifies a one-component, 8-bit unsigned integer format that has a single 8-bit R
///   component.
/// - [`R8Sint`] specifies a one-component, 8-bit signed integer format that has a single 8-bit R
///   component.
/// - [`R8Srgb`] specifies a one-component, 8-bit unsigned normalized format that has a single 8-bit
///   R component stored with sRGB nonlinear encoding.
/// - [`R8G8Unorm`] specifies a two-component, 16-bit unsigned normalized format that has an 8-bit R
///   component in byte 0, and an 8-bit G component in byte 1.
/// - [`R8G8Snorm`] specifies a two-component, 16-bit signed normalized format that has an 8-bit R
///   component in byte 0, and an 8-bit G component in byte 1.
/// - [`R8G8Uscaled`] specifies a two-component, 16-bit unsigned scaled integer format that has an
///   8-bit R component in byte 0, and an 8-bit G component in byte 1.
/// - [`R8G8Sscaled`] specifies a two-component, 16-bit signed scaled integer format that has an
///   8-bit R component in byte 0, and an 8-bit G component in byte 1.
/// - [`R8G8Uint`] specifies a two-component, 16-bit unsigned integer format that has an 8-bit R
///   component in byte 0, and an 8-bit G component in byte 1.
/// - [`R8G8Sint`] specifies a two-component, 16-bit signed integer format that has an 8-bit R
///   component in byte 0, and an 8-bit G component in byte 1.
/// - [`R8G8Srgb`] specifies a two-component, 16-bit unsigned normalized format that has an 8-bit R
///   component stored with sRGB nonlinear encoding in byte 0, and an 8-bit G component stored with
///   sRGB nonlinear encoding in byte 1.
/// - [`R8G8B8Unorm`] specifies a three-component, 24-bit unsigned normalized format that has an
///   8-bit R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte
///   2.
/// - [`R8G8B8Snorm`] specifies a three-component, 24-bit signed normalized format that has an 8-bit
///   R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.
/// - [`R8G8B8Uscaled`] specifies a three-component, 24-bit unsigned scaled format that has an 8-bit
///   R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.
/// - [`R8G8B8Sscaled`] specifies a three-component, 24-bit signed scaled format that has an 8-bit R
///   component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.
/// - [`R8G8B8Uint`] specifies a three-component, 24-bit unsigned integer format that has an 8-bit R
///   component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.
/// - [`R8G8B8Sint`] specifies a three-component, 24-bit signed integer format that has an 8-bit R
///   component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.
/// - [`R8G8B8Srgb`] specifies a three-component, 24-bit unsigned normalized format that has an
///   8-bit R component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored
///   with sRGB nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB nonlinear
///   encoding in byte 2.
/// - [`B8G8R8Unorm`] specifies a three-component, 24-bit unsigned normalized format that has an
///   8-bit B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte
///   2.
/// - [`B8G8R8Snorm`] specifies a three-component, 24-bit signed normalized format that has an 8-bit
///   B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.
/// - [`B8G8R8Uscaled`] specifies a three-component, 24-bit unsigned scaled format that has an 8-bit
///   B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.
/// - [`B8G8R8Sscaled`] specifies a three-component, 24-bit signed scaled format that has an 8-bit B
///   component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.
/// - [`B8G8R8Uint`] specifies a three-component, 24-bit unsigned integer format that has an 8-bit B
///   component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.
/// - [`B8G8R8Sint`] specifies a three-component, 24-bit signed integer format that has an 8-bit B
///   component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.
/// - [`B8G8R8Srgb`] specifies a three-component, 24-bit unsigned normalized format that has an
///   8-bit B component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored
///   with sRGB nonlinear encoding in byte 1, and an 8-bit R component stored with sRGB nonlinear
///   encoding in byte 2.
/// - [`R8G8B8A8Unorm`] specifies a four-component, 32-bit unsigned normalized format that has an
///   8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2,
///   and an 8-bit A component in byte 3.
/// - [`R8G8B8A8Snorm`] specifies a four-component, 32-bit signed normalized format that has an
///   8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2,
///   and an 8-bit A component in byte 3.
/// - [`R8G8B8A8Uscaled`] specifies a four-component, 32-bit unsigned scaled format that has an
///   8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2,
///   and an 8-bit A component in byte 3.
/// - [`R8G8B8A8Sscaled`] specifies a four-component, 32-bit signed scaled format that has an 8-bit
///   R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an
///   8-bit A component in byte 3.
/// - [`R8G8B8A8Uint`] specifies a four-component, 32-bit unsigned integer format that has an 8-bit
///   R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an
///   8-bit A component in byte 3.
/// - [`R8G8B8A8Sint`] specifies a four-component, 32-bit signed integer format that has an 8-bit R
///   component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an
///   8-bit A component in byte 3.
/// - [`R8G8B8A8Srgb`] specifies a four-component, 32-bit unsigned normalized format that has an
///   8-bit R component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored
///   with sRGB nonlinear encoding in byte 1, an 8-bit B component stored with sRGB nonlinear
///   encoding in byte 2, and an 8-bit A component in byte 3.
/// - [`B8G8R8A8Unorm`] specifies a four-component, 32-bit unsigned normalized format that has an
///   8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2,
///   and an 8-bit A component in byte 3.
/// - [`B8G8R8A8Snorm`] specifies a four-component, 32-bit signed normalized format that has an
///   8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2,
///   and an 8-bit A component in byte 3.
/// - [`B8G8R8A8Uscaled`] specifies a four-component, 32-bit unsigned scaled format that has an
///   8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2,
///   and an 8-bit A component in byte 3.
/// - [`B8G8R8A8Sscaled`] specifies a four-component, 32-bit signed scaled format that has an 8-bit
///   B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an
///   8-bit A component in byte 3.
/// - [`B8G8R8A8Uint`] specifies a four-component, 32-bit unsigned integer format that has an 8-bit
///   B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an
///   8-bit A component in byte 3.
/// - [`B8G8R8A8Sint`] specifies a four-component, 32-bit signed integer format that has an 8-bit B
///   component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an
///   8-bit A component in byte 3.
/// - [`B8G8R8A8Srgb`] specifies a four-component, 32-bit unsigned normalized format that has an
///   8-bit B component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored
///   with sRGB nonlinear encoding in byte 1, an 8-bit R component stored with sRGB nonlinear
///   encoding in byte 2, and an 8-bit A component in byte 3.
/// - [`A8B8G8R8UnormPack32`] specifies a four-component, 32-bit packed unsigned normalized format
///   that has an 8-bit A component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
///   component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`A8B8G8R8SnormPack32`] specifies a four-component, 32-bit packed signed normalized format
///   that has an 8-bit A component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
///   component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`A8B8G8R8UscaledPack32`] specifies a four-component, 32-bit packed unsigned scaled integer
///   format that has an 8-bit A component in bits 24..31, an 8-bit B component in bits 16..23, an
///   8-bit G component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`A8B8G8R8SscaledPack32`] specifies a four-component, 32-bit packed signed scaled integer
///   format that has an 8-bit A component in bits 24..31, an 8-bit B component in bits 16..23, an
///   8-bit G component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`A8B8G8R8UintPack32`] specifies a four-component, 32-bit packed unsigned integer format that
///   has an 8-bit A component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
///   component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`A8B8G8R8SintPack32`] specifies a four-component, 32-bit packed signed integer format that
///   has an 8-bit A component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
///   component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`A8B8G8R8SrgbPack32`] specifies a four-component, 32-bit packed unsigned normalized format
///   that has an 8-bit A component in bits 24..31, an 8-bit B component stored with sRGB nonlinear
///   encoding in bits 16..23, an 8-bit G component stored with sRGB nonlinear encoding in bits
///   8..15, and an 8-bit R component stored with sRGB nonlinear encoding in bits 0..7.
/// - [`A2R10G10B10UnormPack32`] specifies a four-component, 32-bit packed unsigned normalized
///   format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a
///   10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`A2R10G10B10SnormPack32`] specifies a four-component, 32-bit packed signed normalized format
///   that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
///   component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`A2R10G10B10UscaledPack32`] specifies a four-component, 32-bit packed unsigned scaled integer
///   format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a
///   10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`A2R10G10B10SscaledPack32`] specifies a four-component, 32-bit packed signed scaled integer
///   format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a
///   10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`A2R10G10B10UintPack32`] specifies a four-component, 32-bit packed unsigned integer format
///   that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
///   component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`A2R10G10B10SintPack32`] specifies a four-component, 32-bit packed signed integer format that
///   has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
///   component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`A2B10G10R10UnormPack32`] specifies a four-component, 32-bit packed unsigned normalized
///   format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a
///   10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`A2B10G10R10SnormPack32`] specifies a four-component, 32-bit packed signed normalized format
///   that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
///   component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`A2B10G10R10UscaledPack32`] specifies a four-component, 32-bit packed unsigned scaled integer
///   format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a
///   10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`A2B10G10R10SscaledPack32`] specifies a four-component, 32-bit packed signed scaled integer
///   format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a
///   10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`A2B10G10R10UintPack32`] specifies a four-component, 32-bit packed unsigned integer format
///   that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
///   component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`A2B10G10R10SintPack32`] specifies a four-component, 32-bit packed signed integer format that
///   has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
///   component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`R16Unorm`] specifies a one-component, 16-bit unsigned normalized format that has a single
///   16-bit R component.
/// - [`R16Snorm`] specifies a one-component, 16-bit signed normalized format that has a single
///   16-bit R component.
/// - [`R16Uscaled`] specifies a one-component, 16-bit unsigned scaled integer format that has a
///   single 16-bit R component.
/// - [`R16Sscaled`] specifies a one-component, 16-bit signed scaled integer format that has a
///   single 16-bit R component.
/// - [`R16Uint`] specifies a one-component, 16-bit unsigned integer format that has a single 16-bit
///   R component.
/// - [`R16Sint`] specifies a one-component, 16-bit signed integer format that has a single 16-bit R
///   component.
/// - [`R16Sfloat`] specifies a one-component, 16-bit signed floating-point format that has a single
///   16-bit R component.
/// - [`R16G16Unorm`] specifies a two-component, 32-bit unsigned normalized format that has a 16-bit
///   R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16Snorm`] specifies a two-component, 32-bit signed normalized format that has a 16-bit R
///   component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16Uscaled`] specifies a two-component, 32-bit unsigned scaled integer format that has a
///   16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16Sscaled`] specifies a two-component, 32-bit signed scaled integer format that has a
///   16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16Uint`] specifies a two-component, 32-bit unsigned integer format that has a 16-bit R
///   component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16Sint`] specifies a two-component, 32-bit signed integer format that has a 16-bit R
///   component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16Sfloat`] specifies a two-component, 32-bit signed floating-point format that has a
///   16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.
/// - [`R16G16B16Unorm`] specifies a three-component, 48-bit unsigned normalized format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component
///   in bytes 4..5.
/// - [`R16G16B16Snorm`] specifies a three-component, 48-bit signed normalized format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component
///   in bytes 4..5.
/// - [`R16G16B16Uscaled`] specifies a three-component, 48-bit unsigned scaled integer format that
///   has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B
///   component in bytes 4..5.
/// - [`R16G16B16Sscaled`] specifies a three-component, 48-bit signed scaled integer format that has
///   a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B
///   component in bytes 4..5.
/// - [`R16G16B16Uint`] specifies a three-component, 48-bit unsigned integer format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component
///   in bytes 4..5.
/// - [`R16G16B16Sint`] specifies a three-component, 48-bit signed integer format that has a 16-bit
///   R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
///   bytes 4..5.
/// - [`R16G16B16Sfloat`] specifies a three-component, 48-bit signed floating-point format that has
///   a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B
///   component in bytes 4..5.
/// - [`R16G16B16A16Unorm`] specifies a four-component, 64-bit unsigned normalized format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in
///   bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R16G16B16A16Snorm`] specifies a four-component, 64-bit signed normalized format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in
///   bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R16G16B16A16Uscaled`] specifies a four-component, 64-bit unsigned scaled integer format that
///   has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B
///   component in bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R16G16B16A16Sscaled`] specifies a four-component, 64-bit signed scaled integer format that
///   has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B
///   component in bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R16G16B16A16Uint`] specifies a four-component, 64-bit unsigned integer format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in
///   bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R16G16B16A16Sint`] specifies a four-component, 64-bit signed integer format that has a
///   16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in
///   bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R16G16B16A16Sfloat`] specifies a four-component, 64-bit signed floating-point format that
///   has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B
///   component in bytes 4..5, and a 16-bit A component in bytes 6..7.
/// - [`R32Uint`] specifies a one-component, 32-bit unsigned integer format that has a single 32-bit
///   R component.
/// - [`R32Sint`] specifies a one-component, 32-bit signed integer format that has a single 32-bit R
///   component.
/// - [`R32Sfloat`] specifies a one-component, 32-bit signed floating-point format that has a single
///   32-bit R component.
/// - [`R32G32Uint`] specifies a two-component, 64-bit unsigned integer format that has a 32-bit R
///   component in bytes 0..3, and a 32-bit G component in bytes 4..7.
/// - [`R32G32Sint`] specifies a two-component, 64-bit signed integer format that has a 32-bit R
///   component in bytes 0..3, and a 32-bit G component in bytes 4..7.
/// - [`R32G32Sfloat`] specifies a two-component, 64-bit signed floating-point format that has a
///   32-bit R component in bytes 0..3, and a 32-bit G component in bytes 4..7.
/// - [`R32G32B32Uint`] specifies a three-component, 96-bit unsigned integer format that has a
///   32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component
///   in bytes 8..11.
/// - [`R32G32B32Sint`] specifies a three-component, 96-bit signed integer format that has a 32-bit
///   R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in
///   bytes 8..11.
/// - [`R32G32B32Sfloat`] specifies a three-component, 96-bit signed floating-point format that has
///   a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B
///   component in bytes 8..11.
/// - [`R32G32B32A32Uint`] specifies a four-component, 128-bit unsigned integer format that has a
///   32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in
///   bytes 8..11, and a 32-bit A component in bytes 12..15.
/// - [`R32G32B32A32Sint`] specifies a four-component, 128-bit signed integer format that has a
///   32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in
///   bytes 8..11, and a 32-bit A component in bytes 12..15.
/// - [`R32G32B32A32Sfloat`] specifies a four-component, 128-bit signed floating-point format that
///   has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B
///   component in bytes 8..11, and a 32-bit A component in bytes 12..15.
/// - [`R64Uint`] specifies a one-component, 64-bit unsigned integer format that has a single 64-bit
///   R component.
/// - [`R64Sint`] specifies a one-component, 64-bit signed integer format that has a single 64-bit R
///   component.
/// - [`R64Sfloat`] specifies a one-component, 64-bit signed floating-point format that has a single
///   64-bit R component.
/// - [`R64G64Uint`] specifies a two-component, 128-bit unsigned integer format that has a 64-bit R
///   component in bytes 0..7, and a 64-bit G component in bytes 8..15.
/// - [`R64G64Sint`] specifies a two-component, 128-bit signed integer format that has a 64-bit R
///   component in bytes 0..7, and a 64-bit G component in bytes 8..15.
/// - [`R64G64Sfloat`] specifies a two-component, 128-bit signed floating-point format that has a
///   64-bit R component in bytes 0..7, and a 64-bit G component in bytes 8..15.
/// - [`R64G64B64Uint`] specifies a three-component, 192-bit unsigned integer format that has a
///   64-bit R component in bytes 0..7, a 64-bit G component in bytes 8..15, and a 64-bit B
///   component in bytes 16..23.
/// - [`R64G64B64Sint`] specifies a three-component, 192-bit signed integer format that has a 64-bit
///   R component in bytes 0..7, a 64-bit G component in bytes 8..15, and a 64-bit B component in
///   bytes 16..23.
/// - [`R64G64B64Sfloat`] specifies a three-component, 192-bit signed floating-point format that has
///   a 64-bit R component in bytes 0..7, a 64-bit G component in bytes 8..15, and a 64-bit B
///   component in bytes 16..23.
/// - [`R64G64B64A64Uint`] specifies a four-component, 256-bit unsigned integer format that has a
///   64-bit R component in bytes 0..7, a 64-bit G component in bytes 8..15, a 64-bit B component in
///   bytes 16..23, and a 64-bit A component in bytes 24..31.
/// - [`R64G64B64A64Sint`] specifies a four-component, 256-bit signed integer format that has a
///   64-bit R component in bytes 0..7, a 64-bit G component in bytes 8..15, a 64-bit B component in
///   bytes 16..23, and a 64-bit A component in bytes 24..31.
/// - [`R64G64B64A64Sfloat`] specifies a four-component, 256-bit signed floating-point format that
///   has a 64-bit R component in bytes 0..7, a 64-bit G component in bytes 8..15, a 64-bit B
///   component in bytes 16..23, and a 64-bit A component in bytes 24..31.
/// - [`B10G11R11UfloatPack32`] specifies a three-component, 32-bit packed unsigned floating-point format that has a 10-bit B component in bits 22..31, an 11-bit G component in bits 11..21, an 11-bit R component in bits 0..10. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11).
/// - [`E5B9G9R9UfloatPack32`] specifies a three-component, 32-bit packed unsigned floating-point
///   format that has a 5-bit shared exponent in bits 27..31, a 9-bit B component mantissa in bits
///   18..26, a 9-bit G component mantissa in bits 9..17, and a 9-bit R component mantissa in bits
///   0..8.
/// - [`D16Unorm`] specifies a one-component, 16-bit unsigned normalized format that has a single
///   16-bit depth component.
/// - [`X8D24UnormPack32`] specifies a two-component, 32-bit format that has 24 unsigned normalized
///   bits in the depth component and, **optionally**, 8 bits that are unused.
/// - [`D32Sfloat`] specifies a one-component, 32-bit signed floating-point format that has 32 bits
///   in the depth component.
/// - [`S8Uint`] specifies a one-component, 8-bit unsigned integer format that has 8 bits in the
///   stencil component.
/// - [`D16UnormS8Uint`] specifies a two-component, 24-bit format that has 16 unsigned normalized
///   bits in the depth component and 8 unsigned integer bits in the stencil component.
/// - [`D24UnormS8Uint`] specifies a two-component, 32-bit packed format that has 8 unsigned integer
///   bits in the stencil component, and 24 unsigned normalized bits in the depth component.
/// - [`D32SfloatS8Uint`] specifies a two-component format that has 32 signed float bits in the
///   depth component and 8 unsigned integer bits in the stencil component. There are **optionally**
///   24 bits that are unused.
/// - [`Bc1RgbUnormBlock`] specifies a three-component, block-compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data. This
///   format has no alpha and is considered opaque.
/// - [`Bc1RgbSrgbBlock`] specifies a three-component, block-compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///   nonlinear encoding. This format has no alpha and is considered opaque.
/// - [`Bc1RgbaUnormBlock`] specifies a four-component, block-compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data, and
///   provides 1 bit of alpha.
/// - [`Bc1RgbaSrgbBlock`] specifies a four-component, block-compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///   nonlinear encoding, and provides 1 bit of alpha.
/// - [`Bc2UnormBlock`] specifies a four-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the
///   first 64 bits encoding alpha values followed by 64 bits encoding RGB values.
/// - [`Bc2SrgbBlock`] specifies a four-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the
///   first 64 bits encoding alpha values followed by 64 bits encoding RGB values with sRGB
///   nonlinear encoding.
/// - [`Bc3UnormBlock`] specifies a four-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the
///   first 64 bits encoding alpha values followed by 64 bits encoding RGB values.
/// - [`Bc3SrgbBlock`] specifies a four-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the
///   first 64 bits encoding alpha values followed by 64 bits encoding RGB values with sRGB
///   nonlinear encoding.
/// - [`Bc4UnormBlock`] specifies a one-component, block-compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized red texel data.
/// - [`Bc4SnormBlock`] specifies a one-component, block-compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of signed normalized red texel data.
/// - [`Bc5UnormBlock`] specifies a two-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RG texel data with the
///   first 64 bits encoding red values followed by 64 bits encoding green values.
/// - [`Bc5SnormBlock`] specifies a two-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of signed normalized RG texel data with the
///   first 64 bits encoding red values followed by 64 bits encoding green values.
/// - [`Bc6HUfloatBlock`] specifies a three-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned floating-point RGB texel data.
/// - [`Bc6HSfloatBlock`] specifies a three-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of signed floating-point RGB texel data.
/// - [`Bc7UnormBlock`] specifies a four-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Bc7SrgbBlock`] specifies a four-component, block-compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Etc2R8G8B8UnormBlock`] specifies a three-component, ETC2 compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data. This
///   format has no alpha and is considered opaque.
/// - [`Etc2R8G8B8SrgbBlock`] specifies a three-component, ETC2 compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///   nonlinear encoding. This format has no alpha and is considered opaque.
/// - [`Etc2R8G8B8A1UnormBlock`] specifies a four-component, ETC2 compressed format where each
///   64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data,
///   and provides 1 bit of alpha.
/// - [`Etc2R8G8B8A1SrgbBlock`] specifies a four-component, ETC2 compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///   nonlinear encoding, and provides 1 bit of alpha.
/// - [`Etc2R8G8B8A8UnormBlock`] specifies a four-component, ETC2 compressed format where each
///   128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///   with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values.
/// - [`Etc2R8G8B8A8SrgbBlock`] specifies a four-component, ETC2 compressed format where each
///   128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///   with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values with sRGB
///   nonlinear encoding applied.
/// - [`EacR11UnormBlock`] specifies a one-component, ETC2 compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized red texel data.
/// - [`EacR11SnormBlock`] specifies a one-component, ETC2 compressed format where each 64-bit
///   compressed texel block encodes a 4×4 rectangle of signed normalized red texel data.
/// - [`EacR11G11UnormBlock`] specifies a two-component, ETC2 compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RG texel data with the
///   first 64 bits encoding red values followed by 64 bits encoding green values.
/// - [`EacR11G11SnormBlock`] specifies a two-component, ETC2 compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of signed normalized RG texel data with the
///   first 64 bits encoding red values followed by 64 bits encoding green values.
/// - [`Astc4X4UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc4X4SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc4X4SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 4×4 rectangle of signed floating-point RGBA texel data.
/// - [`Astc5X4UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 5×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc5X4SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 5×4 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc5X4SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 5×4 rectangle of signed floating-point RGBA texel data.
/// - [`Astc5X5UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 5×5 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc5X5SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 5×5 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc5X5SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 5×5 rectangle of signed floating-point RGBA texel data.
/// - [`Astc6X5UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 6×5 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc6X5SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 6×5 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc6X5SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 6×5 rectangle of signed floating-point RGBA texel data.
/// - [`Astc6X6UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 6×6 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc6X6SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 6×6 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc6X6SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 6×6 rectangle of signed floating-point RGBA texel data.
/// - [`Astc8X5UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes an 8×5 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc8X5SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes an 8×5 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc8X5SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 8×5 rectangle of signed floating-point RGBA texel data.
/// - [`Astc8X6UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes an 8×6 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc8X6SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes an 8×6 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc8X6SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 8×6 rectangle of signed floating-point RGBA texel data.
/// - [`Astc8X8UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes an 8×8 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc8X8SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes an 8×8 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc8X8SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 8×8 rectangle of signed floating-point RGBA texel data.
/// - [`Astc10X5UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×5 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc10X5SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×5 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc10X5SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×5 rectangle of signed floating-point RGBA texel data.
/// - [`Astc10X6UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×6 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc10X6SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×6 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc10X6SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×6 rectangle of signed floating-point RGBA texel data.
/// - [`Astc10X8UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×8 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc10X8SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×8 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc10X8SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×8 rectangle of signed floating-point RGBA texel data.
/// - [`Astc10X10UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×10 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc10X10SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×10 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc10X10SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 10×10 rectangle of signed floating-point RGBA texel data.
/// - [`Astc12X10UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 12×10 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc12X10SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 12×10 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc12X10SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 12×10 rectangle of signed floating-point RGBA texel data.
/// - [`Astc12X12UnormBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 12×12 rectangle of unsigned normalized RGBA texel data.
/// - [`Astc12X12SrgbBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 12×12 rectangle of unsigned normalized RGBA texel data with
///   sRGB nonlinear encoding applied to the RGB components.
/// - [`Astc12X12SfloatBlock`] specifies a four-component, ASTC compressed format where each 128-bit
///   compressed texel block encodes a 12×12 rectangle of signed floating-point RGBA texel data.
/// - [`G8B8G8R8422Unorm`] specifies a four-component, 32-bit format containing a pair of G
///   components, an R component, and a B component, collectively encoding a 2×1 rectangle of
///   unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the B
///   and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has an 8-bit G component for the even *i* coordinate in byte 0, an
///   8-bit B component in byte 1, an 8-bit G component for the odd *i* coordinate in byte 2, and an
///   8-bit R component in byte 3. This format only supports images with a width that is a multiple
///   of two. For the purposes of the constraints on copy extents, this format is treated as a
///   compressed format with a 2×1 compressed texel block.
/// - [`B8G8R8G8422Unorm`] specifies a four-component, 32-bit format containing a pair of G
///   components, an R component, and a B component, collectively encoding a 2×1 rectangle of
///   unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the B
///   and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has an 8-bit B component in byte 0, an 8-bit G component for the
///   even *i* coordinate in byte 1, an 8-bit R component in byte 2, and an 8-bit G component for
///   the odd *i* coordinate in byte 3. This format only supports images with a width that is a
///   multiple of two. For the purposes of the constraints on copy extents, this format is treated
///   as a compressed format with a 2×1 compressed texel block.
/// - [`G8B8R83Plane420Unorm`] specifies an unsigned normalized *multi-planar format* that has an
///   8-bit G component in plane 0, an 8-bit B component in plane 1, and an 8-bit R component in
///   plane 2. The horizontal and vertical dimensions of the R and B planes are halved relative to
///   the image dimensions, and each R and B component is shared with the G components for which
///   <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
///   style="top:0em;">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
///   and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
///   delimcenter">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width and height that is a multiple of two.
/// - [`G8B8R82Plane420Unorm`] specifies an unsigned normalized *multi-planar format* that has an
///   8-bit G component in plane 0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
///   component in byte 0 and an 8-bit R component in byte 1. The horizontal and vertical dimensions
///   of the BR plane are halved relative to the image dimensions, and each R and B value is shared
///   with the G components for which <span class="katex"><span class="katex-html"
///   aria-hidden="true"><span class="base"><span class="strut"
///   style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
///   delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   class="mspace" style="margin-right:0.2222222222222222em;"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
///   class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   class="mspace" style="margin-right:0.2222222222222222em;"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   and height that is a multiple of two.
/// - [`G8B8R83Plane422Unorm`] specifies an unsigned normalized *multi-planar format* that has an
///   8-bit G component in plane 0, an 8-bit B component in plane 1, and an 8-bit R component in
///   plane 2. The horizontal dimension of the R and B plane is halved relative to the image
///   dimensions, and each R and B value is shared with the G components for which <span
///   class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
///   delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width that is a multiple of two.
/// - [`G8B8R82Plane422Unorm`] specifies an unsigned normalized *multi-planar format* that has an
///   8-bit G component in plane 0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
///   component in byte 0 and an 8-bit R component in byte 1. The horizontal dimension of the BR
///   plane is halved relative to the image dimensions, and each R and B value is shared with the G
///   components for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
///   class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
///   class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span
///   style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   that is a multiple of two.
/// - [`G8B8R83Plane444Unorm`] specifies an unsigned normalized *multi-planar format* that has an
///   8-bit G component in plane 0, an 8-bit B component in plane 1, and an 8-bit R component in
///   plane 2. Each plane has the same dimensions and each R, G and B component contributes to a
///   single texel. The location of each plane when this image is in linear layout can be determined
///   via [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane.
/// - [`R10X6UnormPack16`] specifies a one-component, 16-bit unsigned normalized format that has a
///   single 10-bit R component in the top 10 bits of a 16-bit word, with the bottom 6 bits unused.
/// - [`R10X6G10X6Unorm2Pack16`] specifies a two-component, 32-bit unsigned normalized format that
///   has a 10-bit R component in the top 10 bits of the word in bytes 0..1, and a 10-bit G
///   component in the top 10 bits of the word in bytes 2..3, with the bottom 6 bits of each word
///   unused.
/// - [`R10X6G10X6B10X6A10X6Unorm4Pack16`] specifies a four-component, 64-bit unsigned normalized
///   format that has a 10-bit R component in the top 10 bits of the word in bytes 0..1, a 10-bit G
///   component in the top 10 bits of the word in bytes 2..3, a 10-bit B component in the top 10
///   bits of the word in bytes 4..5, and a 10-bit A component in the top 10 bits of the word in
///   bytes 6..7, with the bottom 6 bits of each word unused.
/// - [`G10X6B10X6G10X6R10X6422Unorm4Pack16`] specifies a four-component, 64-bit format containing a
///   pair of G components, an R component, and a B component, collectively encoding a 2×1 rectangle
///   of unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the
///   B and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has a 10-bit G component for the even *i* coordinate in the top 10
///   bits of the word in bytes 0..1, a 10-bit B component in the top 10 bits of the word in bytes
///   2..3, a 10-bit G component for the odd *i* coordinate in the top 10 bits of the word in bytes
///   4..5, and a 10-bit R component in the top 10 bits of the word in bytes 6..7, with the bottom 6
///   bits of each word unused. This format only supports images with a width that is a multiple of
///   two. For the purposes of the constraints on copy extents, this format is treated as a
///   compressed format with a 2×1 compressed texel block.
/// - [`B10X6G10X6R10X6G10X6422Unorm4Pack16`] specifies a four-component, 64-bit format containing a
///   pair of G components, an R component, and a B component, collectively encoding a 2×1 rectangle
///   of unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the
///   B and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has a 10-bit B component in the top 10 bits of the word in bytes
///   0..1, a 10-bit G component for the even *i* coordinate in the top 10 bits of the word in bytes
///   2..3, a 10-bit R component in the top 10 bits of the word in bytes 4..5, and a 10-bit G
///   component for the odd *i* coordinate in the top 10 bits of the word in bytes 6..7, with the
///   bottom 6 bits of each word unused. This format only supports images with a width that is a
///   multiple of two. For the purposes of the constraints on copy extents, this format is treated
///   as a compressed format with a 2×1 compressed texel block.
/// - [`G10X6B10X6R10X63Plane420Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 10-bit G component in the top 10 bits of each 16-bit word of plane 0, a
///   10-bit B component in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R component
///   in the top 10 bits of each 16-bit word of plane 2, with the bottom 6 bits of each word unused.
///   The horizontal and vertical dimensions of the R and B planes are halved relative to the image
///   dimensions, and each R and B component is shared with the G components for which <span
///   class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
///   delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
///   class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
///   delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span style="height:0.85396em;vertical-align:-0.19444em;"
///   class="strut"></span><span class="mord"><span style="margin-right:0.05724em;" class="mord
///   mathdefault">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width and height that is a multiple of two.
/// - [`G10X6B10X6R10X62Plane420Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 10-bit G component in the top 10 bits of each 16-bit word of plane 0, and a
///   two-component, 32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits of the
///   word in bytes 0..1, and a 10-bit R component in the top 10 bits of the word in bytes 2..3,
///   with the bottom 6 bits of each word unused. The horizontal and vertical dimensions of the BR
///   plane are halved relative to the image dimensions, and each R and B value is shared with the G
///   components for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
///   class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
///   class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
///   class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
///   class="mord">5</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
///   and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   class="mspace" style="margin-right:0.2222222222222222em;"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
///   delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   and height that is a multiple of two.
/// - [`G10X6B10X6R10X63Plane422Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 10-bit G component in the top 10 bits of each 16-bit word of plane 0, a
///   10-bit B component in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R component
///   in the top 10 bits of each 16-bit word of plane 2, with the bottom 6 bits of each word unused.
///   The horizontal dimension of the R and B plane is halved relative to the image dimensions, and
///   each R and B value is shared with the G components for which <span class="katex"><span
///   aria-hidden="true" class="katex-html"><span class="base"><span class="strut"
///   style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span style="top:0em;"
///   class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
///   delimcenter">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width that is a multiple of two.
/// - [`G10X6B10X6R10X62Plane422Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 10-bit G component in the top 10 bits of each 16-bit word of plane 0, and a
///   two-component, 32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits of the
///   word in bytes 0..1, and a 10-bit R component in the top 10 bits of the word in bytes 2..3,
///   with the bottom 6 bits of each word unused. The horizontal dimension of the BR plane is halved
///   relative to the image dimensions, and each R and B value is shared with the G components for
///   which <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
///   delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   that is a multiple of two.
/// - [`G10X6B10X6R10X63Plane444Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 10-bit G component in the top 10 bits of each 16-bit word of plane 0, a
///   10-bit B component in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R component
///   in the top 10 bits of each 16-bit word of plane 2, with the bottom 6 bits of each word unused.
///   Each plane has the same dimensions and each R, G and B component contributes to a single
///   texel. The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane.
/// - [`R12X4UnormPack16`] specifies a one-component, 16-bit unsigned normalized format that has a
///   single 12-bit R component in the top 12 bits of a 16-bit word, with the bottom 4 bits unused.
/// - [`R12X4G12X4Unorm2Pack16`] specifies a two-component, 32-bit unsigned normalized format that
///   has a 12-bit R component in the top 12 bits of the word in bytes 0..1, and a 12-bit G
///   component in the top 12 bits of the word in bytes 2..3, with the bottom 4 bits of each word
///   unused.
/// - [`R12X4G12X4B12X4A12X4Unorm4Pack16`] specifies a four-component, 64-bit unsigned normalized
///   format that has a 12-bit R component in the top 12 bits of the word in bytes 0..1, a 12-bit G
///   component in the top 12 bits of the word in bytes 2..3, a 12-bit B component in the top 12
///   bits of the word in bytes 4..5, and a 12-bit A component in the top 12 bits of the word in
///   bytes 6..7, with the bottom 4 bits of each word unused.
/// - [`G12X4B12X4G12X4R12X4422Unorm4Pack16`] specifies a four-component, 64-bit format containing a
///   pair of G components, an R component, and a B component, collectively encoding a 2×1 rectangle
///   of unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the
///   B and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has a 12-bit G component for the even *i* coordinate in the top 12
///   bits of the word in bytes 0..1, a 12-bit B component in the top 12 bits of the word in bytes
///   2..3, a 12-bit G component for the odd *i* coordinate in the top 12 bits of the word in bytes
///   4..5, and a 12-bit R component in the top 12 bits of the word in bytes 6..7, with the bottom 4
///   bits of each word unused. This format only supports images with a width that is a multiple of
///   two. For the purposes of the constraints on copy extents, this format is treated as a
///   compressed format with a 2×1 compressed texel block.
/// - [`B12X4G12X4R12X4G12X4422Unorm4Pack16`] specifies a four-component, 64-bit format containing a
///   pair of G components, an R component, and a B component, collectively encoding a 2×1 rectangle
///   of unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the
///   B and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has a 12-bit B component in the top 12 bits of the word in bytes
///   0..1, a 12-bit G component for the even *i* coordinate in the top 12 bits of the word in bytes
///   2..3, a 12-bit R component in the top 12 bits of the word in bytes 4..5, and a 12-bit G
///   component for the odd *i* coordinate in the top 12 bits of the word in bytes 6..7, with the
///   bottom 4 bits of each word unused. This format only supports images with a width that is a
///   multiple of two. For the purposes of the constraints on copy extents, this format is treated
///   as a compressed format with a 2×1 compressed texel block.
/// - [`G12X4B12X4R12X43Plane420Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 12-bit G component in the top 12 bits of each 16-bit word of plane 0, a
///   12-bit B component in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R component
///   in the top 12 bits of each 16-bit word of plane 2, with the bottom 4 bits of each word unused.
///   The horizontal and vertical dimensions of the R and B planes are halved relative to the image
///   dimensions, and each R and B component is shared with the G components for which <span
///   class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
///   and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
///   delimcenter">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width and height that is a multiple of two.
/// - [`G12X4B12X4R12X42Plane420Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 12-bit G component in the top 12 bits of each 16-bit word of plane 0, and a
///   two-component, 32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits of the
///   word in bytes 0..1, and a 12-bit R component in the top 12 bits of the word in bytes 2..3,
///   with the bottom 4 bits of each word unused. The horizontal and vertical dimensions of the BR
///   plane are halved relative to the image dimensions, and each R and B value is shared with the G
///   components for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
///   class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
///   class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   class="mspace" style="margin-right:0.2222222222222222em;"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
///   class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span style="height:0.85396em;vertical-align:-0.19444em;"
///   class="strut"></span><span class="mord"><span style="margin-right:0.05724em;" class="mord
///   mathdefault">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
///   class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
///   style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   and height that is a multiple of two.
/// - [`G12X4B12X4R12X43Plane422Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 12-bit G component in the top 12 bits of each 16-bit word of plane 0, a
///   12-bit B component in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R component
///   in the top 12 bits of each 16-bit word of plane 2, with the bottom 4 bits of each word unused.
///   The horizontal dimension of the R and B plane is halved relative to the image dimensions, and
///   each R and B value is shared with the G components for which <span class="katex"><span
///   class="katex-html" aria-hidden="true"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
///   style="top:0em;">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span
///   style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width that is a multiple of two.
/// - [`G12X4B12X4R12X42Plane422Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 12-bit G component in the top 12 bits of each 16-bit word of plane 0, and a
///   two-component, 32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits of the
///   word in bytes 0..1, and a 12-bit R component in the top 12 bits of the word in bytes 2..3,
///   with the bottom 4 bits of each word unused. The horizontal dimension of the BR plane is halved
///   relative to the image dimensions, and each R and B value is shared with the G components for
///   which <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
///   class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
///   class="mord">5</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   that is a multiple of two.
/// - [`G12X4B12X4R12X43Plane444Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 12-bit G component in the top 12 bits of each 16-bit word of plane 0, a
///   12-bit B component in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R component
///   in the top 12 bits of each 16-bit word of plane 2, with the bottom 4 bits of each word unused.
///   Each plane has the same dimensions and each R, G and B component contributes to a single
///   texel. The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane.
/// - [`G16B16G16R16422Unorm`] specifies a four-component, 64-bit format containing a pair of G
///   components, an R component, and a B component, collectively encoding a 2×1 rectangle of
///   unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the B
///   and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has a 16-bit G component for the even *i* coordinate in the word in
///   bytes 0..1, a 16-bit B component in the word in bytes 2..3, a 16-bit G component for the odd
///   *i* coordinate in the word in bytes 4..5, and a 16-bit R component in the word in bytes 6..7.
///   This format only supports images with a width that is a multiple of two. For the purposes of
///   the constraints on copy extents, this format is treated as a compressed format with a 2×1
///   compressed texel block.
/// - [`B16G16R16G16422Unorm`] specifies a four-component, 64-bit format containing a pair of G
///   components, an R component, and a B component, collectively encoding a 2×1 rectangle of
///   unsigned normalized RGB texel data. One G value is present at each *i* coordinate, with the B
///   and R values shared across both G values and thus recorded at half the horizontal resolution
///   of the image. This format has a 16-bit B component in the word in bytes 0..1, a 16-bit G
///   component for the even *i* coordinate in the word in bytes 2..3, a 16-bit R component in the
///   word in bytes 4..5, and a 16-bit G component for the odd *i* coordinate in the word in bytes
///   6..7. This format only supports images with a width that is a multiple of two. For the
///   purposes of the constraints on copy extents, this format is treated as a compressed format
///   with a 2×1 compressed texel block.
/// - [`G16B16R163Plane420Unorm`] specifies an unsigned normalized *multi-planar format* that has a
///   16-bit G component in each 16-bit word of plane 0, a 16-bit B component in each 16-bit word of
///   plane 1, and a 16-bit R component in each 16-bit word of plane 2. The horizontal and vertical
///   dimensions of the R and B planes are halved relative to the image dimensions, and each R and B
///   component is shared with the G components for which <span class="katex"><span
///   class="katex-html" aria-hidden="true"><span class="base"><span class="strut"
///   style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span style="top:0em;"
///   class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
///   delimcenter">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
///   mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
///   and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
///   class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width and height that is a multiple of two.
/// - [`G16B16R162Plane420Unorm`] specifies an unsigned normalized *multi-planar format* that has a
///   16-bit G component in each 16-bit word of plane 0, and a two-component, 32-bit BR plane 1
///   consisting of a 16-bit B component in the word in bytes 0..1, and a 16-bit R component in the
///   word in bytes 2..3. The horizontal and vertical dimensions of the BR plane are halved relative
///   to the image dimensions, and each R and B value is shared with the G components for which
///   <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
///   class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
///   style="top:0em;">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
///   mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
///   and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
///   style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   class="mspace" style="margin-right:0.2222222222222222em;"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
///   style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span class="strut"
///   style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
///   class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span style="height:0.85396em;vertical-align:-0.19444em;"
///   class="strut"></span><span class="mord"><span class="mord mathdefault"
///   style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   and height that is a multiple of two.
/// - [`G16B16R163Plane422Unorm`] specifies an unsigned normalized *multi-planar format* that has a
///   16-bit G component in each 16-bit word of plane 0, a 16-bit B component in each 16-bit word of
///   plane 1, and a 16-bit R component in each 16-bit word of plane 2. The horizontal dimension of
///   the R and B plane is halved relative to the image dimensions, and each R and B value is shared
///   with the G components for which <span class="katex"><span class="katex-html"
///   aria-hidden="true"><span class="base"><span class="strut"
///   style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
///   delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2222222222222222em;" class="mspace"></span><span
///   class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
///   class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
///   class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span><span
///   class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span></span><span class="base"><span class="strut"
///   style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span
///   style="margin-right:0.2777777777777778em;" class="mspace"></span><span
///   class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
///   location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R
///   plane. This format only supports images with a width that is a multiple of two.
/// - [`G16B16R162Plane422Unorm`] specifies an unsigned normalized *multi-planar format* that has a
///   16-bit G component in each 16-bit word of plane 0, and a two-component, 32-bit BR plane 1
///   consisting of a 16-bit B component in the word in bytes 0..1, and a 16-bit R component in the
///   word in bytes 2..3. The horizontal dimension of the BR plane is halved relative to the image
///   dimensions, and each R and B value is shared with the G components for which <span
///   class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
///   style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
///   mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
///   class="mspace" style="margin-right:0.2222222222222222em;"></span><span
///   class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
///   delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
///   class="mspace"></span><span class="mrel">=</span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
///   class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
///   class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
///   style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
///   mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.05017em;">B</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
///   class="vlist"><span></span></span></span></span></span></span><span class="mspace"
///   style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
///   class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
///   class="base"><span style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
///   class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t
///   vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
///   class="vlist"><span
///   style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
///   style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///   The location of each plane when this image is in linear layout can be determined via
///   [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane. This format only supports images with a width
///   that is a multiple of two.
/// - [`G16B16R163Plane444Unorm`] specifies an unsigned normalized *multi-planar format* that has a
///   16-bit G component in each 16-bit word of plane 0, a 16-bit B component in each 16-bit word of
///   plane 1, and a 16-bit R component in each 16-bit word of plane 2. Each plane has the same
///   dimensions and each R, G and B component contributes to a single texel. The location of each
///   plane when this image is in linear layout can be determined via [`GetImageSubresourceLayout`],
///   using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, `VK_IMAGE_ASPECT_PLANE_1_BIT` for the B
///   plane, and `VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
/// - [`G8B8R82Plane444Unorm`] specifies an unsigned normalized *multi-planar format* that has an
///   8-bit G component in plane 0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
///   component in byte 0 and an 8-bit R component in byte 1. Both planes have the same dimensions
///   and each R, G and B component contributes to a single texel. The location of each plane when
///   this image is in linear layout can be determined via [`GetImageSubresourceLayout`], using
///   `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR
///   plane.
/// - [`G10X6B10X6R10X62Plane444Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 10-bit G component in the top 10 bits of each 16-bit word of plane 0, and a
///   two-component, 32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits of the
///   word in bytes 0..1, and a 10-bit R component in the top 10 bits of the word in bytes 2..3, the
///   bottom 6 bits of each word unused. Both planes have the same dimensions and each R, G and B
///   component contributes to a single texel. The location of each plane when this image is in
///   linear layout can be determined via [`GetImageSubresourceLayout`], using
///   `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR
///   plane.
/// - [`G12X4B12X4R12X42Plane444Unorm3Pack16`] specifies an unsigned normalized *multi-planar
///   format* that has a 12-bit G component in the top 12 bits of each 16-bit word of plane 0, and a
///   two-component, 32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits of the
///   word in bytes 0..1, and a 12-bit R component in the top 12 bits of the word in bytes 2..3, the
///   bottom 4 bits of each word unused. Both planes have the same dimensions and each R, G and B
///   component contributes to a single texel. The location of each plane when this image is in
///   linear layout can be determined via [`GetImageSubresourceLayout`], using
///   `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR
///   plane.
/// - [`G16B16R162Plane444Unorm`] specifies an unsigned normalized *multi-planar format* that has a
///   16-bit G component in each 16-bit word of plane 0, and a two-component, 32-bit BR plane 1
///   consisting of a 16-bit B component in the word in bytes 0..1, and a 16-bit R component in the
///   word in bytes 2..3. Both planes have the same dimensions and each R, G and B component
///   contributes to a single texel. The location of each plane when this image is in linear layout
///   can be determined via [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for
///   the G plane, and `VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
/// - [`Pvrtc12BppUnormBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes an 8×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Pvrtc14BppUnormBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Pvrtc22BppUnormBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes an 8×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Pvrtc24BppUnormBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`Pvrtc12BppSrgbBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes an 8×4 rectangle of unsigned normalized RGBA texel data
///   with sRGB nonlinear encoding applied to the RGB components.
/// - [`Pvrtc14BppSrgbBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///   with sRGB nonlinear encoding applied to the RGB components.
/// - [`Pvrtc22BppSrgbBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes an 8×4 rectangle of unsigned normalized RGBA texel data
///   with sRGB nonlinear encoding applied to the RGB components.
/// - [`Pvrtc24BppSrgbBlockImg`] specifies a four-component, PVRTC compressed format where each
///   64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///   with sRGB nonlinear encoding applied to the RGB components.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`AndroidHardwareBufferFormatProperties2ANDROID`]
/// - [`AndroidHardwareBufferFormatPropertiesANDROID`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`BufferViewCreateInfo`]
/// - [`CommandBufferInheritanceRenderingInfo`]
/// - [`FramebufferAttachmentImageInfo`]
/// - [`GeometryTrianglesNV`]
/// - [`ImageCreateInfo`]
/// - [`ImageFormatListCreateInfo`]
/// - [`ImageViewAstcDecodeModeEXT`]
/// - [`ImageViewCreateInfo`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`PipelineRenderingCreateInfo`]
/// - [`SamplerCustomBorderColorCreateInfoEXT`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`SurfaceFormatKHR`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`VertexInputAttributeDescription`]
/// - [`VertexInputAttributeDescription2EXT`]
/// - [`VideoFormatPropertiesKHR`]
/// - [`VideoSessionCreateInfoKHR`]
/// - [`GetPhysicalDeviceExternalImageFormatPropertiesNV`]
/// - [`GetPhysicalDeviceFormatProperties`]
/// - [`GetPhysicalDeviceFormatProperties2`]
/// - [`GetPhysicalDeviceFormatProperties2KHR`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFormat")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum Format {
    ///[`Undefined`] specifies that the format is not specified.
    Undefined = 0,
    ///[`R4G4UnormPack8`] specifies a two-component, 8-bit packed
    ///unsigned normalized format that has a 4-bit R component in bits 4..7,
    ///and a 4-bit G component in bits 0..3.
    R4G4UnormPack8 = 1,
    ///[`R4G4B4A4UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit R component in bits
    ///12..15, a 4-bit G component in bits 8..11, a 4-bit B component in bits
    ///4..7, and a 4-bit A component in bits 0..3.
    R4G4B4A4UnormPack16 = 2,
    ///[`B4G4R4A4UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit B component in bits
    ///12..15, a 4-bit G component in bits 8..11, a 4-bit R component in bits
    ///4..7, and a 4-bit A component in bits 0..3.
    B4G4R4A4UnormPack16 = 3,
    ///[`R5G6B5UnormPack16`] specifies a three-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit R component in bits
    ///11..15, a 6-bit G component in bits 5..10, and a 5-bit B component in
    ///bits 0..4.
    R5G6B5UnormPack16 = 4,
    ///[`B5G6R5UnormPack16`] specifies a three-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit B component in bits
    ///11..15, a 6-bit G component in bits 5..10, and a 5-bit R component in
    ///bits 0..4.
    B5G6R5UnormPack16 = 5,
    ///[`R5G5B5A1UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit R component in bits
    ///11..15, a 5-bit G component in bits 6..10, a 5-bit B component in bits
    ///1..5, and a 1-bit A component in bit 0.
    R5G5B5A1UnormPack16 = 6,
    ///[`B5G5R5A1UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit B component in bits
    ///11..15, a 5-bit G component in bits 6..10, a 5-bit R component in bits
    ///1..5, and a 1-bit A component in bit 0.
    B5G5R5A1UnormPack16 = 7,
    ///[`A1R5G5B5UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 1-bit A component in bit
    ///15, a 5-bit R component in bits 10..14, a 5-bit G component in bits
    ///5..9, and a 5-bit B component in bits 0..4.
    A1R5G5B5UnormPack16 = 8,
    ///[`R8Unorm`] specifies a one-component, 8-bit unsigned
    ///normalized format that has a single 8-bit R component.
    R8Unorm = 9,
    ///[`R8Snorm`] specifies a one-component, 8-bit signed
    ///normalized format that has a single 8-bit R component.
    R8Snorm = 10,
    ///[`R8Uscaled`] specifies a one-component, 8-bit unsigned
    ///scaled integer format that has a single 8-bit R component.
    R8Uscaled = 11,
    ///[`R8Sscaled`] specifies a one-component, 8-bit signed
    ///scaled integer format that has a single 8-bit R component.
    R8Sscaled = 12,
    ///[`R8Uint`] specifies a one-component, 8-bit unsigned
    ///integer format that has a single 8-bit R component.
    R8Uint = 13,
    ///[`R8Sint`] specifies a one-component, 8-bit signed integer
    ///format that has a single 8-bit R component.
    R8Sint = 14,
    ///[`R8Srgb`] specifies a one-component, 8-bit unsigned
    ///normalized format that has a single 8-bit R component stored with sRGB
    ///nonlinear encoding.
    R8Srgb = 15,
    ///[`R8G8Unorm`] specifies a two-component, 16-bit unsigned
    ///normalized format that has an 8-bit R component in byte 0, and an 8-bit
    ///G component in byte 1.
    R8G8Unorm = 16,
    ///[`R8G8Snorm`] specifies a two-component, 16-bit signed
    ///normalized format that has an 8-bit R component in byte 0, and an 8-bit
    ///G component in byte 1.
    R8G8Snorm = 17,
    ///[`R8G8Uscaled`] specifies a two-component, 16-bit unsigned
    ///scaled integer format that has an 8-bit R component in byte 0, and an
    ///8-bit G component in byte 1.
    R8G8Uscaled = 18,
    ///[`R8G8Sscaled`] specifies a two-component, 16-bit signed
    ///scaled integer format that has an 8-bit R component in byte 0, and an
    ///8-bit G component in byte 1.
    R8G8Sscaled = 19,
    ///[`R8G8Uint`] specifies a two-component, 16-bit unsigned
    ///integer format that has an 8-bit R component in byte 0, and an 8-bit G
    ///component in byte 1.
    R8G8Uint = 20,
    ///[`R8G8Sint`] specifies a two-component, 16-bit signed
    ///integer format that has an 8-bit R component in byte 0, and an 8-bit G
    ///component in byte 1.
    R8G8Sint = 21,
    ///[`R8G8Srgb`] specifies a two-component, 16-bit unsigned
    ///normalized format that has an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1.
    R8G8Srgb = 22,
    ///[`R8G8B8Unorm`] specifies a three-component, 24-bit
    ///unsigned normalized format that has an 8-bit R component in byte 0, an
    ///8-bit G component in byte 1, and an 8-bit B component in byte 2.
    R8G8B8Unorm = 23,
    ///[`R8G8B8Snorm`] specifies a three-component, 24-bit signed
    ///normalized format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    R8G8B8Snorm = 24,
    ///[`R8G8B8Uscaled`] specifies a three-component, 24-bit
    ///unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
    ///G component in byte 1, and an 8-bit B component in byte 2.
    R8G8B8Uscaled = 25,
    ///[`R8G8B8Sscaled`] specifies a three-component, 24-bit
    ///signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    R8G8B8Sscaled = 26,
    ///[`R8G8B8Uint`] specifies a three-component, 24-bit unsigned
    ///integer format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    R8G8B8Uint = 27,
    ///[`R8G8B8Sint`] specifies a three-component, 24-bit signed
    ///integer format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    R8G8B8Sint = 28,
    ///[`R8G8B8Srgb`] specifies a three-component, 24-bit unsigned
    ///normalized format that has an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB
    ///nonlinear encoding in byte 2.
    R8G8B8Srgb = 29,
    ///[`B8G8R8Unorm`] specifies a three-component, 24-bit
    ///unsigned normalized format that has an 8-bit B component in byte 0, an
    ///8-bit G component in byte 1, and an 8-bit R component in byte 2.
    B8G8R8Unorm = 30,
    ///[`B8G8R8Snorm`] specifies a three-component, 24-bit signed
    ///normalized format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    B8G8R8Snorm = 31,
    ///[`B8G8R8Uscaled`] specifies a three-component, 24-bit
    ///unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
    ///G component in byte 1, and an 8-bit R component in byte 2.
    B8G8R8Uscaled = 32,
    ///[`B8G8R8Sscaled`] specifies a three-component, 24-bit
    ///signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    B8G8R8Sscaled = 33,
    ///[`B8G8R8Uint`] specifies a three-component, 24-bit unsigned
    ///integer format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    B8G8R8Uint = 34,
    ///[`B8G8R8Sint`] specifies a three-component, 24-bit signed
    ///integer format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    B8G8R8Sint = 35,
    ///[`B8G8R8Srgb`] specifies a three-component, 24-bit unsigned
    ///normalized format that has an 8-bit B component stored with sRGB
    ///nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, and an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 2.
    B8G8R8Srgb = 36,
    ///[`R8G8B8A8Unorm`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit R component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit B component in byte 2, and an
    ///8-bit A component in byte 3.
    R8G8B8A8Unorm = 37,
    ///[`R8G8B8A8Snorm`] specifies a four-component, 32-bit signed
    ///normalized format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    R8G8B8A8Snorm = 38,
    ///[`R8G8B8A8Uscaled`] specifies a four-component, 32-bit
    ///unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
    ///G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    R8G8B8A8Uscaled = 39,
    ///[`R8G8B8A8Sscaled`] specifies a four-component, 32-bit
    ///signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    R8G8B8A8Sscaled = 40,
    ///[`R8G8B8A8Uint`] specifies a four-component, 32-bit
    ///unsigned integer format that has an 8-bit R component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit B component in byte 2, and an
    ///8-bit A component in byte 3.
    R8G8B8A8Uint = 41,
    ///[`R8G8B8A8Sint`] specifies a four-component, 32-bit signed
    ///integer format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    R8G8B8A8Sint = 42,
    ///[`R8G8B8A8Srgb`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit R component stored with
    ///sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, an 8-bit B component stored with sRGB
    ///nonlinear encoding in byte 2, and an 8-bit A component in byte 3.
    R8G8B8A8Srgb = 43,
    ///[`B8G8R8A8Unorm`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit B component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit R component in byte 2, and an
    ///8-bit A component in byte 3.
    B8G8R8A8Unorm = 44,
    ///[`B8G8R8A8Snorm`] specifies a four-component, 32-bit signed
    ///normalized format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    B8G8R8A8Snorm = 45,
    ///[`B8G8R8A8Uscaled`] specifies a four-component, 32-bit
    ///unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
    ///G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    B8G8R8A8Uscaled = 46,
    ///[`B8G8R8A8Sscaled`] specifies a four-component, 32-bit
    ///signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    B8G8R8A8Sscaled = 47,
    ///[`B8G8R8A8Uint`] specifies a four-component, 32-bit
    ///unsigned integer format that has an 8-bit B component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit R component in byte 2, and an
    ///8-bit A component in byte 3.
    B8G8R8A8Uint = 48,
    ///[`B8G8R8A8Sint`] specifies a four-component, 32-bit signed
    ///integer format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    B8G8R8A8Sint = 49,
    ///[`B8G8R8A8Srgb`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit B component stored with
    ///sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 2, and an 8-bit A component in byte 3.
    B8G8R8A8Srgb = 50,
    ///[`A8B8G8R8UnormPack32`] specifies a four-component, 32-bit
    ///packed unsigned normalized format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    A8B8G8R8UnormPack32 = 51,
    ///[`A8B8G8R8SnormPack32`] specifies a four-component, 32-bit
    ///packed signed normalized format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    A8B8G8R8SnormPack32 = 52,
    ///[`A8B8G8R8UscaledPack32`] specifies a four-component,
    ///32-bit packed unsigned scaled integer format that has an 8-bit A
    ///component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit
    ///G component in bits 8..15, and an 8-bit R component in bits 0..7.
    A8B8G8R8UscaledPack32 = 53,
    ///[`A8B8G8R8SscaledPack32`] specifies a four-component,
    ///32-bit packed signed scaled integer format that has an 8-bit A component
    ///in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
    ///component in bits 8..15, and an 8-bit R component in bits 0..7.
    A8B8G8R8SscaledPack32 = 54,
    ///[`A8B8G8R8UintPack32`] specifies a four-component, 32-bit
    ///packed unsigned integer format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    A8B8G8R8UintPack32 = 55,
    ///[`A8B8G8R8SintPack32`] specifies a four-component, 32-bit
    ///packed signed integer format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    A8B8G8R8SintPack32 = 56,
    ///[`A8B8G8R8SrgbPack32`] specifies a four-component, 32-bit
    ///packed unsigned normalized format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component stored with sRGB nonlinear encoding in bits
    ///16..23, an 8-bit G component stored with sRGB nonlinear encoding in bits
    ///8..15, and an 8-bit R component stored with sRGB nonlinear encoding in
    ///bits 0..7.
    A8B8G8R8SrgbPack32 = 57,
    ///[`A2R10G10B10UnormPack32`] specifies a four-component,
    ///32-bit packed unsigned normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit B component in bits 0..9.
    A2R10G10B10UnormPack32 = 58,
    ///[`A2R10G10B10SnormPack32`] specifies a four-component,
    ///32-bit packed signed normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit B component in bits 0..9.
    A2R10G10B10SnormPack32 = 59,
    ///[`A2R10G10B10UscaledPack32`] specifies a four-component,
    ///32-bit packed unsigned scaled integer format that has a 2-bit A
    ///component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit
    ///G component in bits 10..19, and a 10-bit B component in bits 0..9.
    A2R10G10B10UscaledPack32 = 60,
    ///[`A2R10G10B10SscaledPack32`] specifies a four-component,
    ///32-bit packed signed scaled integer format that has a 2-bit A component
    ///in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
    ///component in bits 10..19, and a 10-bit B component in bits 0..9.
    A2R10G10B10SscaledPack32 = 61,
    ///[`A2R10G10B10UintPack32`] specifies a four-component,
    ///32-bit packed unsigned integer format that has a 2-bit A component in
    ///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit B component in bits 0..9.
    A2R10G10B10UintPack32 = 62,
    ///[`A2R10G10B10SintPack32`] specifies a four-component,
    ///32-bit packed signed integer format that has a 2-bit A component in bits
    ///30..31, a 10-bit R component in bits 20..29, a 10-bit G component in
    ///bits 10..19, and a 10-bit B component in bits 0..9.
    A2R10G10B10SintPack32 = 63,
    ///[`A2B10G10R10UnormPack32`] specifies a four-component,
    ///32-bit packed unsigned normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit R component in bits 0..9.
    A2B10G10R10UnormPack32 = 64,
    ///[`A2B10G10R10SnormPack32`] specifies a four-component,
    ///32-bit packed signed normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit R component in bits 0..9.
    A2B10G10R10SnormPack32 = 65,
    ///[`A2B10G10R10UscaledPack32`] specifies a four-component,
    ///32-bit packed unsigned scaled integer format that has a 2-bit A
    ///component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit
    ///G component in bits 10..19, and a 10-bit R component in bits 0..9.
    A2B10G10R10UscaledPack32 = 66,
    ///[`A2B10G10R10SscaledPack32`] specifies a four-component,
    ///32-bit packed signed scaled integer format that has a 2-bit A component
    ///in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
    ///component in bits 10..19, and a 10-bit R component in bits 0..9.
    A2B10G10R10SscaledPack32 = 67,
    ///[`A2B10G10R10UintPack32`] specifies a four-component,
    ///32-bit packed unsigned integer format that has a 2-bit A component in
    ///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit R component in bits 0..9.
    A2B10G10R10UintPack32 = 68,
    ///[`A2B10G10R10SintPack32`] specifies a four-component,
    ///32-bit packed signed integer format that has a 2-bit A component in bits
    ///30..31, a 10-bit B component in bits 20..29, a 10-bit G component in
    ///bits 10..19, and a 10-bit R component in bits 0..9.
    A2B10G10R10SintPack32 = 69,
    ///[`R16Unorm`] specifies a one-component, 16-bit unsigned
    ///normalized format that has a single 16-bit R component.
    R16Unorm = 70,
    ///[`R16Snorm`] specifies a one-component, 16-bit signed
    ///normalized format that has a single 16-bit R component.
    R16Snorm = 71,
    ///[`R16Uscaled`] specifies a one-component, 16-bit unsigned
    ///scaled integer format that has a single 16-bit R component.
    R16Uscaled = 72,
    ///[`R16Sscaled`] specifies a one-component, 16-bit signed
    ///scaled integer format that has a single 16-bit R component.
    R16Sscaled = 73,
    ///[`R16Uint`] specifies a one-component, 16-bit unsigned
    ///integer format that has a single 16-bit R component.
    R16Uint = 74,
    ///[`R16Sint`] specifies a one-component, 16-bit signed
    ///integer format that has a single 16-bit R component.
    R16Sint = 75,
    ///[`R16Sfloat`] specifies a one-component, 16-bit signed
    ///floating-point format that has a single 16-bit R component.
    R16Sfloat = 76,
    ///[`R16G16Unorm`] specifies a two-component, 32-bit unsigned
    ///normalized format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    R16G16Unorm = 77,
    ///[`R16G16Snorm`] specifies a two-component, 32-bit signed
    ///normalized format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    R16G16Snorm = 78,
    ///[`R16G16Uscaled`] specifies a two-component, 32-bit
    ///unsigned scaled integer format that has a 16-bit R component in bytes
    ///0..1, and a 16-bit G component in bytes 2..3.
    R16G16Uscaled = 79,
    ///[`R16G16Sscaled`] specifies a two-component, 32-bit signed
    ///scaled integer format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    R16G16Sscaled = 80,
    ///[`R16G16Uint`] specifies a two-component, 32-bit unsigned
    ///integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
    ///G component in bytes 2..3.
    R16G16Uint = 81,
    ///[`R16G16Sint`] specifies a two-component, 32-bit signed
    ///integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
    ///G component in bytes 2..3.
    R16G16Sint = 82,
    ///[`R16G16Sfloat`] specifies a two-component, 32-bit signed
    ///floating-point format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    R16G16Sfloat = 83,
    ///[`R16G16B16Unorm`] specifies a three-component, 48-bit
    ///unsigned normalized format that has a 16-bit R component in bytes 0..1,
    ///a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    R16G16B16Unorm = 84,
    ///[`R16G16B16Snorm`] specifies a three-component, 48-bit
    ///signed normalized format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    R16G16B16Snorm = 85,
    ///[`R16G16B16Uscaled`] specifies a three-component, 48-bit
    ///unsigned scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
    ///bytes 4..5.
    R16G16B16Uscaled = 86,
    ///[`R16G16B16Sscaled`] specifies a three-component, 48-bit
    ///signed scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
    ///bytes 4..5.
    R16G16B16Sscaled = 87,
    ///[`R16G16B16Uint`] specifies a three-component, 48-bit
    ///unsigned integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    R16G16B16Uint = 88,
    ///[`R16G16B16Sint`] specifies a three-component, 48-bit
    ///signed integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    R16G16B16Sint = 89,
    ///[`R16G16B16Sfloat`] specifies a three-component, 48-bit
    ///signed floating-point format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
    ///bytes 4..5.
    R16G16B16Sfloat = 90,
    ///[`R16G16B16A16Unorm`] specifies a four-component, 64-bit
    ///unsigned normalized format that has a 16-bit R component in bytes 0..1,
    ///a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    R16G16B16A16Unorm = 91,
    ///[`R16G16B16A16Snorm`] specifies a four-component, 64-bit
    ///signed normalized format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    R16G16B16A16Snorm = 92,
    ///[`R16G16B16A16Uscaled`] specifies a four-component, 64-bit
    ///unsigned scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
    ///4..5, and a 16-bit A component in bytes 6..7.
    R16G16B16A16Uscaled = 93,
    ///[`R16G16B16A16Sscaled`] specifies a four-component, 64-bit
    ///signed scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
    ///4..5, and a 16-bit A component in bytes 6..7.
    R16G16B16A16Sscaled = 94,
    ///[`R16G16B16A16Uint`] specifies a four-component, 64-bit
    ///unsigned integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    R16G16B16A16Uint = 95,
    ///[`R16G16B16A16Sint`] specifies a four-component, 64-bit
    ///signed integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    R16G16B16A16Sint = 96,
    ///[`R16G16B16A16Sfloat`] specifies a four-component, 64-bit
    ///signed floating-point format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
    ///4..5, and a 16-bit A component in bytes 6..7.
    R16G16B16A16Sfloat = 97,
    ///[`R32Uint`] specifies a one-component, 32-bit unsigned
    ///integer format that has a single 32-bit R component.
    R32Uint = 98,
    ///[`R32Sint`] specifies a one-component, 32-bit signed
    ///integer format that has a single 32-bit R component.
    R32Sint = 99,
    ///[`R32Sfloat`] specifies a one-component, 32-bit signed
    ///floating-point format that has a single 32-bit R component.
    R32Sfloat = 100,
    ///[`R32G32Uint`] specifies a two-component, 64-bit unsigned
    ///integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
    ///G component in bytes 4..7.
    R32G32Uint = 101,
    ///[`R32G32Sint`] specifies a two-component, 64-bit signed
    ///integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
    ///G component in bytes 4..7.
    R32G32Sint = 102,
    ///[`R32G32Sfloat`] specifies a two-component, 64-bit signed
    ///floating-point format that has a 32-bit R component in bytes 0..3, and a
    ///32-bit G component in bytes 4..7.
    R32G32Sfloat = 103,
    ///[`R32G32B32Uint`] specifies a three-component, 96-bit
    ///unsigned integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, and a 32-bit B component in bytes
    ///8..11.
    R32G32B32Uint = 104,
    ///[`R32G32B32Sint`] specifies a three-component, 96-bit
    ///signed integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, and a 32-bit B component in bytes
    ///8..11.
    R32G32B32Sint = 105,
    ///[`R32G32B32Sfloat`] specifies a three-component, 96-bit
    ///signed floating-point format that has a 32-bit R component in bytes
    ///0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in
    ///bytes 8..11.
    R32G32B32Sfloat = 106,
    ///[`R32G32B32A32Uint`] specifies a four-component, 128-bit
    ///unsigned integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
    ///and a 32-bit A component in bytes 12..15.
    R32G32B32A32Uint = 107,
    ///[`R32G32B32A32Sint`] specifies a four-component, 128-bit
    ///signed integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
    ///and a 32-bit A component in bytes 12..15.
    R32G32B32A32Sint = 108,
    ///[`R32G32B32A32Sfloat`] specifies a four-component, 128-bit
    ///signed floating-point format that has a 32-bit R component in bytes
    ///0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes
    ///8..11, and a 32-bit A component in bytes 12..15.
    R32G32B32A32Sfloat = 109,
    ///[`R64Uint`] specifies a one-component, 64-bit unsigned
    ///integer format that has a single 64-bit R component.
    R64Uint = 110,
    ///[`R64Sint`] specifies a one-component, 64-bit signed
    ///integer format that has a single 64-bit R component.
    R64Sint = 111,
    ///[`R64Sfloat`] specifies a one-component, 64-bit signed
    ///floating-point format that has a single 64-bit R component.
    R64Sfloat = 112,
    ///[`R64G64Uint`] specifies a two-component, 128-bit unsigned
    ///integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
    ///G component in bytes 8..15.
    R64G64Uint = 113,
    ///[`R64G64Sint`] specifies a two-component, 128-bit signed
    ///integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
    ///G component in bytes 8..15.
    R64G64Sint = 114,
    ///[`R64G64Sfloat`] specifies a two-component, 128-bit signed
    ///floating-point format that has a 64-bit R component in bytes 0..7, and a
    ///64-bit G component in bytes 8..15.
    R64G64Sfloat = 115,
    ///[`R64G64B64Uint`] specifies a three-component, 192-bit
    ///unsigned integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, and a 64-bit B component in bytes
    ///16..23.
    R64G64B64Uint = 116,
    ///[`R64G64B64Sint`] specifies a three-component, 192-bit
    ///signed integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, and a 64-bit B component in bytes
    ///16..23.
    R64G64B64Sint = 117,
    ///[`R64G64B64Sfloat`] specifies a three-component, 192-bit
    ///signed floating-point format that has a 64-bit R component in bytes
    ///0..7, a 64-bit G component in bytes 8..15, and a 64-bit B component in
    ///bytes 16..23.
    R64G64B64Sfloat = 118,
    ///[`R64G64B64A64Uint`] specifies a four-component, 256-bit
    ///unsigned integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
    ///and a 64-bit A component in bytes 24..31.
    R64G64B64A64Uint = 119,
    ///[`R64G64B64A64Sint`] specifies a four-component, 256-bit
    ///signed integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
    ///and a 64-bit A component in bytes 24..31.
    R64G64B64A64Sint = 120,
    ///[`R64G64B64A64Sfloat`] specifies a four-component, 256-bit
    ///signed floating-point format that has a 64-bit R component in bytes
    ///0..7, a 64-bit G component in bytes 8..15, a 64-bit B component in bytes
    ///16..23, and a 64-bit A component in bytes 24..31.
    R64G64B64A64Sfloat = 121,
    ///[`B10G11R11UfloatPack32`] specifies a three-component,
    ///32-bit packed unsigned floating-point format that has a 10-bit B
    ///component in bits 22..31, an 11-bit G component in bits 11..21, an
    ///11-bit R component in bits 0..10.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11).
    B10G11R11UfloatPack32 = 122,
    ///[`E5B9G9R9UfloatPack32`] specifies a three-component,
    ///32-bit packed unsigned floating-point format that has a 5-bit shared
    ///exponent in bits 27..31, a 9-bit B component mantissa in bits 18..26, a
    ///9-bit G component mantissa in bits 9..17, and a 9-bit R component
    ///mantissa in bits 0..8.
    E5B9G9R9UfloatPack32 = 123,
    ///[`D16Unorm`] specifies a one-component, 16-bit unsigned
    ///normalized format that has a single 16-bit depth component.
    D16Unorm = 124,
    ///[`X8D24UnormPack32`] specifies a two-component, 32-bit
    ///format that has 24 unsigned normalized bits in the depth component and,
    ///**optionally**, 8 bits that are unused.
    X8D24UnormPack32 = 125,
    ///[`D32Sfloat`] specifies a one-component, 32-bit signed
    ///floating-point format that has 32 bits in the depth component.
    D32Sfloat = 126,
    ///[`S8Uint`] specifies a one-component, 8-bit unsigned
    ///integer format that has 8 bits in the stencil component.
    S8Uint = 127,
    ///[`D16UnormS8Uint`] specifies a two-component, 24-bit
    ///format that has 16 unsigned normalized bits in the depth component and 8
    ///unsigned integer bits in the stencil component.
    D16UnormS8Uint = 128,
    ///[`D24UnormS8Uint`] specifies a two-component, 32-bit
    ///packed format that has 8 unsigned integer bits in the stencil component,
    ///and 24 unsigned normalized bits in the depth component.
    D24UnormS8Uint = 129,
    ///[`D32SfloatS8Uint`] specifies a two-component format that
    ///has 32 signed float bits in the depth component and 8 unsigned integer
    ///bits in the stencil component.
    ///There are **optionally** 24 bits that are unused.
    D32SfloatS8Uint = 130,
    ///[`Bc1RgbUnormBlock`] specifies a three-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data.
    ///This format has no alpha and is considered opaque.
    Bc1RgbUnormBlock = 131,
    ///[`Bc1RgbSrgbBlock`] specifies a three-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding.
    ///This format has no alpha and is considered opaque.
    Bc1RgbSrgbBlock = 132,
    ///[`Bc1RgbaUnormBlock`] specifies a four-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data, and
    ///provides 1 bit of alpha.
    Bc1RgbaUnormBlock = 133,
    ///[`Bc1RgbaSrgbBlock`] specifies a four-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding, and provides 1 bit of alpha.
    Bc1RgbaSrgbBlock = 134,
    ///[`Bc2UnormBlock`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values.
    Bc2UnormBlock = 135,
    ///[`Bc2SrgbBlock`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values with sRGB nonlinear encoding.
    Bc2SrgbBlock = 136,
    ///[`Bc3UnormBlock`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values.
    Bc3UnormBlock = 137,
    ///[`Bc3SrgbBlock`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values with sRGB nonlinear encoding.
    Bc3SrgbBlock = 138,
    ///[`Bc4UnormBlock`] specifies a one-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized red texel data.
    Bc4UnormBlock = 139,
    ///[`Bc4SnormBlock`] specifies a one-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of signed normalized red texel data.
    Bc4SnormBlock = 140,
    ///[`Bc5UnormBlock`] specifies a two-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RG texel data with
    ///the first 64 bits encoding red values followed by 64 bits encoding green
    ///values.
    Bc5UnormBlock = 141,
    ///[`Bc5SnormBlock`] specifies a two-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of signed normalized RG texel data with
    ///the first 64 bits encoding red values followed by 64 bits encoding green
    ///values.
    Bc5SnormBlock = 142,
    ///[`Bc6HUfloatBlock`] specifies a three-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned floating-point RGB texel data.
    Bc6HUfloatBlock = 143,
    ///[`Bc6HSfloatBlock`] specifies a three-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of signed floating-point RGB texel data.
    Bc6HSfloatBlock = 144,
    ///[`Bc7UnormBlock`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
    Bc7UnormBlock = 145,
    ///[`Bc7SrgbBlock`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with sRGB nonlinear encoding applied to the RGB components.
    Bc7SrgbBlock = 146,
    ///[`Etc2R8G8B8UnormBlock`] specifies a three-component,
    ///ETC2 compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data.
    ///This format has no alpha and is considered opaque.
    Etc2R8G8B8UnormBlock = 147,
    ///[`Etc2R8G8B8SrgbBlock`] specifies a three-component, ETC2
    ///compressed format where each 64-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding.
    ///This format has no alpha and is considered opaque.
    Etc2R8G8B8SrgbBlock = 148,
    ///[`Etc2R8G8B8A1UnormBlock`] specifies a four-component,
    ///ETC2 compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data, and
    ///provides 1 bit of alpha.
    Etc2R8G8B8A1UnormBlock = 149,
    ///[`Etc2R8G8B8A1SrgbBlock`] specifies a four-component,
    ///ETC2 compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding, and provides 1 bit of alpha.
    Etc2R8G8B8A1SrgbBlock = 150,
    ///[`Etc2R8G8B8A8UnormBlock`] specifies a four-component,
    ///ETC2 compressed format where each 128-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with the
    ///first 64 bits encoding alpha values followed by 64 bits encoding RGB
    ///values.
    Etc2R8G8B8A8UnormBlock = 151,
    ///[`Etc2R8G8B8A8SrgbBlock`] specifies a four-component,
    ///ETC2 compressed format where each 128-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with the
    ///first 64 bits encoding alpha values followed by 64 bits encoding RGB
    ///values with sRGB nonlinear encoding applied.
    Etc2R8G8B8A8SrgbBlock = 152,
    ///[`EacR11UnormBlock`] specifies a one-component, ETC2
    ///compressed format where each 64-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized red texel data.
    EacR11UnormBlock = 153,
    ///[`EacR11SnormBlock`] specifies a one-component, ETC2
    ///compressed format where each 64-bit compressed texel block encodes a
    ///4×4 rectangle of signed normalized red texel data.
    EacR11SnormBlock = 154,
    ///[`EacR11G11UnormBlock`] specifies a two-component, ETC2
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RG texel data with the first
    ///64 bits encoding red values followed by 64 bits encoding green values.
    EacR11G11UnormBlock = 155,
    ///[`EacR11G11SnormBlock`] specifies a two-component, ETC2
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of signed normalized RG texel data with the first 64
    ///bits encoding red values followed by 64 bits encoding green values.
    EacR11G11SnormBlock = 156,
    ///[`Astc4X4UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RGBA texel data.
    Astc4X4UnormBlock = 157,
    ///[`Astc4X4SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc4X4SrgbBlock = 158,
    ///[`Astc5X4UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×4 rectangle of unsigned normalized RGBA texel data.
    Astc5X4UnormBlock = 159,
    ///[`Astc5X4SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc5X4SrgbBlock = 160,
    ///[`Astc5X5UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×5 rectangle of unsigned normalized RGBA texel data.
    Astc5X5UnormBlock = 161,
    ///[`Astc5X5SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc5X5SrgbBlock = 162,
    ///[`Astc6X5UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×5 rectangle of unsigned normalized RGBA texel data.
    Astc6X5UnormBlock = 163,
    ///[`Astc6X5SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc6X5SrgbBlock = 164,
    ///[`Astc6X6UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×6 rectangle of unsigned normalized RGBA texel data.
    Astc6X6UnormBlock = 165,
    ///[`Astc6X6SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×6 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc6X6SrgbBlock = 166,
    ///[`Astc8X5UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×5 rectangle of unsigned normalized RGBA texel data.
    Astc8X5UnormBlock = 167,
    ///[`Astc8X5SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc8X5SrgbBlock = 168,
    ///[`Astc8X6UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×6 rectangle of unsigned normalized RGBA texel data.
    Astc8X6UnormBlock = 169,
    ///[`Astc8X6SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×6 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc8X6SrgbBlock = 170,
    ///[`Astc8X8UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×8 rectangle of unsigned normalized RGBA texel data.
    Astc8X8UnormBlock = 171,
    ///[`Astc8X8SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×8 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc8X8SrgbBlock = 172,
    ///[`Astc10X5UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×5 rectangle of unsigned normalized RGBA texel data.
    Astc10X5UnormBlock = 173,
    ///[`Astc10X5SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc10X5SrgbBlock = 174,
    ///[`Astc10X6UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×6 rectangle of unsigned normalized RGBA texel data.
    Astc10X6UnormBlock = 175,
    ///[`Astc10X6SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×6 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc10X6SrgbBlock = 176,
    ///[`Astc10X8UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×8 rectangle of unsigned normalized RGBA texel data.
    Astc10X8UnormBlock = 177,
    ///[`Astc10X8SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×8 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc10X8SrgbBlock = 178,
    ///[`Astc10X10UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×10 rectangle of unsigned normalized RGBA texel data.
    Astc10X10UnormBlock = 179,
    ///[`Astc10X10SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×10 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc10X10SrgbBlock = 180,
    ///[`Astc12X10UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×10 rectangle of unsigned normalized RGBA texel data.
    Astc12X10UnormBlock = 181,
    ///[`Astc12X10SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×10 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc12X10SrgbBlock = 182,
    ///[`Astc12X12UnormBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×12 rectangle of unsigned normalized RGBA texel data.
    Astc12X12UnormBlock = 183,
    ///[`Astc12X12SrgbBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×12 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    Astc12X12SrgbBlock = 184,
    ///[`G8B8G8R8422Unorm`] specifies a four-component, 32-bit
    ///format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has an 8-bit G component for the even *i* coordinate in byte
    ///0, an 8-bit B component in byte 1, an 8-bit G component for the odd *i*
    ///coordinate in byte 2, and an 8-bit R component in byte 3.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G8B8G8R8422Unorm = 1000156000,
    ///[`B8G8R8G8422Unorm`] specifies a four-component, 32-bit
    ///format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has an 8-bit B component in byte 0, an 8-bit G component for
    ///the even *i* coordinate in byte 1, an 8-bit R component in byte 2, and
    ///an 8-bit G component for the odd *i* coordinate in byte 3.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    B8G8R8G8422Unorm = 1000156001,
    ///[`G8B8R83Plane420Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
    /// style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
    /// delimcenter">⌋</span></span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span><span class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G8B8R83Plane420Unorm = 1000156002,
    ///[`G8B8R82Plane420Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
    ///component in byte 0 and an 8-bit R component in byte 1.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G8B8R82Plane420Unorm = 1000156003,
    ///[`G8B8R83Plane422Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G8B8R83Plane422Unorm = 1000156004,
    ///[`G8B8R82Plane422Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
    ///component in byte 0 and an 8-bit R component in byte 1.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G8B8R82Plane422Unorm = 1000156005,
    ///[`G8B8R83Plane444Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G8B8R83Plane444Unorm = 1000156006,
    ///[`R10X6UnormPack16`] specifies a one-component, 16-bit
    ///unsigned normalized format that has a single 10-bit R component in the
    ///top 10 bits of a 16-bit word, with the bottom 6 bits unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    R10X6UnormPack16 = 1000156007,
    ///[`R10X6G10X6Unorm2Pack16`] specifies a two-component,
    ///32-bit unsigned normalized format that has a 10-bit R component in the
    ///top 10 bits of the word in bytes 0..1, and a 10-bit G component in the
    ///top 10 bits of the word in bytes 2..3, with the bottom 6 bits of each
    ///word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    R10X6G10X6Unorm2Pack16 = 1000156008,
    ///[`R10X6G10X6B10X6A10X6Unorm4Pack16`] specifies a
    ///four-component, 64-bit unsigned normalized format that has a 10-bit R
    ///component in the top 10 bits of the word in bytes 0..1, a 10-bit G
    ///component in the top 10 bits of the word in bytes 2..3, a 10-bit B
    ///component in the top 10 bits of the word in bytes 4..5, and a 10-bit A
    ///component in the top 10 bits of the word in bytes 6..7, with the bottom
    ///6 bits of each word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    R10X6G10X6B10X6A10X6Unorm4Pack16 = 1000156009,
    ///[`G10X6B10X6G10X6R10X6422Unorm4Pack16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 10-bit G component for the even *i* coordinate in the
    ///top 10 bits of the word in bytes 0..1, a 10-bit B component in the top
    ///10 bits of the word in bytes 2..3, a 10-bit G component for the odd *i*
    ///coordinate in the top 10 bits of the word in bytes 4..5, and a 10-bit R
    ///component in the top 10 bits of the word in bytes 6..7, with the bottom
    ///6 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G10X6B10X6G10X6R10X6422Unorm4Pack16 = 1000156010,
    ///[`B10X6G10X6R10X6G10X6422Unorm4Pack16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 10-bit B component in the top 10 bits of the word in
    ///bytes 0..1, a 10-bit G component for the even *i* coordinate in the top
    ///10 bits of the word in bytes 2..3, a 10-bit R component in the top 10
    ///bits of the word in bytes 4..5, and a 10-bit G component for the odd *i*
    ///coordinate in the top 10 bits of the word in bytes 6..7, with the bottom
    ///6 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    B10X6G10X6R10X6G10X6422Unorm4Pack16 = 1000156011,
    ///[`G10X6B10X6R10X63Plane420Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
    ///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
    ///component in the top 10 bits of each 16-bit word of plane 2, with the
    ///bottom 6 bits of each word unused.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span class="mopen delimcenter"
    /// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G10X6B10X6R10X63Plane420Unorm3Pack16 = 1000156012,
    ///[`G10X6B10X6R10X62Plane420Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
    ///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
    ///of the word in bytes 2..3, with the bottom 6 bits of each word unused.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span aria-hidden="true"
    /// class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span style="top:0em;" class="mopen
    /// delimcenter">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G10X6B10X6R10X62Plane420Unorm3Pack16 = 1000156013,
    ///[`G10X6B10X6R10X63Plane422Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
    ///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
    ///component in the top 10 bits of each 16-bit word of plane 2, with the
    ///bottom 6 bits of each word unused.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
    /// delimcenter">⌋</span></span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G10X6B10X6R10X63Plane422Unorm3Pack16 = 1000156014,
    ///[`G10X6B10X6R10X62Plane422Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
    ///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
    ///of the word in bytes 2..3, with the bottom 6 bits of each word unused.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G10X6B10X6R10X62Plane422Unorm3Pack16 = 1000156015,
    ///[`G10X6B10X6R10X63Plane444Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
    ///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
    ///component in the top 10 bits of each 16-bit word of plane 2, with the
    ///bottom 6 bits of each word unused.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G10X6B10X6R10X63Plane444Unorm3Pack16 = 1000156016,
    ///[`R12X4UnormPack16`] specifies a one-component, 16-bit
    ///unsigned normalized format that has a single 12-bit R component in the
    ///top 12 bits of a 16-bit word, with the bottom 4 bits unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    R12X4UnormPack16 = 1000156017,
    ///[`R12X4G12X4Unorm2Pack16`] specifies a two-component,
    ///32-bit unsigned normalized format that has a 12-bit R component in the
    ///top 12 bits of the word in bytes 0..1, and a 12-bit G component in the
    ///top 12 bits of the word in bytes 2..3, with the bottom 4 bits of each
    ///word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    R12X4G12X4Unorm2Pack16 = 1000156018,
    ///[`R12X4G12X4B12X4A12X4Unorm4Pack16`] specifies a
    ///four-component, 64-bit unsigned normalized format that has a 12-bit R
    ///component in the top 12 bits of the word in bytes 0..1, a 12-bit G
    ///component in the top 12 bits of the word in bytes 2..3, a 12-bit B
    ///component in the top 12 bits of the word in bytes 4..5, and a 12-bit A
    ///component in the top 12 bits of the word in bytes 6..7, with the bottom
    ///4 bits of each word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    R12X4G12X4B12X4A12X4Unorm4Pack16 = 1000156019,
    ///[`G12X4B12X4G12X4R12X4422Unorm4Pack16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 12-bit G component for the even *i* coordinate in the
    ///top 12 bits of the word in bytes 0..1, a 12-bit B component in the top
    ///12 bits of the word in bytes 2..3, a 12-bit G component for the odd *i*
    ///coordinate in the top 12 bits of the word in bytes 4..5, and a 12-bit R
    ///component in the top 12 bits of the word in bytes 6..7, with the bottom
    ///4 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G12X4B12X4G12X4R12X4422Unorm4Pack16 = 1000156020,
    ///[`B12X4G12X4R12X4G12X4422Unorm4Pack16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 12-bit B component in the top 12 bits of the word in
    ///bytes 0..1, a 12-bit G component for the even *i* coordinate in the top
    ///12 bits of the word in bytes 2..3, a 12-bit R component in the top 12
    ///bits of the word in bytes 4..5, and a 12-bit G component for the odd *i*
    ///coordinate in the top 12 bits of the word in bytes 6..7, with the bottom
    ///4 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    B12X4G12X4R12X4G12X4422Unorm4Pack16 = 1000156021,
    ///[`G12X4B12X4R12X43Plane420Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
    ///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
    ///component in the top 12 bits of each 16-bit word of plane 2, with the
    ///bottom 4 bits of each word unused.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span class="mopen delimcenter"
    /// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
    /// delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G12X4B12X4R12X43Plane420Unorm3Pack16 = 1000156022,
    ///[`G12X4B12X4R12X42Plane420Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
    ///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
    ///of the word in bytes 2..3, with the bottom 4 bits of each word unused.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.85396em;vertical-align:-0.19444em;"
    /// class="strut"></span><span class="mord"><span style="margin-right:0.05724em;" class="mord
    /// mathdefault">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G12X4B12X4R12X42Plane420Unorm3Pack16 = 1000156023,
    ///[`G12X4B12X4R12X43Plane422Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
    ///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
    ///component in the top 12 bits of each 16-bit word of plane 2, with the
    ///bottom 4 bits of each word unused.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
    /// style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G12X4B12X4R12X43Plane422Unorm3Pack16 = 1000156024,
    ///[`G12X4B12X4R12X42Plane422Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
    ///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
    ///of the word in bytes 2..3, with the bottom 4 bits of each word unused.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G12X4B12X4R12X42Plane422Unorm3Pack16 = 1000156025,
    ///[`G12X4B12X4R12X43Plane444Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
    ///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
    ///component in the top 12 bits of each 16-bit word of plane 2, with the
    ///bottom 4 bits of each word unused.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G12X4B12X4R12X43Plane444Unorm3Pack16 = 1000156026,
    ///[`G16B16G16R16422Unorm`] specifies a four-component,
    ///64-bit format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 16-bit G component for the even *i* coordinate in the
    ///word in bytes 0..1, a 16-bit B component in the word in bytes 2..3, a
    ///16-bit G component for the odd *i* coordinate in the word in bytes 4..5,
    ///and a 16-bit R component in the word in bytes 6..7.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G16B16G16R16422Unorm = 1000156027,
    ///[`B16G16R16G16422Unorm`] specifies a four-component,
    ///64-bit format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 16-bit B component in the word in bytes 0..1, a 16-bit
    ///G component for the even *i* coordinate in the word in bytes 2..3, a
    ///16-bit R component in the word in bytes 4..5, and a 16-bit G component
    ///for the odd *i* coordinate in the word in bytes 6..7.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    B16G16R16G16422Unorm = 1000156028,
    ///[`G16B16R163Plane420Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
    ///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span style="top:0em;" class="mclose
    /// delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
    /// class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G16B16R163Plane420Unorm = 1000156029,
    ///[`G16B16R162Plane420Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
    ///consisting of a 16-bit B component in the word in bytes 0..1, and a
    ///16-bit R component in the word in bytes 2..3.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span aria-hidden="true"
    /// class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span style="top:0em;" class="mopen
    /// delimcenter">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
    /// style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.85396em;vertical-align:-0.19444em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault"
    /// style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
    /// vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G16B16R162Plane420Unorm = 1000156030,
    ///[`G16B16R163Plane422Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
    ///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G16B16R163Plane422Unorm = 1000156031,
    ///[`G16B16R162Plane422Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
    ///consisting of a 16-bit B component in the word in bytes 0..1, and a
    ///16-bit R component in the word in bytes 2..3.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G16B16R162Plane422Unorm = 1000156032,
    ///[`G16B16R163Plane444Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
    ///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    G16B16R163Plane444Unorm = 1000156033,
    ///[`G8B8R82Plane444Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
    ///component in byte 0 and an 8-bit R component in byte 1.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    G8B8R82Plane444Unorm = 1000330000,
    ///[`G10X6B10X6R10X62Plane444Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
    ///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
    ///of the word in bytes 2..3, the bottom 6 bits of each word unused.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    G10X6B10X6R10X62Plane444Unorm3Pack16 = 1000330001,
    ///[`G12X4B12X4R12X42Plane444Unorm3Pack16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
    ///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
    ///of the word in bytes 2..3, the bottom 4 bits of each word unused.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    G12X4B12X4R12X42Plane444Unorm3Pack16 = 1000330002,
    ///[`G16B16R162Plane444Unorm`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
    ///consisting of a 16-bit B component in the word in bytes 0..1, and a
    ///16-bit R component in the word in bytes 2..3.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    G16B16R162Plane444Unorm = 1000330003,
    ///[`A4R4G4B4UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit A component in bits
    ///12..15, a 4-bit R component in bits 8..11, a 4-bit G component in bits
    ///4..7, and a 4-bit B component in bits 0..3.
    ///
    ///Provided by [`crate::vulkan1_3`]
    A4R4G4B4UnormPack16 = 1000340000,
    ///[`A4B4G4R4UnormPack16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit A component in bits
    ///12..15, a 4-bit B component in bits 8..11, a 4-bit G component in bits
    ///4..7, and a 4-bit R component in bits 0..3.
    ///
    ///Provided by [`crate::vulkan1_3`]
    A4B4G4R4UnormPack16 = 1000340001,
    ///[`Astc4X4SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc4X4SfloatBlock = 1000066000,
    ///[`Astc5X4SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×4 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc5X4SfloatBlock = 1000066001,
    ///[`Astc5X5SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc5X5SfloatBlock = 1000066002,
    ///[`Astc6X5SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc6X5SfloatBlock = 1000066003,
    ///[`Astc6X6SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×6 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc6X6SfloatBlock = 1000066004,
    ///[`Astc8X5SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///8×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc8X5SfloatBlock = 1000066005,
    ///[`Astc8X6SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///8×6 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc8X6SfloatBlock = 1000066006,
    ///[`Astc8X8SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///8×8 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc8X8SfloatBlock = 1000066007,
    ///[`Astc10X5SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc10X5SfloatBlock = 1000066008,
    ///[`Astc10X6SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×6 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc10X6SfloatBlock = 1000066009,
    ///[`Astc10X8SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×8 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc10X8SfloatBlock = 1000066010,
    ///[`Astc10X10SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×10 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc10X10SfloatBlock = 1000066011,
    ///[`Astc12X10SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×10 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc12X10SfloatBlock = 1000066012,
    ///[`Astc12X12SfloatBlock`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×12 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    Astc12X12SfloatBlock = 1000066013,
    ///[`Pvrtc12BppUnormBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc12BppUnormBlockImg = 1000054000,
    ///[`Pvrtc14BppUnormBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc14BppUnormBlockImg = 1000054001,
    ///[`Pvrtc22BppUnormBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc22BppUnormBlockImg = 1000054002,
    ///[`Pvrtc24BppUnormBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc24BppUnormBlockImg = 1000054003,
    ///[`Pvrtc12BppSrgbBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc12BppSrgbBlockImg = 1000054004,
    ///[`Pvrtc14BppSrgbBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc14BppSrgbBlockImg = 1000054005,
    ///[`Pvrtc22BppSrgbBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc22BppSrgbBlockImg = 1000054006,
    ///[`Pvrtc24BppSrgbBlockImg`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    Pvrtc24BppSrgbBlockImg = 1000054007,
}
impl const Default for Format {
    fn default() -> Self {
        Undefined
    }
}
impl Format {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkStructureType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkStructureType.html) - Vulkan structure types (pname:sType)
///# C Specifications
///Each value corresponds to a particular structure with a `sType` member
///with a matching name.
///As a general rule, the name of each [`StructureType`] value is obtained
///by taking the name of the structure, stripping the leading `Vk`,
///prefixing each capital letter with `_`, converting the entire resulting
///string to upper case, and prefixing it with `VK_STRUCTURE_TYPE_`.
///For example, structures of type [`ImageCreateInfo`] correspond to a
///[`StructureType`] of [`ImageCreateInfo`], and thus
///its `sType` member **must** equal that when it is passed to the API.The values
/// [`LoaderInstanceCreateInfo`] and
///[`LoaderDeviceCreateInfo`] are reserved for internal
///use by the loader, and do not have corresponding Vulkan structures in this
///Specification.Structure types supported by the Vulkan API include:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkStructureType {
///    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
///    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
///    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
///    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
///    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
///    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
///    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
///    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
///    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
///    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
///    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
///    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
///    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
///    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
///    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
///    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
///    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
///    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
///    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
///    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
///    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
///    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
///    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
///    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
///    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
///    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
///    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
///    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
///    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
///    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
///    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
///    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
///    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
///    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
///    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
///    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
///  // Provided by VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
///  // Provided by VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_surface
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
///  // Provided by VK_KHR_display
///    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
///  // Provided by VK_KHR_display
///    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
///  // Provided by VK_KHR_display_swapchain
///    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
///  // Provided by VK_KHR_xlib_surface
///    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
///  // Provided by VK_KHR_xcb_surface
///    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
///  // Provided by VK_KHR_wayland_surface
///    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
///  // Provided by VK_KHR_android_surface
///    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
///  // Provided by VK_KHR_win32_surface
///    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
///  // Provided by VK_EXT_debug_report
///    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
///  // Provided by VK_AMD_rasterization_order
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
///  // Provided by VK_EXT_debug_marker
///    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
///  // Provided by VK_EXT_debug_marker
///    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
///  // Provided by VK_EXT_debug_marker
///    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR = 1000023000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR = 1000023002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR = 1000023003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR = 1000023004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR = 1000023011,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000023012,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR = 1000023013,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR = 1000023016,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001,
///#endif
///  // Provided by VK_NV_dedicated_allocation
///    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
///  // Provided by VK_NV_dedicated_allocation
///    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
///  // Provided by VK_NV_dedicated_allocation
///    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
///  // Provided by VK_EXT_transform_feedback
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
///  // Provided by VK_EXT_transform_feedback
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
///  // Provided by VK_EXT_transform_feedback
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
///  // Provided by VK_NVX_binary_import
///    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
///  // Provided by VK_NVX_binary_import
///    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
///  // Provided by VK_NVX_binary_import
///    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
///  // Provided by VK_NVX_image_view_handle
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
///  // Provided by VK_NVX_image_view_handle
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = 1000038001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT = 1000038004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT = 1000038006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT = 1000038007,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT = 1000038008,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = 1000038009,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = 1000038010,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_EXT = 1000038011,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT = 1000039000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT = 1000039001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000039002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000039003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT = 1000039004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = 1000039005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_EXT = 1000039006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT = 1000039007,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT = 1000039008,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT = 1000039009,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = 1000039010,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = 1000039011,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT = 1000040000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT = 1000040001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT = 1000040002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT = 1000040003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT = 1000040004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000040005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000040006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT = 1000040007,
///#endif
///  // Provided by VK_AMD_texture_gather_bias_lod
///    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
///  // Provided by VK_KHR_dynamic_rendering with VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
///  // Provided by VK_KHR_dynamic_rendering with VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
///  // Provided by VK_KHR_dynamic_rendering with VK_AMD_mixed_attachment_samples
///    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
///  // Provided by VK_KHR_dynamic_rendering with VK_NVX_multiview_per_view_attributes
///    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
///  // Provided by VK_GGP_stream_descriptor_surface
///    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
///  // Provided by VK_NV_corner_sampled_image
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
///  // Provided by VK_NV_external_memory
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
///  // Provided by VK_NV_external_memory
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
///  // Provided by VK_NV_external_memory_win32
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
///  // Provided by VK_NV_external_memory_win32
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
///  // Provided by VK_NV_win32_keyed_mutex
///    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
///  // Provided by VK_EXT_validation_flags
///    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
///  // Provided by VK_NN_vi_surface
///    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
///  // Provided by VK_EXT_astc_decode_mode
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
///  // Provided by VK_EXT_astc_decode_mode
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
///  // Provided by VK_KHR_external_memory_fd
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
///  // Provided by VK_KHR_external_memory_fd
///    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
///  // Provided by VK_KHR_external_memory_fd
///    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
///  // Provided by VK_KHR_win32_keyed_mutex
///    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
///  // Provided by VK_KHR_external_semaphore_fd
///    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
///  // Provided by VK_KHR_external_semaphore_fd
///    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
///  // Provided by VK_KHR_push_descriptor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
///  // Provided by VK_EXT_conditional_rendering
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
///  // Provided by VK_EXT_conditional_rendering
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
///  // Provided by VK_EXT_conditional_rendering
///    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
///  // Provided by VK_KHR_incremental_present
///    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
///  // Provided by VK_NV_clip_space_w_scaling
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
///  // Provided by VK_EXT_display_surface_counter
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
///  // Provided by VK_GOOGLE_display_timing
///    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
///  // Provided by VK_NVX_multiview_per_view_attributes
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
///  // Provided by VK_NV_viewport_swizzle
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
///  // Provided by VK_EXT_discard_rectangles
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
///  // Provided by VK_EXT_discard_rectangles
///    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
///  // Provided by VK_EXT_conservative_rasterization
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
///  // Provided by VK_EXT_conservative_rasterization
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
///  // Provided by VK_EXT_depth_clip_enable
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
///  // Provided by VK_EXT_depth_clip_enable
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
///  // Provided by VK_EXT_hdr_metadata
///    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
///  // Provided by VK_KHR_shared_presentable_image
///    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
///  // Provided by VK_KHR_external_fence_win32
///    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
///  // Provided by VK_KHR_external_fence_win32
///    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
///  // Provided by VK_KHR_external_fence_win32
///    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
///  // Provided by VK_KHR_external_fence_fd
///    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
///  // Provided by VK_KHR_external_fence_fd
///    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
///  // Provided by VK_KHR_get_surface_capabilities2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
///  // Provided by VK_KHR_get_surface_capabilities2
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
///  // Provided by VK_KHR_get_surface_capabilities2
///    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
///  // Provided by VK_MVK_ios_surface
///    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
///  // Provided by VK_MVK_macos_surface
///    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
///  // Provided by VK_KHR_format_feature_flags2 with
/// VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
///  // Provided by VK_NV_fragment_coverage_to_color
///    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
///  // Provided by VK_KHR_ray_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
///  // Provided by VK_NV_framebuffer_mixed_samples
///    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
///  // Provided by VK_NV_shader_sm_builtins
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
///  // Provided by VK_NV_shader_sm_builtins
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
///  // Provided by VK_KHR_format_feature_flags2 with VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
///  // Provided by VK_EXT_validation_cache
///    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
///  // Provided by VK_EXT_validation_cache
///    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_portability_subset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_portability_subset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
///#endif
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
///  // Provided by VK_NV_representative_fragment_test
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
///  // Provided by VK_NV_representative_fragment_test
///    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
///  // Provided by VK_EXT_filter_cubic
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
///  // Provided by VK_EXT_filter_cubic
///    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
///  // Provided by VK_EXT_external_memory_host
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
///  // Provided by VK_EXT_external_memory_host
///    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
///  // Provided by VK_EXT_external_memory_host
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
///  // Provided by VK_KHR_shader_clock
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
///  // Provided by VK_AMD_pipeline_compiler_control
///    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
///  // Provided by VK_EXT_calibrated_timestamps
///    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
///  // Provided by VK_AMD_shader_core_properties
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT = 1000187000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT = 1000187001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000187002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000187003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT = 1000187004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT = 1000187005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT = 1000187006,
///#endif
///  // Provided by VK_KHR_global_priority
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000,
///  // Provided by VK_KHR_global_priority
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000,
///  // Provided by VK_KHR_global_priority
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001,
///  // Provided by VK_AMD_memory_overallocation_behavior
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
///  // Provided by VK_EXT_vertex_attribute_divisor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
///  // Provided by VK_EXT_vertex_attribute_divisor
///    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
///  // Provided by VK_EXT_vertex_attribute_divisor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
///  // Provided by VK_GGP_frame_token
///    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
///  // Provided by VK_NV_compute_shader_derivatives
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
///  // Provided by VK_NV_mesh_shader
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
///  // Provided by VK_NV_mesh_shader
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
///  // Provided by VK_NV_fragment_shader_barycentric
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
///  // Provided by VK_NV_shader_image_footprint
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
///  // Provided by VK_NV_scissor_exclusive
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
///  // Provided by VK_NV_scissor_exclusive
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
///  // Provided by VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
///  // Provided by VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
///  // Provided by VK_INTEL_shader_integer_functions2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
///  // Provided by VK_EXT_pci_bus_info
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
///  // Provided by VK_AMD_display_native_hdr
///    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
///  // Provided by VK_AMD_display_native_hdr
///    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
///  // Provided by VK_FUCHSIA_imagepipe_surface
///    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
///  // Provided by VK_EXT_metal_surface
///    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
///  // Provided by VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
///  // Provided by VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
///  // Provided by VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
///  // Provided by VK_AMD_shader_core_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
///  // Provided by VK_AMD_device_coherent_memory
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
///  // Provided by VK_EXT_shader_image_atomic_int64
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
///  // Provided by VK_EXT_memory_budget
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
///  // Provided by VK_EXT_memory_priority
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
///  // Provided by VK_EXT_memory_priority
///    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
///  // Provided by VK_KHR_surface_protected_capabilities
///    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
///  // Provided by VK_NV_dedicated_allocation_image_aliasing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV =
/// 1000240000,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
///  // Provided by VK_EXT_validation_features
///    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
///  // Provided by VK_KHR_present_wait
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
///  // Provided by VK_NV_cooperative_matrix
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
///  // Provided by VK_NV_cooperative_matrix
///    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
///  // Provided by VK_NV_cooperative_matrix
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
///  // Provided by VK_NV_coverage_reduction_mode
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
///  // Provided by VK_NV_coverage_reduction_mode
///    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
///  // Provided by VK_NV_coverage_reduction_mode
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
///  // Provided by VK_EXT_fragment_shader_interlock
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
///  // Provided by VK_EXT_ycbcr_image_arrays
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
///  // Provided by VK_EXT_provoking_vertex
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
///  // Provided by VK_EXT_provoking_vertex
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
///  // Provided by VK_EXT_provoking_vertex
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
///  // Provided by VK_EXT_full_screen_exclusive
///    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
///  // Provided by VK_EXT_full_screen_exclusive
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
///  // Provided by VK_KHR_win32_surface with VK_EXT_full_screen_exclusive
///    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
///  // Provided by VK_EXT_headless_surface
///    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
///  // Provided by VK_EXT_line_rasterization
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
///  // Provided by VK_EXT_line_rasterization
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
///  // Provided by VK_EXT_line_rasterization
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
///  // Provided by VK_EXT_shader_atomic_float
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
///  // Provided by VK_EXT_index_type_uint8
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
///  // Provided by VK_EXT_shader_atomic_float2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
///  // Provided by VK_NV_inherited_viewport_scissor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
///  // Provided by VK_NV_inherited_viewport_scissor
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
///  // Provided by VK_EXT_texel_buffer_alignment
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
///  // Provided by VK_QCOM_render_pass_transform
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
///  // Provided by VK_QCOM_render_pass_transform
///    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
///  // Provided by VK_EXT_device_memory_report
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
///  // Provided by VK_EXT_device_memory_report
///    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
///  // Provided by VK_EXT_device_memory_report
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
///  // Provided by VK_EXT_robustness2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
///  // Provided by VK_EXT_robustness2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
///  // Provided by VK_EXT_custom_border_color
///    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
///  // Provided by VK_EXT_custom_border_color
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
///  // Provided by VK_EXT_custom_border_color
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
///  // Provided by VK_KHR_pipeline_library
///    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
///  // Provided by VK_KHR_present_id
///    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
///  // Provided by VK_KHR_present_id
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003,
///#endif
///  // Provided by VK_NV_device_diagnostics_config
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
///  // Provided by VK_NV_device_diagnostics_config
///    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
///  // Provided by VK_KHR_synchronization2 with VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
///  // Provided by VK_KHR_synchronization2 with VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
///  // Provided by VK_KHR_shader_subgroup_uniform_control_flow
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR =
/// 1000323000,
///  // Provided by VK_NV_fragment_shading_rate_enums
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
///  // Provided by VK_NV_fragment_shading_rate_enums
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
///  // Provided by VK_NV_fragment_shading_rate_enums
///    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
///  // Provided by VK_NV_ray_tracing_motion_blur
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
///  // Provided by VK_NV_ray_tracing_motion_blur
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
///  // Provided by VK_NV_ray_tracing_motion_blur
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
///  // Provided by VK_EXT_fragment_density_map2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
///  // Provided by VK_EXT_fragment_density_map2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
///  // Provided by VK_QCOM_rotated_copy_commands
///    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
///  // Provided by VK_KHR_workgroup_memory_explicit_layout
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
///  // Provided by VK_EXT_4444_formats
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
///  // Provided by VK_ARM_rasterization_order_attachment_access
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM =
/// 1000342000,
///  // Provided by VK_EXT_rgba10x6_formats
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
///  // Provided by VK_EXT_directfb_surface
///    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
///  // Provided by VK_VALVE_mutable_descriptor_type
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
///  // Provided by VK_VALVE_mutable_descriptor_type
///    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
///  // Provided by VK_EXT_physical_device_drm
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
///  // Provided by VK_EXT_depth_clip_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
///  // Provided by VK_EXT_depth_clip_control
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
///  // Provided by VK_EXT_primitive_topology_list_restart
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
///  // Provided by VK_FUCHSIA_external_memory
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
///  // Provided by VK_FUCHSIA_external_memory
///    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
///  // Provided by VK_FUCHSIA_external_memory
///    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
///  // Provided by VK_FUCHSIA_external_semaphore
///    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
///  // Provided by VK_FUCHSIA_external_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
///  // Provided by VK_HUAWEI_invocation_mask
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
///  // Provided by VK_NV_external_memory_rdma
///    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
///  // Provided by VK_NV_external_memory_rdma
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
///  // Provided by VK_QNX_screen_surface
///    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
///  // Provided by VK_EXT_color_write_enable
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
///  // Provided by VK_EXT_color_write_enable
///    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
///  // Provided by VK_EXT_image_view_min_lod
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
///  // Provided by VK_EXT_image_view_min_lod
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
///  // Provided by VK_EXT_multi_draw
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
///  // Provided by VK_EXT_multi_draw
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
///  // Provided by VK_EXT_border_color_swizzle
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
///  // Provided by VK_EXT_border_color_swizzle
///    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
///  // Provided by VK_EXT_pageable_device_local_memory
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
///  // Provided by VK_VALVE_descriptor_set_host_mapping
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000,
///  // Provided by VK_VALVE_descriptor_set_host_mapping
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001,
///  // Provided by VK_VALVE_descriptor_set_host_mapping
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002,
///  // Provided by VK_QCOM_fragment_density_map_offset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
///  // Provided by VK_QCOM_fragment_density_map_offset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
///  // Provided by VK_QCOM_fragment_density_map_offset
///    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
///  // Provided by VK_NV_linear_color_attachment
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
///  // Provided by VK_EXT_debug_report
///    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR =
/// VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
///  // Provided by VK_KHR_dynamic_rendering with VK_NV_framebuffer_mixed_samples
///    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV =
/// VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
///  // Provided by VK_KHR_multiview
///    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
///  // Provided by VK_KHR_multiview
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
///  // Provided by VK_KHR_multiview
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
///  // Provided by VK_KHR_bind_memory2 with VK_KHR_device_group
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR =
/// VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
///  // Provided by VK_KHR_bind_memory2 with VK_KHR_device_group
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR =
/// VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
///  // Provided by VK_KHR_device_group_creation
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
///  // Provided by VK_KHR_device_group_creation
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
///  // Provided by VK_KHR_external_fence_capabilities, VK_KHR_external_memory_capabilities,
/// VK_KHR_external_semaphore_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
///  // Provided by VK_KHR_external_memory
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
///  // Provided by VK_KHR_external_memory
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
///  // Provided by VK_KHR_external_memory
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
///  // Provided by VK_KHR_external_semaphore_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
///  // Provided by VK_KHR_external_semaphore_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
///  // Provided by VK_KHR_external_semaphore
///    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
///  // Provided by VK_KHR_shader_float16_int8
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
///  // Provided by VK_KHR_shader_float16_int8
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
///  // Provided by VK_KHR_16bit_storage
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
///  // Provided by VK_KHR_descriptor_update_template
///    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
///  // Provided by VK_EXT_display_surface_counter
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR =
/// VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
///  // Provided by VK_KHR_external_fence_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
///  // Provided by VK_KHR_external_fence_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
///  // Provided by VK_KHR_external_fence
///    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
///  // Provided by VK_KHR_variable_pointers
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
///  // Provided by VK_KHR_variable_pointers
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
///  // Provided by VK_KHR_dedicated_allocation
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
///  // Provided by VK_KHR_dedicated_allocation
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
///  // Provided by VK_EXT_sampler_filter_minmax
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
///  // Provided by VK_EXT_sampler_filter_minmax
///    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT =
/// VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR =
/// VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
///  // Provided by VK_KHR_image_format_list
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR =
/// VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR =
/// VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
///  // Provided by VK_KHR_bind_memory2
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
///  // Provided by VK_KHR_bind_memory2
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
///  // Provided by VK_KHR_maintenance3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
///  // Provided by VK_KHR_maintenance3
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
///  // Provided by VK_EXT_global_priority
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR,
///  // Provided by VK_KHR_shader_subgroup_extended_types
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
///  // Provided by VK_KHR_8bit_storage
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
///  // Provided by VK_KHR_shader_atomic_int64
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
///  // Provided by VK_EXT_pipeline_creation_feedback
///    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
///  // Provided by VK_KHR_driver_properties
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
///  // Provided by VK_KHR_shader_float_controls
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
///  // Provided by VK_KHR_depth_stencil_resolve
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
///  // Provided by VK_KHR_depth_stencil_resolve
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR =
/// VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR =
/// VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL =
/// VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
///  // Provided by VK_KHR_vulkan_memory_model
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
///  // Provided by VK_KHR_shader_terminate_invocation
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
///  // Provided by VK_EXT_scalar_block_layout
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
///  // Provided by VK_EXT_subgroup_size_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
///  // Provided by VK_EXT_subgroup_size_control
///    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
///  // Provided by VK_EXT_subgroup_size_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR =
/// VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR =
/// VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT =
/// VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
///  // Provided by VK_EXT_tooling_info
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
///  // Provided by VK_EXT_separate_stencil_usage
///    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
///  // Provided by VK_KHR_uniform_buffer_standard_layout
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR =
/// VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
///  // Provided by VK_EXT_host_query_reset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
///  // Provided by VK_EXT_shader_demote_to_helper_invocation
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
///  // Provided by VK_KHR_shader_integer_dot_product
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
///  // Provided by VK_KHR_shader_integer_dot_product
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
///  // Provided by VK_EXT_texel_buffer_alignment
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
///  // Provided by VK_EXT_private_data
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
///  // Provided by VK_EXT_private_data
///    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
///  // Provided by VK_EXT_private_data
///    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
///  // Provided by VK_EXT_pipeline_creation_cache_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR =
/// VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
///  // Provided by VK_KHR_zero_initialize_workgroup_memory
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
///  // Provided by VK_EXT_image_robustness
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
///  // Provided by VK_KHR_format_feature_flags2
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
///  // Provided by VK_EXT_global_priority_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,
///  // Provided by VK_EXT_global_priority_query
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
///} VkStructureType;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureBuildGeometryInfoKHR`]
/// - [`AccelerationStructureBuildSizesInfoKHR`]
/// - [`AccelerationStructureCreateInfoKHR`]
/// - [`AccelerationStructureCreateInfoNV`]
/// - [`AccelerationStructureDeviceAddressInfoKHR`]
/// - [`AccelerationStructureGeometryAabbsDataKHR`]
/// - [`AccelerationStructureGeometryInstancesDataKHR`]
/// - [`AccelerationStructureGeometryKHR`]
/// - [`AccelerationStructureGeometryMotionTrianglesDataNV`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`AccelerationStructureInfoNV`]
/// - [`AccelerationStructureMemoryRequirementsInfoNV`]
/// - [`AccelerationStructureMotionInfoNV`]
/// - [`AccelerationStructureVersionInfoKHR`]
/// - [`AcquireNextImageInfoKHR`]
/// - [`AcquireProfilingLockInfoKHR`]
/// - [`AndroidHardwareBufferFormatProperties2ANDROID`]
/// - [`AndroidHardwareBufferFormatPropertiesANDROID`]
/// - [`AndroidHardwareBufferPropertiesANDROID`]
/// - [`AndroidHardwareBufferUsageANDROID`]
/// - [`AndroidSurfaceCreateInfoKHR`]
/// - [`ApplicationInfo`]
/// - [`AttachmentDescription2`]
/// - [`AttachmentDescriptionStencilLayout`]
/// - [`AttachmentReference2`]
/// - [`AttachmentReferenceStencilLayout`]
/// - [`AttachmentSampleCountInfoAMD`]
/// - [`BaseInStructure`]
/// - [`BaseOutStructure`]
/// - [`BindAccelerationStructureMemoryInfoNV`]
/// - [`BindBufferMemoryDeviceGroupInfo`]
/// - [`BindBufferMemoryInfo`]
/// - [`BindImageMemoryDeviceGroupInfo`]
/// - [`BindImageMemoryInfo`]
/// - [`BindImageMemorySwapchainInfoKHR`]
/// - [`BindImagePlaneMemoryInfo`]
/// - [`BindSparseInfo`]
/// - [`BlitImageInfo2`]
/// - [`BufferCollectionBufferCreateInfoFUCHSIA`]
/// - [`BufferCollectionConstraintsInfoFUCHSIA`]
/// - [`BufferCollectionCreateInfoFUCHSIA`]
/// - [`BufferCollectionImageCreateInfoFUCHSIA`]
/// - [`BufferCollectionPropertiesFUCHSIA`]
/// - [`BufferConstraintsInfoFUCHSIA`]
/// - [`BufferCopy2`]
/// - [`BufferCreateInfo`]
/// - [`BufferDeviceAddressCreateInfoEXT`]
/// - [`BufferDeviceAddressInfo`]
/// - [`BufferImageCopy2`]
/// - [`BufferMemoryBarrier`]
/// - [`BufferMemoryBarrier2`]
/// - [`BufferMemoryRequirementsInfo2`]
/// - [`BufferOpaqueCaptureAddressCreateInfo`]
/// - [`BufferViewCreateInfo`]
/// - [`CalibratedTimestampInfoEXT`]
/// - [`CheckpointData2NV`]
/// - [`CheckpointDataNV`]
/// - [`CommandBufferAllocateInfo`]
/// - [`CommandBufferBeginInfo`]
/// - [`CommandBufferInheritanceConditionalRenderingInfoEXT`]
/// - [`CommandBufferInheritanceInfo`]
/// - [`CommandBufferInheritanceRenderPassTransformInfoQCOM`]
/// - [`CommandBufferInheritanceRenderingInfo`]
/// - [`CommandBufferInheritanceViewportScissorInfoNV`]
/// - [`CommandBufferSubmitInfo`]
/// - [`CommandPoolCreateInfo`]
/// - [`ComputePipelineCreateInfo`]
/// - [`ConditionalRenderingBeginInfoEXT`]
/// - [`CooperativeMatrixPropertiesNV`]
/// - [`CopyAccelerationStructureInfoKHR`]
/// - [`CopyAccelerationStructureToMemoryInfoKHR`]
/// - [`CopyBufferInfo2`]
/// - [`CopyBufferToImageInfo2`]
/// - [`CopyCommandTransformInfoQCOM`]
/// - [`CopyDescriptorSet`]
/// - [`CopyImageInfo2`]
/// - [`CopyImageToBufferInfo2`]
/// - [`CopyMemoryToAccelerationStructureInfoKHR`]
/// - [`CuFunctionCreateInfoNVX`]
/// - [`CuLaunchInfoNVX`]
/// - [`CuModuleCreateInfoNVX`]
/// - [`D3D12FenceSubmitInfoKHR`]
/// - [`DebugMarkerMarkerInfoEXT`]
/// - [`DebugMarkerObjectNameInfoEXT`]
/// - [`DebugMarkerObjectTagInfoEXT`]
/// - [`DebugReportCallbackCreateInfoEXT`]
/// - [`DebugUtilsLabelEXT`]
/// - [`DebugUtilsMessengerCallbackDataEXT`]
/// - [`DebugUtilsMessengerCreateInfoEXT`]
/// - [`DebugUtilsObjectNameInfoEXT`]
/// - [`DebugUtilsObjectTagInfoEXT`]
/// - [`DedicatedAllocationBufferCreateInfoNV`]
/// - [`DedicatedAllocationImageCreateInfoNV`]
/// - [`DedicatedAllocationMemoryAllocateInfoNV`]
/// - [`DependencyInfo`]
/// - [`DescriptorPoolCreateInfo`]
/// - [`DescriptorPoolInlineUniformBlockCreateInfo`]
/// - [`DescriptorSetAllocateInfo`]
/// - [`DescriptorSetBindingReferenceVALVE`]
/// - [`DescriptorSetLayoutBindingFlagsCreateInfo`]
/// - [`DescriptorSetLayoutCreateInfo`]
/// - [`DescriptorSetLayoutHostMappingInfoVALVE`]
/// - [`DescriptorSetLayoutSupport`]
/// - [`DescriptorSetVariableDescriptorCountAllocateInfo`]
/// - [`DescriptorSetVariableDescriptorCountLayoutSupport`]
/// - [`DescriptorUpdateTemplateCreateInfo`]
/// - [`DeviceBufferMemoryRequirements`]
/// - [`DeviceCreateInfo`]
/// - [`DeviceDeviceMemoryReportCreateInfoEXT`]
/// - [`DeviceDiagnosticsConfigCreateInfoNV`]
/// - [`DeviceEventInfoEXT`]
/// - [`DeviceGroupBindSparseInfo`]
/// - [`DeviceGroupCommandBufferBeginInfo`]
/// - [`DeviceGroupDeviceCreateInfo`]
/// - [`DeviceGroupPresentCapabilitiesKHR`]
/// - [`DeviceGroupPresentInfoKHR`]
/// - [`DeviceGroupRenderPassBeginInfo`]
/// - [`DeviceGroupSubmitInfo`]
/// - [`DeviceGroupSwapchainCreateInfoKHR`]
/// - [`DeviceImageMemoryRequirements`]
/// - [`DeviceMemoryOpaqueCaptureAddressInfo`]
/// - [`DeviceMemoryOverallocationCreateInfoAMD`]
/// - [`DeviceMemoryReportCallbackDataEXT`]
/// - [`DevicePrivateDataCreateInfo`]
/// - [`DeviceQueueCreateInfo`]
/// - [`DeviceQueueGlobalPriorityCreateInfoKHR`]
/// - [`DeviceQueueInfo2`]
/// - [`DirectFBSurfaceCreateInfoEXT`]
/// - [`DisplayEventInfoEXT`]
/// - [`DisplayModeCreateInfoKHR`]
/// - [`DisplayModeProperties2KHR`]
/// - [`DisplayNativeHdrSurfaceCapabilitiesAMD`]
/// - [`DisplayPlaneCapabilities2KHR`]
/// - [`DisplayPlaneInfo2KHR`]
/// - [`DisplayPlaneProperties2KHR`]
/// - [`DisplayPowerInfoEXT`]
/// - [`DisplayPresentInfoKHR`]
/// - [`DisplayProperties2KHR`]
/// - [`DisplaySurfaceCreateInfoKHR`]
/// - [`DrmFormatModifierPropertiesList2EXT`]
/// - [`DrmFormatModifierPropertiesListEXT`]
/// - [`EventCreateInfo`]
/// - [`ExportFenceCreateInfo`]
/// - [`ExportFenceWin32HandleInfoKHR`]
/// - [`ExportMemoryAllocateInfo`]
/// - [`ExportMemoryAllocateInfoNV`]
/// - [`ExportMemoryWin32HandleInfoKHR`]
/// - [`ExportMemoryWin32HandleInfoNV`]
/// - [`ExportSemaphoreCreateInfo`]
/// - [`ExportSemaphoreWin32HandleInfoKHR`]
/// - [`ExternalBufferProperties`]
/// - [`ExternalFenceProperties`]
/// - [`ExternalFormatANDROID`]
/// - [`ExternalImageFormatProperties`]
/// - [`ExternalMemoryBufferCreateInfo`]
/// - [`ExternalMemoryImageCreateInfo`]
/// - [`ExternalMemoryImageCreateInfoNV`]
/// - [`ExternalSemaphoreProperties`]
/// - [`FenceCreateInfo`]
/// - [`FenceGetFdInfoKHR`]
/// - [`FenceGetWin32HandleInfoKHR`]
/// - [`FilterCubicImageViewImageFormatPropertiesEXT`]
/// - [`FormatProperties2`]
/// - [`FormatProperties3`]
/// - [`FragmentShadingRateAttachmentInfoKHR`]
/// - [`FramebufferAttachmentImageInfo`]
/// - [`FramebufferAttachmentsCreateInfo`]
/// - [`FramebufferCreateInfo`]
/// - [`FramebufferMixedSamplesCombinationNV`]
/// - [`GeneratedCommandsInfoNV`]
/// - [`GeneratedCommandsMemoryRequirementsInfoNV`]
/// - [`GeometryAabbNV`]
/// - [`GeometryNV`]
/// - [`GeometryTrianglesNV`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`GraphicsPipelineShaderGroupsCreateInfoNV`]
/// - [`GraphicsShaderGroupCreateInfoNV`]
/// - [`HdrMetadataEXT`]
/// - [`HeadlessSurfaceCreateInfoEXT`]
/// - [`IosSurfaceCreateInfoMVK`]
/// - [`ImageBlit2`]
/// - [`ImageConstraintsInfoFUCHSIA`]
/// - [`ImageCopy2`]
/// - [`ImageCreateInfo`]
/// - [`ImageDrmFormatModifierExplicitCreateInfoEXT`]
/// - [`ImageDrmFormatModifierListCreateInfoEXT`]
/// - [`ImageDrmFormatModifierPropertiesEXT`]
/// - [`ImageFormatConstraintsInfoFUCHSIA`]
/// - [`ImageFormatListCreateInfo`]
/// - [`ImageFormatProperties2`]
/// - [`ImageMemoryBarrier`]
/// - [`ImageMemoryBarrier2`]
/// - [`ImageMemoryRequirementsInfo2`]
/// - [`ImagePipeSurfaceCreateInfoFUCHSIA`]
/// - [`ImagePlaneMemoryRequirementsInfo`]
/// - [`ImageResolve2`]
/// - [`ImageSparseMemoryRequirementsInfo2`]
/// - [`ImageStencilUsageCreateInfo`]
/// - [`ImageSwapchainCreateInfoKHR`]
/// - [`ImageViewAstcDecodeModeEXT`]
/// - [`ImageViewAddressPropertiesNVX`]
/// - [`ImageViewCreateInfo`]
/// - [`ImageViewHandleInfoNVX`]
/// - [`ImageViewMinLodCreateInfoEXT`]
/// - [`ImageViewUsageCreateInfo`]
/// - [`ImportAndroidHardwareBufferInfoANDROID`]
/// - [`ImportFenceFdInfoKHR`]
/// - [`ImportFenceWin32HandleInfoKHR`]
/// - [`ImportMemoryBufferCollectionFUCHSIA`]
/// - [`ImportMemoryFdInfoKHR`]
/// - [`ImportMemoryHostPointerInfoEXT`]
/// - [`ImportMemoryWin32HandleInfoKHR`]
/// - [`ImportMemoryWin32HandleInfoNV`]
/// - [`ImportMemoryZirconHandleInfoFUCHSIA`]
/// - [`ImportSemaphoreFdInfoKHR`]
/// - [`ImportSemaphoreWin32HandleInfoKHR`]
/// - [`ImportSemaphoreZirconHandleInfoFUCHSIA`]
/// - [`IndirectCommandsLayoutCreateInfoNV`]
/// - [`IndirectCommandsLayoutTokenNV`]
/// - [`InitializePerformanceApiInfoINTEL`]
/// - [`InstanceCreateInfo`]
/// - [`MacOsSurfaceCreateInfoMVK`]
/// - [`MappedMemoryRange`]
/// - [`MemoryAllocateFlagsInfo`]
/// - [`MemoryAllocateInfo`]
/// - [`MemoryBarrier`]
/// - [`MemoryBarrier2`]
/// - [`MemoryDedicatedAllocateInfo`]
/// - [`MemoryDedicatedRequirements`]
/// - [`MemoryFdPropertiesKHR`]
/// - [`MemoryGetAndroidHardwareBufferInfoANDROID`]
/// - [`MemoryGetFdInfoKHR`]
/// - [`MemoryGetRemoteAddressInfoNV`]
/// - [`MemoryGetWin32HandleInfoKHR`]
/// - [`MemoryGetZirconHandleInfoFUCHSIA`]
/// - [`MemoryHostPointerPropertiesEXT`]
/// - [`MemoryOpaqueCaptureAddressAllocateInfo`]
/// - [`MemoryPriorityAllocateInfoEXT`]
/// - [`MemoryRequirements2`]
/// - [`MemoryWin32HandlePropertiesKHR`]
/// - [`MemoryZirconHandlePropertiesFUCHSIA`]
/// - [`MetalSurfaceCreateInfoEXT`]
/// - [`MultisamplePropertiesEXT`]
/// - [`MultiviewPerViewAttributesInfoNVX`]
/// - [`MutableDescriptorTypeCreateInfoVALVE`]
/// - [`PerformanceConfigurationAcquireInfoINTEL`]
/// - [`PerformanceCounterDescriptionKHR`]
/// - [`PerformanceCounterKHR`]
/// - [`PerformanceMarkerInfoINTEL`]
/// - [`PerformanceOverrideInfoINTEL`]
/// - [`PerformanceQuerySubmitInfoKHR`]
/// - [`PerformanceStreamMarkerInfoINTEL`]
/// - [`PhysicalDevice16BitStorageFeatures`]
/// - [`PhysicalDevice4444FormatsFeaturesEXT`]
/// - [`PhysicalDevice8BitStorageFeatures`]
/// - [`PhysicalDeviceAstcDecodeFeaturesEXT`]
/// - [`PhysicalDeviceAccelerationStructureFeaturesKHR`]
/// - [`PhysicalDeviceAccelerationStructurePropertiesKHR`]
/// - [`PhysicalDeviceBlendOperationAdvancedFeaturesEXT`]
/// - [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT`]
/// - [`PhysicalDeviceBorderColorSwizzleFeaturesEXT`]
/// - [`PhysicalDeviceBufferDeviceAddressFeatures`]
/// - [`PhysicalDeviceBufferDeviceAddressFeaturesEXT`]
/// - [`PhysicalDeviceCoherentMemoryFeaturesAMD`]
/// - [`PhysicalDeviceColorWriteEnableFeaturesEXT`]
/// - [`PhysicalDeviceComputeShaderDerivativesFeaturesNV`]
/// - [`PhysicalDeviceConditionalRenderingFeaturesEXT`]
/// - [`PhysicalDeviceConservativeRasterizationPropertiesEXT`]
/// - [`PhysicalDeviceCooperativeMatrixFeaturesNV`]
/// - [`PhysicalDeviceCooperativeMatrixPropertiesNV`]
/// - [`PhysicalDeviceCornerSampledImageFeaturesNV`]
/// - [`PhysicalDeviceCoverageReductionModeFeaturesNV`]
/// - [`PhysicalDeviceCustomBorderColorFeaturesEXT`]
/// - [`PhysicalDeviceCustomBorderColorPropertiesEXT`]
/// - [`PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV`]
/// - [`PhysicalDeviceDepthClipControlFeaturesEXT`]
/// - [`PhysicalDeviceDepthClipEnableFeaturesEXT`]
/// - [`PhysicalDeviceDepthStencilResolveProperties`]
/// - [`PhysicalDeviceDescriptorIndexingFeatures`]
/// - [`PhysicalDeviceDescriptorIndexingProperties`]
/// - [`PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE`]
/// - [`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV`]
/// - [`PhysicalDeviceDeviceGeneratedCommandsPropertiesNV`]
/// - [`PhysicalDeviceDeviceMemoryReportFeaturesEXT`]
/// - [`PhysicalDeviceDiagnosticsConfigFeaturesNV`]
/// - [`PhysicalDeviceDiscardRectanglePropertiesEXT`]
/// - [`PhysicalDeviceDriverProperties`]
/// - [`PhysicalDeviceDrmPropertiesEXT`]
/// - [`PhysicalDeviceDynamicRenderingFeatures`]
/// - [`PhysicalDeviceExclusiveScissorFeaturesNV`]
/// - [`PhysicalDeviceExtendedDynamicState2FeaturesEXT`]
/// - [`PhysicalDeviceExtendedDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceExternalBufferInfo`]
/// - [`PhysicalDeviceExternalFenceInfo`]
/// - [`PhysicalDeviceExternalImageFormatInfo`]
/// - [`PhysicalDeviceExternalMemoryHostPropertiesEXT`]
/// - [`PhysicalDeviceExternalMemoryRdmaFeaturesNV`]
/// - [`PhysicalDeviceExternalSemaphoreInfo`]
/// - [`PhysicalDeviceFeatures2`]
/// - [`PhysicalDeviceFloatControlsProperties`]
/// - [`PhysicalDeviceFragmentDensityMap2FeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMap2PropertiesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapFeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapPropertiesEXT`]
/// - [`PhysicalDeviceFragmentShaderBarycentricFeaturesNV`]
/// - [`PhysicalDeviceFragmentShaderInterlockFeaturesEXT`]
/// - [`PhysicalDeviceFragmentShadingRateEnumsFeaturesNV`]
/// - [`PhysicalDeviceFragmentShadingRateEnumsPropertiesNV`]
/// - [`PhysicalDeviceFragmentShadingRateFeaturesKHR`]
/// - [`PhysicalDeviceFragmentShadingRateKHR`]
/// - [`PhysicalDeviceFragmentShadingRatePropertiesKHR`]
/// - [`PhysicalDeviceGlobalPriorityQueryFeaturesKHR`]
/// - [`PhysicalDeviceGroupProperties`]
/// - [`PhysicalDeviceHostQueryResetFeatures`]
/// - [`PhysicalDeviceIdProperties`]
/// - [`PhysicalDeviceImageDrmFormatModifierInfoEXT`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceImageRobustnessFeatures`]
/// - [`PhysicalDeviceImageViewImageFormatInfoEXT`]
/// - [`PhysicalDeviceImageViewMinLodFeaturesEXT`]
/// - [`PhysicalDeviceImagelessFramebufferFeatures`]
/// - [`PhysicalDeviceIndexTypeUint8FeaturesEXT`]
/// - [`PhysicalDeviceInheritedViewportScissorFeaturesNV`]
/// - [`PhysicalDeviceInlineUniformBlockFeatures`]
/// - [`PhysicalDeviceInlineUniformBlockProperties`]
/// - [`PhysicalDeviceInvocationMaskFeaturesHUAWEI`]
/// - [`PhysicalDeviceLineRasterizationFeaturesEXT`]
/// - [`PhysicalDeviceLineRasterizationPropertiesEXT`]
/// - [`PhysicalDeviceLinearColorAttachmentFeaturesNV`]
/// - [`PhysicalDeviceMaintenance3Properties`]
/// - [`PhysicalDeviceMaintenance4Features`]
/// - [`PhysicalDeviceMaintenance4Properties`]
/// - [`PhysicalDeviceMemoryBudgetPropertiesEXT`]
/// - [`PhysicalDeviceMemoryPriorityFeaturesEXT`]
/// - [`PhysicalDeviceMemoryProperties2`]
/// - [`PhysicalDeviceMeshShaderFeaturesNV`]
/// - [`PhysicalDeviceMeshShaderPropertiesNV`]
/// - [`PhysicalDeviceMultiDrawFeaturesEXT`]
/// - [`PhysicalDeviceMultiDrawPropertiesEXT`]
/// - [`PhysicalDeviceMultiviewFeatures`]
/// - [`PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX`]
/// - [`PhysicalDeviceMultiviewProperties`]
/// - [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE`]
/// - [`PhysicalDevicePciBusInfoPropertiesEXT`]
/// - [`PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT`]
/// - [`PhysicalDevicePerformanceQueryFeaturesKHR`]
/// - [`PhysicalDevicePerformanceQueryPropertiesKHR`]
/// - [`PhysicalDevicePipelineCreationCacheControlFeatures`]
/// - [`PhysicalDevicePipelineExecutablePropertiesFeaturesKHR`]
/// - [`PhysicalDevicePointClippingProperties`]
/// - [`PhysicalDevicePortabilitySubsetFeaturesKHR`]
/// - [`PhysicalDevicePortabilitySubsetPropertiesKHR`]
/// - [`PhysicalDevicePresentIdFeaturesKHR`]
/// - [`PhysicalDevicePresentWaitFeaturesKHR`]
/// - [`PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT`]
/// - [`PhysicalDevicePrivateDataFeatures`]
/// - [`PhysicalDeviceProperties2`]
/// - [`PhysicalDeviceProtectedMemoryFeatures`]
/// - [`PhysicalDeviceProtectedMemoryProperties`]
/// - [`PhysicalDeviceProvokingVertexFeaturesEXT`]
/// - [`PhysicalDeviceProvokingVertexPropertiesEXT`]
/// - [`PhysicalDevicePushDescriptorPropertiesKHR`]
/// - [`PhysicalDeviceRgba10X6FormatsFeaturesEXT`]
/// - [`PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM`]
/// - [`PhysicalDeviceRayQueryFeaturesKHR`]
/// - [`PhysicalDeviceRayTracingMotionBlurFeaturesNV`]
/// - [`PhysicalDeviceRayTracingPipelineFeaturesKHR`]
/// - [`PhysicalDeviceRayTracingPipelinePropertiesKHR`]
/// - [`PhysicalDeviceRayTracingPropertiesNV`]
/// - [`PhysicalDeviceRepresentativeFragmentTestFeaturesNV`]
/// - [`PhysicalDeviceRobustness2FeaturesEXT`]
/// - [`PhysicalDeviceRobustness2PropertiesEXT`]
/// - [`PhysicalDeviceSampleLocationsPropertiesEXT`]
/// - [`PhysicalDeviceSamplerFilterMinmaxProperties`]
/// - [`PhysicalDeviceSamplerYcbcrConversionFeatures`]
/// - [`PhysicalDeviceScalarBlockLayoutFeatures`]
/// - [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`]
/// - [`PhysicalDeviceShaderAtomicFloat2FeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicFloatFeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicInt64Features`]
/// - [`PhysicalDeviceShaderClockFeaturesKHR`]
/// - [`PhysicalDeviceShaderCoreProperties2AMD`]
/// - [`PhysicalDeviceShaderCorePropertiesAMD`]
/// - [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`]
/// - [`PhysicalDeviceShaderDrawParametersFeatures`]
/// - [`PhysicalDeviceShaderFloat16Int8Features`]
/// - [`PhysicalDeviceShaderImageAtomicInt64FeaturesEXT`]
/// - [`PhysicalDeviceShaderImageFootprintFeaturesNV`]
/// - [`PhysicalDeviceShaderIntegerDotProductFeatures`]
/// - [`PhysicalDeviceShaderIntegerDotProductProperties`]
/// - [`PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL`]
/// - [`PhysicalDeviceShaderSmBuiltinsFeaturesNV`]
/// - [`PhysicalDeviceShaderSmBuiltinsPropertiesNV`]
/// - [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`]
/// - [`PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR`]
/// - [`PhysicalDeviceShaderTerminateInvocationFeatures`]
/// - [`PhysicalDeviceShadingRateImageFeaturesNV`]
/// - [`PhysicalDeviceShadingRateImagePropertiesNV`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`PhysicalDeviceSubgroupProperties`]
/// - [`PhysicalDeviceSubgroupSizeControlFeatures`]
/// - [`PhysicalDeviceSubgroupSizeControlProperties`]
/// - [`PhysicalDeviceSubpassShadingFeaturesHUAWEI`]
/// - [`PhysicalDeviceSubpassShadingPropertiesHUAWEI`]
/// - [`PhysicalDeviceSurfaceInfo2KHR`]
/// - [`PhysicalDeviceSynchronization2Features`]
/// - [`PhysicalDeviceTexelBufferAlignmentFeaturesEXT`]
/// - [`PhysicalDeviceTexelBufferAlignmentProperties`]
/// - [`PhysicalDeviceTextureCompressionAstchdrFeatures`]
/// - [`PhysicalDeviceTimelineSemaphoreFeatures`]
/// - [`PhysicalDeviceTimelineSemaphoreProperties`]
/// - [`PhysicalDeviceToolProperties`]
/// - [`PhysicalDeviceTransformFeedbackFeaturesEXT`]
/// - [`PhysicalDeviceTransformFeedbackPropertiesEXT`]
/// - [`PhysicalDeviceUniformBufferStandardLayoutFeatures`]
/// - [`PhysicalDeviceVariablePointersFeatures`]
/// - [`PhysicalDeviceVertexAttributeDivisorFeaturesEXT`]
/// - [`PhysicalDeviceVertexAttributeDivisorPropertiesEXT`]
/// - [`PhysicalDeviceVertexInputDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceVideoFormatInfoKHR`]
/// - [`PhysicalDeviceVulkan11Features`]
/// - [`PhysicalDeviceVulkan11Properties`]
/// - [`PhysicalDeviceVulkan12Features`]
/// - [`PhysicalDeviceVulkan12Properties`]
/// - [`PhysicalDeviceVulkan13Features`]
/// - [`PhysicalDeviceVulkan13Properties`]
/// - [`PhysicalDeviceVulkanMemoryModelFeatures`]
/// - [`PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR`]
/// - [`PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT`]
/// - [`PhysicalDeviceYcbcrImageArraysFeaturesEXT`]
/// - [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`]
/// - [`PipelineCacheCreateInfo`]
/// - [`PipelineColorBlendAdvancedStateCreateInfoEXT`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`PipelineColorWriteCreateInfoEXT`]
/// - [`PipelineCompilerControlCreateInfoAMD`]
/// - [`PipelineCoverageModulationStateCreateInfoNV`]
/// - [`PipelineCoverageReductionStateCreateInfoNV`]
/// - [`PipelineCoverageToColorStateCreateInfoNV`]
/// - [`PipelineCreationFeedbackCreateInfo`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`PipelineDiscardRectangleStateCreateInfoEXT`]
/// - [`PipelineDynamicStateCreateInfo`]
/// - [`PipelineExecutableInfoKHR`]
/// - [`PipelineExecutableInternalRepresentationKHR`]
/// - [`PipelineExecutablePropertiesKHR`]
/// - [`PipelineExecutableStatisticKHR`]
/// - [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
/// - [`PipelineFragmentShadingRateStateCreateInfoKHR`]
/// - [`PipelineInfoKHR`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`PipelineLayoutCreateInfo`]
/// - [`PipelineLibraryCreateInfoKHR`]
/// - [`PipelineMultisampleStateCreateInfo`]
/// - [`PipelineRasterizationConservativeStateCreateInfoEXT`]
/// - [`PipelineRasterizationDepthClipStateCreateInfoEXT`]
/// - [`PipelineRasterizationLineStateCreateInfoEXT`]
/// - [`PipelineRasterizationProvokingVertexStateCreateInfoEXT`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`PipelineRasterizationStateRasterizationOrderAMD`]
/// - [`PipelineRasterizationStateStreamCreateInfoEXT`]
/// - [`PipelineRenderingCreateInfo`]
/// - [`PipelineRepresentativeFragmentTestStateCreateInfoNV`]
/// - [`PipelineSampleLocationsStateCreateInfoEXT`]
/// - [`PipelineShaderStageCreateInfo`]
/// - [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`]
/// - [`PipelineTessellationDomainOriginStateCreateInfo`]
/// - [`PipelineTessellationStateCreateInfo`]
/// - [`PipelineVertexInputDivisorStateCreateInfoEXT`]
/// - [`PipelineVertexInputStateCreateInfo`]
/// - [`PipelineViewportCoarseSampleOrderStateCreateInfoNV`]
/// - [`PipelineViewportDepthClipControlCreateInfoEXT`]
/// - [`PipelineViewportExclusiveScissorStateCreateInfoNV`]
/// - [`PipelineViewportShadingRateImageStateCreateInfoNV`]
/// - [`PipelineViewportStateCreateInfo`]
/// - [`PipelineViewportSwizzleStateCreateInfoNV`]
/// - [`PipelineViewportWScalingStateCreateInfoNV`]
/// - [`PresentFrameTokenGGP`]
/// - [`PresentIdKHR`]
/// - [`PresentInfoKHR`]
/// - [`PresentRegionsKHR`]
/// - [`PresentTimesInfoGOOGLE`]
/// - [`PrivateDataSlotCreateInfo`]
/// - [`ProtectedSubmitInfo`]
/// - [`QueryPoolCreateInfo`]
/// - [`QueryPoolPerformanceCreateInfoKHR`]
/// - [`QueryPoolPerformanceQueryCreateInfoINTEL`]
/// - [`QueueFamilyCheckpointProperties2NV`]
/// - [`QueueFamilyCheckpointPropertiesNV`]
/// - [`QueueFamilyGlobalPriorityPropertiesKHR`]
/// - [`QueueFamilyProperties2`]
/// - [`QueueFamilyQueryResultStatusProperties2KHR`]
/// - [`RayTracingPipelineCreateInfoKHR`]
/// - [`RayTracingPipelineCreateInfoNV`]
/// - [`RayTracingPipelineInterfaceCreateInfoKHR`]
/// - [`RayTracingShaderGroupCreateInfoKHR`]
/// - [`RayTracingShaderGroupCreateInfoNV`]
/// - [`RenderPassAttachmentBeginInfo`]
/// - [`RenderPassBeginInfo`]
/// - [`RenderPassCreateInfo`]
/// - [`RenderPassCreateInfo2`]
/// - [`RenderPassFragmentDensityMapCreateInfoEXT`]
/// - [`RenderPassInputAttachmentAspectCreateInfo`]
/// - [`RenderPassMultiviewCreateInfo`]
/// - [`RenderPassSampleLocationsBeginInfoEXT`]
/// - [`RenderPassTransformBeginInfoQCOM`]
/// - [`RenderingAttachmentInfo`]
/// - [`RenderingFragmentDensityMapAttachmentInfoEXT`]
/// - [`RenderingFragmentShadingRateAttachmentInfoKHR`]
/// - [`RenderingInfo`]
/// - [`ResolveImageInfo2`]
/// - [`SampleLocationsInfoEXT`]
/// - [`SamplerBorderColorComponentMappingCreateInfoEXT`]
/// - [`SamplerCreateInfo`]
/// - [`SamplerCustomBorderColorCreateInfoEXT`]
/// - [`SamplerReductionModeCreateInfo`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`SamplerYcbcrConversionImageFormatProperties`]
/// - [`SamplerYcbcrConversionInfo`]
/// - [`ScreenSurfaceCreateInfoQNX`]
/// - [`SemaphoreCreateInfo`]
/// - [`SemaphoreGetFdInfoKHR`]
/// - [`SemaphoreGetWin32HandleInfoKHR`]
/// - [`SemaphoreGetZirconHandleInfoFUCHSIA`]
/// - [`SemaphoreSignalInfo`]
/// - [`SemaphoreSubmitInfo`]
/// - [`SemaphoreTypeCreateInfo`]
/// - [`SemaphoreWaitInfo`]
/// - [`ShaderModuleCreateInfo`]
/// - [`ShaderModuleValidationCacheCreateInfoEXT`]
/// - [`SharedPresentSurfaceCapabilitiesKHR`]
/// - [`SparseImageFormatProperties2`]
/// - [`SparseImageMemoryRequirements2`]
/// - [`StreamDescriptorSurfaceCreateInfoGGP`]
/// - [`SubmitInfo`]
/// - [`SubmitInfo2`]
/// - [`SubpassBeginInfo`]
/// - [`SubpassDependency2`]
/// - [`SubpassDescription2`]
/// - [`SubpassDescriptionDepthStencilResolve`]
/// - [`SubpassEndInfo`]
/// - [`SubpassFragmentDensityMapOffsetEndInfoQCOM`]
/// - [`SubpassShadingPipelineCreateInfoHUAWEI`]
/// - [`SurfaceCapabilities2EXT`]
/// - [`SurfaceCapabilities2KHR`]
/// - [`SurfaceCapabilitiesFullScreenExclusiveEXT`]
/// - [`SurfaceFormat2KHR`]
/// - [`SurfaceFullScreenExclusiveInfoEXT`]
/// - [`SurfaceFullScreenExclusiveWin32InfoEXT`]
/// - [`SurfaceProtectedCapabilitiesKHR`]
/// - [`SwapchainCounterCreateInfoEXT`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`SwapchainDisplayNativeHdrCreateInfoAMD`]
/// - [`SysmemColorSpaceFUCHSIA`]
/// - [`TextureLodGatherFormatPropertiesAMD`]
/// - [`TimelineSemaphoreSubmitInfo`]
/// - [`ValidationCacheCreateInfoEXT`]
/// - [`ValidationFeaturesEXT`]
/// - [`ValidationFlagsEXT`]
/// - [`VertexInputAttributeDescription2EXT`]
/// - [`VertexInputBindingDescription2EXT`]
/// - [`ViSurfaceCreateInfoNN`]
/// - [`VideoBeginCodingInfoKHR`]
/// - [`VideoBindMemoryKHR`]
/// - [`VideoCapabilitiesKHR`]
/// - [`VideoCodingControlInfoKHR`]
/// - [`VideoDecodeCapabilitiesKHR`]
/// - [`VideoDecodeH264CapabilitiesEXT`]
/// - [`VideoDecodeH264DpbSlotInfoEXT`]
/// - [`VideoDecodeH264MvcEXT`]
/// - [`VideoDecodeH264PictureInfoEXT`]
/// - [`VideoDecodeH264ProfileEXT`]
/// - [`VideoDecodeH264SessionCreateInfoEXT`]
/// - [`VideoDecodeH264SessionParametersAddInfoEXT`]
/// - [`VideoDecodeH264SessionParametersCreateInfoEXT`]
/// - [`VideoDecodeH265CapabilitiesEXT`]
/// - [`VideoDecodeH265DpbSlotInfoEXT`]
/// - [`VideoDecodeH265PictureInfoEXT`]
/// - [`VideoDecodeH265ProfileEXT`]
/// - [`VideoDecodeH265SessionCreateInfoEXT`]
/// - [`VideoDecodeH265SessionParametersAddInfoEXT`]
/// - [`VideoDecodeH265SessionParametersCreateInfoEXT`]
/// - [`VideoDecodeInfoKHR`]
/// - [`VideoEncodeCapabilitiesKHR`]
/// - [`VideoEncodeH264CapabilitiesEXT`]
/// - [`VideoEncodeH264DpbSlotInfoEXT`]
/// - [`VideoEncodeH264EmitPictureParametersEXT`]
/// - [`VideoEncodeH264NaluSliceEXT`]
/// - [`VideoEncodeH264ProfileEXT`]
/// - [`VideoEncodeH264RateControlInfoEXT`]
/// - [`VideoEncodeH264RateControlLayerInfoEXT`]
/// - [`VideoEncodeH264ReferenceListsEXT`]
/// - [`VideoEncodeH264SessionCreateInfoEXT`]
/// - [`VideoEncodeH264SessionParametersAddInfoEXT`]
/// - [`VideoEncodeH264SessionParametersCreateInfoEXT`]
/// - [`VideoEncodeH264VclFrameInfoEXT`]
/// - [`VideoEncodeH265CapabilitiesEXT`]
/// - [`VideoEncodeH265DpbSlotInfoEXT`]
/// - [`VideoEncodeH265EmitPictureParametersEXT`]
/// - [`VideoEncodeH265NaluSliceSegmentEXT`]
/// - [`VideoEncodeH265ProfileEXT`]
/// - [`VideoEncodeH265RateControlInfoEXT`]
/// - [`VideoEncodeH265RateControlLayerInfoEXT`]
/// - [`VideoEncodeH265ReferenceListsEXT`]
/// - [`VideoEncodeH265SessionCreateInfoEXT`]
/// - [`VideoEncodeH265SessionParametersAddInfoEXT`]
/// - [`VideoEncodeH265SessionParametersCreateInfoEXT`]
/// - [`VideoEncodeH265VclFrameInfoEXT`]
/// - [`VideoEncodeInfoKHR`]
/// - [`VideoEncodeRateControlInfoKHR`]
/// - [`VideoEncodeRateControlLayerInfoKHR`]
/// - [`VideoEndCodingInfoKHR`]
/// - [`VideoFormatPropertiesKHR`]
/// - [`VideoGetMemoryPropertiesKHR`]
/// - [`VideoPictureResourceKHR`]
/// - [`VideoProfileKHR`]
/// - [`VideoProfilesKHR`]
/// - [`VideoQueueFamilyProperties2KHR`]
/// - [`VideoReferenceSlotKHR`]
/// - [`VideoSessionCreateInfoKHR`]
/// - [`VideoSessionParametersCreateInfoKHR`]
/// - [`VideoSessionParametersUpdateInfoKHR`]
/// - [`WaylandSurfaceCreateInfoKHR`]
/// - [`Win32KeyedMutexAcquireReleaseInfoKHR`]
/// - [`Win32KeyedMutexAcquireReleaseInfoNV`]
/// - [`Win32SurfaceCreateInfoKHR`]
/// - [`WriteDescriptorSet`]
/// - [`WriteDescriptorSetAccelerationStructureKHR`]
/// - [`WriteDescriptorSetAccelerationStructureNV`]
/// - [`WriteDescriptorSetInlineUniformBlock`]
/// - [`XcbSurfaceCreateInfoKHR`]
/// - [`XlibSurfaceCreateInfoKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkStructureType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum StructureType {
    ///No documentation found
    ApplicationInfo = 0,
    ///No documentation found
    InstanceCreateInfo = 1,
    ///No documentation found
    DeviceQueueCreateInfo = 2,
    ///No documentation found
    DeviceCreateInfo = 3,
    ///No documentation found
    SubmitInfo = 4,
    ///No documentation found
    MemoryAllocateInfo = 5,
    ///No documentation found
    MappedMemoryRange = 6,
    ///No documentation found
    BindSparseInfo = 7,
    ///No documentation found
    FenceCreateInfo = 8,
    ///No documentation found
    SemaphoreCreateInfo = 9,
    ///No documentation found
    EventCreateInfo = 10,
    ///No documentation found
    QueryPoolCreateInfo = 11,
    ///No documentation found
    BufferCreateInfo = 12,
    ///No documentation found
    BufferViewCreateInfo = 13,
    ///No documentation found
    ImageCreateInfo = 14,
    ///No documentation found
    ImageViewCreateInfo = 15,
    ///No documentation found
    ShaderModuleCreateInfo = 16,
    ///No documentation found
    PipelineCacheCreateInfo = 17,
    ///No documentation found
    PipelineShaderStageCreateInfo = 18,
    ///No documentation found
    PipelineVertexInputStateCreateInfo = 19,
    ///No documentation found
    PipelineInputAssemblyStateCreateInfo = 20,
    ///No documentation found
    PipelineTessellationStateCreateInfo = 21,
    ///No documentation found
    PipelineViewportStateCreateInfo = 22,
    ///No documentation found
    PipelineRasterizationStateCreateInfo = 23,
    ///No documentation found
    PipelineMultisampleStateCreateInfo = 24,
    ///No documentation found
    PipelineDepthStencilStateCreateInfo = 25,
    ///No documentation found
    PipelineColorBlendStateCreateInfo = 26,
    ///No documentation found
    PipelineDynamicStateCreateInfo = 27,
    ///No documentation found
    GraphicsPipelineCreateInfo = 28,
    ///No documentation found
    ComputePipelineCreateInfo = 29,
    ///No documentation found
    PipelineLayoutCreateInfo = 30,
    ///No documentation found
    SamplerCreateInfo = 31,
    ///No documentation found
    DescriptorSetLayoutCreateInfo = 32,
    ///No documentation found
    DescriptorPoolCreateInfo = 33,
    ///No documentation found
    DescriptorSetAllocateInfo = 34,
    ///No documentation found
    WriteDescriptorSet = 35,
    ///No documentation found
    CopyDescriptorSet = 36,
    ///No documentation found
    FramebufferCreateInfo = 37,
    ///No documentation found
    RenderPassCreateInfo = 38,
    ///No documentation found
    CommandPoolCreateInfo = 39,
    ///No documentation found
    CommandBufferAllocateInfo = 40,
    ///No documentation found
    CommandBufferInheritanceInfo = 41,
    ///No documentation found
    CommandBufferBeginInfo = 42,
    ///No documentation found
    RenderPassBeginInfo = 43,
    ///No documentation found
    BufferMemoryBarrier = 44,
    ///No documentation found
    ImageMemoryBarrier = 45,
    ///No documentation found
    MemoryBarrier = 46,
    ///No documentation found
    LoaderInstanceCreateInfo = 47,
    ///No documentation found
    LoaderDeviceCreateInfo = 48,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceSubgroupProperties = 1000094000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    BindBufferMemoryInfo = 1000157000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    BindImageMemoryInfo = 1000157001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDevice16BitStorageFeatures = 1000083000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    MemoryDedicatedRequirements = 1000127000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    MemoryDedicatedAllocateInfo = 1000127001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    MemoryAllocateFlagsInfo = 1000060000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DeviceGroupRenderPassBeginInfo = 1000060003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DeviceGroupCommandBufferBeginInfo = 1000060004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DeviceGroupSubmitInfo = 1000060005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DeviceGroupBindSparseInfo = 1000060006,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    BindBufferMemoryDeviceGroupInfo = 1000060013,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    BindImageMemoryDeviceGroupInfo = 1000060014,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceGroupProperties = 1000070000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DeviceGroupDeviceCreateInfo = 1000070001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    BufferMemoryRequirementsInfo2 = 1000146000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ImageMemoryRequirementsInfo2 = 1000146001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ImageSparseMemoryRequirementsInfo2 = 1000146002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    MemoryRequirements2 = 1000146003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    SparseImageMemoryRequirements2 = 1000146004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceFeatures2 = 1000059000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceProperties2 = 1000059001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    FormatProperties2 = 1000059002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ImageFormatProperties2 = 1000059003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceImageFormatInfo2 = 1000059004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    QueueFamilyProperties2 = 1000059005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceMemoryProperties2 = 1000059006,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    SparseImageFormatProperties2 = 1000059007,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceSparseImageFormatInfo2 = 1000059008,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDevicePointClippingProperties = 1000117000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    RenderPassInputAttachmentAspectCreateInfo = 1000117001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ImageViewUsageCreateInfo = 1000117002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PipelineTessellationDomainOriginStateCreateInfo = 1000117003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    RenderPassMultiviewCreateInfo = 1000053000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceMultiviewFeatures = 1000053001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceMultiviewProperties = 1000053002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceVariablePointersFeatures = 1000120000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ProtectedSubmitInfo = 1000145000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceProtectedMemoryFeatures = 1000145001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceProtectedMemoryProperties = 1000145002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DeviceQueueInfo2 = 1000145003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    SamplerYcbcrConversionCreateInfo = 1000156000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    SamplerYcbcrConversionInfo = 1000156001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    BindImagePlaneMemoryInfo = 1000156002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ImagePlaneMemoryRequirementsInfo = 1000156003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceSamplerYcbcrConversionFeatures = 1000156004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    SamplerYcbcrConversionImageFormatProperties = 1000156005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DescriptorUpdateTemplateCreateInfo = 1000085000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceExternalImageFormatInfo = 1000071000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExternalImageFormatProperties = 1000071001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceExternalBufferInfo = 1000071002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExternalBufferProperties = 1000071003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceIdProperties = 1000071004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExternalMemoryBufferCreateInfo = 1000072000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExternalMemoryImageCreateInfo = 1000072001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExportMemoryAllocateInfo = 1000072002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceExternalFenceInfo = 1000112000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExternalFenceProperties = 1000112001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExportFenceCreateInfo = 1000113000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExportSemaphoreCreateInfo = 1000077000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceExternalSemaphoreInfo = 1000076000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    ExternalSemaphoreProperties = 1000076001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceMaintenance3Properties = 1000168000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DescriptorSetLayoutSupport = 1000168001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    PhysicalDeviceShaderDrawParametersFeatures = 1000063000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceVulkan11Features = 49,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceVulkan11Properties = 50,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceVulkan12Features = 51,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceVulkan12Properties = 52,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    ImageFormatListCreateInfo = 1000147000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    AttachmentDescription2 = 1000109000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    AttachmentReference2 = 1000109001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SubpassDescription2 = 1000109002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SubpassDependency2 = 1000109003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    RenderPassCreateInfo2 = 1000109004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SubpassBeginInfo = 1000109005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SubpassEndInfo = 1000109006,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDevice8BitStorageFeatures = 1000177000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceDriverProperties = 1000196000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceShaderAtomicInt64Features = 1000180000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceShaderFloat16Int8Features = 1000082000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceFloatControlsProperties = 1000197000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    DescriptorSetLayoutBindingFlagsCreateInfo = 1000161000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceDescriptorIndexingFeatures = 1000161001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceDescriptorIndexingProperties = 1000161002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    DescriptorSetVariableDescriptorCountAllocateInfo = 1000161003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    DescriptorSetVariableDescriptorCountLayoutSupport = 1000161004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceDepthStencilResolveProperties = 1000199000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SubpassDescriptionDepthStencilResolve = 1000199001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceScalarBlockLayoutFeatures = 1000221000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    ImageStencilUsageCreateInfo = 1000246000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceSamplerFilterMinmaxProperties = 1000130000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SamplerReductionModeCreateInfo = 1000130001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceVulkanMemoryModelFeatures = 1000211000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceImagelessFramebufferFeatures = 1000108000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    FramebufferAttachmentsCreateInfo = 1000108001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    FramebufferAttachmentImageInfo = 1000108002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    RenderPassAttachmentBeginInfo = 1000108003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceUniformBufferStandardLayoutFeatures = 1000253000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceShaderSubgroupExtendedTypesFeatures = 1000175000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceSeparateDepthStencilLayoutsFeatures = 1000241000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    AttachmentReferenceStencilLayout = 1000241001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    AttachmentDescriptionStencilLayout = 1000241002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceHostQueryResetFeatures = 1000261000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceTimelineSemaphoreFeatures = 1000207000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceTimelineSemaphoreProperties = 1000207001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SemaphoreTypeCreateInfo = 1000207002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    TimelineSemaphoreSubmitInfo = 1000207003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SemaphoreWaitInfo = 1000207004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    SemaphoreSignalInfo = 1000207005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    PhysicalDeviceBufferDeviceAddressFeatures = 1000257000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    BufferDeviceAddressInfo = 1000244001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    BufferOpaqueCaptureAddressCreateInfo = 1000257002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    MemoryOpaqueCaptureAddressAllocateInfo = 1000257003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    DeviceMemoryOpaqueCaptureAddressInfo = 1000257004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceVulkan13Features = 53,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceVulkan13Properties = 54,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PipelineCreationFeedbackCreateInfo = 1000192000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceShaderTerminateInvocationFeatures = 1000215000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceToolProperties = 1000245000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceShaderDemoteToHelperInvocationFeatures = 1000276000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDevicePrivateDataFeatures = 1000295000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    DevicePrivateDataCreateInfo = 1000295001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PrivateDataSlotCreateInfo = 1000295002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDevicePipelineCreationCacheControlFeatures = 1000297000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    MemoryBarrier2 = 1000314000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    BufferMemoryBarrier2 = 1000314001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    ImageMemoryBarrier2 = 1000314002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    DependencyInfo = 1000314003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    SubmitInfo2 = 1000314004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    SemaphoreSubmitInfo = 1000314005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    CommandBufferSubmitInfo = 1000314006,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceSynchronization2Features = 1000314007,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 1000325000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceImageRobustnessFeatures = 1000335000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    CopyBufferInfo2 = 1000337000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    CopyImageInfo2 = 1000337001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    CopyBufferToImageInfo2 = 1000337002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    CopyImageToBufferInfo2 = 1000337003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    BlitImageInfo2 = 1000337004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    ResolveImageInfo2 = 1000337005,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    BufferCopy2 = 1000337006,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    ImageCopy2 = 1000337007,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    ImageBlit2 = 1000337008,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    BufferImageCopy2 = 1000337009,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    ImageResolve2 = 1000337010,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceSubgroupSizeControlProperties = 1000225000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PipelineShaderStageRequiredSubgroupSizeCreateInfo = 1000225001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceSubgroupSizeControlFeatures = 1000225002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceInlineUniformBlockFeatures = 1000138000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceInlineUniformBlockProperties = 1000138001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    WriteDescriptorSetInlineUniformBlock = 1000138002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    DescriptorPoolInlineUniformBlockCreateInfo = 1000138003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceTextureCompressionAstcHdrFeatures = 1000066000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    RenderingInfo = 1000044000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    RenderingAttachmentInfo = 1000044001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PipelineRenderingCreateInfo = 1000044002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceDynamicRenderingFeatures = 1000044003,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    CommandBufferInheritanceRenderingInfo = 1000044004,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceShaderIntegerDotProductFeatures = 1000280000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceShaderIntegerDotProductProperties = 1000280001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceTexelBufferAlignmentProperties = 1000281001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    FormatProperties3 = 1000360000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceMaintenance4Features = 1000413000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PhysicalDeviceMaintenance4Properties = 1000413001,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    DeviceBufferMemoryRequirements = 1000413002,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    DeviceImageMemoryRequirements = 1000413003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    SwapchainCreateInfoKhr = 1000001000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    PresentInfoKhr = 1000001001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    DeviceGroupPresentCapabilitiesKhr = 1000060007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    ImageSwapchainCreateInfoKhr = 1000060008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    BindImageMemorySwapchainInfoKhr = 1000060009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    AcquireNextImageInfoKhr = 1000060010,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    DeviceGroupPresentInfoKhr = 1000060011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    DeviceGroupSwapchainCreateInfoKhr = 1000060012,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    DisplayModeCreateInfoKhr = 1000002000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    DisplaySurfaceCreateInfoKhr = 1000002001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display_swapchain`]
    DisplayPresentInfoKhr = 1000003000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_xlib_surface`]
    XlibSurfaceCreateInfoKhr = 1000004000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_xcb_surface`]
    XcbSurfaceCreateInfoKhr = 1000005000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_wayland_surface`]
    WaylandSurfaceCreateInfoKhr = 1000006000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_android_surface`]
    AndroidSurfaceCreateInfoKhr = 1000008000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_win_32_surface`]
    Win32SurfaceCreateInfoKhr = 1000009000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    DebugReportCallbackCreateInfoExt = 1000011000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_rasterization_order`]
    PipelineRasterizationStateRasterizationOrderAmd = 1000018000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_marker`]
    DebugMarkerObjectNameInfoExt = 1000022000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_marker`]
    DebugMarkerObjectTagInfoExt = 1000022001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_marker`]
    DebugMarkerMarkerInfoExt = 1000022002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoProfileKhr = 1000023000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoCapabilitiesKhr = 1000023001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoPictureResourceKhr = 1000023002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoGetMemoryPropertiesKhr = 1000023003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoBindMemoryKhr = 1000023004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoSessionCreateInfoKhr = 1000023005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoSessionParametersCreateInfoKhr = 1000023006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoSessionParametersUpdateInfoKhr = 1000023007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoBeginCodingInfoKhr = 1000023008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoEndCodingInfoKhr = 1000023009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoCodingControlInfoKhr = 1000023010,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoReferenceSlotKhr = 1000023011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoQueueFamilyProperties2Khr = 1000023012,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoProfilesKhr = 1000023013,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    PhysicalDeviceVideoFormatInfoKhr = 1000023014,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoFormatPropertiesKhr = 1000023015,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    QueueFamilyQueryResultStatusProperties2Khr = 1000023016,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    VideoDecodeInfoKhr = 1000024000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    VideoDecodeCapabilitiesKhr = 1000024001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation`]
    DedicatedAllocationImageCreateInfoNv = 1000026000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation`]
    DedicatedAllocationBufferCreateInfoNv = 1000026001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation`]
    DedicatedAllocationMemoryAllocateInfoNv = 1000026002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    PhysicalDeviceTransformFeedbackFeaturesExt = 1000028000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    PhysicalDeviceTransformFeedbackPropertiesExt = 1000028001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    PipelineRasterizationStateStreamCreateInfoExt = 1000028002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    CuModuleCreateInfoNvx = 1000029000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    CuFunctionCreateInfoNvx = 1000029001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    CuLaunchInfoNvx = 1000029002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_image_view_handle`]
    ImageViewHandleInfoNvx = 1000030000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_image_view_handle`]
    ImageViewAddressPropertiesNvx = 1000030001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264CapabilitiesExt = 1000038000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264SessionCreateInfoExt = 1000038001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264SessionParametersCreateInfoExt = 1000038002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264SessionParametersAddInfoExt = 1000038003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264VclFrameInfoExt = 1000038004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264DpbSlotInfoExt = 1000038005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264NaluSliceExt = 1000038006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264EmitPictureParametersExt = 1000038007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264ProfileExt = 1000038008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264RateControlInfoExt = 1000038009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264RateControlLayerInfoExt = 1000038010,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    VideoEncodeH264ReferenceListsExt = 1000038011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265CapabilitiesExt = 1000039000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265SessionCreateInfoExt = 1000039001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265SessionParametersCreateInfoExt = 1000039002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265SessionParametersAddInfoExt = 1000039003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265VclFrameInfoExt = 1000039004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265DpbSlotInfoExt = 1000039005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265NaluSliceSegmentExt = 1000039006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265EmitPictureParametersExt = 1000039007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265ProfileExt = 1000039008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265ReferenceListsExt = 1000039009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265RateControlInfoExt = 1000039010,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    VideoEncodeH265RateControlLayerInfoExt = 1000039011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264CapabilitiesExt = 1000040000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264SessionCreateInfoExt = 1000040001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264PictureInfoExt = 1000040002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264MvcExt = 1000040003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264ProfileExt = 1000040004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264SessionParametersCreateInfoExt = 1000040005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264SessionParametersAddInfoExt = 1000040006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    VideoDecodeH264DpbSlotInfoExt = 1000040007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_texture_gather_bias_lod`]
    TextureLodGatherFormatPropertiesAmd = 1000041000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    RenderingFragmentShadingRateAttachmentInfoKhr = 1000044006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    RenderingFragmentDensityMapAttachmentInfoExt = 1000044007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    AttachmentSampleCountInfoAmd = 1000044008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    MultiviewPerViewAttributesInfoNvx = 1000044009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ggp_stream_descriptor_surface`]
    StreamDescriptorSurfaceCreateInfoGgp = 1000049000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_corner_sampled_image`]
    PhysicalDeviceCornerSampledImageFeaturesNv = 1000050000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory`]
    ExternalMemoryImageCreateInfoNv = 1000056000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory`]
    ExportMemoryAllocateInfoNv = 1000056001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_win_32`]
    ImportMemoryWin32HandleInfoNv = 1000057000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_win_32`]
    ExportMemoryWin32HandleInfoNv = 1000057001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_win_32_keyed_mutex`]
    Win32KeyedMutexAcquireReleaseInfoNv = 1000058000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_flags`]
    ValidationFlagsExt = 1000061000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nn_vi_surface`]
    ViSurfaceCreateInfoNn = 1000062000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_astc_decode_mode`]
    ImageViewAstcDecodeModeExt = 1000067000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_astc_decode_mode`]
    PhysicalDeviceAstcDecodeFeaturesExt = 1000067001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    ImportMemoryWin32HandleInfoKhr = 1000073000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    ExportMemoryWin32HandleInfoKhr = 1000073001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    MemoryWin32HandlePropertiesKhr = 1000073002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    MemoryGetWin32HandleInfoKhr = 1000073003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_fd`]
    ImportMemoryFdInfoKhr = 1000074000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_fd`]
    MemoryFdPropertiesKhr = 1000074001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_fd`]
    MemoryGetFdInfoKhr = 1000074002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_win_32_keyed_mutex`]
    Win32KeyedMutexAcquireReleaseInfoKhr = 1000075000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    ImportSemaphoreWin32HandleInfoKhr = 1000078000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    ExportSemaphoreWin32HandleInfoKhr = 1000078001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    D3D12FenceSubmitInfoKhr = 1000078002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    SemaphoreGetWin32HandleInfoKhr = 1000078003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_fd`]
    ImportSemaphoreFdInfoKhr = 1000079000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_fd`]
    SemaphoreGetFdInfoKhr = 1000079001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_push_descriptor`]
    PhysicalDevicePushDescriptorPropertiesKhr = 1000080000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conditional_rendering`]
    CommandBufferInheritanceConditionalRenderingInfoExt = 1000081000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conditional_rendering`]
    PhysicalDeviceConditionalRenderingFeaturesExt = 1000081001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conditional_rendering`]
    ConditionalRenderingBeginInfoExt = 1000081002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_incremental_present`]
    PresentRegionsKhr = 1000084000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_clip_space_w_scaling`]
    PipelineViewportWScalingStateCreateInfoNv = 1000087000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_surface_counter`]
    SurfaceCapabilities2Ext = 1000090000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    DisplayPowerInfoExt = 1000091000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    DeviceEventInfoExt = 1000091001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    DisplayEventInfoExt = 1000091002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    SwapchainCounterCreateInfoExt = 1000091003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::google_display_timing`]
    PresentTimesInfoGoogle = 1000092000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_multiview_per_view_attributes`]
    PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx = 1000097000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_viewport_swizzle`]
    PipelineViewportSwizzleStateCreateInfoNv = 1000098000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_discard_rectangles`]
    PhysicalDeviceDiscardRectanglePropertiesExt = 1000099000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_discard_rectangles`]
    PipelineDiscardRectangleStateCreateInfoExt = 1000099001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conservative_rasterization`]
    PhysicalDeviceConservativeRasterizationPropertiesExt = 1000101000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conservative_rasterization`]
    PipelineRasterizationConservativeStateCreateInfoExt = 1000101001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_enable`]
    PhysicalDeviceDepthClipEnableFeaturesExt = 1000102000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_enable`]
    PipelineRasterizationDepthClipStateCreateInfoExt = 1000102001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_hdr_metadata`]
    HdrMetadataExt = 1000105000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shared_presentable_image`]
    SharedPresentSurfaceCapabilitiesKhr = 1000111000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_win_32`]
    ImportFenceWin32HandleInfoKhr = 1000114000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_win_32`]
    ExportFenceWin32HandleInfoKhr = 1000114001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_win_32`]
    FenceGetWin32HandleInfoKhr = 1000114002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_fd`]
    ImportFenceFdInfoKhr = 1000115000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_fd`]
    FenceGetFdInfoKhr = 1000115001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    PhysicalDevicePerformanceQueryFeaturesKhr = 1000116000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    PhysicalDevicePerformanceQueryPropertiesKhr = 1000116001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    QueryPoolPerformanceCreateInfoKhr = 1000116002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    PerformanceQuerySubmitInfoKhr = 1000116003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    AcquireProfilingLockInfoKhr = 1000116004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    PerformanceCounterKhr = 1000116005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    PerformanceCounterDescriptionKhr = 1000116006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_surface_capabilities_2`]
    PhysicalDeviceSurfaceInfo2Khr = 1000119000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_surface_capabilities_2`]
    SurfaceCapabilities2Khr = 1000119001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_surface_capabilities_2`]
    SurfaceFormat2Khr = 1000119002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    DisplayProperties2Khr = 1000121000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    DisplayPlaneProperties2Khr = 1000121001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    DisplayModeProperties2Khr = 1000121002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    DisplayPlaneInfo2Khr = 1000121003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    DisplayPlaneCapabilities2Khr = 1000121004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::mvk_ios_surface`]
    IosSurfaceCreateInfoMvk = 1000122000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::mvk_macos_surface`]
    MacosSurfaceCreateInfoMvk = 1000123000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    DebugUtilsObjectNameInfoExt = 1000128000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    DebugUtilsObjectTagInfoExt = 1000128001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    DebugUtilsLabelExt = 1000128002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    DebugUtilsMessengerCallbackDataExt = 1000128003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    DebugUtilsMessengerCreateInfoExt = 1000128004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    AndroidHardwareBufferUsageAndroid = 1000129000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    AndroidHardwareBufferPropertiesAndroid = 1000129001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    AndroidHardwareBufferFormatPropertiesAndroid = 1000129002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    ImportAndroidHardwareBufferInfoAndroid = 1000129003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    MemoryGetAndroidHardwareBufferInfoAndroid = 1000129004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    ExternalFormatAndroid = 1000129005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    AndroidHardwareBufferFormatProperties2Android = 1000129006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    SampleLocationsInfoExt = 1000143000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    RenderPassSampleLocationsBeginInfoExt = 1000143001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    PipelineSampleLocationsStateCreateInfoExt = 1000143002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    PhysicalDeviceSampleLocationsPropertiesExt = 1000143003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    MultisamplePropertiesExt = 1000143004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PhysicalDeviceBlendOperationAdvancedFeaturesExt = 1000148000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PhysicalDeviceBlendOperationAdvancedPropertiesExt = 1000148001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    PipelineColorBlendAdvancedStateCreateInfoExt = 1000148002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_coverage_to_color`]
    PipelineCoverageToColorStateCreateInfoNv = 1000149000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    WriteDescriptorSetAccelerationStructureKhr = 1000150007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureBuildGeometryInfoKhr = 1000150000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureDeviceAddressInfoKhr = 1000150002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureGeometryAabbsDataKhr = 1000150003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureGeometryInstancesDataKhr = 1000150004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureGeometryTrianglesDataKhr = 1000150005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureGeometryKhr = 1000150006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureVersionInfoKhr = 1000150009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    CopyAccelerationStructureInfoKhr = 1000150010,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    CopyAccelerationStructureToMemoryInfoKhr = 1000150011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    CopyMemoryToAccelerationStructureInfoKhr = 1000150012,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    PhysicalDeviceAccelerationStructureFeaturesKhr = 1000150013,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    PhysicalDeviceAccelerationStructurePropertiesKhr = 1000150014,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureCreateInfoKhr = 1000150017,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureBuildSizesInfoKhr = 1000150020,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    PhysicalDeviceRayTracingPipelineFeaturesKhr = 1000347000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    PhysicalDeviceRayTracingPipelinePropertiesKhr = 1000347001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    RayTracingPipelineCreateInfoKhr = 1000150015,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    RayTracingShaderGroupCreateInfoKhr = 1000150016,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    RayTracingPipelineInterfaceCreateInfoKhr = 1000150018,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_query`]
    PhysicalDeviceRayQueryFeaturesKhr = 1000348013,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_framebuffer_mixed_samples`]
    PipelineCoverageModulationStateCreateInfoNv = 1000152000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shader_sm_builtins`]
    PhysicalDeviceShaderSmBuiltinsFeaturesNv = 1000154000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shader_sm_builtins`]
    PhysicalDeviceShaderSmBuiltinsPropertiesNv = 1000154001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    DrmFormatModifierPropertiesListExt = 1000158000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    PhysicalDeviceImageDrmFormatModifierInfoExt = 1000158002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    ImageDrmFormatModifierListCreateInfoExt = 1000158003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    ImageDrmFormatModifierExplicitCreateInfoExt = 1000158004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    ImageDrmFormatModifierPropertiesExt = 1000158005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    DrmFormatModifierPropertiesList2Ext = 1000158006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_cache`]
    ValidationCacheCreateInfoExt = 1000160000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_cache`]
    ShaderModuleValidationCacheCreateInfoExt = 1000160001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_portability_subset`]
    PhysicalDevicePortabilitySubsetFeaturesKhr = 1000163000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_portability_subset`]
    PhysicalDevicePortabilitySubsetPropertiesKhr = 1000163001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    PipelineViewportShadingRateImageStateCreateInfoNv = 1000164000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    PhysicalDeviceShadingRateImageFeaturesNv = 1000164001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    PhysicalDeviceShadingRateImagePropertiesNv = 1000164002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    PipelineViewportCoarseSampleOrderStateCreateInfoNv = 1000164005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    RayTracingPipelineCreateInfoNv = 1000165000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    AccelerationStructureCreateInfoNv = 1000165001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    GeometryNv = 1000165003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    GeometryTrianglesNv = 1000165004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    GeometryAabbNv = 1000165005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    BindAccelerationStructureMemoryInfoNv = 1000165006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    WriteDescriptorSetAccelerationStructureNv = 1000165007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    AccelerationStructureMemoryRequirementsInfoNv = 1000165008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    PhysicalDeviceRayTracingPropertiesNv = 1000165009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    RayTracingShaderGroupCreateInfoNv = 1000165011,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    AccelerationStructureInfoNv = 1000165012,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_representative_fragment_test`]
    PhysicalDeviceRepresentativeFragmentTestFeaturesNv = 1000166000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_representative_fragment_test`]
    PipelineRepresentativeFragmentTestStateCreateInfoNv = 1000166001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_filter_cubic`]
    PhysicalDeviceImageViewImageFormatInfoExt = 1000170000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_filter_cubic`]
    FilterCubicImageViewImageFormatPropertiesExt = 1000170001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_external_memory_host`]
    ImportMemoryHostPointerInfoExt = 1000178000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_external_memory_host`]
    MemoryHostPointerPropertiesExt = 1000178001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_external_memory_host`]
    PhysicalDeviceExternalMemoryHostPropertiesExt = 1000178002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_clock`]
    PhysicalDeviceShaderClockFeaturesKhr = 1000181000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_pipeline_compiler_control`]
    PipelineCompilerControlCreateInfoAmd = 1000183000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_calibrated_timestamps`]
    CalibratedTimestampInfoExt = 1000184000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_shader_core_properties`]
    PhysicalDeviceShaderCorePropertiesAmd = 1000185000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265CapabilitiesExt = 1000187000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265SessionCreateInfoExt = 1000187001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265SessionParametersCreateInfoExt = 1000187002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265SessionParametersAddInfoExt = 1000187003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265ProfileExt = 1000187004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265PictureInfoExt = 1000187005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    VideoDecodeH265DpbSlotInfoExt = 1000187006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    DeviceQueueGlobalPriorityCreateInfoKhr = 1000174000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    PhysicalDeviceGlobalPriorityQueryFeaturesKhr = 1000388000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    QueueFamilyGlobalPriorityPropertiesKhr = 1000388001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_memory_overallocation_behavior`]
    DeviceMemoryOverallocationCreateInfoAmd = 1000189000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_attribute_divisor`]
    PhysicalDeviceVertexAttributeDivisorPropertiesExt = 1000190000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_attribute_divisor`]
    PipelineVertexInputDivisorStateCreateInfoExt = 1000190001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_attribute_divisor`]
    PhysicalDeviceVertexAttributeDivisorFeaturesExt = 1000190002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ggp_frame_token`]
    PresentFrameTokenGgp = 1000191000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_compute_shader_derivatives`]
    PhysicalDeviceComputeShaderDerivativesFeaturesNv = 1000201000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_mesh_shader`]
    PhysicalDeviceMeshShaderFeaturesNv = 1000202000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_mesh_shader`]
    PhysicalDeviceMeshShaderPropertiesNv = 1000202001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shader_barycentric`]
    PhysicalDeviceFragmentShaderBarycentricFeaturesNv = 1000203000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shader_image_footprint`]
    PhysicalDeviceShaderImageFootprintFeaturesNv = 1000204000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_scissor_exclusive`]
    PipelineViewportExclusiveScissorStateCreateInfoNv = 1000205000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_scissor_exclusive`]
    PhysicalDeviceExclusiveScissorFeaturesNv = 1000205002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostic_checkpoints`]
    CheckpointDataNv = 1000206000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostic_checkpoints`]
    QueueFamilyCheckpointPropertiesNv = 1000206001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_shader_integer_functions_2`]
    PhysicalDeviceShaderIntegerFunctions2FeaturesIntel = 1000209000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    QueryPoolPerformanceQueryCreateInfoIntel = 1000210000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    InitializePerformanceApiInfoIntel = 1000210001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    PerformanceMarkerInfoIntel = 1000210002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    PerformanceStreamMarkerInfoIntel = 1000210003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    PerformanceOverrideInfoIntel = 1000210004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    PerformanceConfigurationAcquireInfoIntel = 1000210005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pci_bus_info`]
    PhysicalDevicePciBusInfoPropertiesExt = 1000212000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_display_native_hdr`]
    DisplayNativeHdrSurfaceCapabilitiesAmd = 1000213000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_display_native_hdr`]
    SwapchainDisplayNativeHdrCreateInfoAmd = 1000213001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_imagepipe_surface`]
    ImagepipeSurfaceCreateInfoFuchsia = 1000214000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_metal_surface`]
    MetalSurfaceCreateInfoExt = 1000217000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    PhysicalDeviceFragmentDensityMapFeaturesExt = 1000218000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    PhysicalDeviceFragmentDensityMapPropertiesExt = 1000218001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    RenderPassFragmentDensityMapCreateInfoExt = 1000218002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    FragmentShadingRateAttachmentInfoKhr = 1000226000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    PipelineFragmentShadingRateStateCreateInfoKhr = 1000226001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    PhysicalDeviceFragmentShadingRatePropertiesKhr = 1000226002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    PhysicalDeviceFragmentShadingRateFeaturesKhr = 1000226003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    PhysicalDeviceFragmentShadingRateKhr = 1000226004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_shader_core_properties_2`]
    PhysicalDeviceShaderCoreProperties2Amd = 1000227000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_device_coherent_memory`]
    PhysicalDeviceCoherentMemoryFeaturesAmd = 1000229000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_image_atomic_int_64`]
    PhysicalDeviceShaderImageAtomicInt64FeaturesExt = 1000234000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_memory_budget`]
    PhysicalDeviceMemoryBudgetPropertiesExt = 1000237000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_memory_priority`]
    PhysicalDeviceMemoryPriorityFeaturesExt = 1000238000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_memory_priority`]
    MemoryPriorityAllocateInfoExt = 1000238001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_surface_protected_capabilities`]
    SurfaceProtectedCapabilitiesKhr = 1000239000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation_image_aliasing`]
    PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNv = 1000240000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    PhysicalDeviceBufferDeviceAddressFeaturesExt = 1000244000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    BufferDeviceAddressCreateInfoExt = 1000244002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_features`]
    ValidationFeaturesExt = 1000247000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_present_wait`]
    PhysicalDevicePresentWaitFeaturesKhr = 1000248000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_cooperative_matrix`]
    PhysicalDeviceCooperativeMatrixFeaturesNv = 1000249000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_cooperative_matrix`]
    CooperativeMatrixPropertiesNv = 1000249001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_cooperative_matrix`]
    PhysicalDeviceCooperativeMatrixPropertiesNv = 1000249002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_coverage_reduction_mode`]
    PhysicalDeviceCoverageReductionModeFeaturesNv = 1000250000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_coverage_reduction_mode`]
    PipelineCoverageReductionStateCreateInfoNv = 1000250001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_coverage_reduction_mode`]
    FramebufferMixedSamplesCombinationNv = 1000250002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_shader_interlock`]
    PhysicalDeviceFragmentShaderInterlockFeaturesExt = 1000251000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_image_arrays`]
    PhysicalDeviceYcbcrImageArraysFeaturesExt = 1000252000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_provoking_vertex`]
    PhysicalDeviceProvokingVertexFeaturesExt = 1000254000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_provoking_vertex`]
    PipelineRasterizationProvokingVertexStateCreateInfoExt = 1000254001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_provoking_vertex`]
    PhysicalDeviceProvokingVertexPropertiesExt = 1000254002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    SurfaceFullScreenExclusiveInfoExt = 1000255000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    SurfaceCapabilitiesFullScreenExclusiveExt = 1000255002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    SurfaceFullScreenExclusiveWin32InfoExt = 1000255001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_headless_surface`]
    HeadlessSurfaceCreateInfoExt = 1000256000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    PhysicalDeviceLineRasterizationFeaturesExt = 1000259000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    PipelineRasterizationLineStateCreateInfoExt = 1000259001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    PhysicalDeviceLineRasterizationPropertiesExt = 1000259002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_atomic_float`]
    PhysicalDeviceShaderAtomicFloatFeaturesExt = 1000260000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_index_type_uint_8`]
    PhysicalDeviceIndexTypeUint8FeaturesExt = 1000265000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    PhysicalDeviceExtendedDynamicStateFeaturesExt = 1000267000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    PhysicalDevicePipelineExecutablePropertiesFeaturesKhr = 1000269000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    PipelineInfoKhr = 1000269001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    PipelineExecutablePropertiesKhr = 1000269002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    PipelineExecutableInfoKhr = 1000269003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    PipelineExecutableStatisticKhr = 1000269004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    PipelineExecutableInternalRepresentationKhr = 1000269005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_atomic_float_2`]
    PhysicalDeviceShaderAtomicFloat2FeaturesExt = 1000273000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    PhysicalDeviceDeviceGeneratedCommandsPropertiesNv = 1000277000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    GraphicsShaderGroupCreateInfoNv = 1000277001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    GraphicsPipelineShaderGroupsCreateInfoNv = 1000277002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    IndirectCommandsLayoutTokenNv = 1000277003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    IndirectCommandsLayoutCreateInfoNv = 1000277004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    GeneratedCommandsInfoNv = 1000277005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    GeneratedCommandsMemoryRequirementsInfoNv = 1000277006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    PhysicalDeviceDeviceGeneratedCommandsFeaturesNv = 1000277007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_inherited_viewport_scissor`]
    PhysicalDeviceInheritedViewportScissorFeaturesNv = 1000278000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_inherited_viewport_scissor`]
    CommandBufferInheritanceViewportScissorInfoNv = 1000278001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texel_buffer_alignment`]
    PhysicalDeviceTexelBufferAlignmentFeaturesExt = 1000281000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_render_pass_transform`]
    CommandBufferInheritanceRenderPassTransformInfoQcom = 1000282000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_render_pass_transform`]
    RenderPassTransformBeginInfoQcom = 1000282001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_device_memory_report`]
    PhysicalDeviceDeviceMemoryReportFeaturesExt = 1000284000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_device_memory_report`]
    DeviceDeviceMemoryReportCreateInfoExt = 1000284001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_device_memory_report`]
    DeviceMemoryReportCallbackDataExt = 1000284002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_robustness_2`]
    PhysicalDeviceRobustness2FeaturesExt = 1000286000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_robustness_2`]
    PhysicalDeviceRobustness2PropertiesExt = 1000286001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    SamplerCustomBorderColorCreateInfoExt = 1000287000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    PhysicalDeviceCustomBorderColorPropertiesExt = 1000287001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    PhysicalDeviceCustomBorderColorFeaturesExt = 1000287002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_library`]
    PipelineLibraryCreateInfoKhr = 1000290000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_present_id`]
    PresentIdKhr = 1000294000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_present_id`]
    PhysicalDevicePresentIdFeaturesKhr = 1000294001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeInfoKhr = 1000299000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeRateControlInfoKhr = 1000299001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeRateControlLayerInfoKhr = 1000299002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    VideoEncodeCapabilitiesKhr = 1000299003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostics_config`]
    PhysicalDeviceDiagnosticsConfigFeaturesNv = 1000300000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostics_config`]
    DeviceDiagnosticsConfigCreateInfoNv = 1000300001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    QueueFamilyCheckpointProperties2Nv = 1000314008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    CheckpointData2Nv = 1000314009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_subgroup_uniform_control_flow`]
    PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKhr = 1000323000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shading_rate_enums`]
    PhysicalDeviceFragmentShadingRateEnumsPropertiesNv = 1000326000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shading_rate_enums`]
    PhysicalDeviceFragmentShadingRateEnumsFeaturesNv = 1000326001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shading_rate_enums`]
    PipelineFragmentShadingRateEnumStateCreateInfoNv = 1000326002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing_motion_blur`]
    AccelerationStructureGeometryMotionTrianglesDataNv = 1000327000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing_motion_blur`]
    PhysicalDeviceRayTracingMotionBlurFeaturesNv = 1000327001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing_motion_blur`]
    AccelerationStructureMotionInfoNv = 1000327002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_2_plane_444_formats`]
    PhysicalDeviceYcbcr2Plane444FormatsFeaturesExt = 1000330000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map_2`]
    PhysicalDeviceFragmentDensityMap2FeaturesExt = 1000332000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map_2`]
    PhysicalDeviceFragmentDensityMap2PropertiesExt = 1000332001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_rotated_copy_commands`]
    CopyCommandTransformInfoQcom = 1000333000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_workgroup_memory_explicit_layout`]
    PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKhr = 1000336000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_4444_formats`]
    PhysicalDevice4444FormatsFeaturesExt = 1000340000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::arm_rasterization_order_attachment_access`]
    PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesArm = 1000342000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_rgba_10_x_6_formats`]
    PhysicalDeviceRgba10X6FormatsFeaturesExt = 1000344000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_directfb_surface`]
    DirectfbSurfaceCreateInfoExt = 1000346000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_mutable_descriptor_type`]
    PhysicalDeviceMutableDescriptorTypeFeaturesValve = 1000351000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_mutable_descriptor_type`]
    MutableDescriptorTypeCreateInfoValve = 1000351002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    PhysicalDeviceVertexInputDynamicStateFeaturesExt = 1000352000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    VertexInputBindingDescription2Ext = 1000352001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    VertexInputAttributeDescription2Ext = 1000352002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_physical_device_drm`]
    PhysicalDeviceDrmPropertiesExt = 1000353000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_control`]
    PhysicalDeviceDepthClipControlFeaturesExt = 1000355000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_control`]
    PipelineViewportDepthClipControlCreateInfoExt = 1000355001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_primitive_topology_list_restart`]
    PhysicalDevicePrimitiveTopologyListRestartFeaturesExt = 1000356000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_memory`]
    ImportMemoryZirconHandleInfoFuchsia = 1000364000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_memory`]
    MemoryZirconHandlePropertiesFuchsia = 1000364001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_memory`]
    MemoryGetZirconHandleInfoFuchsia = 1000364002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_semaphore`]
    ImportSemaphoreZirconHandleInfoFuchsia = 1000365000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_semaphore`]
    SemaphoreGetZirconHandleInfoFuchsia = 1000365001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferCollectionCreateInfoFuchsia = 1000366000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    ImportMemoryBufferCollectionFuchsia = 1000366001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferCollectionImageCreateInfoFuchsia = 1000366002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferCollectionPropertiesFuchsia = 1000366003,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferConstraintsInfoFuchsia = 1000366004,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferCollectionBufferCreateInfoFuchsia = 1000366005,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    ImageConstraintsInfoFuchsia = 1000366006,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    ImageFormatConstraintsInfoFuchsia = 1000366007,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    SysmemColorSpaceFuchsia = 1000366008,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferCollectionConstraintsInfoFuchsia = 1000366009,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    SubpassShadingPipelineCreateInfoHuawei = 1000369000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    PhysicalDeviceSubpassShadingFeaturesHuawei = 1000369001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    PhysicalDeviceSubpassShadingPropertiesHuawei = 1000369002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_invocation_mask`]
    PhysicalDeviceInvocationMaskFeaturesHuawei = 1000370000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_rdma`]
    MemoryGetRemoteAddressInfoNv = 1000371000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_rdma`]
    PhysicalDeviceExternalMemoryRdmaFeaturesNv = 1000371001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    PhysicalDeviceExtendedDynamicState2FeaturesExt = 1000377000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qnx_screen_surface`]
    ScreenSurfaceCreateInfoQnx = 1000378000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_color_write_enable`]
    PhysicalDeviceColorWriteEnableFeaturesExt = 1000381000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_color_write_enable`]
    PipelineColorWriteCreateInfoExt = 1000381001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_view_min_lod`]
    PhysicalDeviceImageViewMinLodFeaturesExt = 1000391000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_view_min_lod`]
    ImageViewMinLodCreateInfoExt = 1000391001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_multi_draw`]
    PhysicalDeviceMultiDrawFeaturesExt = 1000392000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_multi_draw`]
    PhysicalDeviceMultiDrawPropertiesExt = 1000392001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_border_color_swizzle`]
    PhysicalDeviceBorderColorSwizzleFeaturesExt = 1000411000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_border_color_swizzle`]
    SamplerBorderColorComponentMappingCreateInfoExt = 1000411001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pageable_device_local_memory`]
    PhysicalDevicePageableDeviceLocalMemoryFeaturesExt = 1000412000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_descriptor_set_host_mapping`]
    PhysicalDeviceDescriptorSetHostMappingFeaturesValve = 1000420000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_descriptor_set_host_mapping`]
    DescriptorSetBindingReferenceValve = 1000420001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_descriptor_set_host_mapping`]
    DescriptorSetLayoutHostMappingInfoValve = 1000420002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_fragment_density_map_offset`]
    PhysicalDeviceFragmentDensityMapOffsetFeaturesQcom = 1000425000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_fragment_density_map_offset`]
    PhysicalDeviceFragmentDensityMapOffsetPropertiesQcom = 1000425001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_fragment_density_map_offset`]
    SubpassFragmentDensityMapOffsetEndInfoQcom = 1000425002,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_linear_color_attachment`]
    PhysicalDeviceLinearColorAttachmentFeaturesNv = 1000430000,
}
impl const Default for StructureType {
    fn default() -> Self {
        ApplicationInfo
    }
}
impl StructureType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkSubpassContents](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubpassContents.html) - Specify how commands in the first subpass of a render pass are provided
///# C Specifications
///Possible values of [`CmdBeginRenderPass`]`::contents`, specifying
///how the commands in the first subpass will be provided, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSubpassContents {
///    VK_SUBPASS_CONTENTS_INLINE = 0,
///    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
///} VkSubpassContents;
///```
///# Description
/// - [`Inline`] specifies that the contents of the subpass will be recorded inline in the primary
///   command buffer, and secondary command buffers **must** not be executed within the subpass.
/// - [`SecondaryCommandBuffers`] specifies that the contents are recorded in secondary command
///   buffers that will be called from the primary command buffer, and [`CmdExecuteCommands`] is the
///   only valid command on the command buffer until [`CmdNextSubpass`] or [`CmdEndRenderPass`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SubpassBeginInfo`]
/// - [`CmdBeginRenderPass`]
/// - [`CmdNextSubpass`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSubpassContents")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum SubpassContents {
    ///[`Inline`] specifies that the contents of the
    ///subpass will be recorded inline in the primary command buffer, and
    ///secondary command buffers **must** not be executed within the subpass.
    Inline = 0,
    ///[`SecondaryCommandBuffers`] specifies that the
    ///contents are recorded in secondary command buffers that will be called
    ///from the primary command buffer, and [`CmdExecuteCommands`] is the
    ///only valid command on the command buffer until [`CmdNextSubpass`] or
    ///[`CmdEndRenderPass`].
    SecondaryCommandBuffers = 1,
}
impl const Default for SubpassContents {
    fn default() -> Self {
        Inline
    }
}
impl SubpassContents {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkResult](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkResult.html) - Vulkan command return codes
///# C Specifications
///While the core Vulkan API is not designed to capture incorrect usage, some
///circumstances still require return codes.
///Commands in Vulkan return their status via return codes that are in one of
///two categories:
/// - Successful completion codes are returned when a command needs to communicate success or status
///   information. All successful completion codes are non-negative values.
/// - Run time error codes are returned when a command needs to communicate a failure that could
///   only be detected at runtime. All runtime error codes are negative values.
///All return codes in Vulkan are reported via [`VulkanResultCodes`] return values.
///The possible codes are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkResult {
///    VK_SUCCESS = 0,
///    VK_NOT_READY = 1,
///    VK_TIMEOUT = 2,
///    VK_EVENT_SET = 3,
///    VK_EVENT_RESET = 4,
///    VK_INCOMPLETE = 5,
///    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
///    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
///    VK_ERROR_INITIALIZATION_FAILED = -3,
///    VK_ERROR_DEVICE_LOST = -4,
///    VK_ERROR_MEMORY_MAP_FAILED = -5,
///    VK_ERROR_LAYER_NOT_PRESENT = -6,
///    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
///    VK_ERROR_FEATURE_NOT_PRESENT = -8,
///    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
///    VK_ERROR_TOO_MANY_OBJECTS = -10,
///    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
///    VK_ERROR_FRAGMENTED_POOL = -12,
///    VK_ERROR_UNKNOWN = -13,
///  // Provided by VK_VERSION_1_1
///    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
///  // Provided by VK_VERSION_1_1
///    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
///  // Provided by VK_VERSION_1_2
///    VK_ERROR_FRAGMENTATION = -1000161000,
///  // Provided by VK_VERSION_1_2
///    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
///  // Provided by VK_VERSION_1_3
///    VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
///  // Provided by VK_KHR_surface
///    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
///  // Provided by VK_KHR_surface
///    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
///  // Provided by VK_KHR_swapchain
///    VK_SUBOPTIMAL_KHR = 1000001003,
///  // Provided by VK_KHR_swapchain
///    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
///  // Provided by VK_KHR_display_swapchain
///    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
///  // Provided by VK_EXT_debug_report
///    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
///  // Provided by VK_NV_glsl_shader
///    VK_ERROR_INVALID_SHADER_NV = -1000012000,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
///  // Provided by VK_KHR_global_priority
///    VK_ERROR_NOT_PERMITTED_KHR = -1000174001,
///  // Provided by VK_EXT_full_screen_exclusive
///    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_THREAD_IDLE_KHR = 1000268000,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_THREAD_DONE_KHR = 1000268001,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_OPERATION_DEFERRED_KHR = 1000268002,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
///  // Provided by VK_KHR_maintenance1
///    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
///  // Provided by VK_KHR_external_memory
///    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
///  // Provided by VK_EXT_global_priority
///    VK_ERROR_NOT_PERMITTED_EXT = VK_ERROR_NOT_PERMITTED_KHR,
///  // Provided by VK_EXT_buffer_device_address
///    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
///  // Provided by VK_KHR_buffer_device_address
///    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
///  // Provided by VK_EXT_pipeline_creation_cache_control
///    VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
///  // Provided by VK_EXT_pipeline_creation_cache_control
///    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
///} VkResult;
///```
///# Description
/// - [`Success`] Command successfully completed
/// - [`NotReady`] A fence or query has not yet completed
/// - [`Timeout`] A wait operation has not completed in the specified time
/// - [`EventSet`] An event is signaled
/// - [`EventReset`] An event is unsignaled
/// - [`Incomplete`] A return array was too small for the result
/// - [`SuboptimalKhr`] A swapchain no longer matches the surface properties exactly, but **can**
///   still be used to present to the surface successfully.
/// - [`ThreadIdleKhr`] A deferred operation is not complete but there is currently no work for this
///   thread to do at the time of this call.
/// - [`ThreadDoneKhr`] A deferred operation is not complete but there is no work remaining to
///   assign to additional threads.
/// - [`OperationDeferredKhr`] A deferred operation was requested and at least some of the work was
///   deferred.
/// - [`OperationNotDeferredKhr`] A deferred operation was requested and no operations were
///   deferred.
/// - [`PipelineCompileRequired`] A requested pipeline creation would have required compilation, but
///   the application requested compilation to not be performed.
///
/// - [`ErrorOutOfHostMemory`] A host memory allocation has failed.
/// - [`ErrorOutOfDeviceMemory`] A device memory allocation has failed.
/// - [`ErrorInitializationFailed`] Initialization of an object could not be completed for
///   implementation-specific reasons.
/// - [`ErrorDeviceLost`] The logical or physical device has been lost. See [Lost Device](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-lost-device)
/// - [`ErrorMemoryMapFailed`] Mapping of a memory object has failed.
/// - [`ErrorLayerNotPresent`] A requested layer is not present or could not be loaded.
/// - [`ErrorExtensionNotPresent`] A requested extension is not supported.
/// - [`ErrorFeatureNotPresent`] A requested feature is not supported.
/// - [`ErrorIncompatibleDriver`] The requested version of Vulkan is not supported by the driver or
///   is otherwise incompatible for implementation-specific reasons.
/// - [`ErrorTooManyObjects`] Too many objects of the type have already been created.
/// - [`ErrorFormatNotSupported`] A requested format is not supported on this device.
/// - [`ErrorFragmentedPool`] A pool allocation has failed due to fragmentation of the pool’s
///   memory. This **must** only be returned if no attempt to allocate host or device memory was
///   made to accommodate the new allocation. This **should** be returned in preference to
///   [`ErrorOutOfPoolMemory`], but only if the implementation is certain that the pool allocation
///   failure was due to fragmentation.
/// - [`ErrorSurfaceLostKhr`] A surface is no longer available.
/// - [`ErrorNativeWindowInUseKhr`] The requested window is already in use by Vulkan or another API
///   in a manner which prevents it from being used again.
/// - [`ErrorOutOfDateKhr`] A surface has changed in such a way that it is no longer compatible with
///   the swapchain, and further presentation requests using the swapchain will fail. Applications
///   **must** query the new surface properties and recreate their swapchain if they wish to
///   continue presenting to the surface.
/// - [`ErrorIncompatibleDisplayKhr`] The display used by a swapchain does not use the same
///   presentable image layout, or is incompatible in a way that prevents sharing an image.
/// - [`ErrorInvalidShaderNv`] One or more shaders failed to compile or link. More details are
///   reported back to the application via `[`VK_EXT_debug_report`]` if enabled.
/// - [`ErrorOutOfPoolMemory`] A pool memory allocation has failed. This **must** only be returned
///   if no attempt to allocate host or device memory was made to accommodate the new allocation. If
///   the failure was definitely due to fragmentation of the pool, [`ErrorFragmentedPool`]**should**
///   be returned instead.
/// - [`ErrorInvalidExternalHandle`] An external handle is not a valid handle of the specified type.
/// - [`ErrorFragmentation`] A descriptor pool creation has failed due to fragmentation.
/// - [`ErrorInvalidDeviceAddressExt`] A buffer creation failed because the requested address is not
///   available.
/// - [`ErrorInvalidOpaqueCaptureAddress`] A buffer creation or memory allocation failed because the
///   requested address is not available. A shader group handle assignment failed because the
///   requested shader group handle information is no longer valid.
/// - [`ErrorFullScreenExclusiveModeLostExt`] An operation on a swapchain created with
///   `VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT` failed as it did not have exlusive
///   full-screen access. This **may** occur due to implementation-dependent reasons, outside of the
///   application’s control.
/// - [`ErrorUnknown`] An unknown error has occurred; either the application has provided invalid
///   input, or an implementation failure has occurred.
///If a command returns a runtime error, unless otherwise specified any output
///parameters will have undefined contents, except that if the output
///parameter is a structure with `sType` and `pNext` fields, those
///fields will be unmodified.
///Any structures chained from `pNext` will also have undefined contents,
///except that `sType` and `pNext` will be unmodified.`VK_ERROR_OUT_OF_*_MEMORY` errors do not
/// modify any currently existing
///Vulkan objects.
///Objects that have already been successfully created **can** still be used by
///the application.[`ErrorUnknown`] will be returned by an implementation when an
///unexpected error occurs that cannot be attributed to valid behavior of the
///application and implementation.
///Under these conditions, it **may** be returned from any command returning a
///[`VulkanResultCodes`].Performance-critical commands generally do not have return codes.
///If a runtime error occurs in such commands, the implementation will defer
///reporting the error until a specified point.
///For commands that record into command buffers (`vkCmd*`) runtime errors
///are reported by [`EndCommandBuffer`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PresentInfoKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkResult")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum VulkanResultCodes {
    ///[`Success`] Command successfully completed
    Success = 0,
    ///[`NotReady`] A fence or query has not yet completed
    NotReady = 1,
    ///[`Timeout`] A wait operation has not completed in the specified
    ///time
    Timeout = 2,
    ///[`EventSet`] An event is signaled
    EventSet = 3,
    ///[`EventReset`] An event is unsignaled
    EventReset = 4,
    ///[`Incomplete`] A return array was too small for the result
    Incomplete = 5,
    ///[`ErrorOutOfHostMemory`] A host memory allocation has failed.
    ErrorOutOfHostMemory = -1,
    ///[`ErrorOutOfDeviceMemory`] A device memory allocation has
    ///failed.
    ErrorOutOfDeviceMemory = -2,
    ///[`ErrorInitializationFailed`] Initialization of an object could
    ///not be completed for implementation-specific reasons.
    ErrorInitializationFailed = -3,
    ///[`ErrorDeviceLost`] The logical or physical device has been lost.
    ///See [Lost Device](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-lost-device)
    ErrorDeviceLost = -4,
    ///[`ErrorMemoryMapFailed`] Mapping of a memory object has failed.
    ErrorMemoryMapFailed = -5,
    ///[`ErrorLayerNotPresent`] A requested layer is not present or
    ///could not be loaded.
    ErrorLayerNotPresent = -6,
    ///[`ErrorExtensionNotPresent`] A requested extension is not
    ///supported.
    ErrorExtensionNotPresent = -7,
    ///[`ErrorFeatureNotPresent`] A requested feature is not supported.
    ErrorFeatureNotPresent = -8,
    ///[`ErrorIncompatibleDriver`] The requested version of Vulkan is
    ///not supported by the driver or is otherwise incompatible for
    ///implementation-specific reasons.
    ErrorIncompatibleDriver = -9,
    ///[`ErrorTooManyObjects`] Too many objects of the type have
    ///already been created.
    ErrorTooManyObjects = -10,
    ///[`ErrorFormatNotSupported`] A requested format is not supported
    ///on this device.
    ErrorFormatNotSupported = -11,
    ///[`ErrorFragmentedPool`] A pool allocation has failed due to
    ///fragmentation of the pool’s memory.
    ///This **must** only be returned if no attempt to allocate host or device
    ///memory was made to accommodate the new allocation.
    ///This **should** be returned in preference to
    ///[`ErrorOutOfPoolMemory`], but only if the implementation is
    ///certain that the pool allocation failure was due to fragmentation.
    ErrorFragmentedPool = -12,
    ///[`ErrorUnknown`] An unknown error has occurred; either the
    ///application has provided invalid input, or an implementation failure has
    ///occurred.
    ErrorUnknown = -13,
    ///[`ErrorOutOfPoolMemory`] A pool memory allocation has failed.
    ///This **must** only be returned if no attempt to allocate host or device
    ///memory was made to accommodate the new allocation.
    ///If the failure was definitely due to fragmentation of the pool,
    ///[`ErrorFragmentedPool`]**should** be returned instead.
    ///
    ///Provided by [`crate::vulkan1_1`]
    ErrorOutOfPoolMemory = -1000069000,
    ///[`ErrorInvalidExternalHandle`] An external handle is not a valid
    ///handle of the specified type.
    ///
    ///Provided by [`crate::vulkan1_1`]
    ErrorInvalidExternalHandle = -1000072003,
    ///[`ErrorFragmentation`] A descriptor pool creation has failed due
    ///to fragmentation.
    ///
    ///Provided by [`crate::vulkan1_2`]
    ErrorFragmentation = -1000161000,
    ///[`ErrorInvalidOpaqueCaptureAddress`] A buffer creation
    ///or memory allocation
    ///failed because the requested address is not available.
    ///A shader group handle assignment failed because the requested shader
    ///group handle information is no longer valid.
    ///
    ///Provided by [`crate::vulkan1_2`]
    ErrorInvalidOpaqueCaptureAddress = -1000257000,
    ///[`PipelineCompileRequired`] A requested pipeline creation would
    ///have required compilation, but the application requested compilation to
    ///not be performed.
    ///
    ///Provided by [`crate::vulkan1_3`]
    PipelineCompileRequired = 1000297000,
    ///[`ErrorSurfaceLostKhr`] A surface is no longer available.
    ///
    ///Provided by [`crate::extensions::khr_surface`]
    ErrorSurfaceLostKhr = -1000000000,
    ///[`ErrorNativeWindowInUseKhr`] The requested window is already
    ///in use by Vulkan or another API in a manner which prevents it from being
    ///used again.
    ///
    ///Provided by [`crate::extensions::khr_surface`]
    ErrorNativeWindowInUseKhr = -1000000001,
    ///[`SuboptimalKhr`] A swapchain no longer matches the surface
    ///properties exactly, but **can** still be used to present to the surface
    ///successfully.
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    SuboptimalKhr = 1000001003,
    ///[`ErrorOutOfDateKhr`] A surface has changed in such a way that
    ///it is no longer compatible with the swapchain, and further presentation
    ///requests using the swapchain will fail.
    ///Applications **must** query the new surface properties and recreate their
    ///swapchain if they wish to continue presenting to the surface.
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    ErrorOutOfDateKhr = -1000001004,
    ///[`ErrorIncompatibleDisplayKhr`] The display used by a swapchain
    ///does not use the same presentable image layout, or is incompatible in a
    ///way that prevents sharing an image.
    ///
    ///Provided by [`crate::extensions::khr_display_swapchain`]
    ErrorIncompatibleDisplayKhr = -1000003001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    ErrorValidationFailedExt = -1000011001,
    ///[`ErrorInvalidShaderNv`] One or more shaders failed to compile
    ///or link.
    ///More details are reported back to the application via
    ///`[`VK_EXT_debug_report`]` if enabled.
    ///
    ///Provided by [`crate::extensions::nv_glsl_shader`]
    ErrorInvalidShaderNv = -1000012000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    ErrorInvalidDrmFormatModifierPlaneLayoutExt = -1000158000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    ErrorNotPermittedKhr = -1000174001,
    ///[`ErrorFullScreenExclusiveModeLostExt`] An operation on a
    ///swapchain created with
    ///`VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT` failed as it
    ///did not have exlusive full-screen access.
    ///This **may** occur due to implementation-dependent reasons, outside of the
    ///application’s control.
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    ErrorFullScreenExclusiveModeLostExt = -1000255000,
    ///[`ThreadIdleKhr`] A deferred operation is not complete but there
    ///is currently no work for this thread to do at the time of this call.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    ThreadIdleKhr = 1000268000,
    ///[`ThreadDoneKhr`] A deferred operation is not complete but there
    ///is no work remaining to assign to additional threads.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    ThreadDoneKhr = 1000268001,
    ///[`OperationDeferredKhr`] A deferred operation was requested and
    ///at least some of the work was deferred.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    OperationDeferredKhr = 1000268002,
    ///[`OperationNotDeferredKhr`] A deferred operation was requested
    ///and no operations were deferred.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    OperationNotDeferredKhr = 1000268003,
}
impl const Default for VulkanResultCodes {
    fn default() -> Self {
        Success
    }
}
impl VulkanResultCodes {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkDynamicState](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDynamicState.html) - Indicate which dynamic state is taken from dynamic state commands
///# C Specifications
///The source of different pieces of dynamic state is specified by the
///[`PipelineDynamicStateCreateInfo::p_dynamic_states`] property of the
///currently active pipeline, each of whose elements **must** be one of the
///values:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkDynamicState {
///    VK_DYNAMIC_STATE_VIEWPORT = 0,
///    VK_DYNAMIC_STATE_SCISSOR = 1,
///    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
///    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
///    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
///    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
///    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
///    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
///    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
///  // Provided by VK_NV_clip_space_w_scaling
///    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
///  // Provided by VK_EXT_discard_rectangles
///    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
///  // Provided by VK_EXT_sample_locations
///    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
///  // Provided by VK_NV_shading_rate_image
///    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
///  // Provided by VK_NV_shading_rate_image
///    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
///  // Provided by VK_NV_scissor_exclusive
///    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
///  // Provided by VK_EXT_line_rasterization
///    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
///  // Provided by VK_EXT_color_write_enable
///    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT =
/// VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
///} VkDynamicState;
///```
///# Description
/// - [`Viewport`] specifies that the `pViewports` state in [`PipelineViewportStateCreateInfo`] will
///   be ignored and **must** be set dynamically with [`CmdSetViewport`] before any drawing
///   commands. The number of viewports used by a pipeline is still specified by the `viewportCount`
///   member of [`PipelineViewportStateCreateInfo`].
/// - [`Scissor`] specifies that the `pScissors` state in [`PipelineViewportStateCreateInfo`] will
///   be ignored and **must** be set dynamically with [`CmdSetScissor`] before any drawing commands.
///   The number of scissor rectangles used by a pipeline is still specified by the `scissorCount`
///   member of [`PipelineViewportStateCreateInfo`].
/// - [`LineWidth`] specifies that the `lineWidth` state in [`PipelineRasterizationStateCreateInfo`]
///   will be ignored and **must** be set dynamically with [`CmdSetLineWidth`] before any drawing
///   commands that generate line primitives for the rasterizer.
/// - [`DepthBias`] specifies that the `depthBiasConstantFactor`, `depthBiasClamp` and
///   `depthBiasSlopeFactor` states in [`PipelineRasterizationStateCreateInfo`] will be ignored and
///   **must** be set dynamically with [`CmdSetDepthBias`] before any draws are performed with
///   `depthBiasEnable` in [`PipelineRasterizationStateCreateInfo`] set to [`TRUE`].
/// - [`BlendConstants`] specifies that the `blendConstants` state in
///   [`PipelineColorBlendStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetBlendConstants`] before any draws are performed with a pipeline state with
///   [`PipelineColorBlendAttachmentState`] member `blendEnable` set to [`TRUE`] and any of the
///   blend functions using a constant blend color.
/// - [`DepthBounds`] specifies that the `minDepthBounds` and `maxDepthBounds` states of
///   [`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetDepthBounds`] before any draws are performed with a pipeline state with
///   [`PipelineDepthStencilStateCreateInfo`] member `depthBoundsTestEnable` set to [`TRUE`].
/// - [`StencilCompareMask`] specifies that the `compareMask` state in
///   [`PipelineDepthStencilStateCreateInfo`] for both `front` and `back` will be ignored and
///   **must** be set dynamically with [`CmdSetStencilCompareMask`] before any draws are performed
///   with a pipeline state with [`PipelineDepthStencilStateCreateInfo`] member `stencilTestEnable`
///   set to [`TRUE`]
/// - [`StencilWriteMask`] specifies that the `writeMask` state in
///   [`PipelineDepthStencilStateCreateInfo`] for both `front` and `back` will be ignored and
///   **must** be set dynamically with [`CmdSetStencilWriteMask`] before any draws are performed
///   with a pipeline state with [`PipelineDepthStencilStateCreateInfo`] member `stencilTestEnable`
///   set to [`TRUE`]
/// - [`StencilReference`] specifies that the `reference` state in
///   [`PipelineDepthStencilStateCreateInfo`] for both `front` and `back` will be ignored and
///   **must** be set dynamically with [`CmdSetStencilReference`] before any draws are performed
///   with a pipeline state with [`PipelineDepthStencilStateCreateInfo`] member `stencilTestEnable`
///   set to [`TRUE`]
/// - [`ViewportWScalingNv`] specifies that the `pViewportScalings` state in
///   [`PipelineViewportWScalingStateCreateInfoNV`] will be ignored and **must** be set dynamically
///   with [`CmdSetViewportWScalingNV`] before any draws are performed with a pipeline state with
///   [`PipelineViewportWScalingStateCreateInfoNV`] member `viewportScalingEnable` set to [`TRUE`]
/// - [`DiscardRectangleExt`] specifies that the `pDiscardRectangles` state in
///   [`PipelineDiscardRectangleStateCreateInfoEXT`] will be ignored and **must** be set dynamically
///   with [`CmdSetDiscardRectangleEXT`] before any draw or clear commands. The
///   [`DiscardRectangleModeEXT`] and the number of active discard rectangles is still specified by
///   the `discardRectangleMode` and `discardRectangleCount` members of
///   [`PipelineDiscardRectangleStateCreateInfoEXT`].
/// - [`SampleLocationsExt`] specifies that the `sampleLocationsInfo` state in
///   [`PipelineSampleLocationsStateCreateInfoEXT`] will be ignored and **must** be set dynamically
///   with [`CmdSetSampleLocationsEXT`] before any draw or clear commands. Enabling custom sample
///   locations is still indicated by the `sampleLocationsEnable` member of
///   [`PipelineSampleLocationsStateCreateInfoEXT`].
/// - [`ExclusiveScissorNv`] specifies that the `pExclusiveScissors` state in
///   [`PipelineViewportExclusiveScissorStateCreateInfoNV`] will be ignored and **must** be set
///   dynamically with [`CmdSetExclusiveScissorNV`] before any drawing commands. The number of
///   exclusive scissor rectangles used by a pipeline is still specified by the
///   `exclusiveScissorCount` member of [`PipelineViewportExclusiveScissorStateCreateInfoNV`].
/// - [`ViewportShadingRatePaletteNv`] specifies that the `pShadingRatePalettes` state in
///   [`PipelineViewportShadingRateImageStateCreateInfoNV`] will be ignored and **must** be set
///   dynamically with [`CmdSetViewportShadingRatePaletteNV`] before any drawing commands.
/// - [`ViewportCoarseSampleOrderNv`] specifies that the coarse sample order state in
///   [`PipelineViewportCoarseSampleOrderStateCreateInfoNV`] will be ignored and **must** be set
///   dynamically with [`CmdSetCoarseSampleOrderNV`] before any drawing commands.
/// - [`LineStippleExt`] specifies that the `lineStippleFactor` and `lineStipplePattern` state in
///   [`PipelineRasterizationLineStateCreateInfoEXT`] will be ignored and **must** be set
///   dynamically with [`CmdSetLineStippleEXT`] before any draws are performed with a pipeline state
///   with [`PipelineRasterizationLineStateCreateInfoEXT`] member `stippledLineEnable` set to
///   [`TRUE`].
/// - [`CullMode`] specifies that the `cullMode` state in [`PipelineRasterizationStateCreateInfo`]
///   will be ignored and **must** be set dynamically with [`CmdSetCullMode`] before any drawing
///   commands.
/// - [`FrontFace`] specifies that the `frontFace` state in [`PipelineRasterizationStateCreateInfo`]
///   will be ignored and **must** be set dynamically with [`CmdSetFrontFace`] before any drawing
///   commands.
/// - [`PrimitiveTopology`] specifies that the `topology` state in [`PipelineInputAssemblyStateCreateInfo`] only specifies the [topology class](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-primitive-topology-class), and the specific topology order and adjacency **must** be set dynamically with [`CmdSetPrimitiveTopology`] before any drawing commands.
/// - [`ViewportWithCount`] specifies that the `viewportCount` and `pViewports` state in
///   [`PipelineViewportStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetViewportWithCount`] before any draw call.
/// - [`ScissorWithCount`] specifies that the `scissorCount` and `pScissors` state in
///   [`PipelineViewportStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetScissorWithCount`] before any draw call.
/// - [`VertexInputBindingStride`] specifies that the `stride` state in
///   [`VertexInputBindingDescription`] will be ignored and **must** be set dynamically with
///   [`CmdBindVertexBuffers2`] before any draw call.
/// - [`DepthTestEnable`] specifies that the `depthTestEnable` state in
///   [`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetDepthTestEnable`] before any draw call.
/// - [`DepthWriteEnable`] specifies that the `depthWriteEnable` state in
///   [`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetDepthWriteEnable`] before any draw call.
/// - [`DepthCompareOp`] specifies that the `depthCompareOp` state in
///   [`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetDepthCompareOp`] before any draw call.
/// - [`DepthBoundsTestEnable`] specifies that the `depthBoundsTestEnable` state in
///   [`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetDepthBoundsTestEnable`] before any draw call.
/// - [`StencilTestEnable`] specifies that the `stencilTestEnable` state in
///   [`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetStencilTestEnable`] before any draw call.
/// - [`StencilOp`] specifies that the `failOp`, `passOp`, `depthFailOp`, and `compareOp` states in
///   [`PipelineDepthStencilStateCreateInfo`] for both `front` and `back` will be ignored and
///   **must** be set dynamically with [`CmdSetStencilOp`] before any draws are performed with a
///   pipeline state with [`PipelineDepthStencilStateCreateInfo`] member `stencilTestEnable` set to
///   [`TRUE`]
/// - [`PatchControlPointsExt`] specifies that the `patchControlPoints` state in
///   [`PipelineTessellationStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetPatchControlPointsEXT`] before any drawing commands.
/// - [`RasterizerDiscardEnable`] specifies that the `rasterizerDiscardEnable` state in
///   [`PipelineRasterizationStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetRasterizerDiscardEnable`] before any drawing commands.
/// - [`DepthBiasEnable`] specifies that the `depthBiasEnable` state in
///   [`PipelineRasterizationStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetDepthBiasEnable`] before any drawing commands.
/// - [`LogicOpExt`] specifies that the `logicOp` state in [`PipelineColorBlendStateCreateInfo`]
///   will be ignored and **must** be set dynamically with [`CmdSetLogicOpEXT`] before any drawing
///   commands.
/// - [`PrimitiveRestartEnable`] specifies that the `primitiveRestartEnable` state in
///   [`PipelineInputAssemblyStateCreateInfo`] will be ignored and **must** be set dynamically with
///   [`CmdSetPrimitiveRestartEnable`] before any drawing commands.
/// - [`FragmentShadingRateKhr`] specifies that state in
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`] and
///   [`PipelineFragmentShadingRateEnumStateCreateInfoNV`] will be ignored and **must** be set
///   dynamically with [`CmdSetFragmentShadingRateKHR`] or [`CmdSetFragmentShadingRateEnumNV`]
///   before any drawing commands.
/// - [`RayTracingPipelineStackSizeKhr`] specifies that the default stack size computation for the
///   pipeline will be ignored and **must** be set dynamically with
///   [`CmdSetRayTracingPipelineStackSizeKHR`] before any ray tracing calls are performed.
/// - [`VertexInputExt`] specifies that the `pVertexInputState` state will be ignored and **must**
///   be set dynamically with [`CmdSetVertexInputEXT`] before any drawing commands
/// - [`ColorWriteEnableExt`] specifies that the `pColorWriteEnables` state in
///   [`PipelineColorWriteCreateInfoEXT`] will be ignored and **must** be set dynamically with
///   [`CmdSetColorWriteEnableEXT`] before any draw call.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineDynamicStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDynamicState")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum DynamicState {
    ///[`Viewport`] specifies that the `pViewports`
    ///state in [`PipelineViewportStateCreateInfo`] will be ignored and
    ///**must** be set dynamically with [`CmdSetViewport`] before any drawing
    ///commands.
    ///The number of viewports used by a pipeline is still specified by the
    ///`viewportCount` member of [`PipelineViewportStateCreateInfo`].
    Viewport = 0,
    ///[`Scissor`] specifies that the `pScissors` state
    ///in [`PipelineViewportStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetScissor`] before any drawing commands.
    ///The number of scissor rectangles used by a pipeline is still specified
    ///by the `scissorCount` member of
    ///[`PipelineViewportStateCreateInfo`].
    Scissor = 1,
    ///[`LineWidth`] specifies that the `lineWidth`
    ///state in [`PipelineRasterizationStateCreateInfo`] will be ignored
    ///and **must** be set dynamically with [`CmdSetLineWidth`] before any
    ///drawing commands that generate line primitives for the rasterizer.
    LineWidth = 2,
    ///[`DepthBias`] specifies that the
    ///`depthBiasConstantFactor`, `depthBiasClamp` and
    ///`depthBiasSlopeFactor` states in
    ///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetDepthBias`] before any draws are
    ///performed with `depthBiasEnable` in
    ///[`PipelineRasterizationStateCreateInfo`] set to [`TRUE`].
    DepthBias = 3,
    ///[`BlendConstants`] specifies that the
    ///`blendConstants` state in [`PipelineColorBlendStateCreateInfo`]
    ///will be ignored and **must** be set dynamically with
    ///[`CmdSetBlendConstants`] before any draws are performed with a
    ///pipeline state with [`PipelineColorBlendAttachmentState`] member
    ///`blendEnable` set to [`TRUE`] and any of the blend functions
    ///using a constant blend color.
    BlendConstants = 4,
    ///[`DepthBounds`] specifies that the
    ///`minDepthBounds` and `maxDepthBounds` states of
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthBounds`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`depthBoundsTestEnable` set to [`TRUE`].
    DepthBounds = 5,
    ///[`StencilCompareMask`] specifies that the
    ///`compareMask` state in [`PipelineDepthStencilStateCreateInfo`]
    ///for both `front` and `back` will be ignored and **must** be set
    ///dynamically with [`CmdSetStencilCompareMask`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    StencilCompareMask = 6,
    ///[`StencilWriteMask`] specifies that the
    ///`writeMask` state in [`PipelineDepthStencilStateCreateInfo`] for
    ///both `front` and `back` will be ignored and **must** be set
    ///dynamically with [`CmdSetStencilWriteMask`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    StencilWriteMask = 7,
    ///[`StencilReference`] specifies that the
    ///`reference` state in [`PipelineDepthStencilStateCreateInfo`] for
    ///both `front` and `back` will be ignored and **must** be set
    ///dynamically with [`CmdSetStencilReference`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    StencilReference = 8,
    ///[`CullMode`] specifies that the `cullMode` state
    ///in [`PipelineRasterizationStateCreateInfo`] will be ignored and
    ///**must** be set dynamically with [`CmdSetCullMode`] before any drawing
    ///commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    CullMode = 1000267000,
    ///[`FrontFace`] specifies that the `frontFace`
    ///state in [`PipelineRasterizationStateCreateInfo`] will be ignored
    ///and **must** be set dynamically with [`CmdSetFrontFace`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    FrontFace = 1000267001,
    ///[`PrimitiveTopology`] specifies that the
    ///`topology` state in [`PipelineInputAssemblyStateCreateInfo`]
    ///only specifies the [topology class](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-primitive-topology-class),
    ///and the specific topology order and adjacency **must** be set dynamically
    ///with [`CmdSetPrimitiveTopology`] before any drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    PrimitiveTopology = 1000267002,
    ///[`ViewportWithCount`] specifies that the
    ///`viewportCount` and `pViewports` state in
    ///[`PipelineViewportStateCreateInfo`] will be ignored and **must** be set
    ///dynamically with [`CmdSetViewportWithCount`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    ViewportWithCount = 1000267003,
    ///[`ScissorWithCount`] specifies that the
    ///`scissorCount` and `pScissors` state in
    ///[`PipelineViewportStateCreateInfo`] will be ignored and **must** be set
    ///dynamically with [`CmdSetScissorWithCount`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    ScissorWithCount = 1000267004,
    ///[`VertexInputBindingStride`] specifies that the
    ///`stride` state in [`VertexInputBindingDescription`] will be
    ///ignored and **must** be set dynamically with [`CmdBindVertexBuffers2`]
    ///before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    VertexInputBindingStride = 1000267005,
    ///[`DepthTestEnable`] specifies that the
    ///`depthTestEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthTestEnable`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    DepthTestEnable = 1000267006,
    ///[`DepthWriteEnable`] specifies that the
    ///`depthWriteEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthWriteEnable`] before any draw
    ///call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    DepthWriteEnable = 1000267007,
    ///[`DepthCompareOp`] specifies that the
    ///`depthCompareOp` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthCompareOp`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    DepthCompareOp = 1000267008,
    ///[`DepthBoundsTestEnable`] specifies that the
    ///`depthBoundsTestEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthBoundsTestEnable`] before any draw
    ///call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    DepthBoundsTestEnable = 1000267009,
    ///[`StencilTestEnable`] specifies that the
    ///`stencilTestEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetStencilTestEnable`] before any draw
    ///call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    StencilTestEnable = 1000267010,
    ///[`StencilOp`] specifies that the `failOp`,
    ///`passOp`, `depthFailOp`, and `compareOp` states in
    ///[`PipelineDepthStencilStateCreateInfo`] for both `front` and
    ///`back` will be ignored and **must** be set dynamically with
    ///[`CmdSetStencilOp`] before any draws are performed with a pipeline
    ///state with [`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    ///
    ///Provided by [`crate::vulkan1_3`]
    StencilOp = 1000267011,
    ///[`RasterizerDiscardEnable`] specifies that the
    ///`rasterizerDiscardEnable` state in
    ///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetRasterizerDiscardEnable`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    RasterizerDiscardEnable = 1000377001,
    ///[`DepthBiasEnable`] specifies that the
    ///`depthBiasEnable` state in
    ///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetDepthBiasEnable`] before any drawing
    ///commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    DepthBiasEnable = 1000377002,
    ///[`PrimitiveRestartEnable`] specifies that the
    ///`primitiveRestartEnable` state in
    ///[`PipelineInputAssemblyStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetPrimitiveRestartEnable`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    PrimitiveRestartEnable = 1000377004,
    ///[`ViewportWScalingNv`] specifies that the
    ///`pViewportScalings` state in
    ///[`PipelineViewportWScalingStateCreateInfoNV`] will be ignored and
    ///**must** be set dynamically with [`CmdSetViewportWScalingNV`] before
    ///any draws are performed with a pipeline state with
    ///[`PipelineViewportWScalingStateCreateInfoNV`] member
    ///`viewportScalingEnable` set to [`TRUE`]
    ///
    ///Provided by [`crate::extensions::nv_clip_space_w_scaling`]
    ViewportWScalingNv = 1000087000,
    ///[`DiscardRectangleExt`] specifies that the
    ///`pDiscardRectangles` state in
    ///[`PipelineDiscardRectangleStateCreateInfoEXT`] will be ignored and
    ///**must** be set dynamically with [`CmdSetDiscardRectangleEXT`] before
    ///any draw or clear commands.
    ///The [`DiscardRectangleModeEXT`] and the number of active discard
    ///rectangles is still specified by the `discardRectangleMode` and
    ///`discardRectangleCount` members of
    ///[`PipelineDiscardRectangleStateCreateInfoEXT`].
    ///
    ///Provided by [`crate::extensions::ext_discard_rectangles`]
    DiscardRectangleExt = 1000099000,
    ///[`SampleLocationsExt`] specifies that the
    ///`sampleLocationsInfo` state in
    ///[`PipelineSampleLocationsStateCreateInfoEXT`] will be ignored and
    ///**must** be set dynamically with [`CmdSetSampleLocationsEXT`] before
    ///any draw or clear commands.
    ///Enabling custom sample locations is still indicated by the
    ///`sampleLocationsEnable` member of
    ///[`PipelineSampleLocationsStateCreateInfoEXT`].
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    SampleLocationsExt = 1000143000,
    ///[`RayTracingPipelineStackSizeKhr`] specifies
    ///that the default stack size computation for the pipeline will be ignored
    ///and **must** be set dynamically with
    ///[`CmdSetRayTracingPipelineStackSizeKHR`] before any ray tracing
    ///calls are performed.
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    RayTracingPipelineStackSizeKhr = 1000347000,
    ///[`ViewportShadingRatePaletteNv`] specifies that
    ///the `pShadingRatePalettes` state in
    ///[`PipelineViewportShadingRateImageStateCreateInfoNV`] will be
    ///ignored and **must** be set dynamically with
    ///[`CmdSetViewportShadingRatePaletteNV`] before any drawing commands.
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    ViewportShadingRatePaletteNv = 1000164004,
    ///[`ViewportCoarseSampleOrderNv`] specifies that
    ///the coarse sample order state in
    ///[`PipelineViewportCoarseSampleOrderStateCreateInfoNV`] will be
    ///ignored and **must** be set dynamically with
    ///[`CmdSetCoarseSampleOrderNV`] before any drawing commands.
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    ViewportCoarseSampleOrderNv = 1000164006,
    ///[`ExclusiveScissorNv`] specifies that the
    ///`pExclusiveScissors` state in
    ///[`PipelineViewportExclusiveScissorStateCreateInfoNV`] will be
    ///ignored and **must** be set dynamically with
    ///[`CmdSetExclusiveScissorNV`] before any drawing commands.
    ///The number of exclusive scissor rectangles used by a pipeline is still
    ///specified by the `exclusiveScissorCount` member of
    ///[`PipelineViewportExclusiveScissorStateCreateInfoNV`].
    ///
    ///Provided by [`crate::extensions::nv_scissor_exclusive`]
    ExclusiveScissorNv = 1000205001,
    ///[`FragmentShadingRateKhr`] specifies that state in
    ///[`PipelineFragmentShadingRateStateCreateInfoKHR`]
    ///and [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
    ///will be ignored and **must** be set dynamically with
    ///[`CmdSetFragmentShadingRateKHR`]
    ///or [`CmdSetFragmentShadingRateEnumNV`]
    ///before any drawing commands.
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    FragmentShadingRateKhr = 1000226000,
    ///[`LineStippleExt`] specifies that the
    ///`lineStippleFactor` and `lineStipplePattern` state in
    ///[`PipelineRasterizationLineStateCreateInfoEXT`] will be ignored and
    ///**must** be set dynamically with [`CmdSetLineStippleEXT`] before any
    ///draws are performed with a pipeline state with
    ///[`PipelineRasterizationLineStateCreateInfoEXT`] member
    ///`stippledLineEnable` set to [`TRUE`].
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    LineStippleExt = 1000259000,
    ///[`VertexInputExt`] specifies that the
    ///`pVertexInputState` state will be ignored and **must** be set
    ///dynamically with [`CmdSetVertexInputEXT`] before any drawing
    ///commands
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    VertexInputExt = 1000352000,
    ///[`PatchControlPointsExt`] specifies that the
    ///`patchControlPoints` state in
    ///[`PipelineTessellationStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetPatchControlPointsEXT`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    PatchControlPointsExt = 1000377000,
    ///[`LogicOpExt`] specifies that the `logicOp`
    ///state in [`PipelineColorBlendStateCreateInfo`] will be ignored and
    ///**must** be set dynamically with [`CmdSetLogicOpEXT`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    LogicOpExt = 1000377003,
    ///[`ColorWriteEnableExt`] specifies that the
    ///`pColorWriteEnables` state in
    ///[`PipelineColorWriteCreateInfoEXT`] will be ignored and **must** be set
    ///dynamically with [`CmdSetColorWriteEnableEXT`] before any draw call.
    ///
    ///Provided by [`crate::extensions::ext_color_write_enable`]
    ColorWriteEnableExt = 1000381000,
}
impl const Default for DynamicState {
    fn default() -> Self {
        Viewport
    }
}
impl DynamicState {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkObjectType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkObjectType.html) - Specify an enumeration to track object handle types
///# C Specifications
///The [`ObjectType`] enumeration defines values, each of which corresponds
///to a specific Vulkan handle type.
///These values **can** be used to associate debug information with a particular
///type of object through one or more extensions.
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkObjectType {
///    VK_OBJECT_TYPE_UNKNOWN = 0,
///    VK_OBJECT_TYPE_INSTANCE = 1,
///    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
///    VK_OBJECT_TYPE_DEVICE = 3,
///    VK_OBJECT_TYPE_QUEUE = 4,
///    VK_OBJECT_TYPE_SEMAPHORE = 5,
///    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
///    VK_OBJECT_TYPE_FENCE = 7,
///    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
///    VK_OBJECT_TYPE_BUFFER = 9,
///    VK_OBJECT_TYPE_IMAGE = 10,
///    VK_OBJECT_TYPE_EVENT = 11,
///    VK_OBJECT_TYPE_QUERY_POOL = 12,
///    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
///    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
///    VK_OBJECT_TYPE_SHADER_MODULE = 15,
///    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
///    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
///    VK_OBJECT_TYPE_RENDER_PASS = 18,
///    VK_OBJECT_TYPE_PIPELINE = 19,
///    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
///    VK_OBJECT_TYPE_SAMPLER = 21,
///    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
///    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
///    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
///    VK_OBJECT_TYPE_COMMAND_POOL = 25,
///  // Provided by VK_VERSION_1_1
///    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
///  // Provided by VK_VERSION_1_1
///    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
///  // Provided by VK_VERSION_1_3
///    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
///  // Provided by VK_KHR_surface
///    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
///  // Provided by VK_KHR_swapchain
///    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
///  // Provided by VK_KHR_display
///    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
///  // Provided by VK_KHR_display
///    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
///  // Provided by VK_EXT_debug_report
///    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
///#endif
///  // Provided by VK_NVX_binary_import
///    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
///  // Provided by VK_NVX_binary_import
///    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
///  // Provided by VK_EXT_debug_utils
///    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
///  // Provided by VK_EXT_validation_cache
///    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
///  // Provided by VK_NV_ray_tracing
///    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
///  // Provided by VK_INTEL_performance_query
///    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
///  // Provided by VK_NV_device_generated_commands
///    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
///  // Provided by VK_KHR_descriptor_update_template
///    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
///  // Provided by VK_EXT_private_data
///    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
///} VkObjectType;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DebugUtilsObjectNameInfoEXT`]
/// - [`DebugUtilsObjectTagInfoEXT`]
/// - [`DeviceMemoryReportCallbackDataEXT`]
/// - [`GetPrivateData`]
/// - [`GetPrivateDataEXT`]
/// - [`SetPrivateData`]
/// - [`SetPrivateDataEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkObjectType")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum ObjectType {
    ///No documentation found
    Unknown = 0,
    ///No documentation found
    Instance = 1,
    ///No documentation found
    PhysicalDevice = 2,
    ///No documentation found
    Device = 3,
    ///No documentation found
    Queue = 4,
    ///No documentation found
    Semaphore = 5,
    ///No documentation found
    CommandBuffer = 6,
    ///No documentation found
    Fence = 7,
    ///No documentation found
    DeviceMemory = 8,
    ///No documentation found
    Buffer = 9,
    ///No documentation found
    Image = 10,
    ///No documentation found
    Event = 11,
    ///No documentation found
    QueryPool = 12,
    ///No documentation found
    BufferView = 13,
    ///No documentation found
    ImageView = 14,
    ///No documentation found
    ShaderModule = 15,
    ///No documentation found
    PipelineCache = 16,
    ///No documentation found
    PipelineLayout = 17,
    ///No documentation found
    RenderPass = 18,
    ///No documentation found
    Pipeline = 19,
    ///No documentation found
    DescriptorSetLayout = 20,
    ///No documentation found
    Sampler = 21,
    ///No documentation found
    DescriptorPool = 22,
    ///No documentation found
    DescriptorSet = 23,
    ///No documentation found
    Framebuffer = 24,
    ///No documentation found
    CommandPool = 25,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    SamplerYcbcrConversion = 1000156000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    DescriptorUpdateTemplate = 1000085000,
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    PrivateDataSlot = 1000295000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_surface`]
    SurfaceKhr = 1000000000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    SwapchainKhr = 1000001000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    DisplayKhr = 1000002000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    DisplayModeKhr = 1000002001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    DebugReportCallbackExt = 1000011000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoSessionKhr = 1000023000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    VideoSessionParametersKhr = 1000023001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    CuModuleNvx = 1000029000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    CuFunctionNvx = 1000029001,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    DebugUtilsMessengerExt = 1000128000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    AccelerationStructureKhr = 1000150000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_cache`]
    ValidationCacheExt = 1000160000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    AccelerationStructureNv = 1000165000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    PerformanceConfigurationIntel = 1000210000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    DeferredOperationKhr = 1000268000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    IndirectCommandsLayoutNv = 1000277000,
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    BufferCollectionFuchsia = 1000366000,
}
impl const Default for ObjectType {
    fn default() -> Self {
        Unknown
    }
}
impl ObjectType {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkVendorId](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVendorId.html) - Khronos vendor IDs
///# C Specifications
///Khronos vendor IDs which **may** be returned in
///[`PhysicalDeviceProperties::vendor_id`] are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkVendorId {
///    VK_VENDOR_ID_VIV = 0x10001,
///    VK_VENDOR_ID_VSI = 0x10002,
///    VK_VENDOR_ID_KAZAN = 0x10003,
///    VK_VENDOR_ID_CODEPLAY = 0x10004,
///    VK_VENDOR_ID_MESA = 0x10005,
///    VK_VENDOR_ID_POCL = 0x10006,
///} VkVendorId;
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkVendorId")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(i32)]
pub enum VendorId {
    #[doc(hidden)]
    Empty = 0,
    ///No documentation found
    Viv = 65537,
    ///No documentation found
    Vsi = 65538,
    ///No documentation found
    Kazan = 65539,
    ///No documentation found
    Codeplay = 65540,
    ///No documentation found
    Mesa = 65541,
    ///No documentation found
    Pocl = 65542,
}
impl const Default for VendorId {
    fn default() -> Self {
        Empty
    }
}
impl VendorId {
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self as i32
    }
    ///Gets a value from a raw underlying value, unchecked and therefore unsafe
    #[inline]
    pub const unsafe fn from_bits(bits: i32) -> i32 {
        std::mem::transmute(bits)
    }
}
///[VkBaseOutStructure](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBaseOutStructure.html) - Base structure for a read-only pointer chain
///# C Specifications
///The [`BaseOutStructure`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBaseOutStructure {
///    VkStructureType               sType;
///    struct VkBaseOutStructure*    pNext;
///} VkBaseOutStructure;
///```
///# Members
/// - [`s_type`] is the structure type of the structure being iterated through.
/// - [`p_next`] is `NULL` or a pointer to the next structure in a structure chain.
///# Description
///[`BaseOutStructure`] can be used to facilitate iterating through a
///structure pointer chain that returns data back to the application.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BaseOutStructure`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Eq, Ord, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BaseOutStructure<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the structure type of the structure being iterated
    ///through.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to the next structure in a structure
    ///chain.
    p_next: *const BaseOutStructure<'lt>,
}
///[VkBaseInStructure](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBaseInStructure.html) - Base structure for a read-only pointer chain
///# C Specifications
///The [`BaseInStructure`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBaseInStructure {
///    VkStructureType                    sType;
///    const struct VkBaseInStructure*    pNext;
///} VkBaseInStructure;
///```
///# Members
/// - [`s_type`] is the structure type of the structure being iterated through.
/// - [`p_next`] is `NULL` or a pointer to the next structure in a structure chain.
///# Description
///[`BaseInStructure`] can be used to facilitate iterating through a
///read-only structure pointer chain.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BaseInStructure`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BaseInStructure<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the structure type of the structure being iterated
    ///through.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to the next structure in a structure
    ///chain.
    p_next: *mut BaseInStructure<'lt>,
}
///[VkOffset2D](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkOffset2D.html) - Structure specifying a two-dimensional offset
///# C Specifications
///A two-dimensional offset is defined by the structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkOffset2D {
///    int32_t    x;
///    int32_t    y;
///} VkOffset2D;
///```
///# Members
/// - [`x`] is the x offset.
/// - [`y`] is the y offset.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DisplayPlaneCapabilitiesKHR`]
/// - [`Rect2D`]
/// - [`RectLayerKHR`]
/// - [`SubpassFragmentDensityMapOffsetEndInfoQCOM`]
/// - [`VideoDecodeH264CapabilitiesEXT`]
/// - [`VideoDecodeInfoKHR`]
/// - [`VideoPictureResourceKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Offset2D {
    ///[`x`] is the x offset.
    x: i32,
    ///[`y`] is the y offset.
    y: i32,
}
///[VkOffset3D](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkOffset3D.html) - Structure specifying a three-dimensional offset
///# C Specifications
///A three-dimensional offset is defined by the structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkOffset3D {
///    int32_t    x;
///    int32_t    y;
///    int32_t    z;
///} VkOffset3D;
///```
///# Members
/// - [`x`] is the x offset.
/// - [`y`] is the y offset.
/// - [`z`] is the z offset.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferImageCopy`]
/// - [`BufferImageCopy2`]
/// - [`ImageBlit`]
/// - [`ImageBlit2`]
/// - [`ImageCopy`]
/// - [`ImageCopy2`]
/// - [`ImageResolve`]
/// - [`ImageResolve2`]
/// - [`SparseImageMemoryBind`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Offset3D {
    ///[`x`] is the x offset.
    x: i32,
    ///[`y`] is the y offset.
    y: i32,
    ///[`z`] is the z offset.
    z: i32,
}
///[VkExtent2D](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExtent2D.html) - Structure specifying a two-dimensional extent
///# C Specifications
///A two-dimensional extent is defined by the structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkExtent2D {
///    uint32_t    width;
///    uint32_t    height;
///} VkExtent2D;
///```
///# Members
/// - [`width`] is the width of the extent.
/// - [`height`] is the height of the extent.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DisplayModeParametersKHR`]
/// - [`DisplayPlaneCapabilitiesKHR`]
/// - [`DisplayPropertiesKHR`]
/// - [`DisplaySurfaceCreateInfoKHR`]
/// - [`FragmentShadingRateAttachmentInfoKHR`]
/// - [`MultisamplePropertiesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapPropertiesEXT`]
/// - [`PhysicalDeviceFragmentShadingRateKHR`]
/// - [`PhysicalDeviceFragmentShadingRatePropertiesKHR`]
/// - [`PhysicalDeviceSampleLocationsPropertiesEXT`]
/// - [`PhysicalDeviceShadingRateImagePropertiesNV`]
/// - [`PipelineFragmentShadingRateStateCreateInfoKHR`]
/// - [`Rect2D`]
/// - [`RectLayerKHR`]
/// - [`RenderingFragmentShadingRateAttachmentInfoKHR`]
/// - [`SampleLocationsInfoEXT`]
/// - [`SurfaceCapabilities2EXT`]
/// - [`SurfaceCapabilitiesKHR`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`VideoCapabilitiesKHR`]
/// - [`VideoDecodeInfoKHR`]
/// - [`VideoEncodeCapabilitiesKHR`]
/// - [`VideoEncodeH264SessionCreateInfoEXT`]
/// - [`VideoEncodeInfoKHR`]
/// - [`VideoPictureResourceKHR`]
/// - [`VideoSessionCreateInfoKHR`]
/// - [`CmdSetFragmentShadingRateKHR`]
/// - [`GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI`]
/// - [`GetRenderAreaGranularity`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Extent2D {
    ///[`width`] is the width of the extent.
    width: u32,
    ///[`height`] is the height of the extent.
    height: u32,
}
///[VkExtent3D](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExtent3D.html) - Structure specifying a three-dimensional extent
///# C Specifications
///A three-dimensional extent is defined by the structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkExtent3D {
///    uint32_t    width;
///    uint32_t    height;
///    uint32_t    depth;
///} VkExtent3D;
///```
///# Members
/// - [`width`] is the width of the extent.
/// - [`height`] is the height of the extent.
/// - [`depth`] is the depth of the extent.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferImageCopy`]
/// - [`BufferImageCopy2`]
/// - [`ImageCopy`]
/// - [`ImageCopy2`]
/// - [`ImageCreateInfo`]
/// - [`ImageFormatProperties`]
/// - [`ImageResolve`]
/// - [`ImageResolve2`]
/// - [`QueueFamilyProperties`]
/// - [`SparseImageFormatProperties`]
/// - [`SparseImageMemoryBind`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Extent3D {
    ///[`width`] is the width of the extent.
    width: u32,
    ///[`height`] is the height of the extent.
    height: u32,
    ///[`depth`] is the depth of the extent.
    depth: u32,
}
///[VkViewport](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkViewport.html) - Structure specifying a viewport
///# C Specifications
///The [`Viewport`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkViewport {
///    float    x;
///    float    y;
///    float    width;
///    float    height;
///    float    minDepth;
///    float    maxDepth;
///} VkViewport;
///```
///# Members
/// - [`x`] and [`y`] are the viewport’s upper left corner (x,y).
/// - [`width`] and [`height`] are the viewport’s width and height, respectively.
/// - [`min_depth`] and [`max_depth`] are the depth range for the viewport.
///# Description
///The framebuffer depth coordinate `z`<sub>f</sub>**may** be represented using
///either a fixed-point or floating-point representation.
///However, a floating-point representation **must** be used if the depth/stencil
///attachment has a floating-point depth component.
///If an m-bit fixed-point representation is used, we assume that it
///represents each value <span class="katex"><span aria-hidden="true" class="katex-html"><span
/// class="base"><span class="strut"
/// style="height:1.283439em;vertical-align:-0.403331em;"></span><span class="mord"><span
/// class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span
/// style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing
/// reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord
/// mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span
/// class="vlist" style="height:0.5935428571428571em;"><span
/// style="top:-2.786em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"
/// class="pstrut"></span><span class="sizing reset-size3 size1 mtight"><span class="mord
/// mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin
/// mtight">−</span><span class="mord mtight">1</span></span></span></span><span
/// style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line"
/// style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span
/// class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mtight"><span class="mord mathdefault mtight"
/// style="margin-right:0.03148em;">k</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose
/// nulldelimiter"></span></span></span></span></span>, where k ∈ {
///0, 1, …​, 2<sup>m</sup>-1 }, as k (e.g. 1.0 is represented in binary as a
///string of all ones).The viewport parameters shown in the above equations are found from these
///values as
/// * o<sub>x</sub> = [`x`] +  [`width`] / 2
/// * o<sub>y</sub> = [`y`] +  [`height`] / 2
/// * o<sub>z</sub> = [`min_depth`]
/// * p<sub>x</sub> = [`width`]
/// * p<sub>y</sub> = [`height`]
/// * p<sub>z</sub> = [`max_depth`] - [`min_depth`].
///If a render pass transform is enabled, the values (p<sub>x</sub>,p<sub>y</sub>) and
///(o<sub>x</sub>, o<sub>y</sub>) defining the viewport are transformed as described in
///[render pass transform](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-renderpass-transform) before
///participating in the viewport transform.The application **can** specify a negative term for
/// [`height`], which has the
///effect of negating the y coordinate in clip space before performing the
///transform.
///When using a negative [`height`], the application **should** also adjust the
///[`y`] value to point to the lower left corner of the viewport instead of
///the upper left corner.
///Using the negative [`height`] allows the application to avoid having to
///negate the y component of the `Position` output from the last
///[pre-rasterization shader
///stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization).The width and height of the [implementation-dependent maximum viewport dimensions](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxViewportDimensions)**must** be greater than
///or equal to the width and height of the largest image which **can** be created
///and attached to a framebuffer.The floating-point viewport bounds are represented with an
///[implementation-dependent precision](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-viewportSubPixelBits).Valid Usage
/// - [`width`]**must** be greater than `0.0`
/// - [`width`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_viewport_dimensions`][0]
/// - The absolute value of [`height`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_viewport_dimensions`][1]
/// - [`x`]**must** be greater than or equal to `viewportBoundsRange`[0]
/// - ([`x`] +  [`width`])**must** be less than or equal to `viewportBoundsRange`[1]
/// - [`y`]**must** be greater than or equal to `viewportBoundsRange`[0]
/// - [`y`]**must** be less than or equal to `viewportBoundsRange`[1]
/// - ([`y`] +  [`height`])**must** be greater than or equal to `viewportBoundsRange`[0]
/// - ([`y`] +  [`height`])**must** be less than or equal to `viewportBoundsRange`[1]
/// - Unless `[`VK_EXT_depth_range_unrestricted`]` extension is enabled [`min_depth`]**must** be
///   between `0.0` and `1.0`, inclusive
/// - Unless `[`VK_EXT_depth_range_unrestricted`]` extension is enabled [`max_depth`]**must** be
///   between `0.0` and `1.0`, inclusive
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandBufferInheritanceViewportScissorInfoNV`]
/// - [`PipelineViewportStateCreateInfo`]
/// - [`CmdSetViewport`]
/// - [`CmdSetViewportWithCount`]
/// - [`CmdSetViewportWithCountEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Viewport {
    ///[`x`] and [`y`] are the viewport’s upper left corner (x,y).
    x: f32,
    ///No documentation found
    y: f32,
    ///[`width`] and [`height`] are the viewport’s width and height,
    ///respectively.
    width: f32,
    ///No documentation found
    height: f32,
    ///[`min_depth`] and [`max_depth`] are the depth range for the viewport.
    min_depth: f32,
    ///No documentation found
    max_depth: f32,
}
///[VkRect2D](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRect2D.html) - Structure specifying a two-dimensional subregion
///# C Specifications
///Rectangles are used to describe a specified rectangular region of pixels
///within an image or framebuffer.
///Rectangles include both an offset and an extent of the same dimensionality,
///as described above.
///Two-dimensional rectangles are defined by the structure
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkRect2D {
///    VkOffset2D    offset;
///    VkExtent2D    extent;
///} VkRect2D;
///```
///# Members
/// - [`offset`] is a [`Offset2D`] specifying the rectangle offset.
/// - [`extent`] is a [`Extent2D`] specifying the rectangle extent.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BindImageMemoryDeviceGroupInfo`]
/// - [`ClearRect`]
/// - [`CommandBufferInheritanceRenderPassTransformInfoQCOM`]
/// - [`DeviceGroupRenderPassBeginInfo`]
/// - [`DisplayPresentInfoKHR`]
/// - [`Extent2D`]
/// - [`Offset2D`]
/// - [`PipelineDiscardRectangleStateCreateInfoEXT`]
/// - [`PipelineViewportExclusiveScissorStateCreateInfoNV`]
/// - [`PipelineViewportStateCreateInfo`]
/// - [`RenderPassBeginInfo`]
/// - [`RenderingInfo`]
/// - [`CmdSetDiscardRectangleEXT`]
/// - [`CmdSetExclusiveScissorNV`]
/// - [`CmdSetScissor`]
/// - [`CmdSetScissorWithCount`]
/// - [`CmdSetScissorWithCountEXT`]
/// - [`GetPhysicalDevicePresentRectanglesKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Rect2D {
    ///[`offset`] is a [`Offset2D`] specifying the rectangle offset.
    offset: Offset2D,
    ///[`extent`] is a [`Extent2D`] specifying the rectangle extent.
    extent: Extent2D,
}
///[VkClearRect](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkClearRect.html) - Structure specifying a clear rectangle
///# C Specifications
///The [`ClearRect`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkClearRect {
///    VkRect2D    rect;
///    uint32_t    baseArrayLayer;
///    uint32_t    layerCount;
///} VkClearRect;
///```
///# Members
/// - [`rect`] is the two-dimensional region to be cleared.
/// - [`base_array_layer`] is the first layer to be cleared.
/// - [`layer_count`] is the number of layers to clear.
///# Description
///The layers [[`base_array_layer`], [`base_array_layer`] +
///[`layer_count`]) counting from the base layer of the attachment image view
///are cleared.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Rect2D`]
/// - [`CmdClearAttachments`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ClearRect {
    ///[`rect`] is the two-dimensional region to be cleared.
    rect: Rect2D,
    ///[`base_array_layer`] is the first layer to be cleared.
    base_array_layer: u32,
    ///[`layer_count`] is the number of layers to clear.
    layer_count: u32,
}
///[VkComponentMapping](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkComponentMapping.html) - Structure specifying a color component mapping
///# C Specifications
///The [`ComponentMapping`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkComponentMapping {
///    VkComponentSwizzle    r;
///    VkComponentSwizzle    g;
///    VkComponentSwizzle    b;
///    VkComponentSwizzle    a;
///} VkComponentMapping;
///```
///# Members
/// - [`r`] is a [`ComponentSwizzle`] specifying the component value placed in the R component of
///   the output vector.
/// - [`g`] is a [`ComponentSwizzle`] specifying the component value placed in the G component of
///   the output vector.
/// - [`b`] is a [`ComponentSwizzle`] specifying the component value placed in the B component of
///   the output vector.
/// - [`a`] is a [`ComponentSwizzle`] specifying the component value placed in the A component of
///   the output vector.
///# Description
///Valid Usage (Implicit)
/// - [`r`]**must** be a valid [`ComponentSwizzle`] value
/// - [`g`]**must** be a valid [`ComponentSwizzle`] value
/// - [`b`]**must** be a valid [`ComponentSwizzle`] value
/// - [`a`]**must** be a valid [`ComponentSwizzle`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AndroidHardwareBufferFormatProperties2ANDROID`]
/// - [`AndroidHardwareBufferFormatPropertiesANDROID`]
/// - [`BufferCollectionPropertiesFUCHSIA`]
/// - [`ComponentSwizzle`]
/// - [`ImageViewCreateInfo`]
/// - [`SamplerBorderColorComponentMappingCreateInfoEXT`]
/// - [`SamplerYcbcrConversionCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ComponentMapping {
    ///[`r`] is a [`ComponentSwizzle`] specifying the component value
    ///placed in the R component of the output vector.
    r: ComponentSwizzle,
    ///[`g`] is a [`ComponentSwizzle`] specifying the component value
    ///placed in the G component of the output vector.
    g: ComponentSwizzle,
    ///[`b`] is a [`ComponentSwizzle`] specifying the component value
    ///placed in the B component of the output vector.
    b: ComponentSwizzle,
    ///[`a`] is a [`ComponentSwizzle`] specifying the component value
    ///placed in the A component of the output vector.
    a: ComponentSwizzle,
}
///[VkPhysicalDeviceProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html) - Structure specifying physical device properties
///# C Specifications
///The [`PhysicalDeviceProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPhysicalDeviceProperties {
///    uint32_t                            apiVersion;
///    uint32_t                            driverVersion;
///    uint32_t                            vendorID;
///    uint32_t                            deviceID;
///    VkPhysicalDeviceType                deviceType;
///    char                                deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
///    uint8_t                             pipelineCacheUUID[VK_UUID_SIZE];
///    VkPhysicalDeviceLimits              limits;
///    VkPhysicalDeviceSparseProperties    sparseProperties;
///} VkPhysicalDeviceProperties;
///```
///# Members
/// - [`api_version`] is the version of Vulkan supported by the device, encoded as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers).
/// - [`driver_version`] is the vendor-specified version of the driver.
/// - [`vendor_id`] is a unique identifier for the *vendor* (see below) of the physical device.
/// - [`device_id`] is a unique identifier for the physical device among devices available from the
///   vendor.
/// - [`device_type`] is a [`PhysicalDeviceType`] specifying the type of device.
/// - [`device_name`] is an array of [`MAX_PHYSICAL_DEVICE_NAME_SIZE`]`char` containing a
///   null-terminated UTF-8 string which is the name of the device.
/// - [`pipeline_cache_uuid`] is an array of [`UUID_SIZE`]`uint8_t` values representing a
///   universally unique identifier for the device.
/// - [`limits`] is the [`PhysicalDeviceLimits`] structure specifying device-specific limits of the physical device. See [Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits) for details.
/// - [`sparse_properties`] is the [`PhysicalDeviceSparseProperties`] structure specifying various sparse related properties of the physical device. See [Sparse Properties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-physicalprops) for details.
///# Description
///On implementations that claim support for the [Roadmap 2022](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#roadmap-2022)
///profile, the major and minor version expressed by [`api_version`]**must** be
///at least Vulkan 1.3.The [`vendor_id`] and [`device_id`] fields are provided to allow
///applications to adapt to device characteristics that are not adequately
///exposed by other Vulkan queries.The *vendor* identified by [`vendor_id`] is the entity
/// responsible for the
///most salient characteristics of the underlying implementation of the
///[`PhysicalDevice`] being queried.If the vendor has a [PCI
///vendor ID](https://pcisig.com/membership/member-companies), the low 16 bits of [`vendor_id`]**must** contain that PCI vendor
///ID, and the remaining bits **must** be set to zero.
///Otherwise, the value returned **must** be a valid Khronos vendor ID, obtained
///as described in the [Vulkan Documentation and Extensions:
///Procedures and Conventions](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vulkan-styleguide) document in the section “Registering a Vendor
///ID with Khronos”.
///Khronos vendor IDs are allocated starting at 0x10000, to distinguish them
///from the PCI vendor ID namespace.
///Khronos vendor IDs are symbolically defined in the [`VendorId`] type.The vendor is also
/// responsible for the value returned in [`device_id`].
///If the implementation is driven primarily by a [PCI
///device](https://pcisig.com/) with a [PCI device ID](https://pcisig.com/), the low 16 bits of
///[`device_id`]**must** contain that PCI device ID, and the remaining bits
///**must** be set to zero.
///Otherwise, the choice of what values to return **may** be dictated by operating
///system or platform policies - but **should** uniquely identify both the device
///version and any major configuration options (for example, core count in the
///case of multicore devices).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PhysicalDeviceLimits`]
/// - [`PhysicalDeviceProperties2`]
/// - [`PhysicalDeviceSparseProperties`]
/// - [`PhysicalDeviceType`]
/// - [`GetPhysicalDeviceProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PhysicalDeviceProperties {
    ///[`api_version`] is the version of Vulkan supported by the device,
    ///encoded as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers).
    api_version: u32,
    ///[`driver_version`] is the vendor-specified version of the driver.
    driver_version: u32,
    ///[`vendor_id`] is a unique identifier for the *vendor* (see below) of
    ///the physical device.
    vendor_id: u32,
    ///[`device_id`] is a unique identifier for the physical device among
    ///devices available from the vendor.
    device_id: u32,
    ///[`device_type`] is a [`PhysicalDeviceType`] specifying the type of
    ///device.
    device_type: PhysicalDeviceType,
    ///[`device_name`] is an array of [`MAX_PHYSICAL_DEVICE_NAME_SIZE`]`char` containing a
    /// null-terminated UTF-8 string which is the name of the device.
    device_name: [c_schar; MAX_PHYSICAL_DEVICE_NAME_SIZE],
    ///[`pipeline_cache_uuid`] is an array of [`UUID_SIZE`]`uint8_t`
    ///values representing a universally unique identifier for the device.
    pipeline_cache_uuid: [u8; UUID_SIZE],
    ///[`limits`] is the [`PhysicalDeviceLimits`] structure specifying
    ///device-specific limits of the physical device.
    ///See [Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits) for details.
    limits: PhysicalDeviceLimits,
    ///[`sparse_properties`] is the [`PhysicalDeviceSparseProperties`]
    ///structure specifying various sparse related properties of the physical
    ///device.
    ///See [Sparse Properties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-physicalprops) for details.
    sparse_properties: PhysicalDeviceSparseProperties,
}
///[VkExtensionProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExtensionProperties.html) - Structure specifying an extension properties
///# C Specifications
///The [`ExtensionProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkExtensionProperties {
///    char        extensionName[VK_MAX_EXTENSION_NAME_SIZE];
///    uint32_t    specVersion;
///} VkExtensionProperties;
///```
///# Members
/// - [`extension_name`] is an array of [`MAX_EXTENSION_NAME_SIZE`]`char` containing a
///   null-terminated UTF-8 string which is the name of the extension.
/// - [`spec_version`] is the version of this extension. It is an integer, incremented with backward
///   compatible changes.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`VideoDecodeH264CapabilitiesEXT`]
/// - [`VideoDecodeH264SessionCreateInfoEXT`]
/// - [`VideoDecodeH265CapabilitiesEXT`]
/// - [`VideoDecodeH265SessionCreateInfoEXT`]
/// - [`VideoEncodeH264CapabilitiesEXT`]
/// - [`VideoEncodeH264SessionCreateInfoEXT`]
/// - [`VideoEncodeH265CapabilitiesEXT`]
/// - [`VideoEncodeH265SessionCreateInfoEXT`]
/// - [`EnumerateDeviceExtensionProperties`]
/// - [`EnumerateInstanceExtensionProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ExtensionProperties {
    ///[`extension_name`] is an array of [`MAX_EXTENSION_NAME_SIZE`]`char` containing a
    /// null-terminated UTF-8 string which is the name of the extension.
    extension_name: [c_schar; MAX_EXTENSION_NAME_SIZE],
    ///[`spec_version`] is the version of this extension.
    ///It is an integer, incremented with backward compatible changes.
    spec_version: u32,
}
///[VkLayerProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkLayerProperties.html) - Structure specifying layer properties
///# C Specifications
///The [`LayerProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkLayerProperties {
///    char        layerName[VK_MAX_EXTENSION_NAME_SIZE];
///    uint32_t    specVersion;
///    uint32_t    implementationVersion;
///    char        description[VK_MAX_DESCRIPTION_SIZE];
///} VkLayerProperties;
///```
///# Members
/// - [`layer_name`] is an array of [`MAX_EXTENSION_NAME_SIZE`]`char` containing a null-terminated
///   UTF-8 string which is the name of the layer. Use this name in the `ppEnabledLayerNames` array
///   passed in the [`InstanceCreateInfo`] structure to enable this layer for an instance.
/// - [`spec_version`] is the Vulkan version the layer was written to, encoded as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers).
/// - [`implementation_version`] is the version of this layer. It is an integer, increasing with
///   backward compatible changes.
/// - [`description`] is an array of [`MAX_DESCRIPTION_SIZE`]`char` containing a null-terminated
///   UTF-8 string which provides additional details that **can** be used by the application to
///   identify the layer.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`EnumerateDeviceLayerProperties`]
/// - [`EnumerateInstanceLayerProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct LayerProperties {
    ///[`layer_name`] is an array of [`MAX_EXTENSION_NAME_SIZE`]`char` containing a null-terminated
    /// UTF-8 string which is the name of the layer.
    ///Use this name in the `ppEnabledLayerNames` array passed in the
    ///[`InstanceCreateInfo`] structure to enable this layer for an
    ///instance.
    layer_name: [c_schar; MAX_EXTENSION_NAME_SIZE],
    ///[`spec_version`] is the Vulkan version the layer was written to,
    ///encoded as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers).
    spec_version: u32,
    ///[`implementation_version`] is the version of this layer.
    ///It is an integer, increasing with backward compatible changes.
    implementation_version: u32,
    ///[`description`] is an array of [`MAX_DESCRIPTION_SIZE`]`char`
    ///containing a null-terminated UTF-8 string which provides additional
    ///details that **can** be used by the application to identify the layer.
    description: [c_schar; MAX_DESCRIPTION_SIZE],
}
///[VkApplicationInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkApplicationInfo.html) - Structure specifying application information
///# C Specifications
///The [`ApplicationInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkApplicationInfo {
///    VkStructureType    sType;
///    const void*        pNext;
///    const char*        pApplicationName;
///    uint32_t           applicationVersion;
///    const char*        pEngineName;
///    uint32_t           engineVersion;
///    uint32_t           apiVersion;
///} VkApplicationInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`p_application_name`] is `NULL` or is a pointer to a null-terminated UTF-8 string containing
///   the name of the application.
/// - [`application_version`] is an unsigned integer variable containing the developer-supplied
///   version number of the application.
/// - [`p_engine_name`] is `NULL` or is a pointer to a null-terminated UTF-8 string containing the
///   name of the engine (if any) used to create the application.
/// - [`engine_version`] is an unsigned integer variable containing the developer-supplied version
///   number of the engine used to create the application.
/// - [`api_version`]**must** be the highest version of Vulkan that the application is designed to use, encoded as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers). The patch version number specified in [`api_version`] is ignored when creating an instance object. Only the major and minor versions of the instance **must** match those requested in [`api_version`].
///# Description
///Vulkan 1.0 implementations were required to return
///`VK_ERROR_INCOMPATIBLE_DRIVER` if [`api_version`] was larger than 1.0.
///Implementations that support Vulkan 1.1 or later **must** not return
///`VK_ERROR_INCOMPATIBLE_DRIVER` for any value of [`api_version`].As long as the instance supports
/// at least Vulkan 1.1, an application **can**
///use different versions of Vulkan with an instance than it does with a device
///or physical device.Implicit layers **must** be disabled if they do not support a version at
/// least
///as high as [`api_version`].
///See the [“Architecture of the Vulkan Loader
///Interfaces”](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#LoaderInterfaceArchitecture) document for additional information.Valid Usage
/// - If [`api_version`] is not `0`, then it **must** be greater than or equal to
///   [`crate::utils::Version::VULKAN1_0`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_APPLICATION_INFO`
/// - [`p_next`]**must** be `NULL`
/// - If [`p_application_name`] is not `NULL`, [`p_application_name`]**must** be a null-terminated
///   UTF-8 string
/// - If [`p_engine_name`] is not `NULL`, [`p_engine_name`]**must** be a null-terminated UTF-8
///   string
///# Related
/// - [`crate::vulkan1_0`]
/// - [`InstanceCreateInfo`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ApplicationInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`p_application_name`] is `NULL` or is a pointer to a null-terminated
    ///UTF-8 string containing the name of the application.
    p_application_name: &'lt CStr,
    ///[`application_version`] is an unsigned integer variable containing the
    ///developer-supplied version number of the application.
    application_version: u32,
    ///[`p_engine_name`] is `NULL` or is a pointer to a null-terminated UTF-8
    ///string containing the name of the engine (if any) used to create the
    ///application.
    p_engine_name: &'lt CStr,
    ///[`engine_version`] is an unsigned integer variable containing the
    ///developer-supplied version number of the engine used to create the
    ///application.
    engine_version: u32,
    ///[`api_version`]**must** be the highest version of Vulkan that the
    ///application is designed to use, encoded as described in
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers).
    ///The patch version number specified in [`api_version`] is ignored when
    ///creating an instance object.
    ///Only the major and minor versions of the instance **must** match those
    ///requested in [`api_version`].
    api_version: u32,
}
///[VkAllocationCallbacks](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAllocationCallbacks.html) - Structure containing callback function pointers for memory allocation
///# C Specifications
///Allocators are provided by the application as a pointer to a
///[`AllocationCallbacks`] structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkAllocationCallbacks {
///    void*                                   pUserData;
///    PFN_vkAllocationFunction                pfnAllocation;
///    PFN_vkReallocationFunction              pfnReallocation;
///    PFN_vkFreeFunction                      pfnFree;
///    PFN_vkInternalAllocationNotification    pfnInternalAllocation;
///    PFN_vkInternalFreeNotification          pfnInternalFree;
///} VkAllocationCallbacks;
///```
///# Members
/// - [`p_user_data`] is a value to be interpreted by the implementation of the callbacks. When any
///   of the callbacks in [`AllocationCallbacks`] are called, the Vulkan implementation will pass
///   this value as the first parameter to the callback. This value **can** vary each time an
///   allocator is passed into a command, even when the same object takes an allocator in multiple
///   commands.
/// - [`pfn_allocation`] is a [`PFNAllocationFunction`] pointer to an application-defined memory
///   allocation function.
/// - [`pfn_reallocation`] is a [`PFNReallocationFunction`] pointer to an application-defined memory
///   reallocation function.
/// - [`pfn_free`] is a [`PFNFreeFunction`] pointer to an application-defined memory free function.
/// - [`pfn_internal_allocation`] is a [`PFNInternalAllocationNotification`] pointer to an
///   application-defined function that is called by the implementation when the implementation
///   makes internal allocations.
/// - [`pfn_internal_free`] is a [`PFNInternalFreeNotification`] pointer to an application-defined
///   function that is called by the implementation when the implementation frees internal
///   allocations.
///# Description
///Valid Usage
/// - [`pfn_allocation`]**must** be a valid pointer to a valid user-defined
///   [`PFNAllocationFunction`]
/// - [`pfn_reallocation`]**must** be a valid pointer to a valid user-defined
///   [`PFNReallocationFunction`]
/// - [`pfn_free`]**must** be a valid pointer to a valid user-defined [`PFNFreeFunction`]
/// - If either of [`pfn_internal_allocation`] or [`pfn_internal_free`] is not `NULL`, both **must**
///   be valid callbacks
///# Related
/// - [`PFNAllocationFunction`]
/// - [`PFNFreeFunction`]
/// - [`PFNInternalAllocationNotification`]
/// - [`PFNInternalFreeNotification`]
/// - [`PFNReallocationFunction`]
/// - [`crate::vulkan1_0`]
/// - [`AllocateMemory`]
/// - [`CreateAccelerationStructureKHR`]
/// - [`CreateAccelerationStructureNV`]
/// - [`CreateAndroidSurfaceKHR`]
/// - [`CreateBuffer`]
/// - [`CreateBufferCollectionFUCHSIA`]
/// - [`CreateBufferView`]
/// - [`CreateCommandPool`]
/// - [`CreateComputePipelines`]
/// - [`CreateCuFunctionNVX`]
/// - [`CreateCuModuleNVX`]
/// - [`CreateDebugReportCallbackEXT`]
/// - [`CreateDebugUtilsMessengerEXT`]
/// - [`CreateDeferredOperationKHR`]
/// - [`CreateDescriptorPool`]
/// - [`CreateDescriptorSetLayout`]
/// - [`CreateDescriptorUpdateTemplate`]
/// - [`CreateDescriptorUpdateTemplateKHR`]
/// - [`CreateDevice`]
/// - [`CreateDirectFBSurfaceEXT`]
/// - [`CreateDisplayModeKHR`]
/// - [`CreateDisplayPlaneSurfaceKHR`]
/// - [`CreateEvent`]
/// - [`CreateFence`]
/// - [`CreateFramebuffer`]
/// - [`CreateGraphicsPipelines`]
/// - [`CreateHeadlessSurfaceEXT`]
/// - [`CreateIosSurfaceMVK`]
/// - [`CreateImage`]
/// - [`CreateImagePipeSurfaceFUCHSIA`]
/// - [`CreateImageView`]
/// - [`CreateIndirectCommandsLayoutNV`]
/// - [`CreateInstance`]
/// - [`CreateMacOsSurfaceMVK`]
/// - [`CreateMetalSurfaceEXT`]
/// - [`CreatePipelineCache`]
/// - [`CreatePipelineLayout`]
/// - [`CreatePrivateDataSlot`]
/// - [`CreatePrivateDataSlotEXT`]
/// - [`CreateQueryPool`]
/// - [`CreateRayTracingPipelinesKHR`]
/// - [`CreateRayTracingPipelinesNV`]
/// - [`CreateRenderPass`]
/// - [`CreateRenderPass2`]
/// - [`CreateRenderPass2KHR`]
/// - [`CreateSampler`]
/// - [`CreateSamplerYcbcrConversion`]
/// - [`CreateSamplerYcbcrConversionKHR`]
/// - [`CreateScreenSurfaceQNX`]
/// - [`CreateSemaphore`]
/// - [`CreateShaderModule`]
/// - [`CreateSharedSwapchainsKHR`]
/// - [`CreateStreamDescriptorSurfaceGGP`]
/// - [`CreateSwapchainKHR`]
/// - [`CreateValidationCacheEXT`]
/// - [`CreateViSurfaceNN`]
/// - [`CreateVideoSessionKHR`]
/// - [`CreateVideoSessionParametersKHR`]
/// - [`CreateWaylandSurfaceKHR`]
/// - [`CreateWin32SurfaceKHR`]
/// - [`CreateXcbSurfaceKHR`]
/// - [`CreateXlibSurfaceKHR`]
/// - [`DestroyAccelerationStructureKHR`]
/// - [`DestroyAccelerationStructureNV`]
/// - [`DestroyBuffer`]
/// - [`DestroyBufferCollectionFUCHSIA`]
/// - [`DestroyBufferView`]
/// - [`DestroyCommandPool`]
/// - [`DestroyCuFunctionNVX`]
/// - [`DestroyCuModuleNVX`]
/// - [`DestroyDebugReportCallbackEXT`]
/// - [`DestroyDebugUtilsMessengerEXT`]
/// - [`DestroyDeferredOperationKHR`]
/// - [`DestroyDescriptorPool`]
/// - [`DestroyDescriptorSetLayout`]
/// - [`DestroyDescriptorUpdateTemplate`]
/// - [`DestroyDescriptorUpdateTemplateKHR`]
/// - [`DestroyDevice`]
/// - [`DestroyEvent`]
/// - [`DestroyFence`]
/// - [`DestroyFramebuffer`]
/// - [`DestroyImage`]
/// - [`DestroyImageView`]
/// - [`DestroyIndirectCommandsLayoutNV`]
/// - [`DestroyInstance`]
/// - [`DestroyPipeline`]
/// - [`DestroyPipelineCache`]
/// - [`DestroyPipelineLayout`]
/// - [`DestroyPrivateDataSlot`]
/// - [`DestroyPrivateDataSlotEXT`]
/// - [`DestroyQueryPool`]
/// - [`DestroyRenderPass`]
/// - [`DestroySampler`]
/// - [`DestroySamplerYcbcrConversion`]
/// - [`DestroySamplerYcbcrConversionKHR`]
/// - [`DestroySemaphore`]
/// - [`DestroyShaderModule`]
/// - [`DestroySurfaceKHR`]
/// - [`DestroySwapchainKHR`]
/// - [`DestroyValidationCacheEXT`]
/// - [`DestroyVideoSessionKHR`]
/// - [`DestroyVideoSessionParametersKHR`]
/// - [`FreeMemory`]
/// - [`RegisterDeviceEventEXT`]
/// - [`RegisterDisplayEventEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Eq, Ord, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct AllocationCallbacks<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`p_user_data`] is a value to be interpreted by the implementation of
    ///the callbacks.
    ///When any of the callbacks in [`AllocationCallbacks`] are called, the
    ///Vulkan implementation will pass this value as the first parameter to the
    ///callback.
    ///This value **can** vary each time an allocator is passed into a command,
    ///even when the same object takes an allocator in multiple commands.
    p_user_data: *const c_void,
    ///[`pfn_allocation`] is a [`PFNAllocationFunction`] pointer to an
    ///application-defined memory allocation function.
    pfn_allocation: PFNAllocationFunction<'lt>,
    ///[`pfn_reallocation`] is a [`PFNReallocationFunction`] pointer to
    ///an application-defined memory reallocation function.
    pfn_reallocation: PFNReallocationFunction<'lt>,
    ///[`pfn_free`] is a [`PFNFreeFunction`] pointer to an
    ///application-defined memory free function.
    pfn_free: PFNFreeFunction<'lt>,
    ///[`pfn_internal_allocation`] is a
    ///[`PFNInternalAllocationNotification`] pointer to an
    ///application-defined function that is called by the implementation when
    ///the implementation makes internal allocations.
    pfn_internal_allocation: PFNInternalAllocationNotification<'lt>,
    ///[`pfn_internal_free`] is a [`PFNInternalFreeNotification`] pointer
    ///to an application-defined function that is called by the implementation
    ///when the implementation frees internal allocations.
    pfn_internal_free: PFNInternalFreeNotification<'lt>,
}
///[VkDeviceQueueCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueCreateInfo.html) - Structure specifying parameters of a newly created device queue
///# C Specifications
///The [`DeviceQueueCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDeviceQueueCreateInfo {
///    VkStructureType             sType;
///    const void*                 pNext;
///    VkDeviceQueueCreateFlags    flags;
///    uint32_t                    queueFamilyIndex;
///    uint32_t                    queueCount;
///    const float*                pQueuePriorities;
///} VkDeviceQueueCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask indicating behavior of the queue.
/// - [`queue_family_index`] is an unsigned integer indicating the index of the queue family in
///   which to create the queue on this device. This index corresponds to the index of an element of
///   the `pQueueFamilyProperties` array that was returned by
///   [`GetPhysicalDeviceQueueFamilyProperties`].
/// - [`queue_count`] is an unsigned integer specifying the number of queues to create in the queue
///   family indicated by [`queue_family_index`].
/// - [`p_queue_priorities`] is a pointer to an array of [`queue_count`] normalized floating point values, specifying priorities of work that will be submitted to each created queue. See [Queue Priority](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-priority) for more information.
///# Description
///Valid Usage
/// - [`queue_family_index`]**must** be less than `pQueueFamilyPropertyCount` returned by
///   [`GetPhysicalDeviceQueueFamilyProperties`]
/// - [`queue_count`]**must** be less than or equal to the [`queue_count`] member of the
///   [`QueueFamilyProperties`] structure, as returned by [`GetPhysicalDeviceQueueFamilyProperties`]
///   in the `pQueueFamilyProperties`[queueFamilyIndex]
/// - Each element of [`p_queue_priorities`]**must** be between `0.0` and `1.0` inclusive
/// - If the [protected memory](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-protectedMemory)
///   feature is not enabled, the `VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT` bit of [`flags`]**must**
///   not be set
/// - If [`flags`] includes `VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT`, [`queue_family_index`]**must**
///   be the index of a queue family that includes the `VK_QUEUE_PROTECTED_BIT` capability
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`DeviceQueueGlobalPriorityCreateInfoKHR`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`DeviceQueueCreateFlagBits`] values
/// - [`p_queue_priorities`]**must** be a valid pointer to an array of [`queue_count`]`float` values
/// - [`queue_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceCreateInfo`]
/// - [`DeviceQueueCreateFlags`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DeviceQueueCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask indicating behavior of the queue.
    flags: DeviceQueueCreateFlags,
    ///[`queue_family_index`] is an unsigned integer indicating the index of
    ///the queue family in which to create the queue on this device.
    ///This index corresponds to the index of an element of the
    ///`pQueueFamilyProperties` array that was returned by
    ///[`GetPhysicalDeviceQueueFamilyProperties`].
    queue_family_index: u32,
    ///[`queue_count`] is an unsigned integer specifying the number of queues
    ///to create in the queue family indicated by [`queue_family_index`].
    queue_count: u32,
    ///[`p_queue_priorities`] is a pointer to an array of [`queue_count`]
    ///normalized floating point values, specifying priorities of work that
    ///will be submitted to each created queue.
    ///See [Queue Priority](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-priority) for more information.
    p_queue_priorities: *mut f32,
}
///[VkDeviceCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceCreateInfo.html) - Structure specifying parameters of a newly created device
///# C Specifications
///The [`DeviceCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDeviceCreateInfo {
///    VkStructureType                    sType;
///    const void*                        pNext;
///    VkDeviceCreateFlags                flags;
///    uint32_t                           queueCreateInfoCount;
///    const VkDeviceQueueCreateInfo*     pQueueCreateInfos;
///    uint32_t                           enabledLayerCount;
///    const char* const*                 ppEnabledLayerNames;
///    uint32_t                           enabledExtensionCount;
///    const char* const*                 ppEnabledExtensionNames;
///    const VkPhysicalDeviceFeatures*    pEnabledFeatures;
///} VkDeviceCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`queue_create_info_count`] is the unsigned integer size of the [`p_queue_create_infos`] array. Refer to the [Queue Creation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-queue-creation) section below for further details.
/// - [`p_queue_create_infos`] is a pointer to an array of [`DeviceQueueCreateInfo`] structures describing the queues that are requested to be created along with the logical device. Refer to the [Queue Creation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-queue-creation) section below for further details.
/// - [`enabled_layer_count`] is deprecated and ignored.
/// - [`pp_enabled_layer_names`] is deprecated and ignored. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers-devicelayerdeprecation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers-devicelayerdeprecation).
/// - [`enabled_extension_count`] is the number of device extensions to enable.
/// - [`pp_enabled_extension_names`] is a pointer to an array of [`enabled_extension_count`] null-terminated UTF-8 strings containing the names of extensions to enable for the created device. See the [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-extensions](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-extensions) section for further details.
/// - [`p_enabled_features`] is `NULL` or a pointer to a [`PhysicalDeviceFeatures`] structure containing boolean indicators of all the features to be enabled. Refer to the [Features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features) section for further details.
///# Description
///Valid Usage
/// - The `queueFamilyIndex` member of each element of [`p_queue_create_infos`]**must** be unique
///   within [`p_queue_create_infos`], except that two members can share the same `queueFamilyIndex`
///   if one is a protected-capable queue and one is not a protected-capable queue
/// - If the [`p_next`] chain includes a [`PhysicalDeviceFeatures2`] structure, then
///   [`p_enabled_features`]**must** be `NULL`
/// - [`pp_enabled_extension_names`]**must** not contain `[`VK_AMD_negative_viewport_height`]`
/// - [`pp_enabled_extension_names`]**must** not contain both `[`VK_KHR_buffer_device_address`]` and
///   `[`VK_EXT_buffer_device_address`]`
/// - if the [`p_next`] chain includes a [`PhysicalDeviceVulkan12Features`] structure and
///   [`PhysicalDeviceVulkan12Features::buffer_device_address`] is [`TRUE`],
///   [`pp_enabled_extension_names`]**must** not contain `[`VK_EXT_buffer_device_address`]`
/// - If the [`p_next`] chain includes a [`PhysicalDeviceVulkan11Features`] structure, then it
///   **must** not include a [`PhysicalDevice16BitStorageFeatures`],
///   [`PhysicalDeviceMultiviewFeatures`], [`PhysicalDeviceVariablePointersFeatures`],
///   [`PhysicalDeviceProtectedMemoryFeatures`], [`PhysicalDeviceSamplerYcbcrConversionFeatures`],
///   or [`PhysicalDeviceShaderDrawParametersFeatures`] structure
/// - If the [`p_next`] chain includes a [`PhysicalDeviceVulkan12Features`] structure, then it
///   **must** not include a [`PhysicalDevice8BitStorageFeatures`],
///   [`PhysicalDeviceShaderAtomicInt64Features`], [`PhysicalDeviceShaderFloat16Int8Features`],
///   [`PhysicalDeviceDescriptorIndexingFeatures`], [`PhysicalDeviceScalarBlockLayoutFeatures`],
///   [`PhysicalDeviceImagelessFramebufferFeatures`],
///   [`PhysicalDeviceUniformBufferStandardLayoutFeatures`],
///   [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`],
///   [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`],
///   [`PhysicalDeviceHostQueryResetFeatures`], [`PhysicalDeviceTimelineSemaphoreFeatures`],
///   [`PhysicalDeviceBufferDeviceAddressFeatures`], or [`PhysicalDeviceVulkanMemoryModelFeatures`]
///   structure
/// - If [`pp_enabled_extension_names`] contains `"VK_KHR_shader_draw_parameters"` and the
///   [`p_next`] chain includes a [`PhysicalDeviceVulkan11Features`] structure, then
///   [`PhysicalDeviceVulkan11Features::shader_draw_parameters`]**must** be [`TRUE`]
/// - If [`pp_enabled_extension_names`] contains `"VK_KHR_draw_indirect_count"` and the [`p_next`]
///   chain includes a [`PhysicalDeviceVulkan12Features`] structure, then
///   [`PhysicalDeviceVulkan12Features::draw_indirect_count`]**must** be [`TRUE`]
/// - If [`pp_enabled_extension_names`] contains `"VK_KHR_sampler_mirror_clamp_to_edge"` and the
///   [`p_next`] chain includes a [`PhysicalDeviceVulkan12Features`] structure, then
///   [`PhysicalDeviceVulkan12Features::sampler_mirror_clamp_to_edge`]**must** be [`TRUE`]
/// - If [`pp_enabled_extension_names`] contains `"VK_EXT_descriptor_indexing"` and the [`p_next`]
///   chain includes a [`PhysicalDeviceVulkan12Features`] structure, then
///   [`PhysicalDeviceVulkan12Features::descriptor_indexing`]**must** be [`TRUE`]
/// - If [`pp_enabled_extension_names`] contains `"VK_EXT_sampler_filter_minmax"` and the [`p_next`]
///   chain includes a [`PhysicalDeviceVulkan12Features`] structure, then
///   [`PhysicalDeviceVulkan12Features::sampler_filter_minmax`]**must** be [`TRUE`]
/// - If [`pp_enabled_extension_names`] contains `"VK_EXT_shader_viewport_index_layer"` and the
///   [`p_next`] chain includes a [`PhysicalDeviceVulkan12Features`] structure, then
///   [`PhysicalDeviceVulkan12Features::shader_output_viewport_index`] and
///   [`PhysicalDeviceVulkan12Features::shader_output_layer`]**must** both be [`TRUE`]
/// - If the [`p_next`] chain includes a [`PhysicalDeviceVulkan13Features`] structure, then it
///   **must** not include a [`PhysicalDeviceDynamicRenderingFeatures`],
///   [`PhysicalDeviceImageRobustnessFeatures`], [`PhysicalDeviceInlineUniformBlockFeatures`],
///   [`PhysicalDeviceMaintenance4Features`],
///   [`PhysicalDevicePipelineCreationCacheControlFeatures`], [`PhysicalDevicePrivateDataFeatures`],
///   [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`],
///   [`PhysicalDeviceShaderIntegerDotProductFeatures`],
///   [`PhysicalDeviceShaderTerminateInvocationFeatures`],
///   [`PhysicalDeviceSubgroupSizeControlFeatures`], [`PhysicalDeviceSynchronization2Features`],
///   [`PhysicalDeviceTextureCompressionAstchdrFeatures`], or
///   [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`] structure
/// - If the `[`VK_KHR_portability_subset`]` extension is included in `pProperties` of
///   [`EnumerateDeviceExtensionProperties`], [`pp_enabled_extension_names`]**must** include
///   `"VK_KHR_portability_subset"`
/// - If [`shadingRateImage`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shadingRateImage)
///   is enabled, [`pipelineFragmentShadingRate`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineFragmentShadingRate)**must**
///   not be enabled
/// - If [`shadingRateImage`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shadingRateImage)
///   is enabled, [`primitiveFragmentShadingRate`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveFragmentShadingRate)**must**
///   not be enabled
/// - If [`shadingRateImage`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shadingRateImage)
///   is enabled, [`attachmentFragmentShadingRate`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-attachmentFragmentShadingRate)**must**
///   not be enabled
/// - If [`fragmentDensityMap`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMap)
///   is enabled, [`pipelineFragmentShadingRate`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineFragmentShadingRate)**must**
///   not be enabled
/// - If [`fragmentDensityMap`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMap)
///   is enabled, [`primitiveFragmentShadingRate`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveFragmentShadingRate)**must**
///   not be enabled
/// - If [`fragmentDensityMap`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMap)
///   is enabled, [`attachmentFragmentShadingRate`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-attachmentFragmentShadingRate)**must**
///   not be enabled
/// - If [`sparseImageInt64Atomics`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseImageInt64Atomics)
///   is enabled, [`shaderImageInt64Atomics`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shaderImageInt64Atomics)**must**
///   be enabled
/// - If [`sparseImageFloat32Atomics`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseImageFloat32Atomics)
///   is enabled, [`shaderImageFloat32Atomics`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shaderImageFloat32Atomics)**must**
///   be enabled
/// - If [`sparseImageFloat32AtomicAdd`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseImageFloat32AtomicAdd)
///   is enabled, [`shaderImageFloat32AtomicAdd`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shaderImageFloat32AtomicAdd)**must**
///   be enabled
/// - If [`sparseImageFloat32AtomicMinMax`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseImageFloat32AtomicMinMax)
///   is enabled, [`shaderImageFloat32AtomicMinMax`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shaderImageFloat32AtomicMinMax)**must**
///   be enabled
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`DeviceDeviceMemoryReportCreateInfoEXT`], [`DeviceDiagnosticsConfigCreateInfoNV`],
///   [`DeviceGroupDeviceCreateInfo`], [`DeviceMemoryOverallocationCreateInfoAMD`],
///   [`DevicePrivateDataCreateInfo`], [`PhysicalDevice16BitStorageFeatures`],
///   [`PhysicalDevice4444FormatsFeaturesEXT`], [`PhysicalDevice8BitStorageFeatures`],
///   [`PhysicalDeviceAstcDecodeFeaturesEXT`], [`PhysicalDeviceAccelerationStructureFeaturesKHR`],
///   [`PhysicalDeviceBlendOperationAdvancedFeaturesEXT`],
///   [`PhysicalDeviceBorderColorSwizzleFeaturesEXT`],
///   [`PhysicalDeviceBufferDeviceAddressFeatures`],
///   [`PhysicalDeviceBufferDeviceAddressFeaturesEXT`], [`PhysicalDeviceCoherentMemoryFeaturesAMD`],
///   [`PhysicalDeviceColorWriteEnableFeaturesEXT`],
///   [`PhysicalDeviceComputeShaderDerivativesFeaturesNV`],
///   [`PhysicalDeviceConditionalRenderingFeaturesEXT`],
///   [`PhysicalDeviceCooperativeMatrixFeaturesNV`], [`PhysicalDeviceCornerSampledImageFeaturesNV`],
///   [`PhysicalDeviceCoverageReductionModeFeaturesNV`],
///   [`PhysicalDeviceCustomBorderColorFeaturesEXT`],
///   [`PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV`],
///   [`PhysicalDeviceDepthClipControlFeaturesEXT`], [`PhysicalDeviceDepthClipEnableFeaturesEXT`],
///   [`PhysicalDeviceDescriptorIndexingFeatures`],
///   [`PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE`],
///   [`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV`],
///   [`PhysicalDeviceDeviceMemoryReportFeaturesEXT`],
///   [`PhysicalDeviceDiagnosticsConfigFeaturesNV`], [`PhysicalDeviceDynamicRenderingFeatures`],
///   [`PhysicalDeviceExclusiveScissorFeaturesNV`],
///   [`PhysicalDeviceExtendedDynamicState2FeaturesEXT`],
///   [`PhysicalDeviceExtendedDynamicStateFeaturesEXT`],
///   [`PhysicalDeviceExternalMemoryRdmaFeaturesNV`], [`PhysicalDeviceFeatures2`],
///   [`PhysicalDeviceFragmentDensityMap2FeaturesEXT`],
///   [`PhysicalDeviceFragmentDensityMapFeaturesEXT`],
///   [`PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM`],
///   [`PhysicalDeviceFragmentShaderBarycentricFeaturesNV`],
///   [`PhysicalDeviceFragmentShaderInterlockFeaturesEXT`],
///   [`PhysicalDeviceFragmentShadingRateEnumsFeaturesNV`],
///   [`PhysicalDeviceFragmentShadingRateFeaturesKHR`],
///   [`PhysicalDeviceGlobalPriorityQueryFeaturesKHR`], [`PhysicalDeviceHostQueryResetFeatures`],
///   [`PhysicalDeviceImageRobustnessFeatures`], [`PhysicalDeviceImageViewMinLodFeaturesEXT`],
///   [`PhysicalDeviceImagelessFramebufferFeatures`], [`PhysicalDeviceIndexTypeUint8FeaturesEXT`],
///   [`PhysicalDeviceInheritedViewportScissorFeaturesNV`],
///   [`PhysicalDeviceInlineUniformBlockFeatures`], [`PhysicalDeviceInvocationMaskFeaturesHUAWEI`],
///   [`PhysicalDeviceLineRasterizationFeaturesEXT`],
///   [`PhysicalDeviceLinearColorAttachmentFeaturesNV`], [`PhysicalDeviceMaintenance4Features`],
///   [`PhysicalDeviceMemoryPriorityFeaturesEXT`], [`PhysicalDeviceMeshShaderFeaturesNV`],
///   [`PhysicalDeviceMultiDrawFeaturesEXT`], [`PhysicalDeviceMultiviewFeatures`],
///   [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE`],
///   [`PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT`],
///   [`PhysicalDevicePerformanceQueryFeaturesKHR`],
///   [`PhysicalDevicePipelineCreationCacheControlFeatures`],
///   [`PhysicalDevicePipelineExecutablePropertiesFeaturesKHR`],
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR`], [`PhysicalDevicePresentIdFeaturesKHR`],
///   [`PhysicalDevicePresentWaitFeaturesKHR`],
///   [`PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT`],
///   [`PhysicalDevicePrivateDataFeatures`], [`PhysicalDeviceProtectedMemoryFeatures`],
///   [`PhysicalDeviceProvokingVertexFeaturesEXT`], [`PhysicalDeviceRgba10X6FormatsFeaturesEXT`],
///   [`PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM`],
///   [`PhysicalDeviceRayQueryFeaturesKHR`], [`PhysicalDeviceRayTracingMotionBlurFeaturesNV`],
///   [`PhysicalDeviceRayTracingPipelineFeaturesKHR`],
///   [`PhysicalDeviceRepresentativeFragmentTestFeaturesNV`],
///   [`PhysicalDeviceRobustness2FeaturesEXT`], [`PhysicalDeviceSamplerYcbcrConversionFeatures`],
///   [`PhysicalDeviceScalarBlockLayoutFeatures`],
///   [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`],
///   [`PhysicalDeviceShaderAtomicFloat2FeaturesEXT`],
///   [`PhysicalDeviceShaderAtomicFloatFeaturesEXT`], [`PhysicalDeviceShaderAtomicInt64Features`],
///   [`PhysicalDeviceShaderClockFeaturesKHR`],
///   [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`],
///   [`PhysicalDeviceShaderDrawParametersFeatures`], [`PhysicalDeviceShaderFloat16Int8Features`],
///   [`PhysicalDeviceShaderImageAtomicInt64FeaturesEXT`],
///   [`PhysicalDeviceShaderImageFootprintFeaturesNV`],
///   [`PhysicalDeviceShaderIntegerDotProductFeatures`],
///   [`PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL`],
///   [`PhysicalDeviceShaderSmBuiltinsFeaturesNV`],
///   [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`],
///   [`PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR`],
///   [`PhysicalDeviceShaderTerminateInvocationFeatures`],
///   [`PhysicalDeviceShadingRateImageFeaturesNV`], [`PhysicalDeviceSubgroupSizeControlFeatures`],
///   [`PhysicalDeviceSubpassShadingFeaturesHUAWEI`], [`PhysicalDeviceSynchronization2Features`],
///   [`PhysicalDeviceTexelBufferAlignmentFeaturesEXT`],
///   [`PhysicalDeviceTextureCompressionAstchdrFeatures`],
///   [`PhysicalDeviceTimelineSemaphoreFeatures`], [`PhysicalDeviceTransformFeedbackFeaturesEXT`],
///   [`PhysicalDeviceUniformBufferStandardLayoutFeatures`],
///   [`PhysicalDeviceVariablePointersFeatures`],
///   [`PhysicalDeviceVertexAttributeDivisorFeaturesEXT`],
///   [`PhysicalDeviceVertexInputDynamicStateFeaturesEXT`], [`PhysicalDeviceVulkan11Features`],
///   [`PhysicalDeviceVulkan12Features`], [`PhysicalDeviceVulkan13Features`],
///   [`PhysicalDeviceVulkanMemoryModelFeatures`],
///   [`PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR`],
///   [`PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT`],
///   [`PhysicalDeviceYcbcrImageArraysFeaturesEXT`], or
///   [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique, with the
///   exception of structures of type [`DeviceDeviceMemoryReportCreateInfoEXT`] or
///   [`DevicePrivateDataCreateInfo`]
/// - [`flags`]**must** be `0`
/// - [`p_queue_create_infos`]**must** be a valid pointer to an array of [`queue_create_info_count`]
///   valid [`DeviceQueueCreateInfo`] structures
/// - If [`enabled_layer_count`] is not `0`, [`pp_enabled_layer_names`]**must** be a valid pointer
///   to an array of [`enabled_layer_count`] null-terminated UTF-8 strings
/// - If [`enabled_extension_count`] is not `0`, [`pp_enabled_extension_names`]**must** be a valid
///   pointer to an array of [`enabled_extension_count`] null-terminated UTF-8 strings
/// - If [`p_enabled_features`] is not `NULL`, [`p_enabled_features`]**must** be a valid pointer to
///   a valid [`PhysicalDeviceFeatures`] structure
/// - [`queue_create_info_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceCreateFlags`]
/// - [`DeviceQueueCreateInfo`]
/// - [`PhysicalDeviceFeatures`]
/// - [`StructureType`]
/// - [`CreateDevice`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DeviceCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: DeviceCreateFlags,
    ///[`queue_create_info_count`] is the unsigned integer size of the
    ///[`p_queue_create_infos`] array.
    ///Refer to the [Queue Creation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-queue-creation) section
    ///below for further details.
    queue_create_info_count: u32,
    ///[`p_queue_create_infos`] is a pointer to an array of
    ///[`DeviceQueueCreateInfo`] structures describing the queues that are
    ///requested to be created along with the logical device.
    ///Refer to the [Queue Creation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-queue-creation) section
    ///below for further details.
    p_queue_create_infos: *mut DeviceQueueCreateInfo<'lt>,
    ///[`enabled_layer_count`] is deprecated and ignored.
    enabled_layer_count: u32,
    ///[`pp_enabled_layer_names`] is deprecated and ignored.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers-devicelayerdeprecation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers-devicelayerdeprecation).
    pp_enabled_layer_names: *mut &'lt CStr,
    ///[`enabled_extension_count`] is the number of device extensions to
    ///enable.
    enabled_extension_count: u32,
    ///[`pp_enabled_extension_names`] is a pointer to an array of
    ///[`enabled_extension_count`] null-terminated UTF-8 strings containing the
    ///names of extensions to enable for the created device.
    ///See the [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-extensions](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-extensions) section for further details.
    pp_enabled_extension_names: *mut &'lt CStr,
    ///[`p_enabled_features`] is `NULL` or a pointer to a
    ///[`PhysicalDeviceFeatures`] structure containing boolean indicators
    ///of all the features to be enabled.
    ///Refer to the [Features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features) section for further details.
    p_enabled_features: *mut PhysicalDeviceFeatures,
}
///[VkInstanceCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkInstanceCreateInfo.html) - Structure specifying parameters of a newly created instance
///# C Specifications
///The [`InstanceCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkInstanceCreateInfo {
///    VkStructureType             sType;
///    const void*                 pNext;
///    VkInstanceCreateFlags       flags;
///    const VkApplicationInfo*    pApplicationInfo;
///    uint32_t                    enabledLayerCount;
///    const char* const*          ppEnabledLayerNames;
///    uint32_t                    enabledExtensionCount;
///    const char* const*          ppEnabledExtensionNames;
///} VkInstanceCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`p_application_info`] is `NULL` or a pointer to a [`ApplicationInfo`] structure. If not
///   `NULL`, this information helps implementations recognize behavior inherent to classes of
///   applications. [`ApplicationInfo`] is defined in detail below.
/// - [`enabled_layer_count`] is the number of global layers to enable.
/// - [`pp_enabled_layer_names`] is a pointer to an array of [`enabled_layer_count`] null-terminated
///   UTF-8 strings containing the names of layers to enable for the created instance. The layers are
///   loaded in the order they are listed in this array, with the first array element being the closest
///   to the application, and the last array element being the closest to the driver. See the [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers)
///   section for further details.
/// - [`enabled_extension_count`] is the number of global extensions to enable.
/// - [`pp_enabled_extension_names`] is a pointer to an array of [`enabled_extension_count`]
///   null-terminated UTF-8 strings containing the names of extensions to enable.
///# Description
///To capture events that occur while creating or destroying an instance, an
///application can link a
///[`DebugReportCallbackCreateInfoEXT`] structure
///or a
///[`DebugUtilsMessengerCreateInfoEXT`] structure
///to the [`p_next`] element of the [`InstanceCreateInfo`] structure given
///to [`CreateInstance`].
///This callback is only valid for the duration of the [`CreateInstance`]
///and the [`DestroyInstance`] call.
///Use
///[`CreateDebugReportCallbackEXT`]
///or
///[`CreateDebugUtilsMessengerEXT`]
///to create persistent callback objects.Valid Usage
/// - If the [`p_next`] chain of [`InstanceCreateInfo`] includes a
///   [`DebugReportCallbackCreateInfoEXT`] structure, the list of enabled extensions in
///   [`pp_enabled_extension_names`]**must** contain [`VK_EXT_debug_report`]
/// - If the [`p_next`] chain of [`InstanceCreateInfo`] includes a
///   [`DebugUtilsMessengerCreateInfoEXT`] structure, the list of enabled extensions in
///   [`pp_enabled_extension_names`]**must** contain [`VK_EXT_debug_utils`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`DebugReportCallbackCreateInfoEXT`],
///   [`DebugUtilsMessengerCreateInfoEXT`], [`ValidationFeaturesEXT`], or [`ValidationFlagsEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique, with the
///   exception of structures of type [`DebugUtilsMessengerCreateInfoEXT`]
/// - [`flags`]**must** be `0`
/// - If [`p_application_info`] is not `NULL`, [`p_application_info`]**must** be a valid pointer to
///   a valid [`ApplicationInfo`] structure
/// - If [`enabled_layer_count`] is not `0`, [`pp_enabled_layer_names`]**must** be a valid pointer
///   to an array of [`enabled_layer_count`] null-terminated UTF-8 strings
/// - If [`enabled_extension_count`] is not `0`, [`pp_enabled_extension_names`]**must** be a valid
///   pointer to an array of [`enabled_extension_count`] null-terminated UTF-8 strings
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ApplicationInfo`]
/// - [`InstanceCreateFlags`]
/// - [`StructureType`]
/// - [`CreateInstance`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct InstanceCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: InstanceCreateFlags,
    ///[`p_application_info`] is `NULL` or a pointer to a
    ///[`ApplicationInfo`] structure.
    ///If not `NULL`, this information helps implementations recognize behavior
    ///inherent to classes of applications.
    ///[`ApplicationInfo`] is defined in detail below.
    p_application_info: *mut ApplicationInfo<'lt>,
    ///[`enabled_layer_count`] is the number of global layers to enable.
    enabled_layer_count: u32,
    ///[`pp_enabled_layer_names`] is a pointer to an array of
    ///[`enabled_layer_count`] null-terminated UTF-8 strings containing the
    ///names of layers to enable for the created instance.
    ///The layers are loaded in the order they are listed in this array, with
    ///the first array element being the closest to the application, and the
    ///last array element being the closest to the driver.
    ///See the [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#extendingvulkan-layers) section for further details.
    pp_enabled_layer_names: *mut &'lt CStr,
    ///[`enabled_extension_count`] is the number of global extensions to
    ///enable.
    enabled_extension_count: u32,
    ///[`pp_enabled_extension_names`] is a pointer to an array of
    ///[`enabled_extension_count`] null-terminated UTF-8 strings containing the
    ///names of extensions to enable.
    pp_enabled_extension_names: *mut &'lt CStr,
}
///[VkQueueFamilyProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyProperties.html) - Structure providing information about a queue family
///# C Specifications
///The [`QueueFamilyProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkQueueFamilyProperties {
///    VkQueueFlags    queueFlags;
///    uint32_t        queueCount;
///    uint32_t        timestampValidBits;
///    VkExtent3D      minImageTransferGranularity;
///} VkQueueFamilyProperties;
///```
///# Members
/// - [`queue_flags`] is a bitmask of [`QueueFlagBits`] indicating capabilities of the queues in
///   this queue family.
/// - [`queue_count`] is the unsigned integer count of queues in this queue family. Each queue
///   family **must** support at least one queue.
/// - [`timestamp_valid_bits`] is the unsigned integer count of meaningful bits in the timestamps
///   written via [`CmdWriteTimestamp2`] or [`CmdWriteTimestamp`]. The valid range for the count is
///   36..64 bits, or a value of 0, indicating no support for timestamps. Bits outside the valid
///   range are guaranteed to be zeros.
/// - [`min_image_transfer_granularity`] is the minimum granularity supported for image transfer
///   operations on the queues in this queue family.
///# Description
///The value returned in [`min_image_transfer_granularity`] has a unit of
///compressed texel blocks for images having a block-compressed format, and a
///unit of texels otherwise.Possible values of [`min_image_transfer_granularity`] are:
/// - (0,0,0) specifies that only whole mip levels **must** be transferred using the image transfer
///   operations on the corresponding queues. In this case, the following restrictions apply to all
///   offset and extent parameters of image transfer operations:  - The `x`, `y`, and `z` members of
///   a [`Offset3D`] parameter **must** always be zero.  - The `width`, `height`, and `depth`
///   members of a [`Extent3D`] parameter **must** always match the width, height, and depth of the
///   image subresource corresponding to the parameter, respectively.
/// - (A<sub>x</sub>, A<sub>y</sub>, A<sub>z</sub>) where A<sub>x</sub>, A<sub>y</sub>, and
///   A<sub>z</sub> are all integer powers of two. In this case the following restrictions apply to
///   all image transfer operations:  - `x`, `y`, and `z` of a [`Offset3D`] parameter **must** be
///   integer multiples of A<sub>x</sub>, A<sub>y</sub>, and A<sub>z</sub>, respectively.  - `width`
///   of a [`Extent3D`] parameter **must** be an integer multiple of A<sub>x</sub>, or else `x` +
///   `width`**must** equal the width of the image subresource corresponding to the parameter.  -
///   `height` of a [`Extent3D`] parameter **must** be an integer multiple of A<sub>y</sub>, or else
///   `y` +  `height`**must** equal the height of the image subresource corresponding to the
///   parameter.  - `depth` of a [`Extent3D`] parameter **must** be an integer multiple of
///   A<sub>z</sub>, or else `z` +  `depth`**must** equal the depth of the image subresource
///   corresponding to the parameter.  - If the format of the image corresponding to the parameters
///   is one of the block-compressed formats then for the purposes of the above calculations the
///   granularity **must** be scaled up by the compressed texel block dimensions.
///Queues supporting graphics and/or compute operations **must** report
///(1,1,1) in [`min_image_transfer_granularity`], meaning that there are
///no additional restrictions on the granularity of image transfer operations
///for these queues.
///Other queues supporting image transfer operations are only **required** to
///support whole mip level transfers, thus [`min_image_transfer_granularity`]
///for queues belonging to such queue families **may** be (0,0,0).The [Device Memory](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device) section describes memory properties
///queried from the physical device.For physical device feature queries see the [Features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features) chapter.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Extent3D`]
/// - [`QueueFamilyProperties2`]
/// - [`QueueFlags`]
/// - [`GetPhysicalDeviceQueueFamilyProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct QueueFamilyProperties {
    ///[`queue_flags`] is a bitmask of [`QueueFlagBits`] indicating
    ///capabilities of the queues in this queue family.
    queue_flags: QueueFlags,
    ///[`queue_count`] is the unsigned integer count of queues in this queue
    ///family.
    ///Each queue family **must** support at least one queue.
    queue_count: u32,
    ///[`timestamp_valid_bits`] is the unsigned integer count of meaningful
    ///bits in the timestamps written via
    ///[`CmdWriteTimestamp2`] or
    ///[`CmdWriteTimestamp`].
    ///The valid range for the count is 36..64 bits, or a value of 0,
    ///indicating no support for timestamps.
    ///Bits outside the valid range are guaranteed to be zeros.
    timestamp_valid_bits: u32,
    ///[`min_image_transfer_granularity`] is the minimum granularity supported
    ///for image transfer operations on the queues in this queue family.
    min_image_transfer_granularity: Extent3D,
}
///[VkPhysicalDeviceMemoryProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryProperties.html) - Structure specifying physical device memory properties
///# C Specifications
///The [`PhysicalDeviceMemoryProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPhysicalDeviceMemoryProperties {
///    uint32_t        memoryTypeCount;
///    VkMemoryType    memoryTypes[VK_MAX_MEMORY_TYPES];
///    uint32_t        memoryHeapCount;
///    VkMemoryHeap    memoryHeaps[VK_MAX_MEMORY_HEAPS];
///} VkPhysicalDeviceMemoryProperties;
///```
///# Members
/// - [`memory_type_count`] is the number of valid elements in the [`memory_types`] array.
/// - [`memory_types`] is an array of [`MAX_MEMORY_TYPES`][`MemoryType`] structures describing the
///   *memory types* that **can** be used to access memory allocated from the heaps specified by
///   [`memory_heaps`].
/// - [`memory_heap_count`] is the number of valid elements in the [`memory_heaps`] array.
/// - [`memory_heaps`] is an array of [`MAX_MEMORY_HEAPS`][`MemoryHeap`] structures describing the
///   *memory heaps* from which memory **can** be allocated.
///# Description
///The [`PhysicalDeviceMemoryProperties`] structure describes a number of
///*memory heaps* as well as a number of *memory types* that **can** be used to
///access memory allocated in those heaps.
///Each heap describes a memory resource of a particular size, and each memory
///type describes a set of memory properties (e.g. host cached vs uncached)
///that **can** be used with a given memory heap.
///Allocations using a particular memory type will consume resources from the
///heap indicated by that memory type’s heap index.
///More than one memory type **may** share each heap, and the heaps and memory
///types provide a mechanism to advertise an accurate size of the physical
///memory resources while allowing the memory to be used with a variety of
///different properties.The number of memory heaps is given by [`memory_heap_count`] and is less
///than or equal to [`MAX_MEMORY_HEAPS`].
///Each heap is described by an element of the [`memory_heaps`] array as a
///[`MemoryHeap`] structure.
///The number of memory types available across all memory heaps is given by
///[`memory_type_count`] and is less than or equal to
///[`MAX_MEMORY_TYPES`].
///Each memory type is described by an element of the [`memory_types`] array
///as a [`MemoryType`] structure.At least one heap **must** include
/// `VK_MEMORY_HEAP_DEVICE_LOCAL_BIT` in
///[`MemoryHeap::flags`].
///If there are multiple heaps that all have similar performance
///characteristics, they **may** all include
///`VK_MEMORY_HEAP_DEVICE_LOCAL_BIT`.
///In a unified memory architecture (UMA) system there is often only a single
///memory heap which is considered to be equally “local” to the host and to
///the device, and such an implementation **must** advertise the heap as
///device-local.Each memory type returned by [`GetPhysicalDeviceMemoryProperties`]**must**
///have its `propertyFlags` set to one of the following values:
/// - 0
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT`
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_CACHED_BIT`
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_CACHED_BIT`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` | `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT`
/// - `VK_MEMORY_PROPERTY_PROTECTED_BIT`
/// - `VK_MEMORY_PROPERTY_PROTECTED_BIT` | `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT`
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` |
///   `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` | `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` | `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` | `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` |
///   `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` |
///   `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` | `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` | `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` | `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` |
///   `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` |
///   `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` | `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` |
///   `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` |
///   `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` | `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` |
///   `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` | `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD`
/// - `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` | `VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV`
///There **must** be at least one memory type with both the
///`VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` and
///`VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` bits set in its
///`propertyFlags`.
///There **must** be at least one memory type with the
///`VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT` bit set in its
///`propertyFlags`.
///If the [`deviceCoherentMemory`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-deviceCoherentMemory) feature
///is enabled, there **must** be at least one memory type with the
///`VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` bit set in its
///`propertyFlags`.For each pair of elements **X** and **Y** returned in [`memory_types`],
/// **X****must** be placed at a lower index position than **Y** if:
/// - the set of bit flags returned in the `propertyFlags` member of **X** is a strict subset of the
///   set of bit flags returned in the `propertyFlags` member of **Y**; or
/// - the `propertyFlags` members of **X** and **Y** are equal, and **X** belongs to a memory heap
///   with greater performance (as determined in an implementation-specific manner) ; or
/// - the `propertyFlags` members of **Y** includes `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` or
///   `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD` and **X** does not
///This ordering requirement enables applications to use a simple search loop
///to select the desired memory type along the lines of:
///```c
///// Find a memory in `memoryTypeBitsRequirement` that includes all of `requiredProperties`
///int32_t findProperties(const VkPhysicalDeviceMemoryProperties* pMemoryProperties,
///                       uint32_t memoryTypeBitsRequirement,
///                       VkMemoryPropertyFlags requiredProperties) {
///    const uint32_t memoryCount = pMemoryProperties->memoryTypeCount;
///    for (uint32_t memoryIndex = 0; memoryIndex < memoryCount; ++memoryIndex) {
///        const uint32_t memoryTypeBits = (1 << memoryIndex);
///        const bool isRequiredMemoryType = memoryTypeBitsRequirement & memoryTypeBits;
///
///        const VkMemoryPropertyFlags properties =
///            pMemoryProperties->memoryTypes[memoryIndex].propertyFlags;
///        const bool hasRequiredProperties =
///            (properties & requiredProperties) == requiredProperties;
///
///        if (isRequiredMemoryType && hasRequiredProperties)
///            return static_cast<int32_t>(memoryIndex);
///    }
///
///    // failed to find memory type
///    return -1;
///}
///
///// Try to find an optimal memory type, or if it does not exist try fallback memory type
///// `device` is the VkDevice
///// `image` is the VkImage that requires memory to be bound
///// `memoryProperties` properties as returned by vkGetPhysicalDeviceMemoryProperties
///// `requiredProperties` are the property flags that must be present
///// `optimalProperties` are the property flags that are preferred by the application
///VkMemoryRequirements memoryRequirements;
///vkGetImageMemoryRequirements(device, image, &memoryRequirements);
///int32_t memoryType =
///    findProperties(&memoryProperties, memoryRequirements.memoryTypeBits, optimalProperties);
///if (memoryType == -1) // not found; try fallback properties
///    memoryType =
///        findProperties(&memoryProperties, memoryRequirements.memoryTypeBits, requiredProperties);
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`MemoryHeap`]
/// - [`MemoryType`]
/// - [`PhysicalDeviceMemoryProperties2`]
/// - [`GetPhysicalDeviceMemoryProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PhysicalDeviceMemoryProperties {
    ///[`memory_type_count`] is the number of valid elements in the
    ///[`memory_types`] array.
    memory_type_count: u32,
    ///[`memory_types`] is an array of [`MAX_MEMORY_TYPES`][`MemoryType`] structures describing the
    /// *memory types* that **can** be used to access memory allocated from the heaps specified
    /// by [`memory_heaps`].
    memory_types: [MemoryType; MAX_MEMORY_TYPES],
    ///[`memory_heap_count`] is the number of valid elements in the
    ///[`memory_heaps`] array.
    memory_heap_count: u32,
    ///[`memory_heaps`] is an array of [`MAX_MEMORY_HEAPS`][`MemoryHeap`] structures describing the
    /// *memory heaps* from which memory **can** be allocated.
    memory_heaps: [MemoryHeap; MAX_MEMORY_HEAPS],
}
///[VkMemoryAllocateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryAllocateInfo.html) - Structure containing parameters of a memory allocation
///# C Specifications
///The [`MemoryAllocateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkMemoryAllocateInfo {
///    VkStructureType    sType;
///    const void*        pNext;
///    VkDeviceSize       allocationSize;
///    uint32_t           memoryTypeIndex;
///} VkMemoryAllocateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`allocation_size`] is the size of the allocation in bytes.
/// - [`memory_type_index`] is an index identifying a memory type from the `memoryTypes` array of
///   the [`PhysicalDeviceMemoryProperties`] structure.
///# Description
///The internal data of an allocated device memory object **must** include a
///reference to implementation-specific resources, referred to as the memory
///object’s *payload*.
///Applications **can** also import and export that internal data to and from
///device memory objects to share data between Vulkan instances and other
///compatible APIs.
///A [`MemoryAllocateInfo`] structure defines a memory import operation if
///its [`p_next`] chain includes one of the following structures:
/// - [`ImportMemoryWin32HandleInfoKHR`] with a non-zero `handleType` value
/// - [`ImportMemoryFdInfoKHR`] with a non-zero `handleType` value
/// - [`ImportMemoryHostPointerInfoEXT`] with a non-zero `handleType` value
/// - [`ImportAndroidHardwareBufferInfoANDROID`] with a non-`NULL``buffer` value
/// - [`ImportMemoryZirconHandleInfoFUCHSIA`] with a non-zero `handleType` value
/// - [`ImportMemoryBufferCollectionFUCHSIA`]
///If the parameters define an import operation and the external handle type is
///`VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT`,
///`VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT`, or
///`VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT`,
///[`allocation_size`] is ignored.
///The implementation **must** query the size of these allocations from the OS.Whether device
/// memory objects constructed via a memory import operation hold
///a reference to their payload depends on the properties of the handle type
///used to perform the import, as defined below for each valid handle type.
///Importing memory **must** not modify the content of the memory.
///Implementations **must** ensure that importing memory does not enable the
///importing Vulkan instance to access any memory or resources in other Vulkan
///instances other than that corresponding to the memory object imported.
///Implementations **must** also ensure accessing imported memory which has not
///been initialized does not allow the importing Vulkan instance to obtain data
///from the exporting Vulkan instance or vice-versa.Importing memory **must** not increase overall
/// heap usage within a system.
///However, it **must** affect the following per-process values:
/// - [`PhysicalDeviceMaintenance3Properties`]`::maxMemoryAllocationCount`
/// - [`PhysicalDeviceMemoryBudgetPropertiesEXT::heap_usage`]
///When performing a memory import operation, it is the responsibility of the
///application to ensure the external handles and their associated payloads
///meet all valid usage requirements.
///However, implementations **must** perform sufficient validation of external
///handles and payloads to ensure that the operation results in a valid memory
///object which will not cause program termination, device loss, queue stalls,
///or corruption of other resources when used as allowed according to its
///allocation parameters.
///If the external handle provided does not meet these requirements, the
///implementation **must** fail the memory import operation with the error code
///`VK_ERROR_INVALID_EXTERNAL_HANDLE`.Valid Usage
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`], and
///   [`MemoryDedicatedAllocateInfo::buffer`] is present and non-NULL,
///   [`ImportMemoryBufferCollectionFUCHSIA::collection`] and
///   [`ImportMemoryBufferCollectionFUCHSIA::index`] must match
///   [`BufferCollectionBufferCreateInfoFUCHSIA::collection`] and
///   [`BufferCollectionBufferCreateInfoFUCHSIA::index`], respectively, of the
///   [`BufferCollectionBufferCreateInfoFUCHSIA`] structure used to create the
///   [`MemoryDedicatedAllocateInfo::buffer`]
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`], and
///   [`MemoryDedicatedAllocateInfo::image`] is present and non-NULL,
///   [`ImportMemoryBufferCollectionFUCHSIA::collection`] and
///   [`ImportMemoryBufferCollectionFUCHSIA::index`] must match
///   [`BufferCollectionImageCreateInfoFUCHSIA::collection`] and
///   [`BufferCollectionImageCreateInfoFUCHSIA::index`], respectively, of the
///   [`BufferCollectionImageCreateInfoFUCHSIA`] structure used to create the
///   [`MemoryDedicatedAllocateInfo::image`]
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`],
///   [`allocation_size`]**must** match [`MemoryRequirements::size`] value retrieved by
///   [`GetImageMemoryRequirements`] or [`GetBufferMemoryRequirements`] for image-based or
///   buffer-based collections respectively
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`], the
///   [`p_next`] chain **must** include a [`MemoryDedicatedAllocateInfo`] structure with either its
///   `image` or `buffer` field set to a value other than [`crate::utils::Handle::null`].
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`] and
///   [`MemoryDedicatedAllocateInfo::image`] is not [`crate::utils::Handle::null`], the
///   `image`**must** be created with a [`BufferCollectionImageCreateInfoFUCHSIA`] structure chained
///   to its [`ImageCreateInfo`]::[`p_next`] pointer
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`] and
///   [`MemoryDedicatedAllocateInfo::buffer`] is not [`crate::utils::Handle::null`], the
///   `buffer`**must** be created with a [`BufferCollectionBufferCreateInfoFUCHSIA`] structure
///   chained to its [`BufferCreateInfo`]::[`p_next`] pointer
/// - If the parameters define an import operation from an [`BufferCollectionFUCHSIA`],
///   [`memory_type_index`]**must** be from [`BufferCollectionPropertiesFUCHSIA`] as retrieved by
///   [`GetBufferCollectionPropertiesFUCHSIA`].
/// - If the [`p_next`] chain includes a [`ExportMemoryAllocateInfo`] structure, and any of the
///   handle types specified in [`ExportMemoryAllocateInfo::handle_types`] require a dedicated
///   allocation, as reported by [`GetPhysicalDeviceImageFormatProperties2`] in
///   [`ExternalImageFormatProperties`]::`externalMemoryProperties.externalMemoryFeatures` or
///   [`ExternalBufferProperties`]::`externalMemoryProperties.externalMemoryFeatures`, the
///   [`p_next`] chain **must** include a [`MemoryDedicatedAllocateInfo`] or
///   [`DedicatedAllocationMemoryAllocateInfoNV`] structure with either its `image` or `buffer`
///   member set to a value other than [`crate::utils::Handle::null`]
/// - If the [`p_next`] chain includes a [`ExportMemoryAllocateInfo`] structure, it **must** not
///   include a [`ExportMemoryAllocateInfoNV`] or [`ExportMemoryWin32HandleInfoNV`] structure
/// - If the [`p_next`] chain includes a [`ImportMemoryWin32HandleInfoKHR`] structure, it **must**
///   not include a [`ImportMemoryWin32HandleInfoNV`] structure
/// - If the parameters define an import operation, the external handle specified was created by the
///   Vulkan API, and the external handle type is `VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT`,
///   then the values of [`allocation_size`] and [`memory_type_index`]**must** match those specified
///   when the payload being imported was created
/// - If the parameters define an import operation and the external handle specified was created by
///   the Vulkan API, the device mask specified by [`MemoryAllocateFlagsInfo`]**must** match the
///   mask specified when the payload being imported was allocated
/// - If the parameters define an import operation and the external handle specified was created by
///   the Vulkan API, the list of physical devices that comprise the logical device passed to
///   [`AllocateMemory`]**must** match the list of physical devices that comprise the logical device
///   on which the payload was originally allocated
/// - If the parameters define an import operation and the external handle is an NT handle or a
///   global share handle created outside of the Vulkan API, the value of
///   [`memory_type_index`]**must** be one of those returned by
///   [`GetMemoryWin32HandlePropertiesKHR`]
/// - If the parameters define an import operation, the external handle was created by the Vulkan
///   API, and the external handle type is `VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT` or
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT`, then the values of [`allocation_size`]
///   and [`memory_type_index`]**must** match those specified when the payload being imported was
///   created
/// - If the parameters define an import operation and the external handle type is
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT`, [`allocation_size`]**must** match the size
///   specified when creating the Direct3D 12 heap from which the payload was extracted
/// - If the parameters define an import operation and the external handle is a POSIX file
///   descriptor created outside of the Vulkan API, the value of [`memory_type_index`]**must** be
///   one of those returned by [`GetMemoryFdPropertiesKHR`]
/// - If the protected memory feature is not enabled, the
///   [`MemoryAllocateInfo`]::[`memory_type_index`]**must** not indicate a memory type that reports
///   `VK_MEMORY_PROPERTY_PROTECTED_BIT`
/// - If the parameters define an import operation and the external handle is a host pointer, the
///   value of [`memory_type_index`]**must** be one of those returned by
///   [`GetMemoryHostPointerPropertiesEXT`]
/// - If the parameters define an import operation and the external handle is a host pointer,
///   [`allocation_size`]**must** be an integer multiple of
///   [`PhysicalDeviceExternalMemoryHostPropertiesEXT::min_imported_host_pointer_alignment`]
/// - If the parameters define an import operation and the external handle is a host pointer, the
///   [`p_next`] chain **must** not include a [`DedicatedAllocationMemoryAllocateInfoNV`] structure
///   with either its `image` or `buffer` field set to a value other than
///   [`crate::utils::Handle::null`]
/// - If the parameters define an import operation and the external handle is a host pointer, the
///   [`p_next`] chain **must** not include a [`MemoryDedicatedAllocateInfo`] structure with either
///   its `image` or `buffer` field set to a value other than [`crate::utils::Handle::null`]
/// - If the parameters define an import operation and the external handle type is
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID`,
///   [`allocation_size`]**must** be the size returned by
///   [`GetAndroidHardwareBufferPropertiesANDROID`] for the Android hardware buffer
/// - If the parameters define an import operation and the external handle type is
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID`, and the [`p_next`] chain
///   does not include a [`MemoryDedicatedAllocateInfo`] structure or
///   [`MemoryDedicatedAllocateInfo::image`] is [`crate::utils::Handle::null`], the Android hardware
///   buffer **must** have a `AHardwareBuffer_Desc`::`format` of `AHARDWAREBUFFER_FORMAT_BLOB` and a
///   `AHardwareBuffer_Desc`::`usage` that includes `AHARDWAREBUFFER_USAGE_GPU_DATA_BUFFER`
/// - If the parameters define an import operation and the external handle type is
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID`,
///   [`memory_type_index`]**must** be one of those returned by
///   [`GetAndroidHardwareBufferPropertiesANDROID`] for the Android hardware buffer
/// - If the parameters do not define an import operation, and the [`p_next`] chain includes a
///   [`ExportMemoryAllocateInfo`] structure with
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID` included in its
///   `handleTypes` member, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`]
///   structure with `image` not equal to [`crate::utils::Handle::null`], then
///   [`allocation_size`]**must** be `0`, otherwise [`allocation_size`]**must** be greater than `0`
/// - If the parameters define an import operation, the external handle is an Android hardware
///   buffer, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`] with `image` that
///   is not [`crate::utils::Handle::null`], the Android hardware buffer’s
///   [`AHardwareBuffer`]`::usage`**must** include at least one of
///   `AHARDWAREBUFFER_USAGE_GPU_FRAMEBUFFER` or `AHARDWAREBUFFER_USAGE_GPU_SAMPLED_IMAGE`
/// - If the parameters define an import operation, the external handle is an Android hardware
///   buffer, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`] with `image` that
///   is not [`crate::utils::Handle::null`], the format of `image`**must** be `VK_FORMAT_UNDEFINED`
///   or the format returned by [`GetAndroidHardwareBufferPropertiesANDROID`] in
///   [`AndroidHardwareBufferFormatPropertiesANDROID::format`] for the Android hardware buffer
/// - If the parameters define an import operation, the external handle is an Android hardware
///   buffer, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`] structure with
///   `image` that is not [`crate::utils::Handle::null`], the width, height, and array layer
///   dimensions of `image` and the Android hardware buffer’s `AHardwareBuffer_Desc`**must** be
///   identical
/// - If the parameters define an import operation, the external handle is an Android hardware
///   buffer, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`] structure with
///   `image` that is not [`crate::utils::Handle::null`], and the Android hardware buffer’s
///   [`AHardwareBuffer`]`::usage` includes `AHARDWAREBUFFER_USAGE_GPU_MIPMAP_COMPLETE`, the
///   `image`**must** have a complete mipmap chain
/// - If the parameters define an import operation, the external handle is an Android hardware
///   buffer, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`] structure with
///   `image` that is not [`crate::utils::Handle::null`], and the Android hardware buffer’s
///   [`AHardwareBuffer`]`::usage` does not include `AHARDWAREBUFFER_USAGE_GPU_MIPMAP_COMPLETE`, the
///   `image`**must** have exactly one mipmap level
/// -    If the parameters define an import operation, the external handle is an Android hardware buffer, and the [`p_next`] chain includes a [`MemoryDedicatedAllocateInfo`] structure with `image` that is not [`crate::utils::Handle::null`], each bit set in the usage of `image`**must** be listed in [AHardwareBuffer Usage Equivalence](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-external-android-hardware-buffer-usage), and if there is a corresponding `AHARDWAREBUFFER_USAGE` bit listed that bit **must** be included in the Android hardware buffer’s `AHardwareBuffer_Desc`::`usage`
/// - If [`MemoryOpaqueCaptureAddressAllocateInfo::opaque_capture_address`] is not zero,
///   [`MemoryAllocateFlagsInfo::flags`]**must** include
///   `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT`
/// -    If [`MemoryAllocateFlagsInfo::flags`] includes `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT`, the [bufferDeviceAddressCaptureReplay](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-bufferDeviceAddressCaptureReplay) feature **must** be enabled
/// - If [`MemoryAllocateFlagsInfo::flags`] includes `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT`, the [bufferDeviceAddress](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-bufferDeviceAddress)
///   feature **must** be enabled
/// - If the [`p_next`] chain includes a [`ImportMemoryHostPointerInfoEXT`] structure,
///   [`MemoryOpaqueCaptureAddressAllocateInfo::opaque_capture_address`]**must** be zero
/// - If the parameters define an import operation,
///   [`MemoryOpaqueCaptureAddressAllocateInfo::opaque_capture_address`]**must** be zero
/// - If the parameters define an import operation and the external handle type is
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA`, the value of
///   [`memory_type_index`]**must** be an index identifying a memory type from the `memoryTypeBits`
///   field of the [`MemoryZirconHandlePropertiesFUCHSIA`] structure populated by a call to
///   [`GetMemoryZirconHandlePropertiesFUCHSIA`]
/// - If the parameters define an import operation and the external handle type is
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA`, the value of
///   [`allocation_size`]**must** be greater than `0` and **must** be less than or equal to the size
///   of the VMO as determined by `zx_vmo_get_size`(`handle`) where `handle` is the VMO handle to
///   the imported external memory
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`DedicatedAllocationMemoryAllocateInfoNV`], [`ExportMemoryAllocateInfo`],
///   [`ExportMemoryAllocateInfoNV`], [`ExportMemoryWin32HandleInfoKHR`],
///   [`ExportMemoryWin32HandleInfoNV`], [`ImportAndroidHardwareBufferInfoANDROID`],
///   [`ImportMemoryBufferCollectionFUCHSIA`], [`ImportMemoryFdInfoKHR`],
///   [`ImportMemoryHostPointerInfoEXT`], [`ImportMemoryWin32HandleInfoKHR`],
///   [`ImportMemoryWin32HandleInfoNV`], [`ImportMemoryZirconHandleInfoFUCHSIA`],
///   [`MemoryAllocateFlagsInfo`], [`MemoryDedicatedAllocateInfo`],
///   [`MemoryOpaqueCaptureAddressAllocateInfo`], or [`MemoryPriorityAllocateInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`StructureType`]
/// - [`AllocateMemory`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct MemoryAllocateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`allocation_size`] is the size of the allocation in bytes.
    allocation_size: DeviceSize,
    ///[`memory_type_index`] is an index identifying a memory type from the
    ///`memoryTypes` array of the [`PhysicalDeviceMemoryProperties`]
    ///structure.
    memory_type_index: u32,
}
///[VkMemoryRequirements](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryRequirements.html) - Structure specifying memory requirements
///# C Specifications
///The [`MemoryRequirements`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkMemoryRequirements {
///    VkDeviceSize    size;
///    VkDeviceSize    alignment;
///    uint32_t        memoryTypeBits;
///} VkMemoryRequirements;
///```
///# Members
/// - [`size`] is the size, in bytes, of the memory allocation **required** for the resource.
/// - [`alignment`] is the alignment, in bytes, of the offset within the allocation **required** for
///   the resource.
/// - [`memory_type_bits`] is a bitmask and contains one bit set for every supported memory type for
///   the resource. Bit `i` is set if and only if the memory type `i` in the
///   [`PhysicalDeviceMemoryProperties`] structure for the physical device is supported for the
///   resource.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`MemoryRequirements2`]
/// - [`GetBufferMemoryRequirements`]
/// - [`GetImageMemoryRequirements`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct MemoryRequirements {
    ///[`size`] is the size, in bytes, of the memory allocation **required** for
    ///the resource.
    size: DeviceSize,
    ///[`alignment`] is the alignment, in bytes, of the offset within the
    ///allocation **required** for the resource.
    alignment: DeviceSize,
    ///[`memory_type_bits`] is a bitmask and contains one bit set for every
    ///supported memory type for the resource.
    ///Bit `i` is set if and only if the memory type `i` in the
    ///[`PhysicalDeviceMemoryProperties`] structure for the physical device
    ///is supported for the resource.
    memory_type_bits: u32,
}
///[VkSparseImageFormatProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageFormatProperties.html) - Structure specifying sparse image format properties
///# C Specifications
///The [`SparseImageFormatProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseImageFormatProperties {
///    VkImageAspectFlags          aspectMask;
///    VkExtent3D                  imageGranularity;
///    VkSparseImageFormatFlags    flags;
///} VkSparseImageFormatProperties;
///```
///# Members
/// - [`aspect_mask`] is a bitmask [`ImageAspectFlagBits`] specifying which aspects of the image the
///   properties apply to.
/// - [`image_granularity`] is the width, height, and depth of the sparse image block in texels or
///   compressed texel blocks.
/// - [`flags`] is a bitmask of [`SparseImageFormatFlagBits`] specifying additional information
///   about the sparse resource.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Extent3D`]
/// - [`ImageAspectFlags`]
/// - [`SparseImageFormatFlags`]
/// - [`SparseImageFormatProperties2`]
/// - [`SparseImageMemoryRequirements`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseImageFormatProperties {
    ///[`aspect_mask`] is a bitmask [`ImageAspectFlagBits`] specifying
    ///which aspects of the image the properties apply to.
    aspect_mask: ImageAspectFlags,
    ///[`image_granularity`] is the width, height, and depth of the sparse
    ///image block in texels or compressed texel blocks.
    image_granularity: Extent3D,
    ///[`flags`] is a bitmask of [`SparseImageFormatFlagBits`] specifying
    ///additional information about the sparse resource.
    flags: SparseImageFormatFlags,
}
///[VkSparseImageMemoryRequirements](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryRequirements.html) - Structure specifying sparse image memory requirements
///# C Specifications
///The [`SparseImageMemoryRequirements`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseImageMemoryRequirements {
///    VkSparseImageFormatProperties    formatProperties;
///    uint32_t                         imageMipTailFirstLod;
///    VkDeviceSize                     imageMipTailSize;
///    VkDeviceSize                     imageMipTailOffset;
///    VkDeviceSize                     imageMipTailStride;
///} VkSparseImageMemoryRequirements;
///```
///# Members
/// - [`format_properties`] is a [`SparseImageFormatProperties`] structure specifying properties of
///   the image format.
/// - [`image_mip_tail_first_lod`] is the first mip level at which image subresources are included
///   in the mip tail region.
/// - [`image_mip_tail_size`] is the memory size (in bytes) of the mip tail region. If
///   `formatProperties.flags` contains `VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT`, this is the
///   size of the whole mip tail, otherwise this is the size of the mip tail of a single array
///   layer. This value is guaranteed to be a multiple of the sparse block size in bytes.
/// - [`image_mip_tail_offset`] is the opaque memory offset used with
///   [`SparseImageOpaqueMemoryBindInfo`] to bind the mip tail region(s).
/// - [`image_mip_tail_stride`] is the offset stride between each array-layer’s mip tail, if
///   `formatProperties.flags` does not contain `VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT`
///   (otherwise the value is undefined).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`SparseImageFormatProperties`]
/// - [`SparseImageMemoryRequirements2`]
/// - [`GetImageSparseMemoryRequirements`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseImageMemoryRequirements {
    ///[`format_properties`] is a [`SparseImageFormatProperties`]
    ///structure specifying properties of the image format.
    format_properties: SparseImageFormatProperties,
    ///[`image_mip_tail_first_lod`] is the first mip level at which image
    ///subresources are included in the mip tail region.
    image_mip_tail_first_lod: u32,
    ///[`image_mip_tail_size`] is the memory size (in bytes) of the mip tail
    ///region.
    ///If `formatProperties.flags` contains
    ///`VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT`, this is the size of the
    ///whole mip tail, otherwise this is the size of the mip tail of a single
    ///array layer.
    ///This value is guaranteed to be a multiple of the sparse block size in
    ///bytes.
    image_mip_tail_size: DeviceSize,
    ///[`image_mip_tail_offset`] is the opaque memory offset used with
    ///[`SparseImageOpaqueMemoryBindInfo`] to bind the mip tail region(s).
    image_mip_tail_offset: DeviceSize,
    ///[`image_mip_tail_stride`] is the offset stride between each array-layer’s
    ///mip tail, if `formatProperties.flags` does not contain
    ///`VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT` (otherwise the value is
    ///undefined).
    image_mip_tail_stride: DeviceSize,
}
///[VkMemoryType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryType.html) - Structure specifying memory type
///# C Specifications
///The [`MemoryType`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkMemoryType {
///    VkMemoryPropertyFlags    propertyFlags;
///    uint32_t                 heapIndex;
///} VkMemoryType;
///```
///# Members
/// - [`heap_index`] describes which memory heap this memory type corresponds to, and **must** be
///   less than `memoryHeapCount` from the [`PhysicalDeviceMemoryProperties`] structure.
/// - [`property_flags`] is a bitmask of [`MemoryPropertyFlagBits`] of properties for this memory
///   type.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`MemoryPropertyFlags`]
/// - [`PhysicalDeviceMemoryProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct MemoryType {
    ///[`property_flags`] is a bitmask of [`MemoryPropertyFlagBits`] of
    ///properties for this memory type.
    property_flags: MemoryPropertyFlags,
    ///[`heap_index`] describes which memory heap this memory type corresponds
    ///to, and **must** be less than `memoryHeapCount` from the
    ///[`PhysicalDeviceMemoryProperties`] structure.
    heap_index: u32,
}
///[VkMemoryHeap](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryHeap.html) - Structure specifying a memory heap
///# C Specifications
///The [`MemoryHeap`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkMemoryHeap {
///    VkDeviceSize         size;
///    VkMemoryHeapFlags    flags;
///} VkMemoryHeap;
///```
///# Members
/// - [`size`] is the total memory size in bytes in the heap.
/// - [`flags`] is a bitmask of [`MemoryHeapFlagBits`] specifying attribute flags for the heap.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`MemoryHeapFlags`]
/// - [`PhysicalDeviceMemoryProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct MemoryHeap {
    ///[`size`] is the total memory size in bytes in the heap.
    size: DeviceSize,
    ///[`flags`] is a bitmask of [`MemoryHeapFlagBits`] specifying
    ///attribute flags for the heap.
    flags: MemoryHeapFlags,
}
///[VkMappedMemoryRange](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMappedMemoryRange.html) - Structure specifying a mapped memory range
///# C Specifications
///The [`MappedMemoryRange`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkMappedMemoryRange {
///    VkStructureType    sType;
///    const void*        pNext;
///    VkDeviceMemory     memory;
///    VkDeviceSize       offset;
///    VkDeviceSize       size;
///} VkMappedMemoryRange;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`memory`] is the memory object to which this range belongs.
/// - [`offset`] is the zero-based byte offset from the beginning of the memory object.
/// - [`size`] is either the size of range, or [`WHOLE_SIZE`] to affect the range from [`offset`] to
///   the end of the current mapping of the allocation.
///# Description
///Valid Usage
/// - [`memory`]**must** be currently host mapped
/// - If [`size`] is not equal to [`WHOLE_SIZE`], [`offset`] and [`size`]**must** specify a range
///   contained within the currently mapped range of [`memory`]
/// - If [`size`] is equal to [`WHOLE_SIZE`], [`offset`]**must** be within the currently mapped
///   range of [`memory`]
/// - [`offset`]**must** be a multiple of [`PhysicalDeviceLimits::non_coherent_atom_size`]
/// - If [`size`] is equal to [`WHOLE_SIZE`], the end of the current mapping of [`memory`]**must**
///   either be a multiple of [`PhysicalDeviceLimits::non_coherent_atom_size`] bytes from the
///   beginning of the memory object, or be equal to the end of the memory object
/// - If [`size`] is not equal to [`WHOLE_SIZE`], [`size`]**must** either be a multiple of
///   [`PhysicalDeviceLimits::non_coherent_atom_size`], or [`offset`] plus [`size`]**must** equal
///   the size of [`memory`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE`
/// - [`p_next`]**must** be `NULL`
/// - [`memory`]**must** be a valid [`DeviceMemory`] handle
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceMemory`]
/// - [`DeviceSize`]
/// - [`StructureType`]
/// - [`FlushMappedMemoryRanges`]
/// - [`InvalidateMappedMemoryRanges`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct MappedMemoryRange<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`memory`] is the memory object to which this range belongs.
    memory: DeviceMemory,
    ///[`offset`] is the zero-based byte offset from the beginning of the
    ///memory object.
    offset: DeviceSize,
    ///[`size`] is either the size of range, or [`WHOLE_SIZE`] to affect
    ///the range from [`offset`] to the end of the current mapping of the
    ///allocation.
    size: DeviceSize,
}
///[VkFormatProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFormatProperties.html) - Structure specifying image format properties
///# C Specifications
///The [`FormatProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkFormatProperties {
///    VkFormatFeatureFlags    linearTilingFeatures;
///    VkFormatFeatureFlags    optimalTilingFeatures;
///    VkFormatFeatureFlags    bufferFeatures;
///} VkFormatProperties;
///```
///# Members
/// - [`linear_tiling_features`] is a bitmask of [`FormatFeatureFlagBits`] specifying features
///   supported by images created with a `tiling` parameter of `VK_IMAGE_TILING_LINEAR`.
/// - [`optimal_tiling_features`] is a bitmask of [`FormatFeatureFlagBits`] specifying features
///   supported by images created with a `tiling` parameter of `VK_IMAGE_TILING_OPTIMAL`.
/// - [`buffer_features`] is a bitmask of [`FormatFeatureFlagBits`] specifying features supported by
///   buffers.
///# Description
///If `format` is a block-compressed format, then [`buffer_features`]**must** not support any
/// features for the format.If `format` is not a multi-plane format then [`linear_tiling_features`]
///and [`optimal_tiling_features`]**must** not contain
///`VK_FORMAT_FEATURE_DISJOINT_BIT`.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`FormatFeatureFlags`]
/// - [`FormatProperties2`]
/// - [`GetPhysicalDeviceFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct FormatProperties {
    ///[`linear_tiling_features`] is a bitmask of [`FormatFeatureFlagBits`]
    ///specifying features supported by images created with a `tiling`
    ///parameter of `VK_IMAGE_TILING_LINEAR`.
    linear_tiling_features: FormatFeatureFlags,
    ///[`optimal_tiling_features`] is a bitmask of
    ///[`FormatFeatureFlagBits`] specifying features supported by images
    ///created with a `tiling` parameter of `VK_IMAGE_TILING_OPTIMAL`.
    optimal_tiling_features: FormatFeatureFlags,
    ///[`buffer_features`] is a bitmask of [`FormatFeatureFlagBits`]
    ///specifying features supported by buffers.
    buffer_features: FormatFeatureFlags,
}
///[VkImageFormatProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties.html) - Structure specifying an image format properties
///# C Specifications
///The [`ImageFormatProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageFormatProperties {
///    VkExtent3D            maxExtent;
///    uint32_t              maxMipLevels;
///    uint32_t              maxArrayLayers;
///    VkSampleCountFlags    sampleCounts;
///    VkDeviceSize          maxResourceSize;
///} VkImageFormatProperties;
///```
///# Members
/// - [`max_extent`] are the maximum image dimensions. See the [Allowed Extent Values](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-extentperimagetype)
///   section below for how these values are constrained by `type`.
/// - [`max_mip_levels`] is the maximum number of mipmap levels. [`max_mip_levels`]**must** be equal
///   to the number of levels in the complete mipmap chain based on the `maxExtent.width`, `maxExtent.height`,
///   and `maxExtent.depth`, except when one of the following conditions is true, in which case it **may**
///   instead be `1`:  - [`GetPhysicalDeviceImageFormatProperties`]`::tiling` was `VK_IMAGE_TILING_LINEAR`
///   - [`PhysicalDeviceImageFormatInfo2::tiling`] was `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`  - the
///   [`PhysicalDeviceImageFormatInfo2::p_next`] chain included a [`PhysicalDeviceExternalImageFormatInfo`]
///   structure with a handle type included in the `handleTypes` member for which mipmap image support
///   is not required  - image `format` is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub>
///   conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)
///   - `flags` contains `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`
/// - [`max_array_layers`] is the maximum number of array layers. [`max_array_layers`]**must** be no
///   less than [`PhysicalDeviceLimits::max_image_array_layers`], except when one of the following conditions
///   is true, in which case it **may** instead be `1`:  - `tiling` is `VK_IMAGE_TILING_LINEAR`  - `tiling`
///   is `VK_IMAGE_TILING_OPTIMAL` and `type` is `VK_IMAGE_TYPE_3D`  - `format` is one of the [formats
///   that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)
/// - If `tiling` is `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then [`max_array_layers`]**must**
///   not be 0.
/// - [`sample_counts`] is a bitmask of [`SampleCountFlagBits`] specifying all the supported sample counts for this image as described [below](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-supported-sample-counts).
/// - [`max_resource_size`] is an upper bound on the total image size in bytes, inclusive of all
///   image subresources. Implementations **may** have an address space limit on total size of a
///   resource, which is advertised by this property. [`max_resource_size`]**must** be at least
///   2<sup>31</sup>.
///# Description
///If the combination of parameters to
///[`GetPhysicalDeviceImageFormatProperties`] is not supported by the
///implementation for use in [`CreateImage`], then all members of
///[`ImageFormatProperties`] will be filled with zero.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`Extent3D`]
/// - [`ExternalImageFormatPropertiesNV`]
/// - [`ImageFormatProperties2`]
/// - [`SampleCountFlags`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageFormatProperties {
    ///[`max_extent`] are the maximum image dimensions.
    ///See the [Allowed Extent Values](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-extentperimagetype) section
    ///below for how these values are constrained by `type`.
    max_extent: Extent3D,
    ///[`max_mip_levels`] is the maximum number of mipmap levels.
    ///[`max_mip_levels`]**must** be equal to the number of levels in the
    ///complete mipmap chain based on the `maxExtent.width`,
    ///`maxExtent.height`, and `maxExtent.depth`, except
    ///when one of the following conditions is true, in which case it **may**
    ///instead be `1`:
    /// - [`GetPhysicalDeviceImageFormatProperties`]::`tiling` was `VK_IMAGE_TILING_LINEAR`
    /// - [`PhysicalDeviceImageFormatInfo2`]::`tiling` was `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`
    /// - the [`PhysicalDeviceImageFormatInfo2`]::`pNext` chain included a
    ///   [`PhysicalDeviceExternalImageFormatInfo`] structure with a handle type included in the
    ///   `handleTypes` member for which mipmap image support is not required
    /// - image `format` is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)
    /// - `flags` contains `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`
    max_mip_levels: u32,
    ///[`max_array_layers`] is the maximum number of array layers.
    ///[`max_array_layers`]**must** be no less than
    ///[`PhysicalDeviceLimits`]::`maxImageArrayLayers`, except when one
    ///of the following conditions is true, in which case it **may** instead be
    ///`1`:
    /// - `tiling` is `VK_IMAGE_TILING_LINEAR`
    /// - `tiling` is `VK_IMAGE_TILING_OPTIMAL` and `type` is `VK_IMAGE_TYPE_3D`
    /// - `format` is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)
    max_array_layers: u32,
    ///[`sample_counts`] is a bitmask of [`SampleCountFlagBits`]
    ///specifying all the supported sample counts for this image as described
    ///[below](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-supported-sample-counts).
    sample_counts: SampleCountFlags,
    ///[`max_resource_size`] is an upper bound on the total image size in
    ///bytes, inclusive of all image subresources.
    ///Implementations **may** have an address space limit on total size of a
    ///resource, which is advertised by this property.
    ///[`max_resource_size`]**must** be at least 2<sup>31</sup>.
    max_resource_size: DeviceSize,
}
///[VkDescriptorBufferInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorBufferInfo.html) - Structure specifying descriptor buffer information
///# C Specifications
///The [`DescriptorBufferInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorBufferInfo {
///    VkBuffer        buffer;
///    VkDeviceSize    offset;
///    VkDeviceSize    range;
///} VkDescriptorBufferInfo;
///```
///# Members
/// - [`buffer`] is [`crate::utils::Handle::null`] or the buffer resource.
/// - [`offset`] is the offset in bytes from the start of [`buffer`]. Access to buffer memory via
///   this descriptor uses addressing that is relative to this starting offset.
/// - [`range`] is the size in bytes that is used for this descriptor update, or [`WHOLE_SIZE`] to
///   use the range from [`offset`] to the end of the buffer.
///# Description
///For `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` and
///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` descriptor types,
///[`offset`] is the base offset from which the dynamic offset is applied and
///[`range`] is the static size used for all dynamic offsets.Valid Usage
/// - [`offset`]**must** be less than the size of [`buffer`]
/// - If [`range`] is not equal to [`WHOLE_SIZE`], [`range`]**must** be greater than `0`
/// - If [`range`] is not equal to [`WHOLE_SIZE`], [`range`]**must** be less than or equal to the
///   size of [`buffer`] minus [`offset`]
/// - If the [nullDescriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-nullDescriptor)
///   feature is not enabled, [`buffer`]**must** not be [`crate::utils::Handle::null`]
/// - If [`buffer`] is [`crate::utils::Handle::null`], [`offset`]**must** be zero and
///   [`range`]**must** be [`WHOLE_SIZE`]
///Valid Usage (Implicit)
/// - If [`buffer`] is not [`crate::utils::Handle::null`], [`buffer`]**must** be a valid [`Buffer`]
///   handle
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Buffer`]
/// - [`DeviceSize`]
/// - [`WriteDescriptorSet`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorBufferInfo {
    ///[`buffer`] is
    ///[`crate::utils::Handle::null`] or
    ///the buffer resource.
    buffer: Buffer,
    ///[`offset`] is the offset in bytes from the start of [`buffer`].
    ///Access to buffer memory via this descriptor uses addressing that is
    ///relative to this starting offset.
    offset: DeviceSize,
    ///[`range`] is the size in bytes that is used for this descriptor
    ///update, or [`WHOLE_SIZE`] to use the range from [`offset`] to the
    ///end of the buffer.
    range: DeviceSize,
}
///[VkDescriptorImageInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorImageInfo.html) - Structure specifying descriptor image information
///# C Specifications
///The [`DescriptorImageInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorImageInfo {
///    VkSampler        sampler;
///    VkImageView      imageView;
///    VkImageLayout    imageLayout;
///} VkDescriptorImageInfo;
///```
///# Members
/// - [`sampler`] is a sampler handle, and is used in descriptor updates for types
///   `VK_DESCRIPTOR_TYPE_SAMPLER` and `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` if the binding
///   being updated does not use immutable samplers.
/// - [`image_view`] is [`crate::utils::Handle::null`] or an image view handle, and is used in
///   descriptor updates for types `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`,
///   `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and
///   `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`.
/// - [`image_layout`] is the layout that the image subresources accessible from [`image_view`] will
///   be in at the time this descriptor is accessed. [`image_layout`] is used in descriptor updates
///   for types `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`,
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`.
///# Description
///Members of [`DescriptorImageInfo`] that are not used in an update (as
///described above) are ignored.Valid Usage
/// - [`image_view`]**must** not be 2D or 2D array image view created from a 3D image
/// - If [`image_view`] is created from a depth/stencil image, the `aspectMask` used to create the
///   [`image_view`]**must** include either `VK_IMAGE_ASPECT_DEPTH_BIT` or
///   `VK_IMAGE_ASPECT_STENCIL_BIT` but not both
/// -  [`image_layout`]**must** match the actual [`ImageLayout`] of each subresource accessible from [`image_view`] at the time this descriptor is accessed as defined by the [image layout matching rules](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-layouts-matching-rule)
/// - If [`sampler`] is used and the [`Format`] of the image is a [multi-planar format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion),
///   the image **must** have been created with `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`, and the
///   `aspectMask` of the [`image_view`]**must** be `VK_IMAGE_ASPECT_PLANE_0_BIT`,
///   `VK_IMAGE_ASPECT_PLANE_1_BIT` or (for three-plane formats only) `VK_IMAGE_ASPECT_PLANE_2_BIT`
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::mutable_comparison_samplers`] is [`FALSE`], then
///   [`sampler`]**must** have been created with [`SamplerCreateInfo::compare_enable`] set to
///   [`FALSE`]
///Valid Usage (Implicit)
/// - Both of [`image_view`], and [`sampler`] that are valid handles of non-ignored parameters
///   **must** have been created, allocated, or retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageLayout`]
/// - [`ImageView`]
/// - [`Sampler`]
/// - [`WriteDescriptorSet`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorImageInfo {
    ///[`sampler`] is a sampler handle, and is used in descriptor updates for
    ///types `VK_DESCRIPTOR_TYPE_SAMPLER` and
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` if the binding being
    ///updated does not use immutable samplers.
    sampler: Sampler,
    ///[`image_view`] is
    ///[`crate::utils::Handle::null`] or
    ///an image view handle, and is used in descriptor updates for types
    ///`VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`,
    ///`VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`,
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and
    ///`VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`.
    image_view: ImageView,
    ///[`image_layout`] is the layout that the image subresources accessible
    ///from [`image_view`] will be in at the time this descriptor is accessed.
    ///[`image_layout`] is used in descriptor updates for types
    ///`VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`,
    ///`VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`,
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and
    ///`VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`.
    image_layout: ImageLayout,
}
///[VkWriteDescriptorSet](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSet.html) - Structure specifying the parameters of a descriptor set write operation
///# C Specifications
///The [`WriteDescriptorSet`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkWriteDescriptorSet {
///    VkStructureType                  sType;
///    const void*                      pNext;
///    VkDescriptorSet                  dstSet;
///    uint32_t                         dstBinding;
///    uint32_t                         dstArrayElement;
///    uint32_t                         descriptorCount;
///    VkDescriptorType                 descriptorType;
///    const VkDescriptorImageInfo*     pImageInfo;
///    const VkDescriptorBufferInfo*    pBufferInfo;
///    const VkBufferView*              pTexelBufferView;
///} VkWriteDescriptorSet;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`dst_set`] is the destination descriptor set to update.
/// - [`dst_binding`] is the descriptor binding within that set.
/// - [`dst_array_element`] is the starting element in that array. If the descriptor binding
///   identified by [`dst_set`] and [`dst_binding`] has a descriptor type of
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`dst_array_element`] specifies the starting
///   byte offset within the binding.
/// - [`descriptor_count`] is the number of descriptors to update. If the descriptor binding
///   identified by [`dst_set`] and [`dst_binding`] has a descriptor type of
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, then [`descriptor_count`] specifies the number of
///   bytes to update. Otherwise, [`descriptor_count`] is one of  - the number of elements in
///   [`p_image_info`]  - the number of elements in [`p_buffer_info`]  - the number of elements in
///   [`p_texel_buffer_view`]  - a value matching the `dataSize` member of a
///   [`WriteDescriptorSetInlineUniformBlock`] structure in the [`p_next`] chain  - a value matching
///   the `accelerationStructureCount` of a [`WriteDescriptorSetAccelerationStructureKHR`] structure
///   in the [`p_next`] chain
/// - [`descriptor_type`] is a [`DescriptorType`] specifying the type of each descriptor in
///   [`p_image_info`], [`p_buffer_info`], or [`p_texel_buffer_view`], as described below. If
///   [`DescriptorSetLayoutBinding`] for [`dst_set`] at [`dst_binding`] is not equal to
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, [`descriptor_type`]**must** be the same type as the
///   [`descriptor_type`] specified in [`DescriptorSetLayoutBinding`] for [`dst_set`] at
///   [`dst_binding`]. The type of the descriptor also controls which array the descriptors are
///   taken from.
/// - [`p_image_info`] is a pointer to an array of [`DescriptorImageInfo`] structures or is ignored,
///   as described below.
/// - [`p_buffer_info`] is a pointer to an array of [`DescriptorBufferInfo`] structures or is
///   ignored, as described below.
/// - [`p_texel_buffer_view`] is a pointer to an array of [`BufferView`] handles as described in the
///   [Buffer Views](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-buffer-views)
///   section or is ignored, as described below.
///# Description
///Only one of [`p_image_info`], [`p_buffer_info`], or [`p_texel_buffer_view`]
///members is used according to the descriptor type specified in the
///[`descriptor_type`] member of the containing [`WriteDescriptorSet`]
///structure,
///or none of them in case [`descriptor_type`] is
///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, in which case the source data
///for the descriptor writes is taken from the
///[`WriteDescriptorSetInlineUniformBlock`] structure included in the
///[`p_next`] chain of [`WriteDescriptorSet`],
///or if [`descriptor_type`] is
///`VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR`, in which case the
///source data for the descriptor writes is taken from the
///[`WriteDescriptorSetAccelerationStructureKHR`] structure in the
///[`p_next`] chain of [`WriteDescriptorSet`],
///or if [`descriptor_type`] is
///`VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV`, in which case the source
///data for the descriptor writes is taken from the
///[`WriteDescriptorSetAccelerationStructureNV`] structure in the
///[`p_next`] chain of [`WriteDescriptorSet`],
///as specified below.If the [nullDescriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-nullDescriptor) feature is enabled, the
///buffer,
///acceleration structure,
///imageView, or bufferView **can** be [`crate::utils::Handle::null`].
///Loads from a null descriptor return zero values and stores and atomics to a
///null descriptor are discarded.
///A null acceleration structure descriptor results in the miss shader being
///invoked.If the destination descriptor is a mutable descriptor, the active descriptor
///type for the destination descriptor becomes [`descriptor_type`].If the [`dst_binding`] has fewer
/// than [`descriptor_count`] array elements
///remaining starting from [`dst_array_element`], then the remainder will be
///used to update the subsequent binding - [`dst_binding`]+1 starting at
///array element zero.
///If a binding has a [`descriptor_count`] of zero, it is skipped.
///This behavior applies recursively, with the update affecting consecutive
///bindings as needed to update all [`descriptor_count`] descriptors.
///Consecutive bindings **must** have identical [`DescriptorType`],
///[`ShaderStageFlags`],
///[`DescriptorBindingFlagBits`],
///and immutable samplers references.Valid Usage
/// - [`dst_binding`]**must** be less than or equal to the maximum value of `binding` of all
///   [`DescriptorSetLayoutBinding`] structures specified when [`dst_set`]’s descriptor set layout
///   was created
/// - [`dst_binding`]**must** be a binding with a non-zero [`descriptor_count`]
/// - All consecutive bindings updated via a single [`WriteDescriptorSet`] structure, except those
///   with a [`descriptor_count`] of zero, **must** have identical [`descriptor_type`] and
///   `stageFlags`
/// - All consecutive bindings updated via a single [`WriteDescriptorSet`] structure, except those
///   with a [`descriptor_count`] of zero, **must** all either use immutable samplers or **must**
///   all not use immutable samplers
/// - [`descriptor_type`]**must** match the type of [`dst_binding`] within [`dst_set`]
/// - [`dst_set`]**must** be a valid [`DescriptorSet`] handle
/// - The sum of [`dst_array_element`] and [`descriptor_count`]**must** be less than or equal to the
///   number of array elements in the descriptor set binding specified by [`dst_binding`], and all applicable
///   consecutive bindings, as described by [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive)
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`,
///   [`dst_array_element`]**must** be an integer multiple of `4`
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`,
///   [`descriptor_count`]**must** be an integer multiple of `4`
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`, each element of [`p_texel_buffer_view`]**must** be
///   either a valid [`BufferView`] handle or [`crate::utils::Handle::null`]
/// -    If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` or `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` and the [nullDescriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-nullDescriptor) feature is not enabled, each element of [`p_texel_buffer_view`]**must** not be [`crate::utils::Handle::null`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER`,
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER`, `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`, or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, [`p_buffer_info`]**must** be a valid pointer to
///   an array of [`descriptor_count`] valid [`DescriptorBufferInfo`] structures
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_SAMPLER` or
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and [`dst_set`] was not allocated with a layout
///   that included immutable samplers for [`dst_binding`] with [`descriptor_type`], the `sampler`
///   member of each element of [`p_image_info`]**must** be a valid [`Sampler`] object
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`,
///   `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, or
///   `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`, the `imageView` member of each element of
///   [`p_image_info`]**must** be either a valid [`ImageView`] handle or
///   [`crate::utils::Handle::null`]
/// -    If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, or `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` and the [nullDescriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-nullDescriptor) feature is not enabled, the `imageView` member of each element of [`p_image_info`]**must** not be [`crate::utils::Handle::null`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, the [`p_next`] chain
///   **must** include a [`WriteDescriptorSetInlineUniformBlock`] structure whose `dataSize` member
///   equals [`descriptor_count`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR`, the [`p_next`]
///   chain **must** include a [`WriteDescriptorSetAccelerationStructureKHR`] structure whose
///   `accelerationStructureCount` member equals [`descriptor_count`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV`, the [`p_next`] chain
///   **must** include a [`WriteDescriptorSetAccelerationStructureNV`] structure whose
///   `accelerationStructureCount` member equals [`descriptor_count`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, then the `imageView` member of
///   each [`p_image_info`] element **must** have been created without a
///   [`SamplerYcbcrConversionInfo`] structure in its [`p_next`] chain
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and if any element of
///   [`p_image_info`] has a `imageView` member that was created with a
///   [`SamplerYcbcrConversionInfo`] structure in its [`p_next`] chain, then [`dst_set`]**must**
///   have been allocated with a layout that included immutable samplers for [`dst_binding`], and
///   the corresponding immutable sampler **must** have been created with an *identically
///   defined*[`SamplerYcbcrConversionInfo`] object
/// -    If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and [`dst_set`] was allocated with a layout that included immutable samplers for [`dst_binding`], then the `imageView` member of each element of [`p_image_info`] which corresponds to an immutable sampler that enables [sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion)**must** have been created with a [`SamplerYcbcrConversionInfo`] structure in its [`p_next`] chain with an *identically defined*[`SamplerYcbcrConversionInfo`] to the corresponding immutable sampler
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`, the `offset` member of each element of
///   [`p_buffer_info`]**must** be a multiple of
///   [`PhysicalDeviceLimits::min_uniform_buffer_offset_alignment`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, the `offset` member of each element of
///   [`p_buffer_info`]**must** be a multiple of
///   [`PhysicalDeviceLimits::min_storage_buffer_offset_alignment`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER`,
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`, `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER`, or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, and the `buffer` member of any element of
///   [`p_buffer_info`] is the handle of a non-sparse buffer, then that buffer **must** be bound
///   completely and contiguously to a single [`DeviceMemory`] object
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`, the `buffer` member of each element of
///   [`p_buffer_info`]**must** have been created with `VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT` set
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, the `buffer` member of each element of
///   [`p_buffer_info`]**must** have been created with `VK_BUFFER_USAGE_STORAGE_BUFFER_BIT` set
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`, the `range` member of each element of
///   [`p_buffer_info`], or the effective range if `range` is [`WHOLE_SIZE`], **must** be less than
///   or equal to [`PhysicalDeviceLimits::max_uniform_buffer_range`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, the `range` member of each element of
///   [`p_buffer_info`], or the effective range if `range` is [`WHOLE_SIZE`], **must** be less than
///   or equal to [`PhysicalDeviceLimits::max_storage_buffer_range`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`, the [`Buffer`] that each
///   element of [`p_texel_buffer_view`] was created from **must** have been created with
///   `VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT` set
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`, the [`Buffer`] that each
///   element of [`p_texel_buffer_view`] was created from **must** have been created with
///   `VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT` set
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE` or
///   `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`, the `imageView` member of each element of
///   [`p_image_info`]**must** have been created with the identity swizzle
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE` or
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, the `imageView` member of each element of
///   [`p_image_info`]**must** have been created with `VK_IMAGE_USAGE_SAMPLED_BIT` set
/// -    If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE` the `imageLayout` member of each element of [`p_image_info`]**must** be a member of the list given in [Sampled Image](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage)
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` the `imageLayout` member
///   of each element of [`p_image_info`]**must** be a member of the list given in [Combined Image Sampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler)
/// -    If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` the `imageLayout` member of each element of [`p_image_info`]**must** be a member of the list given in [Input Attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment)
/// -    If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE` the `imageLayout` member of each element of [`p_image_info`]**must** be a member of the list given in [Storage Image](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage)
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`, the `imageView` member of
///   each element of [`p_image_info`]**must** have been created with
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT` set
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, the `imageView` member of each
///   element of [`p_image_info`]**must** have been created with `VK_IMAGE_USAGE_STORAGE_BIT` set
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_SAMPLER`, then [`dst_set`]**must** not have been
///   allocated with a layout that included immutable samplers for [`dst_binding`]
/// - If the [`DescriptorSetLayoutBinding`] for [`dst_set`] at [`dst_binding`] is
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, the new active descriptor type [`descriptor_type`]**must**
///   exist in the corresponding `pMutableDescriptorTypeLists` list for [`dst_binding`]
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`, the `imageView` member of
///   each element of [`p_image_info`]**must** have either been created without a
///   [`ImageViewMinLodCreateInfoEXT`] present in the [`p_next`] chain or with a
///   [`ImageViewMinLodCreateInfoEXT::min_lod`] of `0.0`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`WriteDescriptorSetAccelerationStructureKHR`], [`WriteDescriptorSetAccelerationStructureNV`],
///   or [`WriteDescriptorSetInlineUniformBlock`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`descriptor_type`]**must** be a valid [`DescriptorType`] value
/// - [`descriptor_count`]**must** be greater than `0`
/// - Both of [`dst_set`], and the elements of [`p_texel_buffer_view`] that are valid handles of
///   non-ignored parameters **must** have been created, allocated, or retrieved from the same
///   [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferView`]
/// - [`DescriptorBufferInfo`]
/// - [`DescriptorImageInfo`]
/// - [`DescriptorSet`]
/// - [`DescriptorType`]
/// - [`StructureType`]
/// - [`CmdPushDescriptorSetKHR`]
/// - [`UpdateDescriptorSets`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct WriteDescriptorSet<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`dst_set`] is the destination descriptor set to update.
    dst_set: DescriptorSet,
    ///[`dst_binding`] is the descriptor binding within that set.
    dst_binding: u32,
    ///[`dst_array_element`] is the starting element in that array.
    ///If the descriptor binding identified by [`dst_set`] and
    ///[`dst_binding`] has a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`dst_array_element`]
    ///specifies the starting byte offset within the binding.
    dst_array_element: u32,
    ///[`descriptor_count`] is the number of descriptors to update.
    ///If the descriptor binding identified by [`dst_set`] and
    ///[`dst_binding`] has a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, then
    ///[`descriptor_count`] specifies the number of bytes to update.
    ///Otherwise,
    ///[`descriptor_count`] is one of
    /// - the number of elements in [`p_image_info`]
    /// - the number of elements in [`p_buffer_info`]
    /// - the number of elements in [`p_texel_buffer_view`]
    /// - a value matching the `dataSize` member of a [`WriteDescriptorSetInlineUniformBlock`]
    ///   structure in the [`p_next`] chain
    /// - a value matching the `accelerationStructureCount` of a
    ///   [`WriteDescriptorSetAccelerationStructureKHR`] structure in the [`p_next`] chain
    descriptor_count: u32,
    ///[`descriptor_type`] is a [`DescriptorType`] specifying the type of
    ///each descriptor in [`p_image_info`], [`p_buffer_info`], or
    ///[`p_texel_buffer_view`], as described below.
    ///If [`DescriptorSetLayoutBinding`] for [`dst_set`] at
    ///[`dst_binding`] is not equal to `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`,
    ///[`descriptor_type`]**must**
    ///be the same type as the [`descriptor_type`] specified in
    ///[`DescriptorSetLayoutBinding`] for [`dst_set`] at [`dst_binding`].
    ///The type of the descriptor also controls which array the descriptors are
    ///taken from.
    descriptor_type: DescriptorType,
    ///the number of elements in [`p_image_info`]
    p_image_info: *mut DescriptorImageInfo,
    ///the number of elements in [`p_buffer_info`]
    p_buffer_info: *mut DescriptorBufferInfo,
    ///the number of elements in [`p_texel_buffer_view`]
    p_texel_buffer_view: *mut BufferView,
}
///[VkCopyDescriptorSet](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCopyDescriptorSet.html) - Structure specifying a copy descriptor set operation
///# C Specifications
///The [`CopyDescriptorSet`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkCopyDescriptorSet {
///    VkStructureType    sType;
///    const void*        pNext;
///    VkDescriptorSet    srcSet;
///    uint32_t           srcBinding;
///    uint32_t           srcArrayElement;
///    VkDescriptorSet    dstSet;
///    uint32_t           dstBinding;
///    uint32_t           dstArrayElement;
///    uint32_t           descriptorCount;
///} VkCopyDescriptorSet;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`src_set`], [`src_binding`], and [`src_array_element`] are the source set, binding, and array
///   element, respectively. If the descriptor binding identified by [`src_set`] and [`src_binding`]
///   has a descriptor type of `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`src_array_element`]
///   specifies the starting byte offset within the binding to copy from.
/// - [`dst_set`], [`dst_binding`], and [`dst_array_element`] are the destination set, binding, and
///   array element, respectively. If the descriptor binding identified by [`dst_set`] and
///   [`dst_binding`] has a descriptor type of `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then
///   [`dst_array_element`] specifies the starting byte offset within the binding to copy to.
/// - [`descriptor_count`] is the number of descriptors to copy from the source to destination. If
///   [`descriptor_count`] is greater than the number of remaining array elements in the source or
///   destination binding, those affect consecutive bindings in a manner similar to
///   [`WriteDescriptorSet`] above. If the descriptor binding identified by [`src_set`] and
///   [`src_binding`] has a descriptor type of `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then
///   [`descriptor_count`] specifies the number of bytes to copy and the remaining array elements in
///   the source or destination binding refer to the remaining number of bytes in those.
///# Description
///If the [`DescriptorSetLayoutBinding`] for [`dst_binding`] is
///`VK_DESCRIPTOR_TYPE_MUTABLE_VALVE` and [`src_binding`] is not
///`VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, the new active descriptor type
///becomes the descriptor type of [`src_binding`].
///If both [`DescriptorSetLayoutBinding`] for [`src_binding`] and
///[`dst_binding`] are `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, the active
///descriptor type in each source descriptor is copied into the corresponding
///destination descriptor.
///The active descriptor type **can** be different for each source descriptor.Valid Usage
/// - [`src_binding`]**must** be a valid binding within [`src_set`]
/// - The sum of [`src_array_element`] and [`descriptor_count`]**must** be less than or equal to the
///   number of array elements in the descriptor set binding specified by [`src_binding`], and all applicable
///   consecutive bindings, as described by [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive)
/// - [`dst_binding`]**must** be a valid binding within [`dst_set`]
/// - The sum of [`dst_array_element`] and [`descriptor_count`]**must** be less than or equal to the
///   number of array elements in the descriptor set binding specified by [`dst_binding`], and all applicable
///   consecutive bindings, as described by [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive)
/// - The type of [`dst_binding`] within [`dst_set`]**must** be equal to the type of [`src_binding`]
///   within [`src_set`]
/// -    If [`src_set`] is equal to [`dst_set`], then the source and destination ranges of descriptors **must** not overlap, where the ranges **may** include array elements from consecutive bindings as described by [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates-consecutive)
/// - If the descriptor type of the descriptor set binding specified by [`src_binding`] is
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, [`src_array_element`]**must** be an integer
///   multiple of `4`
/// - If the descriptor type of the descriptor set binding specified by [`dst_binding`] is
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, [`dst_array_element`]**must** be an integer
///   multiple of `4`
/// - If the descriptor type of the descriptor set binding specified by either [`src_binding`] or
///   [`dst_binding`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`, [`descriptor_count`]**must** be
///   an integer multiple of `4`
/// - If [`src_set`]’s layout was created with the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` flag set, then [`dst_set`]’s
///   layout **must** also have been created with the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` flag set
/// - If [`src_set`]’s layout was created with neither
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` nor
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE` flags set, then [`dst_set`]’s
///   layout **must** have been created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` flag set
/// - If the descriptor pool from which [`src_set`] was allocated was created with the
///   `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT` flag set, then the descriptor pool from
///   which [`dst_set`] was allocated **must** also have been created with the
///   `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT` flag set
/// - If the descriptor pool from which [`src_set`] was allocated was created with neither
///   `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT` nor
///   `VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE` flags set, then the descriptor pool from which
///   [`dst_set`] was allocated **must** have been created without the
///   `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT` flag set
/// - If the descriptor type of the descriptor set binding specified by [`dst_binding`] is
///   `VK_DESCRIPTOR_TYPE_SAMPLER`, then [`dst_set`]**must** not have been allocated with a layout
///   that included immutable samplers for [`dst_binding`]
/// - If [`DescriptorSetLayoutBinding`] for [`dst_set`] at [`dst_binding`] is
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, the new active descriptor type **must** exist in the
///   corresponding `pMutableDescriptorTypeLists` list for [`dst_binding`] if the new active
///   descriptor type is not `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`
/// - If [`DescriptorSetLayoutBinding`] for [`src_set`] at [`src_binding`] is
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE` and the [`DescriptorSetLayoutBinding`] for [`dst_set`] at
///   [`dst_binding`] is not `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, the active descriptor type for the
///   source descriptor **must** match the descriptor type of [`dst_binding`]
/// - If [`DescriptorSetLayoutBinding`] for [`dst_set`] at [`dst_binding`] is
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, and the new active descriptor type is
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, the `pMutableDescriptorTypeLists` for [`src_binding`] and
///   [`dst_binding`]**must** match exactly
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET`
/// - [`p_next`]**must** be `NULL`
/// - [`src_set`]**must** be a valid [`DescriptorSet`] handle
/// - [`dst_set`]**must** be a valid [`DescriptorSet`] handle
/// - Both of [`dst_set`], and [`src_set`]**must** have been created, allocated, or retrieved from
///   the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorSet`]
/// - [`StructureType`]
/// - [`UpdateDescriptorSets`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CopyDescriptorSet<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`src_set`], [`src_binding`], and [`src_array_element`] are the source
    ///set, binding, and array element, respectively.
    ///If the descriptor binding identified by [`src_set`] and
    ///[`src_binding`] has a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`src_array_element`]
    ///specifies the starting byte offset within the binding to copy from.
    src_set: DescriptorSet,
    ///No documentation found
    src_binding: u32,
    ///No documentation found
    src_array_element: u32,
    ///[`dst_set`], [`dst_binding`], and [`dst_array_element`] are the
    ///destination set, binding, and array element, respectively.
    ///If the descriptor binding identified by [`dst_set`] and
    ///[`dst_binding`] has a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`dst_array_element`]
    ///specifies the starting byte offset within the binding to copy to.
    dst_set: DescriptorSet,
    ///No documentation found
    dst_binding: u32,
    ///No documentation found
    dst_array_element: u32,
    ///[`descriptor_count`] is the number of descriptors to copy from the
    ///source to destination.
    ///If [`descriptor_count`] is greater than the number of remaining array
    ///elements in the source or destination binding, those affect consecutive
    ///bindings in a manner similar to [`WriteDescriptorSet`] above.
    ///If the descriptor binding identified by [`src_set`] and
    ///[`src_binding`] has a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`descriptor_count`]
    ///specifies the number of bytes to copy and the remaining array elements
    ///in the source or destination binding refer to the remaining number of
    ///bytes in those.
    descriptor_count: u32,
}
///[VkBufferCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferCreateInfo.html) - Structure specifying the parameters of a newly created buffer object
///# C Specifications
///The [`BufferCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBufferCreateInfo {
///    VkStructureType        sType;
///    const void*            pNext;
///    VkBufferCreateFlags    flags;
///    VkDeviceSize           size;
///    VkBufferUsageFlags     usage;
///    VkSharingMode          sharingMode;
///    uint32_t               queueFamilyIndexCount;
///    const uint32_t*        pQueueFamilyIndices;
///} VkBufferCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`BufferCreateFlagBits`] specifying additional parameters of the
///   buffer.
/// - [`size`] is the size in bytes of the buffer to be created.
/// - [`usage`] is a bitmask of [`BufferUsageFlagBits`] specifying allowed usages of the buffer.
/// - [`sharing_mode`] is a [`SharingMode`] value specifying the sharing mode of the buffer when it
///   will be accessed by multiple queue families.
/// - [`queue_family_index_count`] is the number of entries in the [`p_queue_family_indices`] array.
/// - [`p_queue_family_indices`] is a pointer to an array of queue families that will access this
///   buffer. It is ignored if [`sharing_mode`] is not `VK_SHARING_MODE_CONCURRENT`.
///# Description
///Valid Usage
/// - [`size`]**must** be greater than `0`
/// - If [`sharing_mode`] is `VK_SHARING_MODE_CONCURRENT`, [`p_queue_family_indices`]**must** be a
///   valid pointer to an array of [`queue_family_index_count`]`uint32_t` values
/// - If [`sharing_mode`] is `VK_SHARING_MODE_CONCURRENT`, [`queue_family_index_count`]**must** be
///   greater than `1`
/// - If [`sharing_mode`] is `VK_SHARING_MODE_CONCURRENT`, each element of
///   [`p_queue_family_indices`]**must** be unique and **must** be less than
///   `pQueueFamilyPropertyCount` returned by either [`GetPhysicalDeviceQueueFamilyProperties`] or
///   [`GetPhysicalDeviceQueueFamilyProperties2`] for the `physicalDevice` that was used to create
///   `device`
/// - If the [sparse bindings](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseBinding)
///   feature is not enabled, [`flags`]**must** not contain `VK_BUFFER_CREATE_SPARSE_BINDING_BIT`
/// - If the [sparse buffer residency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidencyBuffer)
///   feature is not enabled, [`flags`]**must** not contain `VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse aliased residency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidencyAliased)
///   feature is not enabled, [`flags`]**must** not contain `VK_BUFFER_CREATE_SPARSE_ALIASED_BIT`
/// - If [`flags`] contains `VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT` or
///   `VK_BUFFER_CREATE_SPARSE_ALIASED_BIT`, it **must** also contain
///   `VK_BUFFER_CREATE_SPARSE_BINDING_BIT`
/// - If the [`p_next`] chain includes a [`ExternalMemoryBufferCreateInfo`] structure, its
///   `handleTypes` member **must** only contain bits that are also in
///   [`ExternalBufferProperties`]::`externalMemoryProperties.compatibleHandleTypes`, as returned by
///   [`GetPhysicalDeviceExternalBufferProperties`] with `pExternalBufferInfo->handleType` equal to
///   any one of the handle types specified in [`ExternalMemoryBufferCreateInfo::handle_types`]
/// - If the protected memory feature is not enabled, [`flags`]**must** not contain
///   `VK_BUFFER_CREATE_PROTECTED_BIT`
/// - If any of the bits `VK_BUFFER_CREATE_SPARSE_BINDING_BIT`,
///   `VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT`, or `VK_BUFFER_CREATE_SPARSE_ALIASED_BIT` are set,
///   `VK_BUFFER_CREATE_PROTECTED_BIT`**must** not also be set
/// - If the [`p_next`] chain includes a [`DedicatedAllocationBufferCreateInfoNV`] structure, and
///   the `dedicatedAllocation` member of the chained structure is [`TRUE`], then [`flags`]**must**
///   not include `VK_BUFFER_CREATE_SPARSE_BINDING_BIT`, `VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT`, or
///   `VK_BUFFER_CREATE_SPARSE_ALIASED_BIT`
/// - If [`BufferDeviceAddressCreateInfoEXT::device_address`] is not zero, [`flags`]**must** include
///   `VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT`
/// - If [`BufferOpaqueCaptureAddressCreateInfo::opaque_capture_address`] is not zero,
///   [`flags`]**must** include `VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT`
/// - If [`flags`] includes `VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT`, the [bufferDeviceAddressCaptureReplay](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-bufferDeviceAddressCaptureReplay)
///   or [[`PhysicalDeviceBufferDeviceAddressFeaturesEXT::buffer_device_address_capture_replay`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-bufferDeviceAddressCaptureReplayEXT)
///   feature **must** be enabled
/// - If [`usage`] includes `VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR`,
///   `VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR`, then the [`p_next`] chain **must** include a valid
///   [`VideoProfilesKHR`] structure which includes at least one [`VideoProfileKHR`] with a decode
///   codec-operation
/// - If [`usage`] includes `VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR`,
///   `VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR`, then the [`p_next`] chain **must** include a valid
///   [`VideoProfilesKHR`] structure which includes at least one [`VideoProfileKHR`] with a encode
///   codec-operation
/// - [`size`]**must** be less than or equal to
///   [`PhysicalDeviceMaintenance4Properties::max_buffer_size`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`BufferCollectionBufferCreateInfoFUCHSIA`], [`BufferDeviceAddressCreateInfoEXT`],
///   [`BufferOpaqueCaptureAddressCreateInfo`], [`DedicatedAllocationBufferCreateInfoNV`],
///   [`ExternalMemoryBufferCreateInfo`], [`VideoDecodeH264ProfileEXT`],
///   [`VideoDecodeH265ProfileEXT`], [`VideoEncodeH264ProfileEXT`], [`VideoEncodeH265ProfileEXT`],
///   [`VideoProfileKHR`], or [`VideoProfilesKHR`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`BufferCreateFlagBits`] values
/// - [`usage`]**must** be a valid combination of [`BufferUsageFlagBits`] values
/// - [`usage`]**must** not be `0`
/// - [`sharing_mode`]**must** be a valid [`SharingMode`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferConstraintsInfoFUCHSIA`]
/// - [`BufferCreateFlags`]
/// - [`BufferUsageFlags`]
/// - [`DeviceBufferMemoryRequirements`]
/// - [`DeviceSize`]
/// - [`SharingMode`]
/// - [`StructureType`]
/// - [`CreateBuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BufferCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`BufferCreateFlagBits`] specifying
    ///additional parameters of the buffer.
    flags: BufferCreateFlags,
    ///[`size`] is the size in bytes of the buffer to be created.
    size: DeviceSize,
    ///[`usage`] is a bitmask of [`BufferUsageFlagBits`] specifying
    ///allowed usages of the buffer.
    usage: BufferUsageFlags,
    ///[`sharing_mode`] is a [`SharingMode`] value specifying the sharing
    ///mode of the buffer when it will be accessed by multiple queue families.
    sharing_mode: SharingMode,
    ///[`queue_family_index_count`] is the number of entries in the
    ///[`p_queue_family_indices`] array.
    queue_family_index_count: u32,
    ///[`p_queue_family_indices`] is a pointer to an array of queue families
    ///that will access this buffer.
    ///It is ignored if [`sharing_mode`] is not
    ///`VK_SHARING_MODE_CONCURRENT`.
    p_queue_family_indices: *mut u32,
}
///[VkBufferViewCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferViewCreateInfo.html) - Structure specifying parameters of a newly created buffer view
///# C Specifications
///The [`BufferViewCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBufferViewCreateInfo {
///    VkStructureType            sType;
///    const void*                pNext;
///    VkBufferViewCreateFlags    flags;
///    VkBuffer                   buffer;
///    VkFormat                   format;
///    VkDeviceSize               offset;
///    VkDeviceSize               range;
///} VkBufferViewCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`buffer`] is a [`Buffer`] on which the view will be created.
/// - [`format`] is a [`Format`] describing the format of the data elements in the buffer.
/// - [`offset`] is an offset in bytes from the base address of the buffer. Accesses to the buffer
///   view from shaders use addressing that is relative to this starting offset.
/// - [`range`] is a size in bytes of the buffer view. If [`range`] is equal to [`WHOLE_SIZE`], the range from [`offset`] to the end of the buffer is used. If [`WHOLE_SIZE`] is used and the remaining size of the buffer is not a multiple of the [texel block size](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#texel-block-size) of [`format`], the nearest smaller multiple is used.
///# Description
///Valid Usage
/// - [`offset`]**must** be less than the size of [`buffer`]
/// - If [`range`] is not equal to [`WHOLE_SIZE`], [`range`]**must** be greater than `0`
/// - If [`range`] is not equal to [`WHOLE_SIZE`], [`range`]**must** be an integer multiple of the
///   texel block size of [`format`]
/// -    If [`range`] is not equal to [`WHOLE_SIZE`], the number of texel buffer elements given by (⌊[`range`] / (texel block size)⌋ × (texels per block)) where texel block size and texels per block are as defined in the [Compatible Formats](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility) table for [`format`], **must** be less than or equal to [`PhysicalDeviceLimits::max_texel_buffer_elements`]
/// - If [`range`] is not equal to [`WHOLE_SIZE`], the sum of [`offset`] and [`range`]**must** be
///   less than or equal to the size of [`buffer`]
/// -    If [`range`] is equal to [`WHOLE_SIZE`], the number of texel buffer elements given by (⌊(size - [`offset`]) / (texel block size)⌋ × (texels per block)) where size is the size of [`buffer`], and texel block size and texels per block are as defined in the [Compatible Formats](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility) table for [`format`], **must** be less than or equal to [`PhysicalDeviceLimits::max_texel_buffer_elements`]
/// - [`buffer`]**must** have been created with a `usage` value containing at least one of
///   `VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT` or `VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT`
/// - If [`buffer`] was created with `usage` containing `VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT`,
///   [`format`]**must** be supported for uniform texel buffers, as specified by the
///   `VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT` flag in [`FormatProperties::buffer_features`]
///   returned by [`GetPhysicalDeviceFormatProperties`]
/// - If [`buffer`] was created with `usage` containing `VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT`,
///   [`format`]**must** be supported for storage texel buffers, as specified by the
///   `VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT` flag in [`FormatProperties::buffer_features`]
///   returned by [`GetPhysicalDeviceFormatProperties`]
/// - If [`buffer`] is non-sparse then it **must** be bound completely and contiguously to a single
///   [`DeviceMemory`] object
/// - If the [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment)
///   feature is not enabled, [`offset`]**must** be a multiple of
///   [`PhysicalDeviceLimits::min_texel_buffer_offset_alignment`]
/// - If the [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment)
///   feature is enabled and if [`buffer`] was created with `usage` containing
///   `VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT`, [`offset`]**must** be a multiple of the lesser of
///   [`PhysicalDeviceTexelBufferAlignmentProperties::storage_texel_buffer_offset_alignment_bytes`]
///   or, if [`PhysicalDeviceTexelBufferAlignmentProperties::
///   storage_texel_buffer_offset_single_texel_alignment`] is [`TRUE`], the size of a texel of the
///   requested [`format`]. If the size of a texel is a multiple of three bytes, then the size of a
///   single component of [`format`] is used instead
/// - If the [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment)
///   feature is enabled and if [`buffer`] was created with `usage` containing
///   `VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT`, [`offset`]**must** be a multiple of the lesser of
///   [`PhysicalDeviceTexelBufferAlignmentProperties::uniform_texel_buffer_offset_alignment_bytes`]
///   or, if [`PhysicalDeviceTexelBufferAlignmentProperties::
///   uniform_texel_buffer_offset_single_texel_alignment`] is [`TRUE`], the size of a texel of the
///   requested [`format`]. If the size of a texel is a multiple of three bytes, then the size of a
///   single component of [`format`] is used instead
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be `0`
/// - [`buffer`]**must** be a valid [`Buffer`] handle
/// - [`format`]**must** be a valid [`Format`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Buffer`]
/// - [`BufferViewCreateFlags`]
/// - [`DeviceSize`]
/// - [`Format`]
/// - [`StructureType`]
/// - [`CreateBufferView`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BufferViewCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: BufferViewCreateFlags,
    ///[`buffer`] is a [`Buffer`] on which the view will be created.
    buffer: Buffer,
    ///[`format`] is a [`Format`] describing the format of the data
    ///elements in the buffer.
    format: Format,
    ///[`offset`] is an offset in bytes from the base address of the buffer.
    ///Accesses to the buffer view from shaders use addressing that is relative
    ///to this starting offset.
    offset: DeviceSize,
    ///[`range`] is a size in bytes of the buffer view.
    ///If [`range`] is equal to [`WHOLE_SIZE`], the range from
    ///[`offset`] to the end of the buffer is used.
    ///If [`WHOLE_SIZE`] is used and the remaining size of the buffer is
    ///not a multiple of the [texel block size](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#texel-block-size) of
    ///[`format`], the nearest smaller multiple is used.
    range: DeviceSize,
}
///[VkImageSubresource](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageSubresource.html) - Structure specifying an image subresource
///# C Specifications
///The [`ImageSubresource`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageSubresource {
///    VkImageAspectFlags    aspectMask;
///    uint32_t              mipLevel;
///    uint32_t              arrayLayer;
///} VkImageSubresource;
///```
///# Members
/// - [`aspect_mask`] is a [`ImageAspectFlags`] value selecting the image *aspect*.
/// - [`mip_level`] selects the mipmap level.
/// - [`array_layer`] selects the array layer.
///# Description
///Valid Usage (Implicit)
/// - [`aspect_mask`]**must** be a valid combination of [`ImageAspectFlagBits`] values
/// - [`aspect_mask`]**must** not be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageAspectFlags`]
/// - [`SparseImageMemoryBind`]
/// - [`GetImageSubresourceLayout`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageSubresource {
    ///[`aspect_mask`] is a [`ImageAspectFlags`] value selecting the image
    ///*aspect*.
    aspect_mask: ImageAspectFlags,
    ///[`mip_level`] selects the mipmap level.
    mip_level: u32,
    ///[`array_layer`] selects the array layer.
    array_layer: u32,
}
///[VkImageSubresourceLayers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageSubresourceLayers.html) - Structure specifying an image subresource layers
///# C Specifications
///The [`ImageSubresourceLayers`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageSubresourceLayers {
///    VkImageAspectFlags    aspectMask;
///    uint32_t              mipLevel;
///    uint32_t              baseArrayLayer;
///    uint32_t              layerCount;
///} VkImageSubresourceLayers;
///```
///# Members
/// - [`aspect_mask`] is a combination of [`ImageAspectFlagBits`], selecting the color, depth and/or
///   stencil aspects to be copied.
/// - [`mip_level`] is the mipmap level to copy
/// - [`base_array_layer`] and [`layer_count`] are the starting layer and number of layers to copy.
///# Description
///Valid Usage
/// - If [`aspect_mask`] contains `VK_IMAGE_ASPECT_COLOR_BIT`, it **must** not contain either of
///   `VK_IMAGE_ASPECT_DEPTH_BIT` or `VK_IMAGE_ASPECT_STENCIL_BIT`
/// - [`aspect_mask`]**must** not contain `VK_IMAGE_ASPECT_METADATA_BIT`
/// - [`aspect_mask`]**must** not include `VK_IMAGE_ASPECT_MEMORY_PLANE*_i_*BIT_EXT` for any index
///   *i*
/// - [`layer_count`]**must** be greater than 0
///Valid Usage (Implicit)
/// - [`aspect_mask`]**must** be a valid combination of [`ImageAspectFlagBits`] values
/// - [`aspect_mask`]**must** not be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferImageCopy`]
/// - [`BufferImageCopy2`]
/// - [`ImageAspectFlags`]
/// - [`ImageBlit`]
/// - [`ImageBlit2`]
/// - [`ImageCopy`]
/// - [`ImageCopy2`]
/// - [`ImageResolve`]
/// - [`ImageResolve2`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageSubresourceLayers {
    ///[`aspect_mask`] is a combination of [`ImageAspectFlagBits`],
    ///selecting the color, depth and/or stencil aspects to be copied.
    aspect_mask: ImageAspectFlags,
    ///[`mip_level`] is the mipmap level to copy
    mip_level: u32,
    ///[`base_array_layer`] and [`layer_count`] are the starting layer and
    ///number of layers to copy.
    base_array_layer: u32,
    ///No documentation found
    layer_count: u32,
}
///[VkImageSubresourceRange](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageSubresourceRange.html) - Structure specifying an image subresource range
///# C Specifications
///The [`ImageSubresourceRange`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageSubresourceRange {
///    VkImageAspectFlags    aspectMask;
///    uint32_t              baseMipLevel;
///    uint32_t              levelCount;
///    uint32_t              baseArrayLayer;
///    uint32_t              layerCount;
///} VkImageSubresourceRange;
///```
///# Members
/// - [`aspect_mask`] is a bitmask of [`ImageAspectFlagBits`] specifying which aspect(s) of the
///   image are included in the view.
/// - [`base_mip_level`] is the first mipmap level accessible to the view.
/// - [`level_count`] is the number of mipmap levels (starting from [`base_mip_level`]) accessible
///   to the view.
/// - [`base_array_layer`] is the first array layer accessible to the view.
/// - [`layer_count`] is the number of array layers (starting from [`base_array_layer`]) accessible
///   to the view.
///# Description
///The number of mipmap levels and array layers **must** be a subset of the image
///subresources in the image.
///If an application wants to use all mip levels or layers in an image after
///the [`base_mip_level`] or [`base_array_layer`], it **can** set [`level_count`]
///and [`layer_count`] to the special values [`REMAINING_MIP_LEVELS`] and
///[`REMAINING_ARRAY_LAYERS`] without knowing the exact number of mip
///levels or layers.For cube and cube array image views, the layers of the image view starting
///at [`base_array_layer`] correspond to faces in the order +X, -X, +Y, -Y, +Z,
///-Z.
///For cube arrays, each set of six sequential layers is a single cube, so the
///number of cube maps in a cube map array view is *[`layer_count`] / 6*, and
///image array layer ([`base_array_layer`] +  i) is face index
///(i mod 6) of cube *i / 6*.
///If the number of layers in the view, whether set explicitly in
///[`layer_count`] or implied by [`REMAINING_ARRAY_LAYERS`], is not a
///multiple of 6, the last cube map in the array **must** not be accessed.[`aspect_mask`]**must**
/// be only `VK_IMAGE_ASPECT_COLOR_BIT`,
///`VK_IMAGE_ASPECT_DEPTH_BIT` or `VK_IMAGE_ASPECT_STENCIL_BIT` if
///`format` is a color, depth-only or stencil-only format,
///respectively, except if `format` is a
///[multi-planar format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion).
///If using a depth/stencil format with both depth and stencil components,
///[`aspect_mask`]**must** include at least one of
///`VK_IMAGE_ASPECT_DEPTH_BIT` and `VK_IMAGE_ASPECT_STENCIL_BIT`, and
///**can** include both.When the [`ImageSubresourceRange`] structure is used to select a subset
///of the slices of a 3D image’s mip level in order to create a 2D or 2D array
///image view of a 3D image created with
///`VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT`, [`base_array_layer`] and
///[`layer_count`] specify the first slice index and the number of slices to
///include in the created image view.
///Such an image view **can** be used as a framebuffer attachment that refers only
///to the specified range of slices of the selected mip level.
///However, any layout transitions performed on such an attachment view during
///a render pass instance still apply to the entire subresource referenced
///which includes all the slices of the selected mip level.When using an image view of a
/// depth/stencil image to populate a descriptor
///set (e.g. for sampling in the shader, or for use as an input attachment),
///the [`aspect_mask`]**must** only include one bit, which selects whether the
///image view is used for depth reads (i.e. using a floating-point sampler or
///input attachment in the shader) or stencil reads (i.e. using an unsigned
///integer sampler or input attachment in the shader).
///When an image view of a depth/stencil image is used as a depth/stencil
///framebuffer attachment, the [`aspect_mask`] is ignored and both depth and
///stencil image subresources are used.When creating a [`ImageView`], if [sampler
///Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion) is enabled in the sampler, the [`aspect_mask`] of a
///`subresourceRange` used by the [`ImageView`]**must** be
///`VK_IMAGE_ASPECT_COLOR_BIT`.When creating a [`ImageView`], if sampler
/// Y′C<sub>B</sub>C<sub>R</sub> conversion is not
///enabled in the sampler and the image `format` is
///[multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion), the image **must**
///have been created with `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`, and the
///[`aspect_mask`] of the [`ImageView`]’s `subresourceRange`**must** be
///`VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT` or
///`VK_IMAGE_ASPECT_PLANE_2_BIT`.Valid Usage
/// - If [`level_count`] is not [`REMAINING_MIP_LEVELS`], it **must** be greater than `0`
/// - If [`layer_count`] is not [`REMAINING_ARRAY_LAYERS`], it **must** be greater than `0`
/// - If [`aspect_mask`] includes `VK_IMAGE_ASPECT_COLOR_BIT`, then it **must** not include any of
///   `VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT`, or `VK_IMAGE_ASPECT_PLANE_2_BIT`
/// - [`aspect_mask`]**must** not include `VK_IMAGE_ASPECT_MEMORY_PLANE*_i_*BIT_EXT` for any index
///   *i*
///Valid Usage (Implicit)
/// - [`aspect_mask`]**must** be a valid combination of [`ImageAspectFlagBits`] values
/// - [`aspect_mask`]**must** not be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageAspectFlags`]
/// - [`ImageMemoryBarrier`]
/// - [`ImageMemoryBarrier2`]
/// - [`ImageViewCreateInfo`]
/// - [`CmdClearColorImage`]
/// - [`CmdClearDepthStencilImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageSubresourceRange {
    ///[`aspect_mask`] is a bitmask of [`ImageAspectFlagBits`] specifying
    ///which aspect(s) of the image are included in the view.
    aspect_mask: ImageAspectFlags,
    ///[`base_mip_level`] is the first mipmap level accessible to the view.
    base_mip_level: u32,
    ///[`level_count`] is the number of mipmap levels (starting from
    ///[`base_mip_level`]) accessible to the view.
    level_count: u32,
    ///[`base_array_layer`] is the first array layer accessible to the view.
    base_array_layer: u32,
    ///[`layer_count`] is the number of array layers (starting from
    ///[`base_array_layer`]) accessible to the view.
    layer_count: u32,
}
///[VkMemoryBarrier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryBarrier.html) - Structure specifying a global memory barrier
///# C Specifications
///The [`MemoryBarrier`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkMemoryBarrier {
///    VkStructureType    sType;
///    const void*        pNext;
///    VkAccessFlags      srcAccessMask;
///    VkAccessFlags      dstAccessMask;
///} VkMemoryBarrier;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
///# Description
///The first [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to access types in the [source access
///mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks) specified by [`src_access_mask`].The second [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to access types in the [destination
///access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks) specified by [`dst_access_mask`].Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_MEMORY_BARRIER`
/// - [`p_next`]**must** be `NULL`
/// - [`src_access_mask`]**must** be a valid combination of [`AccessFlagBits`] values
/// - [`dst_access_mask`]**must** be a valid combination of [`AccessFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccessFlags`]
/// - [`StructureType`]
/// - [`CmdPipelineBarrier`]
/// - [`CmdWaitEvents`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct MemoryBarrier<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    src_access_mask: AccessFlags,
    ///[`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    dst_access_mask: AccessFlags,
}
///[VkBufferMemoryBarrier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryBarrier.html) - Structure specifying a buffer memory barrier
///# C Specifications
///The [`BufferMemoryBarrier`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBufferMemoryBarrier {
///    VkStructureType    sType;
///    const void*        pNext;
///    VkAccessFlags      srcAccessMask;
///    VkAccessFlags      dstAccessMask;
///    uint32_t           srcQueueFamilyIndex;
///    uint32_t           dstQueueFamilyIndex;
///    VkBuffer           buffer;
///    VkDeviceSize       offset;
///    VkDeviceSize       size;
///} VkBufferMemoryBarrier;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`src_queue_family_index`] is the source queue family for a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
/// - [`dst_queue_family_index`] is the destination queue family for a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
/// - [`buffer`] is a handle to the buffer whose backing memory is affected by the barrier.
/// - [`offset`] is an offset in bytes into the backing memory for [`buffer`]; this is relative to
///   the base offset as bound to the buffer (see [`BindBufferMemory`]).
/// - [`size`] is a size in bytes of the affected area of backing memory for [`buffer`], or
///   [`WHOLE_SIZE`] to use the range from [`offset`] to the end of the buffer.
///# Description
///The first [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to access to memory through the specified buffer range, via access
///types in the [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks) specified
///by [`src_access_mask`].
///If [`src_access_mask`] includes `VK_ACCESS_HOST_WRITE_BIT`, memory
///writes performed by that access type are also made visible, as that access
///type is not performed through a resource.The second [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to access to memory through the specified buffer range, via access
///types in the [destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks)
///specified by [`dst_access_mask`].
///If [`dst_access_mask`] includes `VK_ACCESS_HOST_WRITE_BIT` or
///`VK_ACCESS_HOST_READ_BIT`, available memory writes are also made visible
///to accesses of those types, as those access types are not performed through
///a resource.If [`src_queue_family_index`] is not equal to [`dst_queue_family_index`], and
///[`src_queue_family_index`] is equal to the current queue family, then the
///memory barrier defines a [queue
///family release operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers-release) for the specified buffer range, and the second
///access scope includes no access, as if [`dst_access_mask`] was `0`.If [`dst_queue_family_index`]
/// is not equal to [`src_queue_family_index`], and
///[`dst_queue_family_index`] is equal to the current queue family, then the
///memory barrier defines a [queue
///family acquire operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers-acquire) for the specified buffer range, and the first
///access scope includes no access, as if [`src_access_mask`] was `0`.Valid Usage
/// - [`offset`]**must** be less than the size of [`buffer`]
/// - If [`size`] is not equal to [`WHOLE_SIZE`], [`size`]**must** be greater than `0`
/// - If [`size`] is not equal to [`WHOLE_SIZE`], [`size`]**must** be less than or equal to than the
///   size of [`buffer`] minus [`offset`]
/// - If [`buffer`] is non-sparse then it **must** be bound completely and contiguously to a single
///   [`DeviceMemory`] object
/// -    If [`src_queue_family_index`] is not equal to [`dst_queue_family_index`], at least one **must** not be a special queue family reserved for external memory ownership transfers, as described in [[synchronization-queue-transfers]](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
/// - If [`buffer`] was created with a sharing mode of `VK_SHARING_MODE_CONCURRENT`,
///   [`src_queue_family_index`] and [`dst_queue_family_index`] are not equal, and one of
///   [`src_queue_family_index`] and [`dst_queue_family_index`] is one of the special queue family
///   values reserved for external memory transfers, the other **must** be [`QUEUE_FAMILY_IGNORED`]
/// -    If [`buffer`] was created with a sharing mode of `VK_SHARING_MODE_EXCLUSIVE`, and [`src_queue_family_index`] and [`dst_queue_family_index`] are not equal, [`src_queue_family_index`] and [`dst_queue_family_index`]**must** both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in [[synchronization-queue-transfers]](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
/// - If the [`synchronization2` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-synchronization2)
///   is not enabled, and [`buffer`] was created with a sharing mode of
///   `VK_SHARING_MODE_CONCURRENT`, at least one of [`src_queue_family_index`] and
///   [`dst_queue_family_index`]**must** be [`QUEUE_FAMILY_IGNORED`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER`
/// - [`p_next`]**must** be `NULL`
/// - [`buffer`]**must** be a valid [`Buffer`] handle
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccessFlags`]
/// - [`Buffer`]
/// - [`DeviceSize`]
/// - [`StructureType`]
/// - [`CmdPipelineBarrier`]
/// - [`CmdWaitEvents`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BufferMemoryBarrier<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    src_access_mask: AccessFlags,
    ///[`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    dst_access_mask: AccessFlags,
    ///[`src_queue_family_index`] is the source queue family for a
    ///[queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
    src_queue_family_index: u32,
    ///[`dst_queue_family_index`] is the destination queue family for a
    ///[queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
    dst_queue_family_index: u32,
    ///[`buffer`] is a handle to the buffer whose backing memory is affected
    ///by the barrier.
    buffer: Buffer,
    ///[`offset`] is an offset in bytes into the backing memory for
    ///[`buffer`]; this is relative to the base offset as bound to the buffer
    ///(see [`BindBufferMemory`]).
    offset: DeviceSize,
    ///[`size`] is a size in bytes of the affected area of backing memory for
    ///[`buffer`], or [`WHOLE_SIZE`] to use the range from [`offset`]
    ///to the end of the buffer.
    size: DeviceSize,
}
///[VkImageMemoryBarrier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageMemoryBarrier.html) - Structure specifying the parameters of an image memory barrier
///# C Specifications
///The [`ImageMemoryBarrier`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageMemoryBarrier {
///    VkStructureType            sType;
///    const void*                pNext;
///    VkAccessFlags              srcAccessMask;
///    VkAccessFlags              dstAccessMask;
///    VkImageLayout              oldLayout;
///    VkImageLayout              newLayout;
///    uint32_t                   srcQueueFamilyIndex;
///    uint32_t                   dstQueueFamilyIndex;
///    VkImage                    image;
///    VkImageSubresourceRange    subresourceRange;
///} VkImageMemoryBarrier;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`old_layout`] is the old layout in an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-image-layout-transitions).
/// - [`new_layout`] is the new layout in an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-image-layout-transitions).
/// - [`src_queue_family_index`] is the source queue family for a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
/// - [`dst_queue_family_index`] is the destination queue family for a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
/// - [`image`] is a handle to the image affected by this barrier.
/// - [`subresource_range`] describes the [image subresource range](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views)
///   within [`image`] that is affected by this barrier.
///# Description
///The first [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to access to memory through the specified image subresource range,
///via access types in the [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks)
///specified by [`src_access_mask`].
///If [`src_access_mask`] includes `VK_ACCESS_HOST_WRITE_BIT`, memory
///writes performed by that access type are also made visible, as that access
///type is not performed through a resource.The second [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to access to memory through the specified image subresource range,
///via access types in the [destination access
///mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks) specified by [`dst_access_mask`].
///If [`dst_access_mask`] includes `VK_ACCESS_HOST_WRITE_BIT` or
///`VK_ACCESS_HOST_READ_BIT`, available memory writes are also made visible
///to accesses of those types, as those access types are not performed through
///a resource.If [`src_queue_family_index`] is not equal to [`dst_queue_family_index`], and
///[`src_queue_family_index`] is equal to the current queue family, then the
///memory barrier defines a [queue
///family release operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers-release) for the specified image subresource range, and
///the second access scope includes no access, as if [`dst_access_mask`] was
///`0`.If [`dst_queue_family_index`] is not equal to [`src_queue_family_index`], and
///[`dst_queue_family_index`] is equal to the current queue family, then the
///memory barrier defines a [queue
///family acquire operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers-acquire) for the specified image subresource range, and
///the first access scope includes no access, as if [`src_access_mask`] was
///`0`.If the [`synchronization2` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-synchronization2) is not
///enabled or [`old_layout`] is not equal to [`new_layout`],
///[`old_layout`] and [`new_layout`] define an
///[image layout transition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-image-layout-transitions) for
///the specified image subresource range.If [`image`] has a multi-planar format and the image is
/// *disjoint*, then
///including `VK_IMAGE_ASPECT_COLOR_BIT` in the `aspectMask` member of
///[`subresource_range`] is equivalent to including
///`VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT`, and
///(for three-plane formats only) `VK_IMAGE_ASPECT_PLANE_2_BIT`.Valid Usage
/// - `subresourceRange.baseMipLevel`**must** be less than the `mipLevels` specified in
///   [`ImageCreateInfo`] when [`image`] was created
/// - If `subresourceRange.levelCount` is not [`REMAINING_MIP_LEVELS`],
///   `subresourceRange.baseMipLevel` +  `subresourceRange.levelCount`**must** be less than or equal
///   to the `mipLevels` specified in [`ImageCreateInfo`] when [`image`] was created
/// - `subresourceRange.baseArrayLayer`**must** be less than the `arrayLayers` specified in
///   [`ImageCreateInfo`] when [`image`] was created
/// - If `subresourceRange.layerCount` is not [`REMAINING_ARRAY_LAYERS`],
///   `subresourceRange.baseArrayLayer` +  `subresourceRange.layerCount`**must** be less than or
///   equal to the `arrayLayers` specified in [`ImageCreateInfo`] when [`image`] was created
/// - If [`image`] is non-sparse then it **must** be bound completely and contiguously to a single
///   [`DeviceMemory`] object
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL`
///   then [`image`]**must** have been created with `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_SAMPLED_BIT` or
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_TRANSFER_SRC_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_TRANSFER_DST_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   [`old_layout`]**must** be `VK_IMAGE_LAYOUT_UNDEFINED` or the current layout of the image
///   subresources affected by the barrier
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   [`new_layout`]**must** not be `VK_IMAGE_LAYOUT_UNDEFINED` or `VK_IMAGE_LAYOUT_PREINITIALIZED`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL` then [`image`]**must** have been
///   created with `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL` then [`image`]**must** have been
///   created with `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL` then
///   [`image`]**must** have been created with at least one of
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, `VK_IMAGE_USAGE_SAMPLED_BIT`, or
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT` set
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL` then
///   [`image`]**must** have been created with at least one of
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, `VK_IMAGE_USAGE_SAMPLED_BIT`, or
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL` then
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT` set
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL`,
///   [`image`]**must** have been created with `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT` or
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is `VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL`, [`image`]**must**
///   have been created with at least one of `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`,
///   `VK_IMAGE_USAGE_SAMPLED_BIT`, or `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// - If [`src_queue_family_index`] and [`dst_queue_family_index`] define a [queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
///   or [`old_layout`] and [`new_layout`] define an [image layout transition](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-image-layout-transitions),
///   and [`old_layout`] or [`new_layout`] is
///   `VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR` then [`image`]**must** have
///   been created with `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR` set
/// - If [`image`] has a single-plane color format or is not *disjoint*, then the `aspectMask`
///   member of [`subresource_range`]**must** be `VK_IMAGE_ASPECT_COLOR_BIT`
/// - If [`image`] has a multi-planar format and the image is *disjoint*, then the `aspectMask`
///   member of [`subresource_range`]**must** include either at least one of
///   `VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT`, and
///   `VK_IMAGE_ASPECT_PLANE_2_BIT`; or **must** include `VK_IMAGE_ASPECT_COLOR_BIT`
/// - If [`image`] has a multi-planar format with only two planes, then the `aspectMask` member of
///   [`subresource_range`]**must** not include `VK_IMAGE_ASPECT_PLANE_2_BIT`
/// - If [`image`] has a depth/stencil format with both depth and stencil and the [separateDepthStencilLayouts](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-separateDepthStencilLayouts)
///   feature is enabled, then the `aspectMask` member of [`subresource_range`]**must** include
///   either or both `VK_IMAGE_ASPECT_DEPTH_BIT` and `VK_IMAGE_ASPECT_STENCIL_BIT`
/// - If [`image`] has a depth/stencil format with both depth and stencil and the [separateDepthStencilLayouts](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-separateDepthStencilLayouts)
///   feature is not enabled, then the `aspectMask` member of [`subresource_range`]**must** include
///   both `VK_IMAGE_ASPECT_DEPTH_BIT` and `VK_IMAGE_ASPECT_STENCIL_BIT`
/// -    If [`src_queue_family_index`] is not equal to [`dst_queue_family_index`], at least one **must** not be a special queue family reserved for external memory ownership transfers, as described in [[synchronization-queue-transfers]](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
/// - If [`image`] was created with a sharing mode of `VK_SHARING_MODE_CONCURRENT`,
///   [`src_queue_family_index`] and [`dst_queue_family_index`] are not equal, and one of
///   [`src_queue_family_index`] and [`dst_queue_family_index`] is one of the special queue family
///   values reserved for external memory transfers, the other **must** be [`QUEUE_FAMILY_IGNORED`]
/// -    If [`image`] was created with a sharing mode of `VK_SHARING_MODE_EXCLUSIVE`, and [`src_queue_family_index`] and [`dst_queue_family_index`] are not equal, [`src_queue_family_index`] and [`dst_queue_family_index`]**must** both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in [[synchronization-queue-transfers]](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-queue-transfers)
/// - If the [`synchronization2` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-synchronization2)
///   is not enabled, and [`image`] was created with a sharing mode of `VK_SHARING_MODE_CONCURRENT`,
///   at least one of [`src_queue_family_index`] and [`dst_queue_family_index`]**must** be
///   [`QUEUE_FAMILY_IGNORED`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of [`SampleLocationsInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`old_layout`]**must** be a valid [`ImageLayout`] value
/// - [`new_layout`]**must** be a valid [`ImageLayout`] value
/// - [`image`]**must** be a valid [`Image`] handle
/// - [`subresource_range`]**must** be a valid [`ImageSubresourceRange`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccessFlags`]
/// - [`Image`]
/// - [`ImageLayout`]
/// - [`ImageSubresourceRange`]
/// - [`StructureType`]
/// - [`CmdPipelineBarrier`]
/// - [`CmdWaitEvents`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageMemoryBarrier<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    src_access_mask: AccessFlags,
    ///[`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    dst_access_mask: AccessFlags,
    ///[`old_layout`] is the old layout in an
    ///[image layout transition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-image-layout-transitions).
    old_layout: ImageLayout,
    ///[`new_layout`] is the new layout in an
    ///[image layout transition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-image-layout-transitions).
    new_layout: ImageLayout,
    ///[`src_queue_family_index`] is the source queue family for a
    ///[queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
    src_queue_family_index: u32,
    ///[`dst_queue_family_index`] is the destination queue family for a
    ///[queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers).
    dst_queue_family_index: u32,
    ///[`image`] is a handle to the image affected by this barrier.
    image: Image,
    ///[`subresource_range`] describes the [image
    ///subresource range](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views) within [`image`] that is affected by this barrier.
    subresource_range: ImageSubresourceRange,
}
///[VkImageCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageCreateInfo.html) - Structure specifying the parameters of a newly created image object
///# C Specifications
///The [`ImageCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageCreateInfo {
///    VkStructureType          sType;
///    const void*              pNext;
///    VkImageCreateFlags       flags;
///    VkImageType              imageType;
///    VkFormat                 format;
///    VkExtent3D               extent;
///    uint32_t                 mipLevels;
///    uint32_t                 arrayLayers;
///    VkSampleCountFlagBits    samples;
///    VkImageTiling            tiling;
///    VkImageUsageFlags        usage;
///    VkSharingMode            sharingMode;
///    uint32_t                 queueFamilyIndexCount;
///    const uint32_t*          pQueueFamilyIndices;
///    VkImageLayout            initialLayout;
///} VkImageCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`ImageCreateFlagBits`] describing additional parameters of the
///   image.
/// - [`image_type`] is a [`ImageType`] value specifying the basic dimensionality of the image.
///   Layers in array textures do not count as a dimension for the purposes of the image type.
/// - [`format`] is a [`Format`] describing the format and type of the texel blocks that will be
///   contained in the image.
/// - [`extent`] is a [`Extent3D`] describing the number of data elements in each dimension of the
///   base level.
/// - [`mip_levels`] describes the number of levels of detail available for minified sampling of the
///   image.
/// - [`array_layers`] is the number of layers in the image.
/// - [`samples`] is a [`SampleCountFlagBits`] value specifying the number of [samples per texel](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-multisampling).
/// - [`tiling`] is a [`ImageTiling`] value specifying the tiling arrangement of the texel blocks in
///   memory.
/// - [`usage`] is a bitmask of [`ImageUsageFlagBits`] describing the intended usage of the image.
/// - [`sharing_mode`] is a [`SharingMode`] value specifying the sharing mode of the image when it
///   will be accessed by multiple queue families.
/// - [`queue_family_index_count`] is the number of entries in the [`p_queue_family_indices`] array.
/// - [`p_queue_family_indices`] is a pointer to an array of queue families that will access this
///   image. It is ignored if [`sharing_mode`] is not `VK_SHARING_MODE_CONCURRENT`.
/// - [`initial_layout`] is a [`ImageLayout`] value specifying the initial [`ImageLayout`] of all image subresources of the image. See [Image Layouts](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-layouts).
///# Description
///Images created with [`tiling`] equal to `VK_IMAGE_TILING_LINEAR` have
///further restrictions on their limits and capabilities compared to images
///created with [`tiling`] equal to `VK_IMAGE_TILING_OPTIMAL`.
///Creation of images with tiling `VK_IMAGE_TILING_LINEAR`**may** not be
///supported unless other parameters meet all of the constraints:
/// - [`image_type`] is `VK_IMAGE_TYPE_2D`
/// - [`format`] is not a depth/stencil format
/// - [`mip_levels`] is 1
/// - [`array_layers`] is 1
/// - [`samples`] is `VK_SAMPLE_COUNT_1_BIT`
/// - [`usage`] only includes `VK_IMAGE_USAGE_TRANSFER_SRC_BIT` and/or
///   `VK_IMAGE_USAGE_TRANSFER_DST_BIT`
///Images created with one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion), have further
///restrictions on their limits and capabilities compared to images created
///with other formats.
///Creation of images with a format requiring
///[Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)**may** not
///be supported unless other parameters meet all of the constraints:
/// - [`image_type`] is `VK_IMAGE_TYPE_2D`
/// - [`mip_levels`] is 1
/// - [`array_layers`] is 1
/// - [`samples`] is `VK_SAMPLE_COUNT_1_BIT`
///Implementations **may** support additional limits and capabilities beyond those
///listed above.To determine the set of valid [`usage`] bits for a given format, call
///[`GetPhysicalDeviceFormatProperties`].If the size of the resultant image would exceed
/// `maxResourceSize`, then
///[`CreateImage`]**must** fail and return
///`VK_ERROR_OUT_OF_DEVICE_MEMORY`.
///This failure **may** occur even when all image creation parameters satisfy
///their valid usage requirements.Image Creation LimitsValid values for some image creation
/// parameters are limited by a numerical
///upper bound or by inclusion in a bitset.
///For example, [`ImageCreateInfo`]::[`array_layers`] is limited by
///`imageCreateMaxArrayLayers`, defined below; and
///[`ImageCreateInfo`]::[`samples`] is limited by
///`imageCreateSampleCounts`, also defined below.Several limiting values are defined below, as well
/// as assisting values from
///which the limiting values are derived.
///The limiting values are referenced by the relevant valid usage statements of
///[`ImageCreateInfo`].
/// - Let `uint64_t imageCreateDrmFormatModifiers[]` be the set of [Linux DRM format modifiers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-drm-format-modifier)
///   that the resultant image **may** have.  - If [`tiling`] is not
///   `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then `imageCreateDrmFormatModifiers` is empty.  -
///   If [`ImageCreateInfo`]::[`p_next`] contains [`ImageDrmFormatModifierExplicitCreateInfoEXT`],
///   then `imageCreateDrmFormatModifiers` contains exactly one modifier,
///   [`ImageDrmFormatModifierExplicitCreateInfoEXT::drm_format_modifier`].  - If
///   [`ImageCreateInfo`]::[`p_next`] contains [`ImageDrmFormatModifierListCreateInfoEXT`], then
///   `imageCreateDrmFormatModifiers` contains the entire array
///   [`ImageDrmFormatModifierListCreateInfoEXT::p_drm_format_modifiers`].
/// - Let `VkBool32 imageCreateMaybeLinear` indicate if the resultant image may be [linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource).
///   - If [`tiling`] is `VK_IMAGE_TILING_LINEAR`, then `imageCreateMaybeLinear` is [`TRUE`].  - If
///   [`tiling`] is `VK_IMAGE_TILING_OPTIMAL`, then `imageCreateMaybeLinear` is [`FALSE`].  - If
///   [`tiling`] is `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then `imageCreateMaybeLinear` is
///   [`TRUE`] if and only if `imageCreateDrmFormatModifiers` contains `DRM_FORMAT_MOD_LINEAR`.
/// - Let `VkFormatFeatureFlags imageCreateFormatFeatures` be the set of valid *format features*
///   available during image creation.  - If [`tiling`] is `VK_IMAGE_TILING_LINEAR`, then
///   `imageCreateFormatFeatures` is the value of [`FormatProperties::linear_tiling_features`] found
///   by calling [`GetPhysicalDeviceFormatProperties`] with parameter [`format`] equal to
///   [`ImageCreateInfo`]::[`format`].  - If [`tiling`] is `VK_IMAGE_TILING_OPTIMAL`, and if the
///   [`p_next`] chain includes no [`ExternalFormatANDROID`] structure with non-zero
///   `externalFormat`, then `imageCreateFormatFeatures` is the value of
///   [`FormatProperties::optimal_tiling_features`] found by calling
///   [`GetPhysicalDeviceFormatProperties`] with parameter [`format`] equal to
///   [`ImageCreateInfo`]::[`format`].  - If [`tiling`] is `VK_IMAGE_TILING_OPTIMAL`, and if the
///   [`p_next`] chain includes a [`ExternalFormatANDROID`] structure with non-zero
///   `externalFormat`, then `imageCreateFormatFeatures` is the value of
///   [`AndroidHardwareBufferFormatPropertiesANDROID::format_features`] obtained by
///   [`GetAndroidHardwareBufferPropertiesANDROID`] with a matching `externalFormat` value.  - If
///   the [`p_next`] chain includes a [`BufferCollectionImageCreateInfoFUCHSIA`] structure, then
///   `imageCreateFormatFeatures` is the value of
///   [`BufferCollectionPropertiesFUCHSIA::format_features`] found by calling
///   [`GetBufferCollectionPropertiesFUCHSIA`] with a parameter `collection` equal to
///   [`BufferCollectionImageCreateInfoFUCHSIA::collection`]  - If [`tiling`] is
///   `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then the value of `imageCreateFormatFeatures` is
///   found by calling [`GetPhysicalDeviceFormatProperties2`] with
///   [`ImageFormatProperties`]::[`format`] equal to [`ImageCreateInfo`]::[`format`] and with
///   [`DrmFormatModifierPropertiesListEXT`] chained into [`FormatProperties2`]; by collecting all
///   members of the returned array
///   [`DrmFormatModifierPropertiesListEXT::p_drm_format_modifier_properties`] whose
///   `drmFormatModifier` belongs to `imageCreateDrmFormatModifiers`; and by taking the bitwise
///   intersection, over the collected array members, of `drmFormatModifierTilingFeatures`. (The
///   resultant `imageCreateFormatFeatures`**may** be empty).
/// - Let `VkImageFormatProperties2 imageCreateImageFormatPropertiesList[]` be defined as follows.
///   - If [`ImageCreateInfo`]::[`p_next`] contains no [`ExternalFormatANDROID`] structure with
///   non-zero `externalFormat`, then `imageCreateImageFormatPropertiesList` is the list of
///   structures obtained by calling [`GetPhysicalDeviceImageFormatProperties2`], possibly multiple
///   times, as follows:   - The parameters [`PhysicalDeviceImageFormatInfo2`]::[`format`],
///   [`image_type`], [`tiling`], [`usage`], and [`flags`]**must** be equal to those in
///   [`ImageCreateInfo`].   - If [`ImageCreateInfo`]::[`p_next`] contains a
///   [`ExternalMemoryImageCreateInfo`] structure whose `handleTypes` is not `0`, then
///   [`PhysicalDeviceImageFormatInfo2`]::[`p_next`]**must** contain a
///   [`PhysicalDeviceExternalImageFormatInfo`] structure whose `handleType` is not `0`; and
///   [`GetPhysicalDeviceImageFormatProperties2`]**must** be called for each handle type in
///   [`ExternalMemoryImageCreateInfo::handle_types`], successively setting
///   [`PhysicalDeviceExternalImageFormatInfo::handle_type`] on each call.   - If
///   [`ImageCreateInfo`]::[`p_next`] contains no [`ExternalMemoryImageCreateInfo`] structure, or
///   contains a structure whose `handleTypes` is `0`, then
///   [`PhysicalDeviceImageFormatInfo2`]::[`p_next`]**must** either contain no
///   [`PhysicalDeviceExternalImageFormatInfo`] structure, or contain a structure whose `handleType`
///   is `0`.   - If [`tiling`] is `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then
///   [`PhysicalDeviceImageFormatInfo2`]::[`p_next`]**must** contain a
///   [`PhysicalDeviceImageDrmFormatModifierInfoEXT`] structure where [`sharing_mode`] is equal to
///   [`ImageCreateInfo`]::[`sharing_mode`]; and, if [`sharing_mode`] is
///   `VK_SHARING_MODE_CONCURRENT`, then [`queue_family_index_count`] and
///   [`p_queue_family_indices`]**must** be equal to those in [`ImageCreateInfo`]; and, if [`flags`]
///   contains `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`, then the [`ImageFormatListCreateInfo`]
///   structure included in the [`p_next`] chain of [`PhysicalDeviceImageFormatInfo2`]**must** be
///   equivalent to the one included in the [`p_next`] chain of [`ImageCreateInfo`]; and
///   [`GetPhysicalDeviceImageFormatProperties2`]**must** be called for each modifier in
///   `imageCreateDrmFormatModifiers`, successively setting
///   [`PhysicalDeviceImageDrmFormatModifierInfoEXT::drm_format_modifier`] on each call.   - If
///   [`tiling`] is not `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then
///   [`PhysicalDeviceImageFormatInfo2`]::[`p_next`]**must** contain no
///   [`PhysicalDeviceImageDrmFormatModifierInfoEXT`] structure.   - If any call to
///   [`GetPhysicalDeviceImageFormatProperties2`] returns an error, then
///   `imageCreateImageFormatPropertiesList` is defined to be the empty list.   - If
///   [`ImageCreateInfo`]::[`p_next`] contains a [`ExternalFormatANDROID`] structure with non-zero
///   `externalFormat`, then `imageCreateImageFormatPropertiesList` contains a single element where:
///   - [`ImageFormatProperties::max_mip_levels`] is ⌊log<sub>2</sub>(max(`extent.width`,
///   `extent.height`, `extent.depth`))⌋ +  1.   - [`ImageFormatProperties::max_array_layers`] is
///   [`PhysicalDeviceLimits::max_image_array_layers`].   - Each component of
///   [`ImageFormatProperties::max_extent`] is [`PhysicalDeviceLimits::max_image_dimension_2_d`].
///   - [`ImageFormatProperties::sample_counts`] contains exactly `VK_SAMPLE_COUNT_1_BIT`.
/// - Let `uint32_t imageCreateMaxMipLevels` be the minimum value of
///   [`ImageFormatProperties::max_mip_levels`] in `imageCreateImageFormatPropertiesList`. The value
///   is undefined if `imageCreateImageFormatPropertiesList` is empty.
/// - Let `uint32_t imageCreateMaxArrayLayers` be the minimum value of
///   [`ImageFormatProperties::max_array_layers`] in `imageCreateImageFormatPropertiesList`. The
///   value is undefined if `imageCreateImageFormatPropertiesList` is empty.
/// - Let `VkExtent3D imageCreateMaxExtent` be the component-wise minimum over all
///   [`ImageFormatProperties::max_extent`] values in `imageCreateImageFormatPropertiesList`. The
///   value is undefined if `imageCreateImageFormatPropertiesList` is empty.
/// - Let `VkSampleCountFlags imageCreateSampleCounts` be the intersection of each
///   [`ImageFormatProperties::sample_counts`] in `imageCreateImageFormatPropertiesList`. The value
///   is undefined if `imageCreateImageFormatPropertiesList` is empty.
///Valid Usage
/// - Each of the following values (as described in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
///   **must** not be undefined : `imageCreateMaxMipLevels`, `imageCreateMaxArrayLayers`,
///   `imageCreateMaxExtent`, and `imageCreateSampleCounts`
/// - If [`sharing_mode`] is `VK_SHARING_MODE_CONCURRENT`, [`p_queue_family_indices`]**must** be a
///   valid pointer to an array of [`queue_family_index_count`]`uint32_t` values
/// - If [`sharing_mode`] is `VK_SHARING_MODE_CONCURRENT`, [`queue_family_index_count`]**must** be
///   greater than `1`
/// - If [`sharing_mode`] is `VK_SHARING_MODE_CONCURRENT`, each element of
///   [`p_queue_family_indices`]**must** be unique and **must** be less than
///   `pQueueFamilyPropertyCount` returned by either [`GetPhysicalDeviceQueueFamilyProperties`] or
///   [`GetPhysicalDeviceQueueFamilyProperties2`] for the `physicalDevice` that was used to create
///   `device`
/// - If the [`p_next`] chain includes a [`ExternalFormatANDROID`] structure, and its
///   `externalFormat` member is non-zero the [`format`]**must** be `VK_FORMAT_UNDEFINED`
/// - If the [`p_next`] chain does not include a [`ExternalFormatANDROID`] structure, or does and
///   its `externalFormat` member is `0`, the [`format`]**must** not be `VK_FORMAT_UNDEFINED`
/// - `extent.width`**must** be greater than `0`
/// - `extent.height`**must** be greater than `0`
/// - `extent.depth`**must** be greater than `0`
/// - [`mip_levels`]**must** be greater than `0`
/// - [`array_layers`]**must** be greater than `0`
/// - If [`flags`] contains `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT`, [`image_type`]**must** be
///   `VK_IMAGE_TYPE_2D`
/// - If [`flags`] contains `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT`, [`image_type`]**must** be
///   `VK_IMAGE_TYPE_2D`
/// - If [`flags`] contains `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT`, [`image_type`]**must** be
///   `VK_IMAGE_TYPE_3D`
/// -  `extent.width`**must** be less than or equal to `imageCreateMaxExtent.width` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
/// -  `extent.height`**must** be less than or equal to `imageCreateMaxExtent.height` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
/// -  `extent.depth`**must** be less than or equal to `imageCreateMaxExtent.depth` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
/// - If [`image_type`] is `VK_IMAGE_TYPE_2D` and [`flags`] contains
///   `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT`, `extent.width` and `extent.height`**must** be equal and
///   [`array_layers`]**must** be greater than or equal to 6
/// - If [`image_type`] is `VK_IMAGE_TYPE_1D`, both `extent.height` and `extent.depth`**must** be
///   `1`
/// - If [`image_type`] is `VK_IMAGE_TYPE_2D`, `extent.depth`**must** be `1`
/// - [`mip_levels`]**must** be less than or equal to the number of levels in the complete mipmap
///   chain based on `extent.width`, `extent.height`, and `extent.depth`
/// -  [`mip_levels`]**must** be less than or equal to `imageCreateMaxMipLevels` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
/// -  [`array_layers`]**must** be less than or equal to `imageCreateMaxArrayLayers` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
/// - If [`image_type`] is `VK_IMAGE_TYPE_3D`, [`array_layers`]**must** be `1`
/// -    If [`samples`] is not `VK_SAMPLE_COUNT_1_BIT`, then [`image_type`]**must** be `VK_IMAGE_TYPE_2D`, [`flags`]**must** not contain `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT`, [`mip_levels`]**must** be equal to `1`, and `imageCreateMaybeLinear` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits)) **must** be [`FALSE`],
/// - If [`samples`] is not `VK_SAMPLE_COUNT_1_BIT`, [`usage`]**must** not contain
///   `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT`
/// - If [`usage`] includes `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`, then bits other than
///   `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`, `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, and
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`**must** not be set
/// - If [`usage`] includes `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`,
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`, or
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`, `extent.width`**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_framebuffer_width`]
/// - If [`usage`] includes `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`,
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`, or
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`, `extent.height`**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_framebuffer_height`]
/// - If [`fragmentDensityMapOffset`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMapOffset)
///   is not enabled and [`usage`] includes `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT`,
///   `extent.width`**must** be less than or equal to <span class="katex"><span class="katex-html"
///   aria-hidden="true"><span class="base"><span class="strut"
///   style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;"><span class="delimsizing
///   size2">⌈</span></span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span
///   style="top:-2.6550000000000002em;"><span style="height:3em;" class="pstrut"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord
///   mathdefault mtight">n</span><span style="margin-right:0.13889em;" class="mord mathdefault
///   mtight">F</span><span style="margin-right:0.02778em;" class="mord mathdefault
///   mtight">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault
///   mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault
///   mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault
///   mtight">n</span><span class="mord mathdefault mtight">t</span><span
///   style="margin-right:0.02778em;" class="mord mathdefault mtight">D</span><span class="mord
///   mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord
///   mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord
///   mathdefault mtight">t</span><span class="mord mathdefault mtight"
///   style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span
///   style="margin-right:0.01968em;" class="mord mathdefault mtight">l</span><span class="mord
///   mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault
///   mtight">i</span><span style="margin-right:0.04398em;" class="mord mathdefault
///   mtight">z</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
///   style="height:0.3448em;" class="vlist"><span
///   style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span
///   class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1
///   mtight"><span class="mord mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span
///   class="mord mathdefault mtight">h</span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span
///   style="height:0.15122857142857138em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span><span
///   style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span class="frac-line"
///   style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span
///   style="height:3em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
///   class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord
///   mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span><span
///   style="margin-right:0.13889em;" class="mord mathdefault mtight">F</span><span
///   style="margin-right:0.02778em;" class="mord mathdefault mtight">r</span><span class="mord
///   mathdefault mtight">a</span><span class="mord mathdefault mtight">m</span><span class="mord
///   mathdefault mtight">e</span><span class="mord mathdefault mtight">b</span><span class="mord
///   mathdefault mtight">u</span><span style="margin-right:0.10764em;" class="mord mathdefault
///   mtight">f</span><span style="margin-right:0.10764em;" class="mord mathdefault
///   mtight">f</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault
///   mtight" style="margin-right:0.02778em;">r</span><span style="margin-right:0.13889em;"
///   class="mord mathdefault mtight">W</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span
///   class="mord mathdefault mtight">h</span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose
///   nulldelimiter"></span></span></span><span style="top:0em;" class="mclose delimcenter"><span
///   class="delimsizing size2">⌉</span></span></span></span></span></span>
/// - If [`fragmentDensityMapOffset`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMapOffset)
///   is not enabled and [`usage`] includes `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT`,
///   `extent.height`**must** be less than or equal to <span class="katex"><span aria-hidden="true"
///   class="katex-html"><span class="base"><span
///   style="height:1.80002em;vertical-align:-0.65002em;" class="strut"></span><span
///   class="minner"><span style="top:0em;" class="mopen delimcenter"><span class="delimsizing
///   size2">⌈</span></span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span
///   style="top:-2.6550000000000002em;"><span style="height:3em;" class="pstrut"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord
///   mathdefault mtight">n</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">F</span><span style="margin-right:0.02778em;" class="mord
///   mathdefault mtight">r</span><span class="mord mathdefault mtight">a</span><span
///   style="margin-right:0.03588em;" class="mord mathdefault mtight">g</span><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord
///   mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span class="mord
///   mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault
///   mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault
///   mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault
///   mtight">t</span><span class="mord mathdefault mtight"
///   style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord
///   mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault
///   mtight">i</span><span style="margin-right:0.04398em;" class="mord mathdefault
///   mtight">z</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
///   style="height:0.3448em;" class="vlist"><span
///   style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span
///   class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1
///   mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span
///   class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span
///   style="margin-right:0.03588em;" class="mord mathdefault mtight">g</span><span class="mord
///   mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.29011428571428566em;"
///   class="vlist"><span></span></span></span></span></span></span></span></span></span><span
///   style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span
///   style="border-bottom-width:0.04em;" class="frac-line"></span></span><span
///   style="top:-3.446108em;"><span style="height:3em;" class="pstrut"></span><span class="sizing
///   reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault
///   mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault
///   mtight">x</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">F</span><span style="margin-right:0.02778em;" class="mord
///   mathdefault mtight">r</span><span class="mord mathdefault mtight">a</span><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord
///   mathdefault mtight">b</span><span class="mord mathdefault mtight">u</span><span class="mord
///   mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault
///   mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault
///   mtight">e</span><span class="mord mathdefault mtight"
///   style="margin-right:0.02778em;">r</span><span style="margin-right:0.08125em;" class="mord
///   mathdefault mtight">H</span><span class="mord mathdefault mtight">e</span><span class="mord
///   mathdefault mtight">i</span><span class="mord mathdefault mtight"
///   style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span
///   class="mord mathdefault mtight">t</span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.5480799999999999em;"><span></span></span></span></span></span><span
///   class="mclose nulldelimiter"></span></span></span><span class="mclose delimcenter"
///   style="top:0em;"><span class="delimsizing size2">⌉</span></span></span></span></span></span>
/// - If [`usage`] includes `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`, [`usage`]**must** also
///   contain at least one of `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`,
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, or `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// -  [`samples`]**must** be a bit value that is set in `imageCreateSampleCounts` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits))
/// - If the [multisampled storage images](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shaderStorageImageMultisample)
///   feature is not enabled, and [`usage`] contains `VK_IMAGE_USAGE_STORAGE_BIT`,
///   [`samples`]**must** be `VK_SAMPLE_COUNT_1_BIT`
/// - If the [sparse bindings](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseBinding)
///   feature is not enabled, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPARSE_BINDING_BIT`
/// - If the [sparse aliased residency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidencyAliased)
///   feature is not enabled, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT`
/// - If [`tiling`] is `VK_IMAGE_TILING_LINEAR`, [`flags`]**must** not contain
///   `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If [`image_type`] is `VK_IMAGE_TYPE_1D`, [`flags`]**must** not contain
///   `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse residency for 2D images](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidencyImage2D)
///   feature is not enabled, and [`image_type`] is `VK_IMAGE_TYPE_2D`, [`flags`]**must** not
///   contain `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse residency for 3D images](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidencyImage3D)
///   feature is not enabled, and [`image_type`] is `VK_IMAGE_TYPE_3D`, [`flags`]**must** not
///   contain `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse residency for images with 2 samples](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidency2Samples)
///   feature is not enabled, [`image_type`] is `VK_IMAGE_TYPE_2D`, and [`samples`] is
///   `VK_SAMPLE_COUNT_2_BIT`, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse residency for images with 4 samples](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidency4Samples)
///   feature is not enabled, [`image_type`] is `VK_IMAGE_TYPE_2D`, and [`samples`] is
///   `VK_SAMPLE_COUNT_4_BIT`, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse residency for images with 8 samples](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidency8Samples)
///   feature is not enabled, [`image_type`] is `VK_IMAGE_TYPE_2D`, and [`samples`] is
///   `VK_SAMPLE_COUNT_8_BIT`, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If the [sparse residency for images with 16 samples](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidency16Samples)
///   feature is not enabled, [`image_type`] is `VK_IMAGE_TYPE_2D`, and [`samples`] is
///   `VK_SAMPLE_COUNT_16_BIT`, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`
/// - If [`flags`] contains `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` or
///   `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT`, it **must** also contain
///   `VK_IMAGE_CREATE_SPARSE_BINDING_BIT`
/// - If any of the bits `VK_IMAGE_CREATE_SPARSE_BINDING_BIT`,
///   `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`, or `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT` are set,
///   `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`**must** not also be set
/// - If the protected memory feature is not enabled, [`flags`]**must** not contain
///   `VK_IMAGE_CREATE_PROTECTED_BIT`
/// - If any of the bits `VK_IMAGE_CREATE_SPARSE_BINDING_BIT`,
///   `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`, or `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT` are set,
///   `VK_IMAGE_CREATE_PROTECTED_BIT`**must** not also be set
/// - If the [`p_next`] chain includes a [`ExternalMemoryImageCreateInfoNV`] structure, it **must**
///   not contain a [`ExternalMemoryImageCreateInfo`] structure
/// - If the [`p_next`] chain includes a [`ExternalMemoryImageCreateInfo`] structure, its
///   `handleTypes` member **must** only contain bits that are also in
///   [`ExternalImageFormatProperties`]::`externalMemoryProperties.compatibleHandleTypes`, as
///   returned by [`GetPhysicalDeviceImageFormatProperties2`] with [`format`], [`image_type`],
///   [`tiling`], [`usage`], and [`flags`] equal to those in this structure, and with a
///   [`PhysicalDeviceExternalImageFormatInfo`] structure included in the [`p_next`] chain, with a
///   `handleType` equal to any one of the handle types specified in
///   [`ExternalMemoryImageCreateInfo::handle_types`]
/// - If the [`p_next`] chain includes a [`ExternalMemoryImageCreateInfoNV`] structure, its
///   `handleTypes` member **must** only contain bits that are also in
///   [`ExternalImageFormatPropertiesNV`]::`externalMemoryProperties.compatibleHandleTypes`, as
///   returned by [`GetPhysicalDeviceExternalImageFormatPropertiesNV`] with [`format`],
///   [`image_type`], [`tiling`], [`usage`], and [`flags`] equal to those in this structure, and
///   with `externalHandleType` equal to any one of the handle types specified in
///   [`ExternalMemoryImageCreateInfoNV::handle_types`]
/// - If the logical device was created with [`DeviceGroupDeviceCreateInfo::physical_device_count`]
///   equal to 1, [`flags`]**must** not contain `VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT`
/// -    If [`flags`] contains `VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT`, then [`mip_levels`]**must** be one, [`array_layers`]**must** be one, [`image_type`]**must** be `VK_IMAGE_TYPE_2D`. and `imageCreateMaybeLinear` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits)) **must** be [`FALSE`]
/// -    If [`flags`] contains `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT`, then [`format`]**must** be a [compressed image format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#compressed_image_formats)
/// - If [`flags`] contains `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT`, then
///   [`flags`]**must** also contain `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`
/// - [`initial_layout`]**must** be `VK_IMAGE_LAYOUT_UNDEFINED` or `VK_IMAGE_LAYOUT_PREINITIALIZED`
/// - If the [`p_next`] chain includes a [`ExternalMemoryImageCreateInfo`] or
///   [`ExternalMemoryImageCreateInfoNV`] structure whose `handleTypes` member is not `0`,
///   [`initial_layout`]**must** be `VK_IMAGE_LAYOUT_UNDEFINED`
/// -    If the image [`format`] is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion), [`mip_levels`]**must** be 1
/// -    If the image [`format`] is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion), [`samples`]**must** be `VK_SAMPLE_COUNT_1_BIT`
/// -    If the image [`format`] is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion), [`image_type`]**must** be `VK_IMAGE_TYPE_2D`
/// -    If the image [`format`] is one of the [formats that require a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion), and the `ycbcrImageArrays` feature is not enabled, [`array_layers`]**must** be 1
/// -    If [`format`] is a *multi-planar* format, and if `imageCreateFormatFeatures` (as defined in [Image Creation Limits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-creation-limits)) does not contain `VK_FORMAT_FEATURE_DISJOINT_BIT`, then [`flags`]**must** not contain `VK_IMAGE_CREATE_DISJOINT_BIT`
/// - If [`format`] is not a *multi-planar* format, and [`flags`] does not include
///   `VK_IMAGE_CREATE_ALIAS_BIT`, [`flags`]**must** not contain `VK_IMAGE_CREATE_DISJOINT_BIT`
/// - If [`format`] has a `_422` or `_420` suffix, `width`**must** be a multiple of 2
/// - If [`format`] has a `_420` suffix, `height`**must** be a multiple of 2
/// - If [`tiling`] is `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`, then the [`p_next`] chain **must**
///   include exactly one of [`ImageDrmFormatModifierListCreateInfoEXT`] or
///   [`ImageDrmFormatModifierExplicitCreateInfoEXT`] structures
/// - If the [`p_next`] chain includes a [`ImageDrmFormatModifierListCreateInfoEXT`] or
///   [`ImageDrmFormatModifierExplicitCreateInfoEXT`] structure, then [`tiling`]**must** be
///   `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`
/// - If [`tiling`] is `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT` and [`flags`] contains
///   `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`, then the [`p_next`] chain **must** include a
///   [`ImageFormatListCreateInfo`] structure with non-zero `viewFormatCount`
/// - If [`flags`] contains
///   `VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT`[`format`]**must** be a depth or
///   depth/stencil format
/// - If the [`p_next`] chain includes a [`ExternalMemoryImageCreateInfo`] structure whose
///   `handleTypes` member includes
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID`, [`image_type`]**must**
///   be `VK_IMAGE_TYPE_2D`
/// - If the [`p_next`] chain includes a [`ExternalMemoryImageCreateInfo`] structure whose
///   `handleTypes` member includes
///   `VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID`, [`mip_levels`]**must**
///   either be `1` or equal to the number of levels in the complete mipmap chain based on
///   `extent.width`, `extent.height`, and `extent.depth`
/// - If the [`p_next`] chain includes a [`ExternalFormatANDROID`] structure whose `externalFormat`
///   member is not `0`, [`flags`]**must** not include `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`
/// - If the [`p_next`] chain includes a [`ExternalFormatANDROID`] structure whose `externalFormat`
///   member is not `0`, [`usage`]**must** not include any usages except
///   `VK_IMAGE_USAGE_SAMPLED_BIT`
/// - If the [`p_next`] chain includes a [`ExternalFormatANDROID`] structure whose `externalFormat`
///   member is not `0`, [`tiling`]**must** be `VK_IMAGE_TILING_OPTIMAL`
/// - If [`format`] is a depth-stencil format, [`usage`] includes
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, and the [`p_next`] chain includes a
///   [`ImageStencilUsageCreateInfo`] structure, then its
///   [`ImageStencilUsageCreateInfo::stencil_usage`] member **must** also include
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`format`] is a depth-stencil format, [`usage`] does not include
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, and the [`p_next`] chain includes a
///   [`ImageStencilUsageCreateInfo`] structure, then its
///   [`ImageStencilUsageCreateInfo::stencil_usage`] member **must** also not include
///   `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If [`format`] is a depth-stencil format, [`usage`] includes
///   `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`, and the [`p_next`] chain includes a
///   [`ImageStencilUsageCreateInfo`] structure, then its
///   [`ImageStencilUsageCreateInfo::stencil_usage`] member **must** also include
///   `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`
/// - If [`format`] is a depth-stencil format, [`usage`] does not include
///   `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`, and the [`p_next`] chain includes a
///   [`ImageStencilUsageCreateInfo`] structure, then its
///   [`ImageStencilUsageCreateInfo::stencil_usage`] member **must** also not include
///   `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`
/// - If [`Format`] is a depth-stencil format and the [`p_next`] chain includes a
///   [`ImageStencilUsageCreateInfo`] structure with its `stencilUsage` member including
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`, `extent.width`**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_framebuffer_width`]
/// - If [`format`] is a depth-stencil format and the [`p_next`] chain includes a
///   [`ImageStencilUsageCreateInfo`] structure with its `stencilUsage` member including
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`, `extent.height`**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_framebuffer_height`]
/// - If the [multisampled storage images](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shaderStorageImageMultisample)
///   feature is not enabled, [`format`] is a depth-stencil format and the [`p_next`] chain includes
///   a [`ImageStencilUsageCreateInfo`] structure with its `stencilUsage` including
///   `VK_IMAGE_USAGE_STORAGE_BIT`, [`samples`]**must** be `VK_SAMPLE_COUNT_1_BIT`
/// - If [`flags`] contains `VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV`, [`image_type`]**must** be
///   `VK_IMAGE_TYPE_2D` or `VK_IMAGE_TYPE_3D`
/// - If [`flags`] contains `VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV`, it **must** not contain
///   `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT` and the [`format`]**must** not be a depth/stencil format
/// - If [`flags`] contains `VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV` and [`image_type`] is
///   `VK_IMAGE_TYPE_2D`, `extent.width` and `extent.height`**must** be greater than `1`
/// - If [`flags`] contains `VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV` and [`image_type`] is
///   `VK_IMAGE_TYPE_3D`, `extent.width`, `extent.height`, and `extent.depth`**must** be greater
///   than `1`
/// - If [`usage`] includes `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`,
///   [`image_type`]**must** be `VK_IMAGE_TYPE_2D`
/// - If [`usage`] includes `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`,
///   [`samples`]**must** be `VK_SAMPLE_COUNT_1_BIT`
/// - If [`usage`] includes `VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV`, [`tiling`]**must** be
///   `VK_IMAGE_TILING_OPTIMAL`
/// - If [`flags`] contains `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`, [`tiling`]**must** be
///   `VK_IMAGE_TILING_OPTIMAL`
/// - If [`flags`] contains `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`, [`image_type`]**must** be
///   `VK_IMAGE_TYPE_2D`
/// - If [`flags`] contains `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`, [`flags`]**must** not contain
///   `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT`
/// - If [`flags`] contains `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`, [`mip_levels`]**must** be `1`
/// - If [`usage`] includes `VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI`, [`tiling`]**must** be
///   `VK_IMAGE_TILING_LINEAR`
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::image_view_2_d_on_3_d_image`] is [`FALSE`],
///   [`flags`]**must** not contain `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT`
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::multisample_array_image`] is [`FALSE`], and
///   [`samples`] is not `VK_SAMPLE_COUNT_1_BIT`, then [`array_layers`]**must** be `1`
/// -    If a [`ImageFormatListCreateInfo`] structure was included in the [`p_next`] chain and [`ImageFormatListCreateInfo::view_format_count`] is not zero, then all of the formats in [`ImageFormatListCreateInfo::p_view_formats`]**must** be compatible with the [`format`] as described in the [compatibility table](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility)
/// - If [`flags`] does not contain `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT` and the [`p_next`] chain
///   includes a [`ImageFormatListCreateInfo`] structure, then
///   [`ImageFormatListCreateInfo::view_format_count`]**must** be `0` or `1`
/// - If [`usage`] includes `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR`,
///   `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR`, then the [`p_next`] chain **must** include a valid
///   [`VideoProfilesKHR`] structure which includes at least one [`VideoProfileKHR`] with a decode
///   codec-operation
/// - If [`usage`] includes `VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR`,
///   `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR`, `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR`, then the
///   [`p_next`] chain **must** include a valid [`VideoProfilesKHR`] structure which includes at
///   least one [`VideoProfileKHR`] with a encode codec-operation
/// - If the [`Image`] is to be used to import memory from a [`BufferCollectionFUCHSIA`], a
///   [`BufferCollectionImageCreateInfoFUCHSIA`] structure **must** be chained to [`p_next`].
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`BufferCollectionImageCreateInfoFUCHSIA`], [`DedicatedAllocationImageCreateInfoNV`],
///   [`ExternalFormatANDROID`], [`ExternalMemoryImageCreateInfo`],
///   [`ExternalMemoryImageCreateInfoNV`], [`ImageDrmFormatModifierExplicitCreateInfoEXT`],
///   [`ImageDrmFormatModifierListCreateInfoEXT`], [`ImageFormatListCreateInfo`],
///   [`ImageStencilUsageCreateInfo`], [`ImageSwapchainCreateInfoKHR`],
///   [`VideoDecodeH264ProfileEXT`], [`VideoDecodeH265ProfileEXT`], [`VideoEncodeH264ProfileEXT`],
///   [`VideoEncodeH265ProfileEXT`], [`VideoProfileKHR`], or [`VideoProfilesKHR`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`ImageCreateFlagBits`] values
/// - [`image_type`]**must** be a valid [`ImageType`] value
/// - [`format`]**must** be a valid [`Format`] value
/// - [`samples`]**must** be a valid [`SampleCountFlagBits`] value
/// - [`tiling`]**must** be a valid [`ImageTiling`] value
/// - [`usage`]**must** be a valid combination of [`ImageUsageFlagBits`] values
/// - [`usage`]**must** not be `0`
/// - [`sharing_mode`]**must** be a valid [`SharingMode`] value
/// - [`initial_layout`]**must** be a valid [`ImageLayout`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceImageMemoryRequirements`]
/// - [`Extent3D`]
/// - [`Format`]
/// - [`ImageCreateFlags`]
/// - [`ImageFormatConstraintsInfoFUCHSIA`]
/// - [`ImageLayout`]
/// - [`ImageTiling`]
/// - [`ImageType`]
/// - [`ImageUsageFlags`]
/// - [`SampleCountFlagBits`]
/// - [`SharingMode`]
/// - [`StructureType`]
/// - [`CreateImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`ImageCreateFlagBits`] describing
    ///additional parameters of the image.
    flags: ImageCreateFlags,
    ///[`image_type`] is a [`ImageType`] value specifying the basic
    ///dimensionality of the image.
    ///Layers in array textures do not count as a dimension for the purposes of
    ///the image type.
    image_type: ImageType,
    ///[`format`] is a [`Format`] describing the format and type of the
    ///texel blocks that will be contained in the image.
    format: Format,
    ///[`extent`] is a [`Extent3D`] describing the number of data
    ///elements in each dimension of the base level.
    extent: Extent3D,
    ///[`mip_levels`] describes the number of levels of detail available for
    ///minified sampling of the image.
    mip_levels: u32,
    ///[`array_layers`] is the number of layers in the image.
    array_layers: u32,
    ///[`samples`] is a [`SampleCountFlagBits`] value specifying the
    ///number of [samples per texel](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-multisampling).
    samples: SampleCountFlagBits,
    ///[`tiling`] is a [`ImageTiling`] value specifying the tiling
    ///arrangement of the texel blocks in memory.
    tiling: ImageTiling,
    ///[`usage`] is a bitmask of [`ImageUsageFlagBits`] describing the
    ///intended usage of the image.
    usage: ImageUsageFlags,
    ///[`sharing_mode`] is a [`SharingMode`] value specifying the sharing
    ///mode of the image when it will be accessed by multiple queue families.
    sharing_mode: SharingMode,
    ///[`queue_family_index_count`] is the number of entries in the
    ///[`p_queue_family_indices`] array.
    queue_family_index_count: u32,
    ///[`p_queue_family_indices`] is a pointer to an array of queue families
    ///that will access this image.
    ///It is ignored if [`sharing_mode`] is not
    ///`VK_SHARING_MODE_CONCURRENT`.
    p_queue_family_indices: *mut u32,
    ///[`initial_layout`] is a [`ImageLayout`] value specifying the
    ///initial [`ImageLayout`] of all image subresources of the image.
    ///See [Image Layouts](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-layouts).
    initial_layout: ImageLayout,
}
///[VkSubresourceLayout](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubresourceLayout.html) - Structure specifying subresource layout
///# C Specifications
///Information about the layout of the image subresource is returned in a
///[`SubresourceLayout`] structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSubresourceLayout {
///    VkDeviceSize    offset;
///    VkDeviceSize    size;
///    VkDeviceSize    rowPitch;
///    VkDeviceSize    arrayPitch;
///    VkDeviceSize    depthPitch;
///} VkSubresourceLayout;
///```
///# Members
/// - [`offset`] is the byte offset from the start of the image or the plane where the image
///   subresource begins.
/// - [`size`] is the size in bytes of the image subresource. [`size`] includes any extra memory
///   that is required based on [`row_pitch`].
/// - [`row_pitch`] describes the number of bytes between each row of texels in an image.
/// - [`array_pitch`] describes the number of bytes between each array layer of an image.
/// - [`depth_pitch`] describes the number of bytes between each slice of 3D image.
///# Description
///If the image is [linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource), then [`row_pitch`],
///[`array_pitch`] and [`depth_pitch`] describe the layout of the image
///subresource in linear memory.
///For uncompressed formats, [`row_pitch`] is the number of bytes between
///texels with the same x coordinate in adjacent rows (y coordinates differ by
///one).
///[`array_pitch`] is the number of bytes between texels with the same x and y
///coordinate in adjacent array layers of the image (array layer values differ
///by one).
///[`depth_pitch`] is the number of bytes between texels with the same x and y
///coordinate in adjacent slices of a 3D image (z coordinates differ by one).
///Expressed as an addressing formula, the starting byte of a texel in the
///image subresource has address:
///```c
///// (x,y,z,layer) are in texel coordinates
///address(x,y,z,layer) = layer*arrayPitch + z*depthPitch + y*rowPitch + x*elementSize + offset
///```
///For compressed formats, the [`row_pitch`] is the number of bytes between
///compressed texel blocks in adjacent rows.
///[`array_pitch`] is the number of bytes between compressed texel blocks in
///adjacent array layers.
///[`depth_pitch`] is the number of bytes between compressed texel blocks in
///adjacent slices of a 3D image.
///```c
///// (x,y,z,layer) are in compressed texel block coordinates
///address(x,y,z,layer) = layer*arrayPitch + z*depthPitch + y*rowPitch +
/// x*compressedTexelBlockByteSize + offset;
///```
///The value of [`array_pitch`] is undefined for images that were not created
///as arrays.
///[`depth_pitch`] is defined only for 3D images.If the image has a
///*single-plane*
///color format
///and its tiling is `VK_IMAGE_TILING_LINEAR`
///, then the `aspectMask` member of [`ImageSubresource`]**must** be
///`VK_IMAGE_ASPECT_COLOR_BIT`.If the image has a depth/stencil format
///and its tiling is `VK_IMAGE_TILING_LINEAR`
///, then `aspectMask`**must** be either `VK_IMAGE_ASPECT_DEPTH_BIT` or
///`VK_IMAGE_ASPECT_STENCIL_BIT`.
///On implementations that store depth and stencil aspects separately, querying
///each of these image subresource layouts will return a different [`offset`]
///and [`size`] representing the region of memory used for that aspect.
///On implementations that store depth and stencil aspects interleaved, the
///same [`offset`] and [`size`] are returned and represent the interleaved
///memory allocation.If the image has a [multi-planar
///format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)
///and its tiling is `VK_IMAGE_TILING_LINEAR`
///, then the `aspectMask` member of [`ImageSubresource`]**must** be
///`VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT`, or
///(for 3-plane formats only) `VK_IMAGE_ASPECT_PLANE_2_BIT`.
///Querying each of these image subresource layouts will return a different
///[`offset`] and [`size`] representing the region of memory used for that
///plane.
///If the image is *disjoint*, then the [`offset`] is relative to the base
///address of the plane.
///If the image is *non-disjoint*, then the [`offset`] is relative to the
///base address of the image.If the image’s tiling is `VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`,
/// then
///the `aspectMask` member of [`ImageSubresource`]**must** be one of
///`VK_IMAGE_ASPECT_MEMORY_PLANE*_i_*BIT_EXT`, where the maximum allowed
///plane index *i* is defined by the
///[`DrmFormatModifierPropertiesEXT::drm_format_modifier_plane_count`]
///associated with the image’s [`ImageCreateInfo::format`] and
///[modifier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-drm-format-modifier).
///The memory range used by the subresource is described by [`offset`] and
///[`size`].
///If the image is *disjoint*, then the [`offset`] is relative to the base
///address of the *memory plane*.
///If the image is *non-disjoint*, then the [`offset`] is relative to the
///base address of the image.
///If the image is [non-linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource), then
///[`row_pitch`], [`array_pitch`], and [`depth_pitch`] have an
///implementation-dependent meaning.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`ImageDrmFormatModifierExplicitCreateInfoEXT`]
/// - [`GetImageSubresourceLayout`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SubresourceLayout {
    ///[`offset`] is the byte offset from the start of the image
    ///or the plane
    ///where the image subresource begins.
    offset: DeviceSize,
    ///[`size`] is the size in bytes of the image subresource.
    ///[`size`] includes any extra memory that is required based on
    ///[`row_pitch`].
    size: DeviceSize,
    ///[`row_pitch`] describes the number of bytes between each row of texels
    ///in an image.
    row_pitch: DeviceSize,
    ///[`array_pitch`] describes the number of bytes between each array layer
    ///of an image.
    array_pitch: DeviceSize,
    ///[`depth_pitch`] describes the number of bytes between each slice of 3D
    ///image.
    depth_pitch: DeviceSize,
}
///[VkImageViewCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageViewCreateInfo.html) - Structure specifying parameters of a newly created image view
///# C Specifications
///The [`ImageViewCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageViewCreateInfo {
///    VkStructureType            sType;
///    const void*                pNext;
///    VkImageViewCreateFlags     flags;
///    VkImage                    image;
///    VkImageViewType            viewType;
///    VkFormat                   format;
///    VkComponentMapping         components;
///    VkImageSubresourceRange    subresourceRange;
///} VkImageViewCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`ImageViewCreateFlagBits`] describing additional parameters of the
///   image view.
/// - [`image`] is a [`Image`] on which the view will be created.
/// - [`view_type`] is a [`ImageViewType`] value specifying the type of the image view.
/// - [`format`] is a [`Format`] describing the format and type used to interpret texel blocks in
///   the image.
/// - [`components`] is a [`ComponentMapping`] structure specifying a remapping of color components
///   (or of depth or stencil components after they have been converted into color components).
/// - [`subresource_range`] is a [`ImageSubresourceRange`] structure selecting the set of mipmap
///   levels and array layers to be accessible to the view.
///# Description
///Some of the [`image`] creation parameters are inherited by the view.
///In particular, image view creation inherits the implicit parameter
///`usage` specifying the allowed usages of the image view that, by
///default, takes the value of the corresponding `usage` parameter
///specified in [`ImageCreateInfo`] at image creation time.
///The implicit `usage`**can** be overriden by adding a
///[`ImageViewUsageCreateInfo`] structure to the [`p_next`] chain, but the
///view usage **must** be a subset of the image usage.
///If [`image`] has a depth-stencil format and was created with a
///[`ImageStencilUsageCreateInfo`] structure included in the [`p_next`]
///chain of [`ImageCreateInfo`], the usage is calculated based on the
///`subresource.aspectMask` provided:
/// - If `aspectMask` includes only `VK_IMAGE_ASPECT_STENCIL_BIT`, the implicit `usage` is equal to
///   [`ImageStencilUsageCreateInfo::stencil_usage`].
/// - If `aspectMask` includes only `VK_IMAGE_ASPECT_DEPTH_BIT`, the implicit `usage` is equal to
///   [`ImageCreateInfo::usage`].
/// - If both aspects are included in `aspectMask`, the implicit `usage` is equal to the
///   intersection of [`ImageCreateInfo::usage`] and [`ImageStencilUsageCreateInfo::stencil_usage`].
///If [`image`] was created with the `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`
///flag,
///and if the [`format`] of the image is not
///[multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion),
///[`format`]**can** be different from the image’s format, but if
///[`image`] was created without the
///`VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT` flag and
///they are not equal they **must** be *compatible*.
///Image format compatibility is defined in the
///[Format Compatibility Classes](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility-classes) section.
///Views of compatible formats will have the same mapping between texel
///coordinates and memory locations irrespective of the [`format`], with only
///the interpretation of the bit pattern changing.If [`image`] was created with the
///`VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT` flag, [`format`]**must** be *compatible* with
/// the image’s format as described above, or **must**
///be an uncompressed format in which case it **must** be *size-compatible* with
///the image’s format, as defined for
///[copying data between images](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#copies-images-format-size-compatibility).
///In this case, the resulting image view’s texel dimensions equal the
///dimensions of the selected mip level divided by the compressed texel block
///size and rounded up.The [`ComponentMapping`][`components`] member describes a remapping
///from components of the image to components of the vector returned by shader
///image instructions.
///This remapping **must** be the identity swizzle for storage image descriptors,
///input attachment descriptors,
///framebuffer attachments, and any [`ImageView`] used with a combined
///image sampler that enables [sampler Y′C<sub>B</sub>C<sub>R</sub>
///conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion).If the image view is to be used with a sampler which supports
///[sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion), an *identically
///defined object* of type [`SamplerYcbcrConversion`] to that used to
///create the sampler **must** be passed to [`CreateImageView`] in a
///[`SamplerYcbcrConversionInfo`] included in the [`p_next`] chain of
///[`ImageViewCreateInfo`].
///Conversely, if a [`SamplerYcbcrConversion`] object is passed to
///[`CreateImageView`], an identically defined
///[`SamplerYcbcrConversion`] object **must** be used when sampling the image.If the image has a
///[multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)[`format`] and
///`subresourceRange.aspectMask` is `VK_IMAGE_ASPECT_COLOR_BIT`,
///    and it was created with `usage` value containing flags other than
///    `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR`,
///    `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR`
///    , `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR`,
///    `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR`,
///then the [`format`]**must** be identical to the image [`format`], and the
///sampler to be used with the image view **must** enable
///[sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion).If the image has a
///[multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)[`format`] and
///the [`image`] has been created with a `usage` value containing any of
///the `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR`,
///`VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR`, and
///`VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR` flags, then all of the
///[video decode operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations) would ignore the
///[`SamplerYcbcrConversionInfo`] structure and/or
///[sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion) object, associated
///with the image view.
///If the image has a
///[multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)[`format`] and
///the [`image`] has been created with a `usage` value containing any of
///the `VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR`,
///`VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR`, and
///`VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR` flags, then all of the
///[video encode operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations) would ignore the
///[`SamplerYcbcrConversionInfo`] structure and/or
///[sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion) object, associated
///with the image view.If [`image`] was created with the `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT`
///and the image has a
///[multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)[`format`],
///and if `subresourceRange.aspectMask` is
///`VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT`, or
///`VK_IMAGE_ASPECT_PLANE_2_BIT`, [`format`]**must** be
///[compatible](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatible-planes) with the corresponding plane of the
///image, and the sampler to be used with the image view **must** not enable
///[sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion).
///The `width` and `height` of the single-plane image view **must** be
///derived from the multi-planar image’s dimensions in the manner listed for
///[plane compatibility](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatible-planes) for the plane.Any view of an image plane will have the same mapping between texel
///coordinates and memory locations as used by the components of the color
///aspect, subject to the formulae relating texel coordinates to
///lower-resolution planes as described in [Chroma Reconstruction](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-chroma-reconstruction).
///That is, if an R or B plane has a reduced resolution relative to the G plane
///of the multi-planar image, the image view operates using the (*u<sub>plane</sub>*,
///*v<sub>plane</sub>*) unnormalized coordinates of the reduced-resolution plane, and
///these coordinates access the same memory locations as the (*u<sub>color</sub>*,
///*v<sub>color</sub>*) unnormalized coordinates of the color aspect for which chroma
///reconstruction operations operate on the same (*u<sub>plane</sub>*, *v<sub>plane</sub>*) or
///(*i<sub>plane</sub>*, *j<sub>plane</sub>*) coordinates.Valid Usage
/// - If [`image`] was not created with `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT` then
///   [`view_type`]**must** not be `VK_IMAGE_VIEW_TYPE_CUBE` or `VK_IMAGE_VIEW_TYPE_CUBE_ARRAY`
/// - If the [image cube map arrays](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-imageCubeArray)
///   feature is not enabled, [`view_type`]**must** not be `VK_IMAGE_VIEW_TYPE_CUBE_ARRAY`
/// - If [`image`] was created with `VK_IMAGE_TYPE_3D` but without
///   `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT` set then [`view_type`]**must** not be
///   `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`
/// - If [`image`] was created with `VK_IMAGE_TYPE_3D` and [`view_type`] is `VK_IMAGE_VIEW_TYPE_2D`
///   or `VK_IMAGE_VIEW_TYPE_2D_ARRAY` then `subresourceRange.levelCount`**must** be 1
/// - If [`image`] was created with `VK_IMAGE_TYPE_3D` and [`view_type`] is `VK_IMAGE_VIEW_TYPE_2D`
///   or `VK_IMAGE_VIEW_TYPE_2D_ARRAY` then [`ImageCreateInfo`]::[`flags`]**must** not contain any
///   of `VK_IMAGE_CREATE_SPARSE_BINDING_BIT`, `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`, and
///   `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT`
/// - If [`image`] was created with a `samples` value not equal to `VK_SAMPLE_COUNT_1_BIT` then
///   [`view_type`]**must** be either `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`
/// - [`image`]**must** have been created with a `usage` value containing at least one of the usages
///   defined in the [valid image usage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#valid-imageview-imageusage)
///   list for image views
/// - The [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)
///   of the resultant image view **must** contain at least one bit
/// - If `usage` contains `VK_IMAGE_USAGE_SAMPLED_BIT`, then the [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)
///   of the resultant image view **must** contain `VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`
/// - If `usage` contains `VK_IMAGE_USAGE_STORAGE_BIT`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)**must**
///   contain `VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT`
/// - If `usage` contains `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)**must**
///   contain `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT`
/// -    If `usage` contains `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)**must** contain `VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// -    If `usage` contains `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)**must** contain `VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV`, if the image is created with `VK_IMAGE_TILING_LINEAR` and the [`linearColorAttachment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-linearColorAttachment) feature is enabled
/// -    If `usage` contains `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features) must contain `VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV`, if the image is created with `VK_IMAGE_TILING_LINEAR` and the [`linearColorAttachment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-linearColorAttachment) feature is enabled
/// - If `usage` contains `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)**must**
///   contain at least one of `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT` or
///   `VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - `subresourceRange.baseMipLevel`**must** be less than the `mipLevels` specified in
///   [`ImageCreateInfo`] when [`image`] was created
/// - If `subresourceRange.levelCount` is not [`REMAINING_MIP_LEVELS`],
///   `subresourceRange.baseMipLevel` +  `subresourceRange.levelCount`**must** be less than or equal
///   to the `mipLevels` specified in [`ImageCreateInfo`] when [`image`] was created
/// - If [`image`] was created with `usage` containing
///   `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT`, `subresourceRange.levelCount`**must** be `1`
/// - If [`image`] is not a 3D image created with `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT` set, or
///   [`view_type`] is not `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`,
///   `subresourceRange.baseArrayLayer`**must** be less than the `arrayLayers` specified in
///   [`ImageCreateInfo`] when [`image`] was created
/// - If `subresourceRange.layerCount` is not [`REMAINING_ARRAY_LAYERS`], [`image`] is not a 3D
///   image created with `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT` set, or [`view_type`] is not
///   `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`,
///   `subresourceRange.layerCount`**must** be non-zero and `subresourceRange.baseArrayLayer` +
///   `subresourceRange.layerCount`**must** be less than or equal to the `arrayLayers` specified in
///   [`ImageCreateInfo`] when [`image`] was created
/// -    If [`image`] is a 3D image created with `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT` set, and [`view_type`] is `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`, `subresourceRange.baseArrayLayer`**must** be less than the depth computed from `baseMipLevel` and `extent.depth` specified in [`ImageCreateInfo`] when [`image`] was created, according to the formula defined in [Image Miplevel Sizing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-miplevel-sizing)
/// -    If `subresourceRange.layerCount` is not [`REMAINING_ARRAY_LAYERS`], [`image`] is a 3D image created with `VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT` set, and [`view_type`] is `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`, `subresourceRange.layerCount`**must** be non-zero and `subresourceRange.baseArrayLayer` +  `subresourceRange.layerCount`**must** be less than or equal to the depth computed from `baseMipLevel` and `extent.depth` specified in [`ImageCreateInfo`] when [`image`] was created, according to the formula defined in [Image Miplevel Sizing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-miplevel-sizing)
/// -    If [`image`] was created with the `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT` flag, but without the `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT` flag, and if the [`format`] of the [`image`] is not a [multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion) format, [`format`]**must** be compatible with the [`format`] used to create [`image`], as defined in [Format Compatibility Classes](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility-classes)
/// - If [`image`] was created with the `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT` flag,
///   [`format`]**must** be compatible with, or **must** be an uncompressed format that is
///   size-compatible with, the [`format`] used to create [`image`]
/// - If [`image`] was created with the `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT` flag, the
///   `levelCount` and `layerCount` members of [`subresource_range`]**must** both be `1`
/// - If [`image`] was created with the `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT` flag and
///   [`format`] is a non-compressed format, [`view_type`]**must** not be `VK_IMAGE_VIEW_TYPE_3D`
/// - If a [`ImageFormatListCreateInfo`] structure was included in the [`p_next`] chain of the
///   [`ImageCreateInfo`] structure used when creating [`image`] and
///   [`ImageFormatListCreateInfo::view_format_count`] is not zero then [`format`]**must** be one of
///   the formats in [`ImageFormatListCreateInfo::p_view_formats`]
/// - If [`image`] was created with the `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT` flag, if the [`format`]
///   of the [`image`] is a [multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion)
///   format, and if `subresourceRange.aspectMask` is one of `VK_IMAGE_ASPECT_PLANE_0_BIT`, `VK_IMAGE_ASPECT_PLANE_1_BIT`,
///   or `VK_IMAGE_ASPECT_PLANE_2_BIT`, then [`format`]**must** be compatible with the [`Format`] for
///   the plane of the [`image`][`format`] indicated by `subresourceRange.aspectMask`, as defined in
///   [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatible-planes](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatible-planes)
/// -    If [`image`] was not created with the `VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT` flag, or if the [`format`] of the [`image`] is a [multi-planar](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion) format and if `subresourceRange.aspectMask` is `VK_IMAGE_ASPECT_COLOR_BIT`, [`format`]**must** be identical to the [`format`] used to create [`image`]
/// - If the image view [requires a sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#image-views-requiring-sampler-ycbcr-conversion),
///   the [`p_next`] chain must include a [`SamplerYcbcrConversionInfo`] structure with a conversion
///   value other than [`crate::utils::Handle::null`]
/// - If [`format`] has a `_422` or `_420` suffix then [`image`]**must** have been created with a
///   width that is a multiple of 2
/// - If [`format`] has a `_420` suffix then [`image`]**must** have been created with a height that
///   is a multiple of 2
/// -    If the [`p_next`] chain includes a [`SamplerYcbcrConversionInfo`] structure with a `conversion` value other than [`crate::utils::Handle::null`], all members of [`components`]**must** have the [identity swizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views-identity-mappings)
/// - If [`image`] is non-sparse then it **must** be bound completely and contiguously to a single
///   [`DeviceMemory`] object
/// -  [`view_type`]**must** be compatible with the type of [`image`] as shown in the [view type compatibility table](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views-compatibility)
/// - If [`image`] has an [external format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-external-android-hardware-buffer-external-formats),
///   [`format`]**must** be `VK_FORMAT_UNDEFINED`
/// - If [`image`] has an [external format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-external-android-hardware-buffer-external-formats),
///   the [`p_next`] chain **must** include a [`SamplerYcbcrConversionInfo`] structure with a
///   `conversion` object created with the same external format as [`image`]
/// - If [`image`] has an [external format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-external-android-hardware-buffer-external-formats),
///   all members of [`components`]**must** be the [identity swizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views-identity-mappings)
/// - If [`image`] was created with `usage` containing
///   `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`, [`view_type`]**must** be
///   `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY`
/// - If the [`shadingRateImage` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-shadingRateImage)
///   is enabled, and If [`image`] was created with `usage` containing
///   `VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV`, [`format`]**must** be `VK_FORMAT_R8_UINT`
/// -    If the [`attachmentFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-attachmentFragmentShadingRate) is enabled, and the `usage` for the image view includes `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`, then the image view’s [format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-view-format-features)**must** contain `VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`
/// -    If the [`attachmentFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-attachmentFragmentShadingRate) is enabled, the `usage` for the image view includes `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`, and [`layeredShadingRateAttachments`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-layeredShadingRateAttachments) is [`FALSE`], `subresourceRange.layerCount`**must** be `1`
/// - If [dynamic fragment density map](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMapDynamic)
///   feature is not enabled, [`flags`]**must** not contain
///   `VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT`
/// - If [deferred fragment density map](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMapDeferred)
///   feature is not enabled, [`flags`]**must** not contain
///   `VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT`
/// - If [`flags`] contains `VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT`,
///   [`flags`]**must** not contain `VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT`
/// -    If [`image`] was created with [`flags`] containing `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT` and `usage` containing `VK_IMAGE_USAGE_SAMPLED_BIT`, `subresourceRange.layerCount`**must** be less than or equal to [[`PhysicalDeviceFragmentDensityMap2PropertiesEXT::max_subsampled_array_layers`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxSubsampledArrayLayers)
/// - If the [`invocationMask` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-invocationMask)
///   is enabled, and if [`image`] was created with `usage` containing
///   `VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI`, [`format`]**must** be `VK_FORMAT_R8_UINT`
/// - If [`flags`] does not contain `VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT` and
///   [`image`] was created with `usage` containing `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT`,
///   its [`flags`]**must** not contain any of `VK_IMAGE_CREATE_PROTECTED_BIT`,
///   `VK_IMAGE_CREATE_SPARSE_BINDING_BIT`, `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT`, or
///   `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT`
/// - If the [`p_next`] chain includes a [`ImageViewUsageCreateInfo`] structure, and [`image`] was
///   not created with a [`ImageStencilUsageCreateInfo`] structure included in the [`p_next`] chain
///   of [`ImageCreateInfo`], its `usage` member **must** not include any bits that were not set in
///   the `usage` member of the [`ImageCreateInfo`] structure used to create [`image`]
/// - If the [`p_next`] chain includes a [`ImageViewUsageCreateInfo`] structure, [`image`] was
///   created with a [`ImageStencilUsageCreateInfo`] structure included in the [`p_next`] chain of
///   [`ImageCreateInfo`], and `subresourceRange.aspectMask` includes `VK_IMAGE_ASPECT_STENCIL_BIT`,
///   the `usage` member of the [`ImageViewUsageCreateInfo`] structure **must** not include any bits
///   that were not set in the `usage` member of the [`ImageStencilUsageCreateInfo`] structure used
///   to create [`image`]
/// - If the [`p_next`] chain includes a [`ImageViewUsageCreateInfo`] structure, [`image`] was
///   created with a [`ImageStencilUsageCreateInfo`] structure included in the [`p_next`] chain of
///   [`ImageCreateInfo`], and `subresourceRange.aspectMask` includes bits other than
///   `VK_IMAGE_ASPECT_STENCIL_BIT`, the `usage` member of the [`ImageViewUsageCreateInfo`]
///   structure **must** not include any bits that were not set in the `usage` member of the
///   [`ImageCreateInfo`] structure used to create [`image`]
/// - If [`view_type`] is `VK_IMAGE_VIEW_TYPE_1D`, `VK_IMAGE_VIEW_TYPE_2D`, or
///   `VK_IMAGE_VIEW_TYPE_3D`; and `subresourceRange.layerCount` is not [`REMAINING_ARRAY_LAYERS`],
///   then `subresourceRange.layerCount`**must** be 1
/// - If [`view_type`] is `VK_IMAGE_VIEW_TYPE_1D`, `VK_IMAGE_VIEW_TYPE_2D`, or
///   `VK_IMAGE_VIEW_TYPE_3D`; and `subresourceRange.layerCount` is [`REMAINING_ARRAY_LAYERS`], then
///   the remaining number of layers **must** be 1
/// - If [`view_type`] is `VK_IMAGE_VIEW_TYPE_CUBE` and `subresourceRange.layerCount` is not
///   [`REMAINING_ARRAY_LAYERS`], `subresourceRange.layerCount`**must** be `6`
/// - If [`view_type`] is `VK_IMAGE_VIEW_TYPE_CUBE_ARRAY` and `subresourceRange.layerCount` is not
///   [`REMAINING_ARRAY_LAYERS`], `subresourceRange.layerCount`**must** be a multiple of `6`
/// - If [`view_type`] is `VK_IMAGE_VIEW_TYPE_CUBE` and `subresourceRange.layerCount` is
///   [`REMAINING_ARRAY_LAYERS`], the remaining number of layers **must** be `6`
/// - If [`view_type`] is `VK_IMAGE_VIEW_TYPE_CUBE_ARRAY` and `subresourceRange.layerCount` is
///   [`REMAINING_ARRAY_LAYERS`], the remaining number of layers **must** be a multiple of `6`
/// -    If the `[`VK_KHR_portability_subset`]` extension is enabled, and [`PhysicalDevicePortabilitySubsetFeaturesKHR::image_view_format_swizzle`] is [`FALSE`], all elements of [`components`]**must** have the [identity swizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views-identity-mappings)
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::image_view_format_reinterpretation`] is
///   [`FALSE`], the [`Format`] in [`format`]**must** not contain a different number of components,
///   or a different number of bits in each component, than the format of the [`Image`] in [`image`]
/// -    If [`image`] was created with `usage` containing `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR`, `VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR`, `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR`, then the [`view_type`]**must** be `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY` and all members of [`components`]**must** have the [identity swizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views-identity-mappings)
/// -    If [`image`] was created with `usage` containing `VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR`, `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR`, `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR`, then the [`view_type`]**must** be `VK_IMAGE_VIEW_TYPE_2D` or `VK_IMAGE_VIEW_TYPE_2D_ARRAY` and all members of [`components`]**must** have the [identity swizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views-identity-mappings)
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`ImageViewAstcDecodeModeEXT`],
///   [`ImageViewMinLodCreateInfoEXT`], [`ImageViewUsageCreateInfo`],
///   [`SamplerYcbcrConversionInfo`], [`VideoDecodeH264ProfileEXT`], [`VideoDecodeH265ProfileEXT`],
///   [`VideoEncodeH264ProfileEXT`], [`VideoEncodeH265ProfileEXT`], [`VideoProfileKHR`], or
///   [`VideoProfilesKHR`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`ImageViewCreateFlagBits`] values
/// - [`image`]**must** be a valid [`Image`] handle
/// - [`view_type`]**must** be a valid [`ImageViewType`] value
/// - [`format`]**must** be a valid [`Format`] value
/// - [`components`]**must** be a valid [`ComponentMapping`] structure
/// - [`subresource_range`]**must** be a valid [`ImageSubresourceRange`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ComponentMapping`]
/// - [`Format`]
/// - [`Image`]
/// - [`ImageSubresourceRange`]
/// - [`ImageViewCreateFlags`]
/// - [`ImageViewType`]
/// - [`StructureType`]
/// - [`CreateImageView`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageViewCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`ImageViewCreateFlagBits`] describing
    ///additional parameters of the image view.
    flags: ImageViewCreateFlags,
    ///[`image`] is a [`Image`] on which the view will be created.
    image: Image,
    ///[`view_type`] is a [`ImageViewType`] value specifying the type of
    ///the image view.
    view_type: ImageViewType,
    ///[`format`] is a [`Format`] describing the format and type used to
    ///interpret texel blocks in the image.
    format: Format,
    ///[`components`] is a [`ComponentMapping`] structure specifying a
    ///remapping of color components (or of depth or stencil components after
    ///they have been converted into color components).
    components: ComponentMapping,
    ///[`subresource_range`] is a [`ImageSubresourceRange`] structure
    ///selecting the set of mipmap levels and array layers to be accessible to
    ///the view.
    subresource_range: ImageSubresourceRange,
}
///[VkBufferCopy](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferCopy.html) - Structure specifying a buffer copy operation
///# C Specifications
///The [`BufferCopy`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBufferCopy {
///    VkDeviceSize    srcOffset;
///    VkDeviceSize    dstOffset;
///    VkDeviceSize    size;
///} VkBufferCopy;
///```
///# Members
/// - [`src_offset`] is the starting offset in bytes from the start of `srcBuffer`.
/// - [`dst_offset`] is the starting offset in bytes from the start of `dstBuffer`.
/// - [`size`] is the number of bytes to copy.
///# Description
///Valid Usage
/// - The [`size`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`CmdCopyBuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BufferCopy {
    ///[`src_offset`] is the starting offset in bytes from the start of
    ///`srcBuffer`.
    src_offset: DeviceSize,
    ///[`dst_offset`] is the starting offset in bytes from the start of
    ///`dstBuffer`.
    dst_offset: DeviceSize,
    ///[`size`] is the number of bytes to copy.
    size: DeviceSize,
}
///[VkSparseMemoryBind](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseMemoryBind.html) - Structure specifying a sparse memory bind operation
///# C Specifications
///The [`SparseMemoryBind`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseMemoryBind {
///    VkDeviceSize               resourceOffset;
///    VkDeviceSize               size;
///    VkDeviceMemory             memory;
///    VkDeviceSize               memoryOffset;
///    VkSparseMemoryBindFlags    flags;
///} VkSparseMemoryBind;
///```
///# Members
/// - [`resource_offset`] is the offset into the resource.
/// - [`size`] is the size of the memory region to be bound.
/// - [`memory`] is the [`DeviceMemory`] object that the range of the resource is bound to. If
///   [`memory`] is [`crate::utils::Handle::null`], the range is unbound.
/// - [`memory_offset`] is the offset into the [`DeviceMemory`] object to bind the resource range
///   to. If [`memory`] is [`crate::utils::Handle::null`], this value is ignored.
/// - [`flags`] is a bitmask of [`SparseMemoryBindFlagBits`] specifying usage of the binding
///   operation.
///# Description
///The *binding range*[[`resource_offset`], [`resource_offset`] +
///[`size`]) has different constraints based on [`flags`].
///If [`flags`] contains `VK_SPARSE_MEMORY_BIND_METADATA_BIT`, the
///binding range **must** be within the mip tail region of the metadata aspect.
///This metadata region is defined by:
/// * metadataRegion = [base, base +  `imageMipTailSize`)
/// * base = `imageMipTailOffset` +  `imageMipTailStride` × n
///and `imageMipTailOffset`, `imageMipTailSize`, and
///`imageMipTailStride` values are from the
///[`SparseImageMemoryRequirements`] corresponding to the metadata aspect
///of the image, and n is a valid array layer index for the image,`imageMipTailStride` is
/// considered to be zero for aspects where
///[`SparseImageMemoryRequirements`]::`formatProperties.flags` contains
///`VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT`.If [`flags`] does not contain
/// `VK_SPARSE_MEMORY_BIND_METADATA_BIT`,
///the binding range **must** be within the range
///[0,[`MemoryRequirements`]::[`size`]).Valid Usage
/// -    If [`memory`] is not [`crate::utils::Handle::null`], [`memory`] and [`memory_offset`]**must** match the memory requirements of the resource, as described in section [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-association](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-association)
/// - If [`memory`] is not [`crate::utils::Handle::null`], [`memory`]**must** not have been created
///   with a memory type that reports `VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT` bit set
/// - [`size`]**must** be greater than `0`
/// - [`resource_offset`]**must** be less than the size of the resource
/// - [`size`]**must** be less than or equal to the size of the resource minus [`resource_offset`]
/// - [`memory_offset`]**must** be less than the size of [`memory`]
/// - [`size`]**must** be less than or equal to the size of [`memory`] minus [`memory_offset`]
/// - If [`memory`] was created with [`ExportMemoryAllocateInfo::handle_types`] not equal to `0`, at
///   least one handle type it contained **must** also have been set in
///   [`ExternalMemoryBufferCreateInfo::handle_types`] or
///   [`ExternalMemoryImageCreateInfo::handle_types`] when the resource was created
/// - If [`memory`] was created by a memory import operation, the external handle type of the
///   imported memory **must** also have been set in
///   [`ExternalMemoryBufferCreateInfo::handle_types`] or
///   [`ExternalMemoryImageCreateInfo::handle_types`] when the resource was created
///Valid Usage (Implicit)
/// - If [`memory`] is not [`crate::utils::Handle::null`], [`memory`]**must** be a valid
///   [`DeviceMemory`] handle
/// - [`flags`]**must** be a valid combination of [`SparseMemoryBindFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceMemory`]
/// - [`DeviceSize`]
/// - [`SparseBufferMemoryBindInfo`]
/// - [`SparseImageOpaqueMemoryBindInfo`]
/// - [`SparseMemoryBindFlags`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseMemoryBind {
    ///[`resource_offset`] is the offset into the resource.
    resource_offset: DeviceSize,
    ///[`size`] is the size of the memory region to be bound.
    size: DeviceSize,
    ///[`memory`] is the [`DeviceMemory`] object that the range of the
    ///resource is bound to.
    ///If [`memory`] is [`crate::utils::Handle::null`], the range is unbound.
    memory: DeviceMemory,
    ///[`memory_offset`] is the offset into the [`DeviceMemory`] object to
    ///bind the resource range to.
    ///If [`memory`] is [`crate::utils::Handle::null`], this value is ignored.
    memory_offset: DeviceSize,
    ///[`flags`] is a bitmask of [`SparseMemoryBindFlagBits`] specifying
    ///usage of the binding operation.
    flags: SparseMemoryBindFlags,
}
///[VkSparseImageMemoryBind](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryBind.html) - Structure specifying sparse image memory bind
///# C Specifications
///The [`SparseImageMemoryBind`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseImageMemoryBind {
///    VkImageSubresource         subresource;
///    VkOffset3D                 offset;
///    VkExtent3D                 extent;
///    VkDeviceMemory             memory;
///    VkDeviceSize               memoryOffset;
///    VkSparseMemoryBindFlags    flags;
///} VkSparseImageMemoryBind;
///```
///# Members
/// - [`subresource`] is the image *aspect* and region of interest in the image.
/// - [`offset`] are the coordinates of the first texel within the image subresource to bind.
/// - [`extent`] is the size in texels of the region within the image subresource to bind. The
///   extent **must** be a multiple of the sparse image block dimensions, except when binding sparse
///   image blocks along the edge of an image subresource it **can** instead be such that any
///   coordinate of [`offset`] +  [`extent`] equals the corresponding dimensions of the image
///   subresource.
/// - [`memory`] is the [`DeviceMemory`] object that the sparse image blocks of the image are bound
///   to. If [`memory`] is [`crate::utils::Handle::null`], the sparse image blocks are unbound.
/// - [`memory_offset`] is an offset into [`DeviceMemory`] object. If [`memory`] is
///   [`crate::utils::Handle::null`], this value is ignored.
/// - [`flags`] are sparse memory binding flags.
///# Description
///Valid Usage
/// - If the [sparse aliased residency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sparseResidencyAliased)
///   feature is not enabled, and if any other resources are bound to ranges of [`memory`], the
///   range of [`memory`] being bound **must** not overlap with those bound ranges
/// -  [`memory`] and [`memory_offset`]**must** match the memory requirements of the calling command’s `image`, as described in section [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-association](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-association)
/// - [`subresource`]**must** be a valid image subresource for `image` (see [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-views))
/// - `offset.x`**must** be a multiple of the sparse image block width
///   ([`SparseImageFormatProperties`]::`imageGranularity.width`) of the image
/// - `extent.width`**must** either be a multiple of the sparse image block width of the image, or
///   else (`extent.width` +  `offset.x`)**must** equal the width of the image subresource
/// - `offset.y`**must** be a multiple of the sparse image block height
///   ([`SparseImageFormatProperties`]::`imageGranularity.height`) of the image
/// - `extent.height`**must** either be a multiple of the sparse image block height of the image, or
///   else (`extent.height` +  `offset.y`)**must** equal the height of the image subresource
/// - `offset.z`**must** be a multiple of the sparse image block depth
///   ([`SparseImageFormatProperties`]::`imageGranularity.depth`) of the image
/// - `extent.depth`**must** either be a multiple of the sparse image block depth of the image, or
///   else (`extent.depth` +  `offset.z`)**must** equal the depth of the image subresource
/// - If [`memory`] was created with [`ExportMemoryAllocateInfo::handle_types`] not equal to `0`, at
///   least one handle type it contained **must** also have been set in
///   [`ExternalMemoryImageCreateInfo::handle_types`] when the image was created
/// - If [`memory`] was created by a memory import operation, the external handle type of the
///   imported memory **must** also have been set in [`ExternalMemoryImageCreateInfo::handle_types`]
///   when `image` was created
///Valid Usage (Implicit)
/// - [`subresource`]**must** be a valid [`ImageSubresource`] structure
/// - If [`memory`] is not [`crate::utils::Handle::null`], [`memory`]**must** be a valid
///   [`DeviceMemory`] handle
/// - [`flags`]**must** be a valid combination of [`SparseMemoryBindFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceMemory`]
/// - [`DeviceSize`]
/// - [`Extent3D`]
/// - [`ImageSubresource`]
/// - [`Offset3D`]
/// - [`SparseImageMemoryBindInfo`]
/// - [`SparseMemoryBindFlags`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseImageMemoryBind {
    ///[`subresource`] is the image *aspect* and region of interest in the
    ///image.
    subresource: ImageSubresource,
    ///[`offset`] are the coordinates of the first texel within the image
    ///subresource to bind.
    offset: Offset3D,
    ///[`extent`] is the size in texels of the region within the image
    ///subresource to bind.
    ///The extent **must** be a multiple of the sparse image block dimensions,
    ///except when binding sparse image blocks along the edge of an image
    ///subresource it **can** instead be such that any coordinate of
    ///[`offset`] +  [`extent`] equals the corresponding
    ///dimensions of the image subresource.
    extent: Extent3D,
    ///[`memory`] is the [`DeviceMemory`] object that the sparse image
    ///blocks of the image are bound to.
    ///If [`memory`] is [`crate::utils::Handle::null`], the sparse image blocks are
    ///unbound.
    memory: DeviceMemory,
    ///[`memory_offset`] is an offset into [`DeviceMemory`] object.
    ///If [`memory`] is [`crate::utils::Handle::null`], this value is ignored.
    memory_offset: DeviceSize,
    ///[`flags`] are sparse memory binding flags.
    flags: SparseMemoryBindFlags,
}
///[VkSparseBufferMemoryBindInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseBufferMemoryBindInfo.html) - Structure specifying a sparse buffer memory bind operation
///# C Specifications
///Memory is bound to [`Buffer`] objects created with the
///`VK_BUFFER_CREATE_SPARSE_BINDING_BIT` flag using the following
///structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseBufferMemoryBindInfo {
///    VkBuffer                     buffer;
///    uint32_t                     bindCount;
///    const VkSparseMemoryBind*    pBinds;
///} VkSparseBufferMemoryBindInfo;
///```
///# Members
/// - [`buffer`] is the [`Buffer`] object to be bound.
/// - [`bind_count`] is the number of [`SparseMemoryBind`] structures in the [`p_binds`] array.
/// - [`p_binds`] is a pointer to an array of [`SparseMemoryBind`] structures.
///# Description
///Valid Usage (Implicit)
/// - [`buffer`]**must** be a valid [`Buffer`] handle
/// - [`p_binds`]**must** be a valid pointer to an array of [`bind_count`] valid
///   [`SparseMemoryBind`] structures
/// - [`bind_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BindSparseInfo`]
/// - [`Buffer`]
/// - [`SparseMemoryBind`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseBufferMemoryBindInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`buffer`] is the [`Buffer`] object to be bound.
    buffer: Buffer,
    ///[`bind_count`] is the number of [`SparseMemoryBind`] structures in
    ///the [`p_binds`] array.
    bind_count: u32,
    ///[`p_binds`] is a pointer to an array of [`SparseMemoryBind`]
    ///structures.
    p_binds: *mut SparseMemoryBind,
}
///[VkSparseImageOpaqueMemoryBindInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageOpaqueMemoryBindInfo.html) - Structure specifying sparse image opaque memory bind information
///# C Specifications
///Memory is bound to opaque regions of [`Image`] objects created with the
///`VK_IMAGE_CREATE_SPARSE_BINDING_BIT` flag using the following structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseImageOpaqueMemoryBindInfo {
///    VkImage                      image;
///    uint32_t                     bindCount;
///    const VkSparseMemoryBind*    pBinds;
///} VkSparseImageOpaqueMemoryBindInfo;
///```
///# Members
/// - [`image`] is the [`Image`] object to be bound.
/// - [`bind_count`] is the number of [`SparseMemoryBind`] structures in the [`p_binds`] array.
/// - [`p_binds`] is a pointer to an array of [`SparseMemoryBind`] structures.
///# Description
///Valid Usage
/// - If the `flags` member of any element of [`p_binds`] contains
///   `VK_SPARSE_MEMORY_BIND_METADATA_BIT`, the binding range defined **must** be within the mip
///   tail region of the metadata aspect of [`image`]
///Valid Usage (Implicit)
/// - [`image`]**must** be a valid [`Image`] handle
/// - [`p_binds`]**must** be a valid pointer to an array of [`bind_count`] valid
///   [`SparseMemoryBind`] structures
/// - [`bind_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BindSparseInfo`]
/// - [`Image`]
/// - [`SparseMemoryBind`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseImageOpaqueMemoryBindInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`image`] is the [`Image`] object to be bound.
    image: Image,
    ///[`bind_count`] is the number of [`SparseMemoryBind`] structures in
    ///the [`p_binds`] array.
    bind_count: u32,
    ///[`p_binds`] is a pointer to an array of [`SparseMemoryBind`]
    ///structures.
    p_binds: *mut SparseMemoryBind,
}
///[VkSparseImageMemoryBindInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryBindInfo.html) - Structure specifying sparse image memory bind information
///# C Specifications
///Memory **can** be bound to sparse image blocks of [`Image`] objects created
///with the `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` flag using the following
///structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSparseImageMemoryBindInfo {
///    VkImage                           image;
///    uint32_t                          bindCount;
///    const VkSparseImageMemoryBind*    pBinds;
///} VkSparseImageMemoryBindInfo;
///```
///# Members
/// - [`image`] is the [`Image`] object to be bound
/// - [`bind_count`] is the number of [`SparseImageMemoryBind`] structures in [`p_binds`] array
/// - [`p_binds`] is a pointer to an array of [`SparseImageMemoryBind`] structures
///# Description
///Valid Usage
/// - The `subresource.mipLevel` member of each element of [`p_binds`]**must** be less than the
///   `mipLevels` specified in [`ImageCreateInfo`] when [`image`] was created
/// - The `subresource.arrayLayer` member of each element of [`p_binds`]**must** be less than the
///   `arrayLayers` specified in [`ImageCreateInfo`] when [`image`] was created
/// - [`image`]**must** have been created with `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set
///Valid Usage (Implicit)
/// - [`image`]**must** be a valid [`Image`] handle
/// - [`p_binds`]**must** be a valid pointer to an array of [`bind_count`] valid
///   [`SparseImageMemoryBind`] structures
/// - [`bind_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BindSparseInfo`]
/// - [`Image`]
/// - [`SparseImageMemoryBind`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SparseImageMemoryBindInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`image`] is the [`Image`] object to be bound
    image: Image,
    ///[`bind_count`] is the number of [`SparseImageMemoryBind`]
    ///structures in [`p_binds`] array
    bind_count: u32,
    ///[`p_binds`] is a pointer to an array of [`SparseImageMemoryBind`]
    ///structures
    p_binds: *mut SparseImageMemoryBind,
}
///[VkBindSparseInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindSparseInfo.html) - Structure specifying a sparse binding operation
///# C Specifications
///The [`BindSparseInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBindSparseInfo {
///    VkStructureType                             sType;
///    const void*                                 pNext;
///    uint32_t                                    waitSemaphoreCount;
///    const VkSemaphore*                          pWaitSemaphores;
///    uint32_t                                    bufferBindCount;
///    const VkSparseBufferMemoryBindInfo*         pBufferBinds;
///    uint32_t                                    imageOpaqueBindCount;
///    const VkSparseImageOpaqueMemoryBindInfo*    pImageOpaqueBinds;
///    uint32_t                                    imageBindCount;
///    const VkSparseImageMemoryBindInfo*          pImageBinds;
///    uint32_t                                    signalSemaphoreCount;
///    const VkSemaphore*                          pSignalSemaphores;
///} VkBindSparseInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`wait_semaphore_count`] is the number of semaphores upon which to wait before executing the
///   sparse binding operations for the batch.
/// - [`p_wait_semaphores`] is a pointer to an array of semaphores upon which to wait on before the sparse binding operations for this batch begin execution. If semaphores to wait on are provided, they define a [semaphore wait operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-waiting).
/// - [`buffer_bind_count`] is the number of sparse buffer bindings to perform in the batch.
/// - [`p_buffer_binds`] is a pointer to an array of [`SparseBufferMemoryBindInfo`] structures.
/// - [`image_opaque_bind_count`] is the number of opaque sparse image bindings to perform.
/// - [`p_image_opaque_binds`] is a pointer to an array of [`SparseImageOpaqueMemoryBindInfo`]
///   structures, indicating opaque sparse image bindings to perform.
/// - [`image_bind_count`] is the number of sparse image bindings to perform.
/// - [`p_image_binds`] is a pointer to an array of [`SparseImageMemoryBindInfo`] structures,
///   indicating sparse image bindings to perform.
/// - [`signal_semaphore_count`] is the number of semaphores to be signaled once the sparse binding
///   operations specified by the structure have completed execution.
/// - [`p_signal_semaphores`] is a pointer to an array of semaphores which will be signaled when the
///   sparse binding operations for this batch have completed execution. If semaphores to be signaled
///   are provided, they define a [semaphore signal operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-signaling).
///# Description
///Valid Usage
/// - If any element of [`p_wait_semaphores`] or [`p_signal_semaphores`] was created with a
///   [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` then the [`p_next`] chain **must** include a
///   [`TimelineSemaphoreSubmitInfo`] structure
/// - If the [`p_next`] chain of this structure includes a [`TimelineSemaphoreSubmitInfo`] structure
///   and any element of [`p_wait_semaphores`] was created with a [`SemaphoreType`] of
///   `VK_SEMAPHORE_TYPE_TIMELINE` then its `waitSemaphoreValueCount` member **must** equal
///   [`wait_semaphore_count`]
/// - If the [`p_next`] chain of this structure includes a [`TimelineSemaphoreSubmitInfo`] structure
///   and any element of [`p_signal_semaphores`] was created with a [`SemaphoreType`] of
///   `VK_SEMAPHORE_TYPE_TIMELINE` then its `signalSemaphoreValueCount` member **must** equal
///   [`signal_semaphore_count`]
/// -    For each element of [`p_signal_semaphores`] created with a [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` the corresponding element of [`TimelineSemaphoreSubmitInfo::p_signal_semaphore_values`]**must** have a value greater than the current value of the semaphore when the [semaphore signal operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-signaling) is executed
/// -    For each element of [`p_wait_semaphores`] created with a [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` the corresponding element of [`TimelineSemaphoreSubmitInfo::p_wait_semaphore_values`]**must** have a value which does not differ from the current value of the semaphore or from the value of any outstanding semaphore wait or signal operation on that semaphore by more than [`maxTimelineSemaphoreValueDifference`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxTimelineSemaphoreValueDifference)
/// -    For each element of [`p_signal_semaphores`] created with a [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` the corresponding element of [`TimelineSemaphoreSubmitInfo::p_signal_semaphore_values`]**must** have a value which does not differ from the current value of the semaphore or from the value of any outstanding semaphore wait or signal operation on that semaphore by more than [`maxTimelineSemaphoreValueDifference`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxTimelineSemaphoreValueDifference)
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_BIND_SPARSE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`DeviceGroupBindSparseInfo`] or
///   [`TimelineSemaphoreSubmitInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - If [`wait_semaphore_count`] is not `0`, [`p_wait_semaphores`]**must** be a valid pointer to an
///   array of [`wait_semaphore_count`] valid [`Semaphore`] handles
/// - If [`buffer_bind_count`] is not `0`, [`p_buffer_binds`]**must** be a valid pointer to an array
///   of [`buffer_bind_count`] valid [`SparseBufferMemoryBindInfo`] structures
/// - If [`image_opaque_bind_count`] is not `0`, [`p_image_opaque_binds`]**must** be a valid pointer
///   to an array of [`image_opaque_bind_count`] valid [`SparseImageOpaqueMemoryBindInfo`]
///   structures
/// - If [`image_bind_count`] is not `0`, [`p_image_binds`]**must** be a valid pointer to an array
///   of [`image_bind_count`] valid [`SparseImageMemoryBindInfo`] structures
/// - If [`signal_semaphore_count`] is not `0`, [`p_signal_semaphores`]**must** be a valid pointer
///   to an array of [`signal_semaphore_count`] valid [`Semaphore`] handles
/// - Both of the elements of [`p_signal_semaphores`], and the elements of [`p_wait_semaphores`]
///   that are valid handles of non-ignored parameters **must** have been created, allocated, or
///   retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Semaphore`]
/// - [`SparseBufferMemoryBindInfo`]
/// - [`SparseImageMemoryBindInfo`]
/// - [`SparseImageOpaqueMemoryBindInfo`]
/// - [`StructureType`]
/// - [`QueueBindSparse`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BindSparseInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`wait_semaphore_count`] is the number of semaphores upon which to wait
    ///before executing the sparse binding operations for the batch.
    wait_semaphore_count: u32,
    ///[`p_wait_semaphores`] is a pointer to an array of semaphores upon which
    ///to wait on before the sparse binding operations for this batch begin
    ///execution.
    ///If semaphores to wait on are provided, they define a
    ///[semaphore wait operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-waiting).
    p_wait_semaphores: *mut Semaphore,
    ///[`buffer_bind_count`] is the number of sparse buffer bindings to perform
    ///in the batch.
    buffer_bind_count: u32,
    ///[`p_buffer_binds`] is a pointer to an array of
    ///[`SparseBufferMemoryBindInfo`] structures.
    p_buffer_binds: *mut SparseBufferMemoryBindInfo<'lt>,
    ///[`image_opaque_bind_count`] is the number of opaque sparse image bindings
    ///to perform.
    image_opaque_bind_count: u32,
    ///[`p_image_opaque_binds`] is a pointer to an array of
    ///[`SparseImageOpaqueMemoryBindInfo`] structures, indicating opaque
    ///sparse image bindings to perform.
    p_image_opaque_binds: *mut SparseImageOpaqueMemoryBindInfo<'lt>,
    ///[`image_bind_count`] is the number of sparse image bindings to perform.
    image_bind_count: u32,
    ///[`p_image_binds`] is a pointer to an array of
    ///[`SparseImageMemoryBindInfo`] structures, indicating sparse image
    ///bindings to perform.
    p_image_binds: *mut SparseImageMemoryBindInfo<'lt>,
    ///[`signal_semaphore_count`] is the number of semaphores to be signaled
    ///once the sparse binding operations specified by the structure have
    ///completed execution.
    signal_semaphore_count: u32,
    ///[`p_signal_semaphores`] is a pointer to an array of semaphores which
    ///will be signaled when the sparse binding operations for this batch have
    ///completed execution.
    ///If semaphores to be signaled are provided, they define a
    ///[semaphore signal operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-signaling).
    p_signal_semaphores: *mut Semaphore,
}
///[VkImageCopy](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageCopy.html) - Structure specifying an image copy operation
///# C Specifications
///The [`ImageCopy`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageCopy {
///    VkImageSubresourceLayers    srcSubresource;
///    VkOffset3D                  srcOffset;
///    VkImageSubresourceLayers    dstSubresource;
///    VkOffset3D                  dstOffset;
///    VkExtent3D                  extent;
///} VkImageCopy;
///```
///# Members
/// - [`src_subresource`] and [`dst_subresource`] are [`ImageSubresourceLayers`] structures
///   specifying the image subresources of the images used for the source and destination image
///   data, respectively.
/// - [`src_offset`] and [`dst_offset`] select the initial `x`, `y`, and `z` offsets in texels of
///   the sub-regions of the source and destination image data.
/// - [`extent`] is the size in texels of the image to copy in `width`, `height` and `depth`.
///# Description
///For `VK_IMAGE_TYPE_3D` images, copies are performed slice by slice
///starting with the `z` member of the [`src_offset`] or [`dst_offset`],
///and copying `depth` slices.
///For images with multiple layers, copies are performed layer by layer
///starting with the `baseArrayLayer` member of the [`src_subresource`] or
///[`dst_subresource`] and copying `layerCount` layers.
///Image data **can** be copied between images with different image types.
///If one image is `VK_IMAGE_TYPE_3D` and the other image is
///`VK_IMAGE_TYPE_2D` with multiple layers, then each slice is copied to or
///from a different layer.Copies involving a [multi-planar image format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion) specify the region to be copied in terms of the
///*plane* to be copied, not the coordinates of the multi-planar image.
///This means that copies accessing the R/B planes of “`_422`” format
///images **must** fit the copied region within half the `width` of the parent
///image, and that copies accessing the R/B planes of “`_420`” format
///images **must** fit the copied region within half the `width` and
///`height` of the parent image.Valid Usage
/// - The number of slices of the [`extent`] (for 3D) or layers of the [`src_subresource`] (for
///   non-3D) **must** match the number of slices of the [`extent`] (for 3D) or layers of the
///   [`dst_subresource`] (for non-3D)
///Valid Usage (Implicit)
/// - [`src_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
/// - [`dst_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Extent3D`]
/// - [`ImageSubresourceLayers`]
/// - [`Offset3D`]
/// - [`CmdCopyImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageCopy {
    ///[`src_subresource`] and [`dst_subresource`] are
    ///[`ImageSubresourceLayers`] structures specifying the image
    ///subresources of the images used for the source and destination image
    ///data, respectively.
    src_subresource: ImageSubresourceLayers,
    ///[`src_offset`] and [`dst_offset`] select the initial `x`, `y`,
    ///and `z` offsets in texels of the sub-regions of the source and
    ///destination image data.
    src_offset: Offset3D,
    ///No documentation found
    dst_subresource: ImageSubresourceLayers,
    ///No documentation found
    dst_offset: Offset3D,
    ///[`extent`] is the size in texels of the image to copy in `width`,
    ///`height` and `depth`.
    extent: Extent3D,
}
///[VkImageBlit](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageBlit.html) - Structure specifying an image blit operation
///# C Specifications
///The [`ImageBlit`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageBlit {
///    VkImageSubresourceLayers    srcSubresource;
///    VkOffset3D                  srcOffsets[2];
///    VkImageSubresourceLayers    dstSubresource;
///    VkOffset3D                  dstOffsets[2];
///} VkImageBlit;
///```
///# Members
/// - [`src_subresource`] is the subresource to blit from.
/// - [`src_offsets`] is a pointer to an array of two [`Offset3D`] structures specifying the bounds
///   of the source region within [`src_subresource`].
/// - [`dst_subresource`] is the subresource to blit into.
/// - [`dst_offsets`] is a pointer to an array of two [`Offset3D`] structures specifying the bounds
///   of the destination region within [`dst_subresource`].
///# Description
///For each element of the `pRegions` array, a blit operation is performed
///for the specified source and destination regions.Valid Usage
/// - The `aspectMask` member of [`src_subresource`] and [`dst_subresource`]**must** match
/// - The `layerCount` member of [`src_subresource`] and [`dst_subresource`]**must** match
///Valid Usage (Implicit)
/// - [`src_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
/// - [`dst_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageSubresourceLayers`]
/// - [`Offset3D`]
/// - [`CmdBlitImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageBlit {
    ///[`src_subresource`] is the subresource to blit from.
    src_subresource: ImageSubresourceLayers,
    ///[`src_offsets`] is a pointer to an array of two [`Offset3D`]
    ///structures specifying the bounds of the source region within
    ///[`src_subresource`].
    src_offsets: [Offset3D; 2],
    ///[`dst_subresource`] is the subresource to blit into.
    dst_subresource: ImageSubresourceLayers,
    ///[`dst_offsets`] is a pointer to an array of two [`Offset3D`]
    ///structures specifying the bounds of the destination region within
    ///[`dst_subresource`].
    dst_offsets: [Offset3D; 2],
}
///[VkBufferImageCopy](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferImageCopy.html) - Structure specifying a buffer image copy operation
///# C Specifications
///For both [`CmdCopyBufferToImage`] and [`CmdCopyImageToBuffer`], each
///element of `pRegions` is a structure defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkBufferImageCopy {
///    VkDeviceSize                bufferOffset;
///    uint32_t                    bufferRowLength;
///    uint32_t                    bufferImageHeight;
///    VkImageSubresourceLayers    imageSubresource;
///    VkOffset3D                  imageOffset;
///    VkExtent3D                  imageExtent;
///} VkBufferImageCopy;
///```
///# Members
/// - [`buffer_offset`] is the offset in bytes from the start of the buffer object where the image
///   data is copied from or to.
/// - [`buffer_row_length`] and [`buffer_image_height`] specify in texels a subregion of a larger
///   two- or three-dimensional image in buffer memory, and control the addressing calculations. If
///   either of these values is zero, that aspect of the buffer memory is considered to be tightly
///   packed according to the [`image_extent`].
/// - [`image_subresource`] is a [`ImageSubresourceLayers`] used to specify the specific image
///   subresources of the image used for the source or destination image data.
/// - [`image_offset`] selects the initial `x`, `y`, `z` offsets in texels of the sub-region of the
///   source or destination image data.
/// - [`image_extent`] is the size in texels of the image to copy in `width`, `height` and `depth`.
///# Description
///When copying to or from a depth or stencil aspect, the data in buffer memory
///uses a layout that is a (mostly) tightly packed representation of the depth
///or stencil data.
///Specifically:
/// - data copied to or from the stencil aspect of any depth/stencil format is tightly packed with
///   one `VK_FORMAT_S8_UINT` value per texel.
/// - data copied to or from the depth aspect of a `VK_FORMAT_D16_UNORM` or
///   `VK_FORMAT_D16_UNORM_S8_UINT` format is tightly packed with one `VK_FORMAT_D16_UNORM` value
///   per texel.
/// - data copied to or from the depth aspect of a `VK_FORMAT_D32_SFLOAT` or
///   `VK_FORMAT_D32_SFLOAT_S8_UINT` format is tightly packed with one `VK_FORMAT_D32_SFLOAT` value
///   per texel.
/// - data copied to or from the depth aspect of a `VK_FORMAT_X8_D24_UNORM_PACK32` or
///   `VK_FORMAT_D24_UNORM_S8_UINT` format is packed with one 32-bit word per texel with the D24
///   value in the LSBs of the word, and undefined values in the eight MSBs.
///Because depth or stencil aspect buffer to image copies **may** require format
///conversions on some implementations, they are not supported on queues that
///do not support graphics.When copying to a depth aspect,
///and the `[`VK_EXT_depth_range_unrestricted`]` extension is not enabled,
///the data in buffer memory **must** be in the range [0,1], or the
///resulting values are undefined.Copies are done layer by layer starting with image layer
///`baseArrayLayer` member of [`image_subresource`].
///`layerCount` layers are copied from the source image or to the
///destination image.For purpose of valid usage statements here and in related copy commands, a
///*blocked image* is defined as:
/// - an image with a *single-plane*, “`_422`” format, which is treated as a format with a 2 × 1
///   compressed texel block, or
/// - a compressed image.
///Valid Usage
/// - [`buffer_row_length`]**must** be `0`, or greater than or equal to the `width` member of
///   [`image_extent`]
/// - [`buffer_image_height`]**must** be `0`, or greater than or equal to the `height` member of
///   [`image_extent`]
/// - The `aspectMask` member of [`image_subresource`]**must** only have a single bit set
///Valid Usage (Implicit)
/// - [`image_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DeviceSize`]
/// - [`Extent3D`]
/// - [`ImageSubresourceLayers`]
/// - [`Offset3D`]
/// - [`CmdCopyBufferToImage`]
/// - [`CmdCopyImageToBuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BufferImageCopy {
    ///[`buffer_offset`] is the offset in bytes from the start of the buffer
    ///object where the image data is copied from or to.
    buffer_offset: DeviceSize,
    ///[`buffer_row_length`] and [`buffer_image_height`] specify in texels a
    ///subregion of a larger two- or three-dimensional image in buffer memory,
    ///and control the addressing calculations.
    ///If either of these values is zero, that aspect of the buffer memory is
    ///considered to be tightly packed according to the [`image_extent`].
    buffer_row_length: u32,
    ///No documentation found
    buffer_image_height: u32,
    ///[`image_subresource`] is a [`ImageSubresourceLayers`] used to
    ///specify the specific image subresources of the image used for the source
    ///or destination image data.
    image_subresource: ImageSubresourceLayers,
    ///[`image_offset`] selects the initial `x`, `y`, `z` offsets
    ///in texels of the sub-region of the source or destination image data.
    image_offset: Offset3D,
    ///[`image_extent`] is the size in texels of the image to copy in
    ///`width`, `height` and `depth`.
    image_extent: Extent3D,
}
///[VkImageResolve](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageResolve.html) - Structure specifying an image resolve operation
///# C Specifications
///The [`ImageResolve`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkImageResolve {
///    VkImageSubresourceLayers    srcSubresource;
///    VkOffset3D                  srcOffset;
///    VkImageSubresourceLayers    dstSubresource;
///    VkOffset3D                  dstOffset;
///    VkExtent3D                  extent;
///} VkImageResolve;
///```
///# Members
/// - [`src_subresource`] and [`dst_subresource`] are [`ImageSubresourceLayers`] structures
///   specifying the image subresources of the images used for the source and destination image
///   data, respectively. Resolve of depth/stencil images is not supported.
/// - [`src_offset`] and [`dst_offset`] select the initial `x`, `y`, and `z` offsets in texels of
///   the sub-regions of the source and destination image data.
/// - [`extent`] is the size in texels of the source image to resolve in `width`, `height` and
///   `depth`.
///# Description
///Valid Usage
/// - The `aspectMask` member of [`src_subresource`] and [`dst_subresource`]**must** only contain
///   `VK_IMAGE_ASPECT_COLOR_BIT`
/// - The `layerCount` member of [`src_subresource`] and [`dst_subresource`]**must** match
///Valid Usage (Implicit)
/// - [`src_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
/// - [`dst_subresource`]**must** be a valid [`ImageSubresourceLayers`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Extent3D`]
/// - [`ImageSubresourceLayers`]
/// - [`Offset3D`]
/// - [`CmdResolveImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageResolve {
    ///[`src_subresource`] and [`dst_subresource`] are
    ///[`ImageSubresourceLayers`] structures specifying the image
    ///subresources of the images used for the source and destination image
    ///data, respectively.
    ///Resolve of depth/stencil images is not supported.
    src_subresource: ImageSubresourceLayers,
    ///[`src_offset`] and [`dst_offset`] select the initial `x`, `y`,
    ///and `z` offsets in texels of the sub-regions of the source and
    ///destination image data.
    src_offset: Offset3D,
    ///No documentation found
    dst_subresource: ImageSubresourceLayers,
    ///No documentation found
    dst_offset: Offset3D,
    ///[`extent`] is the size in texels of the source image to resolve in
    ///`width`, `height` and `depth`.
    extent: Extent3D,
}
///[VkShaderModuleCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkShaderModuleCreateInfo.html) - Structure specifying parameters of a newly created shader module
///# C Specifications
///The [`ShaderModuleCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkShaderModuleCreateInfo {
///    VkStructureType              sType;
///    const void*                  pNext;
///    VkShaderModuleCreateFlags    flags;
///    size_t                       codeSize;
///    const uint32_t*              pCode;
///} VkShaderModuleCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`code_size`] is the size, in bytes, of the code pointed to by [`p_code`].
/// - [`p_code`] is a pointer to code that is used to create the shader module. The type and format
///   of the code is determined from the content of the memory addressed by [`p_code`].
///# Description
///Valid Usage
/// - [`code_size`]**must** be greater than 0
/// - If [`p_code`] is a pointer to SPIR-V code, [`code_size`]**must** be a multiple of 4
/// - [`p_code`]**must** point to either valid SPIR-V code, formatted and packed as described by the
///   [Khronos SPIR-V Specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirv-spec)
///   or valid GLSL code which **must** be written to the `GL_KHR_vulkan_glsl` extension
///   specification
/// -    If [`p_code`] is a pointer to SPIR-V code, that code **must** adhere to the validation rules described by the [Validation Rules within a Module](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-module-validation) section of the [SPIR-V Environment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-capabilities) appendix
/// - If [`p_code`] is a pointer to GLSL code, it **must** be valid GLSL code written to the
///   `GL_KHR_vulkan_glsl` GLSL extension specification
/// - [`p_code`]**must** declare the `Shader` capability for SPIR-V code
/// -  [`p_code`]**must** not declare any capability that is not supported by the API, as described by the [Capabilities](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-module-validation) section of the [SPIR-V Environment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-capabilities) appendix
/// - If [`p_code`] declares any of the capabilities listed in the [SPIR-V Environment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-capabilities-table)
///   appendix, one of the corresponding requirements **must** be satisfied
/// -  [`p_code`]**must** not declare any SPIR-V extension that is not supported by the API, as described by the [Extension](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-extensions) section of the [SPIR-V Environment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-capabilities) appendix
/// - If [`p_code`] declares any of the SPIR-V extensions listed in the [SPIR-V Environment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirvenv-extensions-table)
///   appendix, one of the corresponding requirements **must** be satisfied
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`ShaderModuleValidationCacheCreateInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
/// - [`p_code`]**must** be a valid pointer to an array of <span class="katex"><span
///   aria-hidden="true" class="katex-html"><span class="base"><span class="strut"
///   style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span
///   class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.8801079999999999em;" class="vlist"><span
///   style="top:-2.6550000000000002em;"><span style="height:3em;" class="pstrut"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mtight">4</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"
///   class="pstrut"></span><span class="frac-line"
///   style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span
///   style="height:3em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
///   class="mord mtight"><span class="mord text mtight"><span class="mord textrm
///   mtight">codeSize</span></span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.345em;"><span></span></span></span></span></span><span class="mclose
///   nulldelimiter"></span></span></span></span></span>`uint32_t` values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ShaderModuleCreateFlags`]
/// - [`StructureType`]
/// - [`CreateShaderModule`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ShaderModuleCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: ShaderModuleCreateFlags,
    ///[`code_size`] is the size, in bytes, of the code pointed to by
    ///[`p_code`].
    code_size: usize,
    ///[`p_code`] is a pointer to code that is used to create the shader
    ///module.
    ///The type and format of the code is determined from the content of the
    ///memory addressed by [`p_code`].
    p_code: *mut u32,
}
///[VkDescriptorSetLayoutBinding](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutBinding.html) - Structure specifying a descriptor set layout binding
///# C Specifications
///The [`DescriptorSetLayoutBinding`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorSetLayoutBinding {
///    uint32_t              binding;
///    VkDescriptorType      descriptorType;
///    uint32_t              descriptorCount;
///    VkShaderStageFlags    stageFlags;
///    const VkSampler*      pImmutableSamplers;
///} VkDescriptorSetLayoutBinding;
///```
///# Members
/// - [`binding`] is the binding number of this entry and corresponds to a resource of the same
///   binding number in the shader stages.
/// - [`descriptor_type`] is a [`DescriptorType`] specifying which type of resource descriptors are
///   used for this binding.
/// - [`descriptor_count`] is the number of descriptors contained in the binding, accessed in a
///   shader as an array, except if [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`
///   in which case [`descriptor_count`] is the size in bytes of the inline uniform block. If
///   [`descriptor_count`] is zero this binding entry is reserved and the resource **must** not be
///   accessed from any stage via this binding within any pipeline using the set layout.
/// - [`stage_flags`] member is a bitmask of [`ShaderStageFlagBits`] specifying which pipeline
///   shader stages **can** access a resource for this binding. `VK_SHADER_STAGE_ALL` is a shorthand
///   specifying that all defined shader stages, including any additional stages defined by
///   extensions, **can** access the resource.If a shader stage is not included in [`stage_flags`],
///   then a resource **must** not be accessed from that stage via this binding within any pipeline
///   using the set layout. Other than input attachments which are limited to the fragment shader,
///   there are no limitations on what combinations of stages **can** use a descriptor binding, and
///   in particular a binding **can** be used by both graphics stages and the compute stage.
///# Description
/// - [`p_immutable_samplers`] affects initialization of samplers. If [`descriptor_type`] specifies
///   a `VK_DESCRIPTOR_TYPE_SAMPLER` or `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` type descriptor,
///   then [`p_immutable_samplers`]**can** be used to initialize a set of *immutable samplers*.
///   Immutable samplers are permanently bound into the set layout and **must** not be changed;
///   updating a `VK_DESCRIPTOR_TYPE_SAMPLER` descriptor with immutable samplers is not allowed and
///   updates to a `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` descriptor with immutable samplers
///   does not modify the samplers (the image views are updated, but the sampler updates are
///   ignored). If [`p_immutable_samplers`] is not `NULL`, then it is a pointer to an array of
///   sampler handles that will be copied into the set layout and used for the corresponding
///   binding. Only the sampler handles are copied; the sampler objects **must** not be destroyed
///   before the final use of the set layout and any descriptor pools and sets created using it. If
///   [`p_immutable_samplers`] is `NULL`, then the sampler slots are dynamic and sampler handles
///   **must** be bound into descriptor sets using this layout. If [`descriptor_type`] is not one of
///   these descriptor types, then [`p_immutable_samplers`] is ignored.
///The above layout definition allows the descriptor bindings to be specified
///sparsely such that not all binding numbers between 0 and the maximum binding
///number need to be specified in the `pBindings` array.
///Bindings that are not specified have a [`descriptor_count`] and
///[`stage_flags`] of zero, and the value of [`descriptor_type`] is
///undefined.
///However, all binding numbers between 0 and the maximum binding number in the
///[`DescriptorSetLayoutCreateInfo::p_bindings`] array **may** consume
///memory in the descriptor set layout even if not all descriptor bindings are
///used, though it **should** not consume additional memory from the descriptor
///pool.Valid Usage
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_SAMPLER` or
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, and [`descriptor_count`] is not `0` and
///   [`p_immutable_samplers`] is not `NULL`, [`p_immutable_samplers`]**must** be a valid pointer to
///   an array of [`descriptor_count`] valid [`Sampler`] handles
/// - If the [inlineUniformBlock](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-inlineUniformBlock)
///   feature is not enabled, [`descriptor_type`]**must** not be
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then
///   [`descriptor_count`]**must** be a multiple of `4`
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then
///   [`descriptor_count`]**must** be less than or equal to
///   [`PhysicalDeviceInlineUniformBlockProperties::max_inline_uniform_block_size`]
/// - If [`descriptor_count`] is not `0`, [`stage_flags`]**must** be a valid combination of
///   [`ShaderStageFlagBits`] values
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` and [`descriptor_count`] is
///   not `0`, then [`stage_flags`]**must** be `0` or `VK_SHADER_STAGE_FRAGMENT_BIT`
/// - The sampler objects indicated by [`p_immutable_samplers`]**must** not have a `borderColor`
///   with one of the values `VK_BORDER_COLOR_FLOAT_CUSTOM_EXT` or `VK_BORDER_COLOR_INT_CUSTOM_EXT`
/// - If [`descriptor_type`] is `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, then
///   [`p_immutable_samplers`]**must** be `NULL`
///Valid Usage (Implicit)
/// - [`descriptor_type`]**must** be a valid [`DescriptorType`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorSetLayoutCreateInfo`]
/// - [`DescriptorType`]
/// - [`Sampler`]
/// - [`ShaderStageFlags`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorSetLayoutBinding<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`binding`] is the binding number of this entry and corresponds to a
    ///resource of the same binding number in the shader stages.
    binding: u32,
    ///[`descriptor_type`] is a [`DescriptorType`] specifying which type
    ///of resource descriptors are used for this binding.
    descriptor_type: DescriptorType,
    ///[`descriptor_count`] is the number of descriptors contained in the
    ///binding, accessed in a shader as an
    ///array, except if [`descriptor_type`] is
    ///`VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` in which case
    ///[`descriptor_count`] is the size in bytes of the inline uniform block.
    ///If [`descriptor_count`] is zero this binding entry is reserved and the
    ///resource **must** not be accessed from any stage via this binding within
    ///any pipeline using the set layout.
    descriptor_count: u32,
    ///[`stage_flags`] member is a bitmask of [`ShaderStageFlagBits`]
    ///specifying which pipeline shader stages **can** access a resource for this
    ///binding.
    ///`VK_SHADER_STAGE_ALL` is a shorthand specifying that all defined
    ///shader stages, including any additional stages defined by extensions,
    ///**can** access the resource.If a shader stage is not included in [`stage_flags`], then a
    /// resource **must** not be accessed from that stage via this binding within any pipeline
    /// using the set layout.
    ///Other than input attachments which are limited to the fragment shader, there
    ///are no limitations on what combinations of stages **can** use a descriptor
    ///binding, and in particular a binding **can** be used by both graphics stages
    ///and the compute stage.
    stage_flags: ShaderStageFlags,
    ///No documentation found
    p_immutable_samplers: *mut Sampler,
}
///[VkDescriptorSetLayoutCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html) - Structure specifying parameters of a newly created descriptor set layout
///# C Specifications
///Information about the descriptor set layout is passed in a
///[`DescriptorSetLayoutCreateInfo`] structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorSetLayoutCreateInfo {
///    VkStructureType                        sType;
///    const void*                            pNext;
///    VkDescriptorSetLayoutCreateFlags       flags;
///    uint32_t                               bindingCount;
///    const VkDescriptorSetLayoutBinding*    pBindings;
///} VkDescriptorSetLayoutCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`DescriptorSetLayoutCreateFlagBits`] specifying options for
///   descriptor set layout creation.
/// - [`binding_count`] is the number of elements in [`p_bindings`].
/// - [`p_bindings`] is a pointer to an array of [`DescriptorSetLayoutBinding`] structures.
///# Description
///Valid Usage
/// - The [`DescriptorSetLayoutBinding::binding`] members of the elements of the [`p_bindings`]
///   array **must** each have different values
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR`, then all
///   elements of [`p_bindings`]**must** not have a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` or `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR`, then all
///   elements of [`p_bindings`]**must** not have a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR`, then the
///   total number of elements of all bindings **must** be less than or equal to
///   [`PhysicalDevicePushDescriptorPropertiesKHR::max_push_descriptors`]
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR`,
///   [`flags`]**must** not contain `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE`
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR`,
///   [`p_bindings`]**must** not have a `descriptorType` of `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`
/// - If any binding has the `VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT` bit set,
///   [`flags`]**must** include `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT`
/// - If any binding has the `VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT` bit set, then all
///   bindings **must** not have `descriptorType` of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT`,
///   [`flags`]**must** not contain `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE`
/// - If any binding has a `descriptorType` of `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, then a
///   [`MutableDescriptorTypeCreateInfoVALVE`]**must** be present in the [`p_next`] chain
/// - If a binding has a `descriptorType` value of `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, then
///   `pImmutableSamplers`**must** be `NULL`
/// - If [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE::mutable_descriptor_type`] is not
///   enabled, [`p_bindings`]**must** not contain a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`
/// - If [`flags`] contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE`,
///   [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE::mutable_descriptor_type`]**must** be
///   enabled
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`DescriptorSetLayoutBindingFlagsCreateInfo`] or [`MutableDescriptorTypeCreateInfoVALVE`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`DescriptorSetLayoutCreateFlagBits`] values
/// - If [`binding_count`] is not `0`, [`p_bindings`]**must** be a valid pointer to an array of
///   [`binding_count`] valid [`DescriptorSetLayoutBinding`] structures
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorSetLayoutBinding`]
/// - [`DescriptorSetLayoutCreateFlags`]
/// - [`StructureType`]
/// - [`CreateDescriptorSetLayout`]
/// - [`GetDescriptorSetLayoutSupport`]
/// - [`GetDescriptorSetLayoutSupportKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorSetLayoutCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask
    ///of [`DescriptorSetLayoutCreateFlagBits`]
    ///specifying options for descriptor set layout creation.
    flags: DescriptorSetLayoutCreateFlags,
    ///[`binding_count`] is the number of elements in [`p_bindings`].
    binding_count: u32,
    ///[`p_bindings`] is a pointer to an array of
    ///[`DescriptorSetLayoutBinding`] structures.
    p_bindings: *mut DescriptorSetLayoutBinding<'lt>,
}
///[VkDescriptorPoolSize](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolSize.html) - Structure specifying descriptor pool size
///# C Specifications
///The [`DescriptorPoolSize`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorPoolSize {
///    VkDescriptorType    type;
///    uint32_t            descriptorCount;
///} VkDescriptorPoolSize;
///```
///# Members
/// - [`type_`] is the type of descriptor.
/// - [`descriptor_count`] is the number of descriptors of that type to allocate. If [`type_`] is
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`descriptor_count`] is the number of bytes to
///   allocate for descriptors of this type.
///# Description
///Valid Usage
/// - [`descriptor_count`]**must** be greater than `0`
/// - If [`type_`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then [`descriptor_count`]**must** be
///   a multiple of `4`
///Valid Usage (Implicit)
/// - [`type_`]**must** be a valid [`DescriptorType`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorPoolCreateInfo`]
/// - [`DescriptorType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorPoolSize {
    ///[`type_`] is the type of descriptor.
    type_: DescriptorType,
    ///[`descriptor_count`] is the number of descriptors of that type to
    ///allocate.
    ///If [`type_`] is `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` then
    ///[`descriptor_count`] is the number of bytes to allocate for descriptors
    ///of this type.
    descriptor_count: u32,
}
///[VkDescriptorPoolCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolCreateInfo.html) - Structure specifying parameters of a newly created descriptor pool
///# C Specifications
///Additional information about the pool is passed in a
///[`DescriptorPoolCreateInfo`] structure:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorPoolCreateInfo {
///    VkStructureType                sType;
///    const void*                    pNext;
///    VkDescriptorPoolCreateFlags    flags;
///    uint32_t                       maxSets;
///    uint32_t                       poolSizeCount;
///    const VkDescriptorPoolSize*    pPoolSizes;
///} VkDescriptorPoolCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`DescriptorPoolCreateFlagBits`] specifying certain supported
///   operations on the pool.
/// - [`max_sets`] is the maximum number of descriptor sets that **can** be allocated from the pool.
/// - [`pool_size_count`] is the number of elements in [`p_pool_sizes`].
/// - [`p_pool_sizes`] is a pointer to an array of [`DescriptorPoolSize`] structures, each
///   containing a descriptor type and number of descriptors of that type to be allocated in the
///   pool.
///# Description
///If multiple [`DescriptorPoolSize`] structures containing the same
///descriptor type appear in the [`p_pool_sizes`] array then the pool will be
///created with enough storage for the total number of descriptors of each
///type.Fragmentation of a descriptor pool is possible and **may** lead to descriptor
///set allocation failures.
///A failure due to fragmentation is defined as failing a descriptor set
///allocation despite the sum of all outstanding descriptor set allocations
///from the pool plus the requested allocation requiring no more than the total
///number of descriptors requested at pool creation.
///Implementations provide certain guarantees of when fragmentation **must** not
///cause allocation failure, as described below.If a descriptor pool has not had any descriptor
/// sets freed since it was
///created or most recently reset then fragmentation **must** not cause an
///allocation failure (note that this is always the case for a pool created
///without the `VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT` bit
///set).
///Additionally, if all sets allocated from the pool since it was created or
///most recently reset use the same number of descriptors (of each type) and
///the requested allocation also uses that same number of descriptors (of each
///type), then fragmentation **must** not cause an allocation failure.If an allocation failure
/// occurs due to fragmentation, an application **can**
///create an additional descriptor pool to perform further descriptor set
///allocations.If [`flags`] has the `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT`
///bit set, descriptor pool creation **may** fail with the error
///`VK_ERROR_FRAGMENTATION` if the total number of descriptors across all
///pools (including this one) created with this bit set exceeds
///`maxUpdateAfterBindDescriptorsInAllPools`, or if fragmentation of the
///underlying hardware resources occurs.If a [`p_pool_sizes`][i]::`type` is
///`VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, a
///[`MutableDescriptorTypeCreateInfoVALVE`] struct in the [`p_next`] chain
///**can** be used to specify which mutable descriptor types **can** be allocated
///from the pool.
///If present in the [`p_next`] chain,
///[`MutableDescriptorTypeCreateInfoVALVE::p_mutable_descriptor_type_lists`][i]
///specifies which kind of `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE` descriptors
///**can** be allocated from this pool entry.
///If [`MutableDescriptorTypeCreateInfoVALVE`] does not exist in the
///[`p_next`] chain, or
///[`MutableDescriptorTypeCreateInfoVALVE::p_mutable_descriptor_type_lists`][i]
///is out of range, the descriptor pool allocates enough memory to be able to
///allocate a `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE` descriptor with any
///supported [`DescriptorType`] as a mutable descriptor.
///A mutable descriptor **can** be allocated from a pool entry if the type list in
///[`DescriptorSetLayoutCreateInfo`] is a subset of the type list declared
///in the descriptor pool, or if the pool entry is created without a descriptor
///type list.
///Multiple [`p_pool_sizes`] entries with
///`VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`**can** be declared.
///When multiple such pool entries are present in [`p_pool_sizes`], they
///specify sets of supported descriptor types which either fully overlap,
///partially overlap, or are disjoint.
///Two sets fully overlap if the sets of supported descriptor types are equal.
///If the sets are not disjoint they partially overlap.
///A pool entry without a [`MutableDescriptorTypeListVALVE`] assigned to it
///is considered to partially overlap any other pool entry which has a
///[`MutableDescriptorTypeListVALVE`] assigned to it.
///The application **must** ensure that partial overlap does not exist in
///[`p_pool_sizes`].Valid Usage
/// - [`max_sets`]**must** be greater than `0`
/// - If [`flags`] has the `VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE` bit set, then the
///   `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT` bit **must** not be set
/// - If [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE::mutable_descriptor_type`] is not
///   enabled, [`p_pool_sizes`]**must** not contain a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`
/// - If [`flags`] has the `VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE` bit set,
///   [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE::mutable_descriptor_type`]**must** be
///   enabled
/// - If [`p_pool_sizes`] contains a `descriptorType` of `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE`, any
///   other `VK_DESCRIPTOR_TYPE_MUTABLE_VALVE` element in [`p_pool_sizes`]**must** not have sets of
///   supported descriptor types which partially overlap
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`DescriptorPoolInlineUniformBlockCreateInfo`] or [`MutableDescriptorTypeCreateInfoVALVE`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`DescriptorPoolCreateFlagBits`] values
/// - [`p_pool_sizes`]**must** be a valid pointer to an array of [`pool_size_count`] valid
///   [`DescriptorPoolSize`] structures
/// - [`pool_size_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorPoolCreateFlags`]
/// - [`DescriptorPoolSize`]
/// - [`StructureType`]
/// - [`CreateDescriptorPool`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorPoolCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`DescriptorPoolCreateFlagBits`]
    ///specifying certain supported operations on the pool.
    flags: DescriptorPoolCreateFlags,
    ///[`max_sets`] is the maximum number of descriptor sets that **can** be
    ///allocated from the pool.
    max_sets: u32,
    ///[`pool_size_count`] is the number of elements in [`p_pool_sizes`].
    pool_size_count: u32,
    ///[`p_pool_sizes`] is a pointer to an array of [`DescriptorPoolSize`]
    ///structures, each containing a descriptor type and number of descriptors
    ///of that type to be allocated in the pool.
    p_pool_sizes: *mut DescriptorPoolSize,
}
///[VkDescriptorSetAllocateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetAllocateInfo.html) - Structure specifying the allocation parameters for descriptor sets
///# C Specifications
///The [`DescriptorSetAllocateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDescriptorSetAllocateInfo {
///    VkStructureType                 sType;
///    const void*                     pNext;
///    VkDescriptorPool                descriptorPool;
///    uint32_t                        descriptorSetCount;
///    const VkDescriptorSetLayout*    pSetLayouts;
///} VkDescriptorSetAllocateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`descriptor_pool`] is the pool which the sets will be allocated from.
/// - [`descriptor_set_count`] determines the number of descriptor sets to be allocated from the
///   pool.
/// - [`p_set_layouts`] is a pointer to an array of descriptor set layouts, with each member
///   specifying how the corresponding descriptor set is allocated.
///# Description
///Valid Usage
/// - Each element of [`p_set_layouts`]**must** not have been created with
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR` set
/// - If any element of [`p_set_layouts`] was created with the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set,
///   [`descriptor_pool`]**must** have been created with the
///   `VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT` flag set
/// - If any element of [`p_set_layouts`] was created with the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE` bit set,
///   [`descriptor_pool`]**must** have been created with the
///   `VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE` flag set
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`DescriptorSetVariableDescriptorCountAllocateInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`descriptor_pool`]**must** be a valid [`DescriptorPool`] handle
/// - [`p_set_layouts`]**must** be a valid pointer to an array of [`descriptor_set_count`] valid
///   [`DescriptorSetLayout`] handles
/// - [`descriptor_set_count`]**must** be greater than `0`
/// - Both of [`descriptor_pool`], and the elements of [`p_set_layouts`]**must** have been created,
///   allocated, or retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorPool`]
/// - [`DescriptorSetLayout`]
/// - [`StructureType`]
/// - [`AllocateDescriptorSets`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorSetAllocateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`descriptor_pool`] is the pool which the sets will be allocated from.
    descriptor_pool: DescriptorPool,
    ///[`descriptor_set_count`] determines the number of descriptor sets to be
    ///allocated from the pool.
    descriptor_set_count: u32,
    ///[`p_set_layouts`] is a pointer to an array of descriptor set layouts,
    ///with each member specifying how the corresponding descriptor set is
    ///allocated.
    p_set_layouts: *mut DescriptorSetLayout,
}
///[VkSpecializationMapEntry](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSpecializationMapEntry.html) - Structure specifying a specialization map entry
///# C Specifications
///The [`SpecializationMapEntry`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSpecializationMapEntry {
///    uint32_t    constantID;
///    uint32_t    offset;
///    size_t      size;
///} VkSpecializationMapEntry;
///```
///# Members
/// - [`constant_id`] is the ID of the specialization constant in SPIR-V.
/// - [`offset`] is the byte offset of the specialization constant value within the supplied data
///   buffer.
/// - [`size`] is the byte size of the specialization constant value within the supplied data
///   buffer.
///# Description
///If a [`constant_id`] value is not a specialization constant ID used in the
///shader, that map entry does not affect the behavior of the pipeline.Valid Usage
/// - For a [`constant_id`] specialization constant declared in a shader, [`size`]**must** match the
///   byte size of the [`constant_id`]. If the specialization constant is of type `boolean`,
///   [`size`]**must** be the byte size of [`Bool32`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SpecializationInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SpecializationMapEntry {
    ///[`constant_id`] is the ID of the specialization constant in SPIR-V.
    constant_id: u32,
    ///[`offset`] is the byte offset of the specialization constant value
    ///within the supplied data buffer.
    offset: u32,
    ///[`size`] is the byte size of the specialization constant value within
    ///the supplied data buffer.
    size: usize,
}
///[VkSpecializationInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSpecializationInfo.html) - Structure specifying specialization information
///# C Specifications
///The [`SpecializationInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSpecializationInfo {
///    uint32_t                           mapEntryCount;
///    const VkSpecializationMapEntry*    pMapEntries;
///    size_t                             dataSize;
///    const void*                        pData;
///} VkSpecializationInfo;
///```
///# Members
/// - [`map_entry_count`] is the number of entries in the [`p_map_entries`] array.
/// - [`p_map_entries`] is a pointer to an array of [`SpecializationMapEntry`] structures which map
///   constant IDs to offsets in [`p_data`].
/// - [`data_size`] is the byte size of the [`p_data`] buffer.
/// - [`p_data`] contains the actual constant values to specialize with.
///# Description
///Valid Usage
/// - The `offset` member of each element of [`p_map_entries`]**must** be less than [`data_size`]
/// - The `size` member of each element of [`p_map_entries`]**must** be less than or equal to
///   [`data_size`] minus `offset`
/// - The `constantID` value of each element of [`p_map_entries`]**must** be unique within
///   [`p_map_entries`]
///Valid Usage (Implicit)
/// - If [`map_entry_count`] is not `0`, [`p_map_entries`]**must** be a valid pointer to an array of
///   [`map_entry_count`] valid [`SpecializationMapEntry`] structures
/// - If [`data_size`] is not `0`, [`p_data`]**must** be a valid pointer to an array of
///   [`data_size`] bytes
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineShaderStageCreateInfo`]
/// - [`SpecializationMapEntry`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SpecializationInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`map_entry_count`] is the number of entries in the [`p_map_entries`]
    ///array.
    map_entry_count: u32,
    ///[`p_map_entries`] is a pointer to an array of
    ///[`SpecializationMapEntry`] structures which map constant IDs to
    ///offsets in [`p_data`].
    p_map_entries: *mut SpecializationMapEntry,
    ///[`data_size`] is the byte size of the [`p_data`] buffer.
    data_size: usize,
    ///[`p_data`] contains the actual constant values to specialize with.
    p_data: *mut c_void,
}
///[VkPipelineShaderStageCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageCreateInfo.html) - Structure specifying parameters of a newly created pipeline shader stage
///# C Specifications
///The [`PipelineShaderStageCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineShaderStageCreateInfo {
///    VkStructureType                     sType;
///    const void*                         pNext;
///    VkPipelineShaderStageCreateFlags    flags;
///    VkShaderStageFlagBits               stage;
///    VkShaderModule                      module;
///    const char*                         pName;
///    const VkSpecializationInfo*         pSpecializationInfo;
///} VkPipelineShaderStageCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`PipelineShaderStageCreateFlagBits`] specifying how the pipeline
///   shader stage will be generated.
/// - [`stage`] is a [`ShaderStageFlagBits`] value specifying a single pipeline stage.
/// - [`module`] is a [`ShaderModule`] object containing the shader for this stage.
/// - [`p_name`] is a pointer to a null-terminated UTF-8 string specifying the entry point name of
///   the shader for this stage.
/// - [`p_specialization_info`] is a pointer to a [`SpecializationInfo`] structure, as described in [Specialization Constants](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipelines-specialization-constants), or `NULL`.
///# Description
///Valid Usage
/// - If the [geometry shaders](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-geometryShader)
///   feature is not enabled, [`stage`]**must** not be `VK_SHADER_STAGE_GEOMETRY_BIT`
/// - If the [tessellation shaders](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-tessellationShader)
///   feature is not enabled, [`stage`]**must** not be `VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT` or
///   `VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT`
/// - If the [mesh shader](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-meshShader)
///   feature is not enabled, [`stage`]**must** not be `VK_SHADER_STAGE_MESH_BIT_NV`
/// - If the [task shader](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-taskShader)
///   feature is not enabled, [`stage`]**must** not be `VK_SHADER_STAGE_TASK_BIT_NV`
/// - [`stage`]**must** not be `VK_SHADER_STAGE_ALL_GRAPHICS`, or `VK_SHADER_STAGE_ALL`
/// - [`p_name`]**must** be the name of an `OpEntryPoint` in [`module`] with an execution model that
///   matches [`stage`]
/// - If the identified entry point includes any variable in its interface that is declared with the
///   `ClipDistance``BuiltIn` decoration, that variable **must** not have an array size greater than
///   [`PhysicalDeviceLimits::max_clip_distances`]
/// - If the identified entry point includes any variable in its interface that is declared with the
///   `CullDistance``BuiltIn` decoration, that variable **must** not have an array size greater than
///   [`PhysicalDeviceLimits::max_cull_distances`]
/// - If the identified entry point includes any variables in its interface that are declared with
///   the `ClipDistance` or `CullDistance``BuiltIn` decoration, those variables **must** not have
///   array sizes which sum to more than
///   [`PhysicalDeviceLimits::max_combined_clip_and_cull_distances`]
/// - If the identified entry point includes any variable in its interface that is declared with the
///   [`SampleMask`]`BuiltIn` decoration, that variable **must** not have an array size greater than
///   [`PhysicalDeviceLimits::max_sample_mask_words`]
/// - If [`stage`] is `VK_SHADER_STAGE_VERTEX_BIT`, the identified entry point **must** not include
///   any input variable in its interface that is decorated with `CullDistance`
/// - If [`stage`] is `VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT` or
///   `VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT`, and the identified entry point has an
///   `OpExecutionMode` instruction specifying a patch size with `OutputVertices`, the patch size
///   **must** be greater than `0` and less than or equal to
///   [`PhysicalDeviceLimits::max_tessellation_patch_size`]
/// - If [`stage`] is `VK_SHADER_STAGE_GEOMETRY_BIT`, the identified entry point **must** have an
///   `OpExecutionMode` instruction specifying a maximum output vertex count that is greater than
///   `0` and less than or equal to [`PhysicalDeviceLimits::max_geometry_output_vertices`]
/// - If [`stage`] is `VK_SHADER_STAGE_GEOMETRY_BIT`, the identified entry point **must** have an
///   `OpExecutionMode` instruction specifying an invocation count that is greater than `0` and less
///   than or equal to [`PhysicalDeviceLimits::max_geometry_shader_invocations`]
/// - If [`stage`] is a [pre-rasterization shader stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and the identified entry point writes to `Layer` for any primitive, it **must** write the same
///   value to `Layer` for all vertices of a given primitive
/// - If [`stage`] is a [pre-rasterization shader stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and the identified entry point writes to `ViewportIndex` for any primitive, it **must** write
///   the same value to `ViewportIndex` for all vertices of a given primitive
/// - If [`stage`] is `VK_SHADER_STAGE_FRAGMENT_BIT`, the identified entry point **must** not
///   include any output variables in its interface decorated with `CullDistance`
/// - If [`stage`] is `VK_SHADER_STAGE_FRAGMENT_BIT`, and the identified entry point writes to
///   `FragDepth` in any execution path, it **must** write to `FragDepth` in all execution paths
/// - If [`stage`] is `VK_SHADER_STAGE_FRAGMENT_BIT`, and the identified entry point writes to
///   `FragStencilRefEXT` in any execution path, it **must** write to `FragStencilRefEXT` in all
///   execution paths
/// - If [`stage`] is `VK_SHADER_STAGE_MESH_BIT_NV`, the identified entry point **must** have an
///   `OpExecutionMode` instruction specifying a maximum output vertex count, `OutputVertices`, that
///   is greater than `0` and less than or equal to
///   [`PhysicalDeviceMeshShaderPropertiesNV::max_mesh_output_vertices`]
/// - If [`stage`] is `VK_SHADER_STAGE_MESH_BIT_NV`, the identified entry point **must** have an
///   `OpExecutionMode` instruction specifying a maximum output primitive count,
///   `OutputPrimitivesNV`, that is greater than `0` and less than or equal to
///   [`PhysicalDeviceMeshShaderPropertiesNV::max_mesh_output_primitives`]
/// -    If [`flags`] has the `VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT` flag set, the [`subgroupSizeControl`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-subgroupSizeControl) feature **must** be enabled
/// -    If [`flags`] has the `VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT` flag set, the [`computeFullSubgroups`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-computeFullSubgroups) feature **must** be enabled
/// - If a [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`] structure is included in the
///   [`p_next`] chain, [`flags`]**must** not have the
///   `VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT` flag set
/// -    If a [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`] structure is included in the [`p_next`] chain, the [`subgroupSizeControl`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-subgroupSizeControl) feature **must** be enabled, and [`stage`]**must** be a valid bit specified in [`requiredSubgroupSizeStages`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-requiredSubgroupSizeStages)
/// -    If a [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`] structure is included in the [`p_next`] chain and [`stage`] is `VK_SHADER_STAGE_COMPUTE_BIT`, the local workgroup size of the shader **must** be less than or equal to the product of [`PipelineShaderStageRequiredSubgroupSizeCreateInfo::required_subgroup_size`] and [`maxComputeWorkgroupSubgroups`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxComputeWorkgroupSubgroups)
/// - If a [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`] structure is included in the
///   [`p_next`] chain, and [`flags`] has the
///   `VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT` flag set, the local workgroup
///   size in the X dimension of the pipeline **must** be a multiple of
///   [`PipelineShaderStageRequiredSubgroupSizeCreateInfo::required_subgroup_size`]
/// -    If [`flags`] has both the `VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT` and `VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT` flags set, the local workgroup size in the X dimension of the pipeline **must** be a multiple of [`maxSubgroupSize`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxSubgroupSize)
/// - If [`flags`] has the `VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT` flag set and
///   [`flags`] does not have the `VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT` flag
///   set and no [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`] structure is included in the [`p_next`]
///   chain, the local workgroup size in the X dimension of the pipeline **must** be a multiple of [`subgroupSize`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-subgroup-size)
/// -    The SPIR-V code that was used to create [`module`]**must** be valid as described by the [Khronos SPIR-V Specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#spirv-spec) after applying the specializations provided in [`p_specialization_info`], if any, and then converting all specialization constants into fixed constants
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`PipelineShaderStageCreateFlagBits`] values
/// - [`stage`]**must** be a valid [`ShaderStageFlagBits`] value
/// - [`module`]**must** be a valid [`ShaderModule`] handle
/// - [`p_name`]**must** be a null-terminated UTF-8 string
/// - If [`p_specialization_info`] is not `NULL`, [`p_specialization_info`]**must** be a valid
///   pointer to a valid [`SpecializationInfo`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ComputePipelineCreateInfo`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`GraphicsShaderGroupCreateInfoNV`]
/// - [`PipelineShaderStageCreateFlags`]
/// - [`RayTracingPipelineCreateInfoKHR`]
/// - [`RayTracingPipelineCreateInfoNV`]
/// - [`ShaderModule`]
/// - [`ShaderStageFlagBits`]
/// - [`SpecializationInfo`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineShaderStageCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`PipelineShaderStageCreateFlagBits`]
    ///specifying how the pipeline shader stage will be generated.
    flags: PipelineShaderStageCreateFlags,
    ///[`stage`] is a [`ShaderStageFlagBits`] value specifying a single
    ///pipeline stage.
    stage: ShaderStageFlagBits,
    ///[`module`] is a [`ShaderModule`] object containing the shader for
    ///this stage.
    module: ShaderModule,
    ///[`p_name`] is a pointer to a null-terminated UTF-8 string specifying
    ///the entry point name of the shader for this stage.
    p_name: &'lt CStr,
    ///[`p_specialization_info`] is a pointer to a [`SpecializationInfo`]
    ///structure, as described in
    ///[Specialization Constants](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipelines-specialization-constants), or
    ///`NULL`.
    p_specialization_info: *mut SpecializationInfo<'lt>,
}
///[VkComputePipelineCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkComputePipelineCreateInfo.html) - Structure specifying parameters of a newly created compute pipeline
///# C Specifications
///The [`ComputePipelineCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkComputePipelineCreateInfo {
///    VkStructureType                    sType;
///    const void*                        pNext;
///    VkPipelineCreateFlags              flags;
///    VkPipelineShaderStageCreateInfo    stage;
///    VkPipelineLayout                   layout;
///    VkPipeline                         basePipelineHandle;
///    int32_t                            basePipelineIndex;
///} VkComputePipelineCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`PipelineCreateFlagBits`] specifying how the pipeline will be
///   generated.
/// - [`stage`] is a [`PipelineShaderStageCreateInfo`] structure describing the compute shader.
/// - [`layout`] is the description of binding locations used by both the pipeline and descriptor
///   sets used with the pipeline.
/// - [`base_pipeline_handle`] is a pipeline to derive from
/// - [`base_pipeline_index`] is an index into the `pCreateInfos` parameter to use as a pipeline to
///   derive from
///# Description
///The parameters [`base_pipeline_handle`] and [`base_pipeline_index`] are
///described in more detail in [Pipeline
///Derivatives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipelines-pipeline-derivatives).Valid Usage
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_index`] is -1, [`base_pipeline_handle`]**must** be a valid handle to a compute
///   [`Pipeline`]
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_handle`] is [`crate::utils::Handle::null`], [`base_pipeline_index`]**must** be
///   a valid index into the calling command’s `pCreateInfos` parameter
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_index`] is not -1, [`base_pipeline_handle`]**must** be
///   [`crate::utils::Handle::null`]
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_handle`] is not [`crate::utils::Handle::null`],
///   [`base_pipeline_index`]**must** be -1
/// - The [`stage`] member of [`stage`]**must** be `VK_SHADER_STAGE_COMPUTE_BIT`
/// -    The shader code for the entry point identified by [`stage`] and the rest of the state identified by this structure **must** adhere to the pipeline linking rules described in the [Shader Interfaces](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces) chapter
/// - [`layout`]**must** be [consistent](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-pipelinelayout-consistency)
///   with the layout of the compute shader specified in [`stage`]
/// - The number of resources in [`layout`] accessible to the compute shader stage **must** be less
///   than or equal to [`PhysicalDeviceLimits::max_per_stage_resources`]
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_LIBRARY_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR`
/// - [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV`
/// - If the [`pipelineCreationCacheControl`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineCreationCacheControl)
///   feature is not enabled, [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT` or
///   `VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`PipelineCompilerControlCreateInfoAMD`],
///   [`PipelineCreationFeedbackCreateInfo`], or [`SubpassShadingPipelineCreateInfoHUAWEI`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`PipelineCreateFlagBits`] values
/// - [`stage`]**must** be a valid [`PipelineShaderStageCreateInfo`] structure
/// - [`layout`]**must** be a valid [`PipelineLayout`] handle
/// - Both of [`base_pipeline_handle`], and [`layout`] that are valid handles of non-ignored
///   parameters **must** have been created, allocated, or retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Pipeline`]
/// - [`PipelineCreateFlags`]
/// - [`PipelineLayout`]
/// - [`PipelineShaderStageCreateInfo`]
/// - [`StructureType`]
/// - [`CreateComputePipelines`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ComputePipelineCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`PipelineCreateFlagBits`] specifying
    ///how the pipeline will be generated.
    flags: PipelineCreateFlags,
    ///[`stage`] is a [`PipelineShaderStageCreateInfo`] structure
    ///describing the compute shader.
    stage: PipelineShaderStageCreateInfo<'lt>,
    ///[`layout`] is the description of binding locations used by both the
    ///pipeline and descriptor sets used with the pipeline.
    layout: PipelineLayout,
    ///[`base_pipeline_handle`] is a pipeline to derive from
    base_pipeline_handle: Pipeline,
    ///[`base_pipeline_index`] is an index into the `pCreateInfos`
    ///parameter to use as a pipeline to derive from
    base_pipeline_index: i32,
}
///[VkVertexInputBindingDescription](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVertexInputBindingDescription.html) - Structure specifying vertex input binding description
///# C Specifications
///Each vertex input binding is specified by the
///[`VertexInputBindingDescription`] structure, defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkVertexInputBindingDescription {
///    uint32_t             binding;
///    uint32_t             stride;
///    VkVertexInputRate    inputRate;
///} VkVertexInputBindingDescription;
///```
///# Members
/// - [`binding`] is the binding number that this structure describes.
/// - [`stride`] is the byte stride between consecutive elements within the buffer.
/// - [`input_rate`] is a [`VertexInputRate`] value specifying whether vertex attribute addressing
///   is a function of the vertex index or of the instance index.
///# Description
///Valid Usage
/// - [`binding`]**must** be less than [`PhysicalDeviceLimits::max_vertex_input_bindings`]
/// - [`stride`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_vertex_input_binding_stride`]
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, [`stride`]**must** be a multiple
///   of, and at least as large as,
///   [`PhysicalDevicePortabilitySubsetPropertiesKHR::min_vertex_input_binding_stride_alignment`]
///Valid Usage (Implicit)
/// - [`input_rate`]**must** be a valid [`VertexInputRate`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineVertexInputStateCreateInfo`]
/// - [`VertexInputRate`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct VertexInputBindingDescription {
    ///[`binding`] is the binding number that this structure describes.
    binding: u32,
    ///[`stride`] is the byte stride between consecutive elements within the
    ///buffer.
    stride: u32,
    ///[`input_rate`] is a [`VertexInputRate`] value specifying whether
    ///vertex attribute addressing is a function of the vertex index or of the
    ///instance index.
    input_rate: VertexInputRate,
}
///[VkVertexInputAttributeDescription](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVertexInputAttributeDescription.html) - Structure specifying vertex input attribute description
///# C Specifications
///Each vertex input attribute is specified by the
///[`VertexInputAttributeDescription`] structure, defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkVertexInputAttributeDescription {
///    uint32_t    location;
///    uint32_t    binding;
///    VkFormat    format;
///    uint32_t    offset;
///} VkVertexInputAttributeDescription;
///```
///# Members
/// - [`location`] is the shader input location number for this attribute.
/// - [`binding`] is the binding number which this attribute takes its data from.
/// - [`format`] is the size and type of the vertex attribute data.
/// - [`offset`] is a byte offset of this attribute relative to the start of an element in the
///   vertex input binding.
///# Description
///Valid Usage
/// - [`location`]**must** be less than [`PhysicalDeviceLimits::max_vertex_input_attributes`]
/// - [`binding`]**must** be less than [`PhysicalDeviceLimits::max_vertex_input_bindings`]
/// - [`offset`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_vertex_input_attribute_offset`]
/// - [`format`]**must** be allowed as a vertex buffer format, as specified by the
///   `VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT` flag in [`FormatProperties::buffer_features`] returned
///   by [`GetPhysicalDeviceFormatProperties`]
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::vertex_attribute_access_beyond_stride`] is
///   [`FALSE`], the sum of [`offset`] plus the size of the vertex attribute data described by
///   [`format`]**must** not be greater than `stride` in the [`VertexInputBindingDescription`]
///   referenced in [`binding`]
///Valid Usage (Implicit)
/// - [`format`]**must** be a valid [`Format`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Format`]
/// - [`PipelineVertexInputStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct VertexInputAttributeDescription {
    ///[`location`] is the shader input location number for this attribute.
    location: u32,
    ///[`binding`] is the binding number which this attribute takes its data
    ///from.
    binding: u32,
    ///[`format`] is the size and type of the vertex attribute data.
    format: Format,
    ///[`offset`] is a byte offset of this attribute relative to the start of
    ///an element in the vertex input binding.
    offset: u32,
}
///[VkPipelineVertexInputStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineVertexInputStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline vertex input state
///# C Specifications
///The [`PipelineVertexInputStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineVertexInputStateCreateInfo {
///    VkStructureType                             sType;
///    const void*                                 pNext;
///    VkPipelineVertexInputStateCreateFlags       flags;
///    uint32_t                                    vertexBindingDescriptionCount;
///    const VkVertexInputBindingDescription*      pVertexBindingDescriptions;
///    uint32_t                                    vertexAttributeDescriptionCount;
///    const VkVertexInputAttributeDescription*    pVertexAttributeDescriptions;
///} VkPipelineVertexInputStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`vertex_binding_description_count`] is the number of vertex binding descriptions provided in
///   [`p_vertex_binding_descriptions`].
/// - [`p_vertex_binding_descriptions`] is a pointer to an array of
///   [`VertexInputBindingDescription`] structures.
/// - [`vertex_attribute_description_count`] is the number of vertex attribute descriptions provided
///   in [`p_vertex_attribute_descriptions`].
/// - [`p_vertex_attribute_descriptions`] is a pointer to an array of
///   [`VertexInputAttributeDescription`] structures.
///# Description
///Valid Usage
/// - [`vertex_binding_description_count`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_vertex_input_bindings`]
/// - [`vertex_attribute_description_count`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_vertex_input_attributes`]
/// - For every `binding` specified by each element of [`p_vertex_attribute_descriptions`], a
///   [`VertexInputBindingDescription`]**must** exist in [`p_vertex_binding_descriptions`] with the
///   same value of `binding`
/// - All elements of [`p_vertex_binding_descriptions`]**must** describe distinct binding numbers
/// - All elements of [`p_vertex_attribute_descriptions`]**must** describe distinct attribute
///   locations
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`PipelineVertexInputDivisorStateCreateInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
/// - If [`vertex_binding_description_count`] is not `0`, [`p_vertex_binding_descriptions`]**must**
///   be a valid pointer to an array of [`vertex_binding_description_count`] valid
///   [`VertexInputBindingDescription`] structures
/// - If [`vertex_attribute_description_count`] is not `0`,
///   [`p_vertex_attribute_descriptions`]**must** be a valid pointer to an array of
///   [`vertex_attribute_description_count`] valid [`VertexInputAttributeDescription`] structures
///# Related
/// - [`crate::vulkan1_0`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`GraphicsShaderGroupCreateInfoNV`]
/// - [`PipelineVertexInputStateCreateFlags`]
/// - [`StructureType`]
/// - [`VertexInputAttributeDescription`]
/// - [`VertexInputBindingDescription`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineVertexInputStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineVertexInputStateCreateFlags,
    ///[`vertex_binding_description_count`] is the number of vertex binding
    ///descriptions provided in [`p_vertex_binding_descriptions`].
    vertex_binding_description_count: u32,
    ///[`p_vertex_binding_descriptions`] is a pointer to an array of
    ///[`VertexInputBindingDescription`] structures.
    p_vertex_binding_descriptions: *mut VertexInputBindingDescription,
    ///[`vertex_attribute_description_count`] is the number of vertex attribute
    ///descriptions provided in [`p_vertex_attribute_descriptions`].
    vertex_attribute_description_count: u32,
    ///[`p_vertex_attribute_descriptions`] is a pointer to an array of
    ///[`VertexInputAttributeDescription`] structures.
    p_vertex_attribute_descriptions: *mut VertexInputAttributeDescription,
}
///[VkPipelineInputAssemblyStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineInputAssemblyStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline input assembly state
///# C Specifications
///Drawing can be achieved in two modes:
/// - [Programmable Mesh Shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-mesh-shading),
///   the mesh shader assembles primitives, or
/// - [Programmable Primitive Shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-primitive-shading),
///   the input primitives are assembled
///as follows.Each draw is made up of zero or more vertices and zero or more instances,
///which are processed by the device and result in the assembly of primitives.
///Primitives are assembled according to the `pInputAssemblyState` member
///of the [`GraphicsPipelineCreateInfo`] structure, which is of type
///[`PipelineInputAssemblyStateCreateInfo`]:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineInputAssemblyStateCreateInfo {
///    VkStructureType                            sType;
///    const void*                                pNext;
///    VkPipelineInputAssemblyStateCreateFlags    flags;
///    VkPrimitiveTopology                        topology;
///    VkBool32                                   primitiveRestartEnable;
///} VkPipelineInputAssemblyStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`topology`] is a [`PrimitiveTopology`] defining the primitive topology, as described below.
/// - [`primitive_restart_enable`] controls whether a special vertex index value is treated as restarting the assembly of primitives. This enable only applies to indexed draws ([`CmdDrawIndexed`], [`CmdDrawMultiIndexedEXT`], and [`CmdDrawIndexedIndirect`]), and the special index value is either 0xFFFFFFFF when the `indexType` parameter of [`CmdBindIndexBuffer`] is equal to `VK_INDEX_TYPE_UINT32`, 0xFF when `indexType` is equal to `VK_INDEX_TYPE_UINT8_EXT`, or 0xFFFF when `indexType` is equal to `VK_INDEX_TYPE_UINT16`. Primitive restart is not allowed for “list” topologies, unless one of the features [`primitiveTopologyPatchListRestart`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveTopologyPatchListRestart) (for `VK_PRIMITIVE_TOPOLOGY_PATCH_LIST`) or [`primitiveTopologyListRestart`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveTopologyListRestart) (for all other list topologies) is enabled.
///# Description
///Restarting the assembly of primitives discards the most recent index values
///if those elements formed an incomplete primitive, and restarts the primitive
///assembly using the subsequent indices, but only assembling the immediately
///following element through the end of the originally specified elements.
///The primitive restart index value comparison is performed before adding the
///`vertexOffset` value to the index value.Valid Usage
/// -    If [`topology`] is `VK_PRIMITIVE_TOPOLOGY_POINT_LIST`, `VK_PRIMITIVE_TOPOLOGY_LINE_LIST`, `VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST`, `VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY` or `VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY`, and [`primitive_restart_enable`] is [`TRUE`], the [`primitiveTopologyListRestart`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveTopologyListRestart) feature **must** be enabled
/// -    If [`topology`] is `VK_PRIMITIVE_TOPOLOGY_PATCH_LIST`, and [`primitive_restart_enable`] is [`TRUE`], the [`primitiveTopologyPatchListRestart`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveTopologyPatchListRestart) feature **must** be enabled
/// - If the [geometry shaders](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-geometryShader)
///   feature is not enabled, [`topology`]**must** not be any of
///   `VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY`,
///   `VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY`,
///   `VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY` or
///   `VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY`
/// - If the [tessellation shaders](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-tessellationShader)
///   feature is not enabled, [`topology`]**must** not be `VK_PRIMITIVE_TOPOLOGY_PATCH_LIST`
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::triangle_fans`] is [`FALSE`],
///   [`topology`]**must** not be `VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be `0`
/// - [`topology`]**must** be a valid [`PrimitiveTopology`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`PipelineInputAssemblyStateCreateFlags`]
/// - [`PrimitiveTopology`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineInputAssemblyStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineInputAssemblyStateCreateFlags,
    ///[`topology`] is a [`PrimitiveTopology`] defining the primitive
    ///topology, as described below.
    topology: PrimitiveTopology,
    ///[`primitive_restart_enable`] controls whether a special vertex index
    ///value is treated as restarting the assembly of primitives.
    ///This enable only applies to indexed draws ([`CmdDrawIndexed`],
    ///[`CmdDrawMultiIndexedEXT`],
    ///and [`CmdDrawIndexedIndirect`]), and the special index value is
    ///either 0xFFFFFFFF when the `indexType` parameter of
    ///[`CmdBindIndexBuffer`] is equal to `VK_INDEX_TYPE_UINT32`,
    ///0xFF when `indexType` is equal to `VK_INDEX_TYPE_UINT8_EXT`,
    ///or 0xFFFF when `indexType` is equal to `VK_INDEX_TYPE_UINT16`.
    ///Primitive restart is not allowed for “list” topologies, unless one of
    ///the features
    ///[`primitiveTopologyPatchListRestart`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveTopologyPatchListRestart)
    ///(for `VK_PRIMITIVE_TOPOLOGY_PATCH_LIST`) or
    ///[`primitiveTopologyListRestart`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveTopologyListRestart)
    ///(for all other list topologies) is enabled.
    primitive_restart_enable: Bool32,
}
///[VkPipelineTessellationStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineTessellationStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline tessellation state
///# C Specifications
///The [`PipelineTessellationStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineTessellationStateCreateInfo {
///    VkStructureType                           sType;
///    const void*                               pNext;
///    VkPipelineTessellationStateCreateFlags    flags;
///    uint32_t                                  patchControlPoints;
///} VkPipelineTessellationStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`patch_control_points`] is the number of control points per patch.
///# Description
///Valid Usage
/// - [`patch_control_points`]**must** be greater than zero and less than or equal to
///   [`PhysicalDeviceLimits::max_tessellation_patch_size`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`PipelineTessellationDomainOriginStateCreateInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`GraphicsShaderGroupCreateInfoNV`]
/// - [`PipelineTessellationStateCreateFlags`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineTessellationStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineTessellationStateCreateFlags,
    ///[`patch_control_points`] is the number of control points per patch.
    patch_control_points: u32,
}
///[VkPipelineViewportStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline viewport state
///# C Specifications
///The [`PipelineViewportStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineViewportStateCreateInfo {
///    VkStructureType                       sType;
///    const void*                           pNext;
///    VkPipelineViewportStateCreateFlags    flags;
///    uint32_t                              viewportCount;
///    const VkViewport*                     pViewports;
///    uint32_t                              scissorCount;
///    const VkRect2D*                       pScissors;
///} VkPipelineViewportStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`viewport_count`] is the number of viewports used by the pipeline.
/// - [`p_viewports`] is a pointer to an array of [`Viewport`] structures, defining the viewport
///   transforms. If the viewport state is dynamic, this member is ignored.
/// - [`scissor_count`] is the number of [scissors](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-scissor)
///   and **must** match the number of viewports.
/// - [`p_scissors`] is a pointer to an array of [`Rect2D`] structures defining the rectangular
///   bounds of the scissor for the corresponding viewport. If the scissor state is dynamic, this
///   member is ignored.
///# Description
///Valid Usage
/// - If the [multiple viewports](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-multiViewport)
///   feature is not enabled, [`viewport_count`]**must** not be greater than `1`
/// - If the [multiple viewports](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-multiViewport)
///   feature is not enabled, [`scissor_count`]**must** not be greater than `1`
/// - [`viewport_count`]**must** be less than or equal to [`PhysicalDeviceLimits::max_viewports`]
/// - [`scissor_count`]**must** be less than or equal to [`PhysicalDeviceLimits::max_viewports`]
/// - The `x` and `y` members of `offset` member of any element of [`p_scissors`]**must** be greater
///   than or equal to `0`
/// - Evaluation of (`offset.x` +  `extent.width`)**must** not cause a signed integer addition
///   overflow for any element of [`p_scissors`]
/// - Evaluation of (`offset.y` +  `extent.height`)**must** not cause a signed integer addition
///   overflow for any element of [`p_scissors`]
/// - If the graphics pipeline is being created without `VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT` and
///   `VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT` set then [`scissor_count`] and
///   [`viewport_count`]**must** be identical
/// - If the graphics pipeline is being created with `VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT` set then
///   [`viewport_count`]**must** be `0`, otherwise it **must** be greater than `0`
/// - If the graphics pipeline is being created with `VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT` set then
///   [`scissor_count`]**must** be `0`, otherwise it **must** be greater than `0`
/// - If the `viewportWScalingEnable` member of a [`PipelineViewportWScalingStateCreateInfoNV`]
///   structure included in the [`p_next`] chain is [`TRUE`], the [`viewport_count`] member of the
///   [`PipelineViewportWScalingStateCreateInfoNV`] structure **must** be greater than or equal to
///   [`PipelineViewportStateCreateInfo`]::[`viewport_count`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`PipelineViewportCoarseSampleOrderStateCreateInfoNV`],
///   [`PipelineViewportDepthClipControlCreateInfoEXT`],
///   [`PipelineViewportExclusiveScissorStateCreateInfoNV`],
///   [`PipelineViewportShadingRateImageStateCreateInfoNV`],
///   [`PipelineViewportSwizzleStateCreateInfoNV`], or [`PipelineViewportWScalingStateCreateInfoNV`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`PipelineViewportStateCreateFlags`]
/// - [`Rect2D`]
/// - [`StructureType`]
/// - [`Viewport`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineViewportStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineViewportStateCreateFlags,
    ///[`viewport_count`] is the number of viewports used by the pipeline.
    viewport_count: u32,
    ///[`p_viewports`] is a pointer to an array of [`Viewport`]
    ///structures, defining the viewport transforms.
    ///If the viewport state is dynamic, this member is ignored.
    p_viewports: *mut Viewport,
    ///[`scissor_count`] is the number of [scissors](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-scissor) and
    ///**must** match the number of viewports.
    scissor_count: u32,
    ///[`p_scissors`] is a pointer to an array of [`Rect2D`] structures
    ///defining the rectangular bounds of the scissor for the corresponding
    ///viewport.
    ///If the scissor state is dynamic, this member is ignored.
    p_scissors: *mut Rect2D,
}
///[VkPipelineRasterizationStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline rasterization state
///# C Specifications
///The [`PipelineRasterizationStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineRasterizationStateCreateInfo {
///    VkStructureType                            sType;
///    const void*                                pNext;
///    VkPipelineRasterizationStateCreateFlags    flags;
///    VkBool32                                   depthClampEnable;
///    VkBool32                                   rasterizerDiscardEnable;
///    VkPolygonMode                              polygonMode;
///    VkCullModeFlags                            cullMode;
///    VkFrontFace                                frontFace;
///    VkBool32                                   depthBiasEnable;
///    float                                      depthBiasConstantFactor;
///    float                                      depthBiasClamp;
///    float                                      depthBiasSlopeFactor;
///    float                                      lineWidth;
///} VkPipelineRasterizationStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`depth_clamp_enable`] controls whether to clamp the fragment’s depth values as described in [Depth Test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth). If the pipeline is not created with [`PipelineRasterizationDepthClipStateCreateInfoEXT`] present then enabling depth clamp will also disable clipping primitives to the z planes of the frustrum as described in [Primitive Clipping](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-clipping). Otherwise depth clipping is controlled by the state set in [`PipelineRasterizationDepthClipStateCreateInfoEXT`].
/// - [`rasterizer_discard_enable`] controls whether primitives are discarded immediately before the
///   rasterization stage.
/// - [`polygon_mode`] is the triangle rendering mode. See [`PolygonMode`].
/// - [`cull_mode`] is the triangle facing direction used for primitive culling. See
///   [`CullModeFlagBits`].
/// - [`front_face`] is a [`FrontFace`] value specifying the front-facing triangle orientation to be
///   used for culling.
/// - [`depth_bias_enable`] controls whether to bias fragment depth values.
/// - [`depth_bias_constant_factor`] is a scalar factor controlling the constant depth value added
///   to each fragment.
/// - [`depth_bias_clamp`] is the maximum (or minimum) depth bias of a fragment.
/// - [`depth_bias_slope_factor`] is a scalar factor applied to a fragment’s slope in depth bias
///   calculations.
/// - [`line_width`] is the width of rasterized line segments.
///# Description
///The application **can** also add a
///[`PipelineRasterizationStateRasterizationOrderAMD`] structure to the
///[`p_next`] chain of a [`PipelineRasterizationStateCreateInfo`]
///structure.
///This structure enables selecting the rasterization order to use when
///rendering with the corresponding graphics pipeline as described in
///[Rasterization Order](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-order).Valid Usage
/// - If the [depth clamping](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-depthClamp)
///   feature is not enabled, [`depth_clamp_enable`]**must** be [`FALSE`]
/// - If the [non-solid fill modes](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fillModeNonSolid)
///   feature is not enabled, [`polygon_mode`]**must** be `VK_POLYGON_MODE_FILL` or
///   `VK_POLYGON_MODE_FILL_RECTANGLE_NV`
/// - If the `[`VK_NV_fill_rectangle`]` extension is not enabled, [`polygon_mode`]**must** not be
///   `VK_POLYGON_MODE_FILL_RECTANGLE_NV`
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::point_polygons`] is [`FALSE`], and
///   [`rasterizer_discard_enable`] is [`FALSE`], [`polygon_mode`]**must** not be
///   `VK_POLYGON_MODE_POINT`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`PipelineRasterizationConservativeStateCreateInfoEXT`],
///   [`PipelineRasterizationDepthClipStateCreateInfoEXT`],
///   [`PipelineRasterizationLineStateCreateInfoEXT`],
///   [`PipelineRasterizationProvokingVertexStateCreateInfoEXT`],
///   [`PipelineRasterizationStateRasterizationOrderAMD`], or
///   [`PipelineRasterizationStateStreamCreateInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
/// - [`polygon_mode`]**must** be a valid [`PolygonMode`] value
/// - [`cull_mode`]**must** be a valid combination of [`CullModeFlagBits`] values
/// - [`front_face`]**must** be a valid [`FrontFace`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`CullModeFlags`]
/// - [`FrontFace`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`PipelineRasterizationStateCreateFlags`]
/// - [`PolygonMode`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineRasterizationStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineRasterizationStateCreateFlags,
    ///[`depth_clamp_enable`] controls whether to clamp the fragment’s depth
    ///values as described in [Depth Test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth).
    ///If the pipeline is not created with
    ///[`PipelineRasterizationDepthClipStateCreateInfoEXT`] present then
    ///enabling depth clamp will also disable clipping primitives to the z
    ///planes of the frustrum as described in [Primitive Clipping](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-clipping).
    ///Otherwise depth clipping is controlled by the state set in
    ///[`PipelineRasterizationDepthClipStateCreateInfoEXT`].
    depth_clamp_enable: Bool32,
    ///[`rasterizer_discard_enable`] controls whether primitives are discarded
    ///immediately before the rasterization stage.
    rasterizer_discard_enable: Bool32,
    ///[`polygon_mode`] is the triangle rendering mode.
    ///See [`PolygonMode`].
    polygon_mode: PolygonMode,
    ///[`cull_mode`] is the triangle facing direction used for primitive
    ///culling.
    ///See [`CullModeFlagBits`].
    cull_mode: CullModeFlags,
    ///[`front_face`] is a [`FrontFace`] value specifying the front-facing
    ///triangle orientation to be used for culling.
    front_face: FrontFace,
    ///[`depth_bias_enable`] controls whether to bias fragment depth values.
    depth_bias_enable: Bool32,
    ///[`depth_bias_constant_factor`] is a scalar factor controlling the
    ///constant depth value added to each fragment.
    depth_bias_constant_factor: f32,
    ///[`depth_bias_clamp`] is the maximum (or minimum) depth bias of a
    ///fragment.
    depth_bias_clamp: f32,
    ///[`depth_bias_slope_factor`] is a scalar factor applied to a fragment’s
    ///slope in depth bias calculations.
    depth_bias_slope_factor: f32,
    ///[`line_width`] is the width of rasterized line segments.
    line_width: f32,
}
///[VkPipelineMultisampleStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineMultisampleStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline multisample state
///# C Specifications
///The [`PipelineMultisampleStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineMultisampleStateCreateInfo {
///    VkStructureType                          sType;
///    const void*                              pNext;
///    VkPipelineMultisampleStateCreateFlags    flags;
///    VkSampleCountFlagBits                    rasterizationSamples;
///    VkBool32                                 sampleShadingEnable;
///    float                                    minSampleShading;
///    const VkSampleMask*                      pSampleMask;
///    VkBool32                                 alphaToCoverageEnable;
///    VkBool32                                 alphaToOneEnable;
///} VkPipelineMultisampleStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`rasterization_samples`] is a [`SampleCountFlagBits`] value specifying the number of samples
///   used in rasterization.
/// - [`sample_shading_enable`]**can** be used to enable [Sample Shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-sampleshading).
/// - [`min_sample_shading`] specifies a minimum fraction of sample shading if
///   [`sample_shading_enable`] is set to [`TRUE`].
/// - [`p_sample_mask`] is a pointer to an array of [`SampleMask`] values used in the [sample mask test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-samplemask).
/// - [`alpha_to_coverage_enable`] controls whether a temporary coverage value is generated based on
///   the alpha component of the fragment’s first color output as specified in the [Multisample Coverage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-covg)
///   section.
/// - [`alpha_to_one_enable`] controls whether the alpha component of the fragment’s first color output is replaced with one as described in [Multisample Coverage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-covg).
///# Description
///Each bit in the sample mask is associated with a unique
///[sample index](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-multisampling-coverage-mask) as defined for the
///[coverage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-multisampling-coverage-mask).
///Each bit b for mask word w in the sample mask corresponds to
///sample index i, where i = 32 × w +  b.
///[`p_sample_mask`] has a length equal to ⌈
///[`rasterization_samples`] / 32 ⌉ words.If [`p_sample_mask`] is `NULL`, it is treated as if the
/// mask has all bits
///set to `1`.Valid Usage
/// - If the [sample rate shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-sampleRateShading)
///   feature is not enabled, [`sample_shading_enable`]**must** be [`FALSE`]
/// - If the [alpha to one](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-alphaToOne)
///   feature is not enabled, [`alpha_to_one_enable`]**must** be [`FALSE`]
/// - [`min_sample_shading`]**must** be in the range [0,1]
/// - If the `[`VK_NV_framebuffer_mixed_samples`]` extension is enabled, and if the subpass has any
///   color attachments and [`rasterization_samples`] is greater than the number of color samples,
///   then [`sample_shading_enable`]**must** be [`FALSE`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`PipelineCoverageModulationStateCreateInfoNV`],
///   [`PipelineCoverageReductionStateCreateInfoNV`], [`PipelineCoverageToColorStateCreateInfoNV`],
///   or [`PipelineSampleLocationsStateCreateInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
/// - [`rasterization_samples`]**must** be a valid [`SampleCountFlagBits`] value
/// - If [`p_sample_mask`] is not `NULL`, [`p_sample_mask`]**must** be a valid pointer to an array
///   of <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
///   class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span
///   class="mopen">⌈</span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span
///   style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mtight">3</span><span class="mord mtight">2</span></span></span></span><span
///   style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span
///   style="border-bottom-width:0.04em;" class="frac-line"></span></span><span
///   style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing
///   reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span
///   class="mord mathit mtight">r</span><span class="mord mathit mtight">a</span><span class="mord
///   mathit mtight">s</span><span class="mord mathit mtight">t</span><span class="mord mathit
///   mtight">e</span><span class="mord mathit mtight">r</span><span class="mord mathit
///   mtight">i</span><span class="mord mathit mtight">z</span><span class="mord mathit
///   mtight">a</span><span class="mord mathit mtight">t</span><span class="mord mathit
///   mtight">i</span><span class="mord mathit mtight">o</span><span class="mord mathit
///   mtight">n</span><span class="mord mathit mtight">S</span><span class="mord mathit
///   mtight">a</span><span class="mord mathit mtight">m</span><span class="mord mathit
///   mtight">p</span><span class="mord mathit mtight">l</span><span class="mord mathit
///   mtight">e</span><span class="mord mathit
///   mtight">s</span></span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.345em;"><span></span></span></span></span></span><span class="mclose
///   nulldelimiter"></span></span></span><span
///   class="mclose">⌉</span></span></span></span>[`SampleMask`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`PipelineMultisampleStateCreateFlags`]
/// - [`SampleCountFlagBits`]
/// - [`SampleMask`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineMultisampleStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineMultisampleStateCreateFlags,
    ///[`rasterization_samples`] is a [`SampleCountFlagBits`] value
    ///specifying the number of samples used in rasterization.
    rasterization_samples: SampleCountFlagBits,
    ///[`sample_shading_enable`]**can** be used to enable
    ///[Sample Shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-sampleshading).
    sample_shading_enable: Bool32,
    ///[`min_sample_shading`] specifies a minimum fraction of sample shading if
    ///[`sample_shading_enable`] is set to [`TRUE`].
    min_sample_shading: f32,
    ///[`p_sample_mask`] is a pointer to an array of [`SampleMask`]
    ///values used in the [sample mask test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-samplemask).
    p_sample_mask: *mut SampleMask,
    ///[`alpha_to_coverage_enable`] controls whether a temporary coverage value
    ///is generated based on the alpha component of the fragment’s first color
    ///output as specified in the [Multisample Coverage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-covg)
    ///section.
    alpha_to_coverage_enable: Bool32,
    ///[`alpha_to_one_enable`] controls whether the alpha component of the
    ///fragment’s first color output is replaced with one as described in
    ///[Multisample Coverage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-covg).
    alpha_to_one_enable: Bool32,
}
///[VkPipelineColorBlendAttachmentState](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendAttachmentState.html) - Structure specifying a pipeline color blend attachment state
///# C Specifications
///The [`PipelineColorBlendAttachmentState`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineColorBlendAttachmentState {
///    VkBool32                 blendEnable;
///    VkBlendFactor            srcColorBlendFactor;
///    VkBlendFactor            dstColorBlendFactor;
///    VkBlendOp                colorBlendOp;
///    VkBlendFactor            srcAlphaBlendFactor;
///    VkBlendFactor            dstAlphaBlendFactor;
///    VkBlendOp                alphaBlendOp;
///    VkColorComponentFlags    colorWriteMask;
///} VkPipelineColorBlendAttachmentState;
///```
///# Members
/// - [`blend_enable`] controls whether blending is enabled for the corresponding color attachment.
///   If blending is not enabled, the source fragment’s color for that attachment is passed through
///   unmodified.
/// - [`src_color_blend_factor`] selects which blend factor is used to determine the source factors
///   (S<sub>r</sub>,S<sub>g</sub>,S<sub>b</sub>).
/// - [`dst_color_blend_factor`] selects which blend factor is used to determine the destination
///   factors (D<sub>r</sub>,D<sub>g</sub>,D<sub>b</sub>).
/// - [`color_blend_op`] selects which blend operation is used to calculate the RGB values to write
///   to the color attachment.
/// - [`src_alpha_blend_factor`] selects which blend factor is used to determine the source factor
///   S<sub>a</sub>.
/// - [`dst_alpha_blend_factor`] selects which blend factor is used to determine the destination
///   factor D<sub>a</sub>.
/// - [`alpha_blend_op`] selects which blend operation is use to calculate the alpha values to write
///   to the color attachment.
/// - [`color_write_mask`] is a bitmask of [`ColorComponentFlagBits`] specifying which of the R, G, B, and/or A components are enabled for writing, as described for the [Color Write Mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-color-write-mask).
///# Description
///Valid Usage
/// - If the [dual source blending](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dualSrcBlend)
///   feature is not enabled, [`src_color_blend_factor`]**must** not be
///   `VK_BLEND_FACTOR_SRC1_COLOR`, `VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR`,
///   `VK_BLEND_FACTOR_SRC1_ALPHA`, or `VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA`
/// - If the [dual source blending](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dualSrcBlend)
///   feature is not enabled, [`dst_color_blend_factor`]**must** not be
///   `VK_BLEND_FACTOR_SRC1_COLOR`, `VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR`,
///   `VK_BLEND_FACTOR_SRC1_ALPHA`, or `VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA`
/// - If the [dual source blending](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dualSrcBlend)
///   feature is not enabled, [`src_alpha_blend_factor`]**must** not be
///   `VK_BLEND_FACTOR_SRC1_COLOR`, `VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR`,
///   `VK_BLEND_FACTOR_SRC1_ALPHA`, or `VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA`
/// - If the [dual source blending](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dualSrcBlend)
///   feature is not enabled, [`dst_alpha_blend_factor`]**must** not be
///   `VK_BLEND_FACTOR_SRC1_COLOR`, `VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR`,
///   `VK_BLEND_FACTOR_SRC1_ALPHA`, or `VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA`
/// - If either of [`color_blend_op`] or [`alpha_blend_op`] is an [advanced blend operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blend-advanced),
///   then [`color_blend_op`]**must** equal [`alpha_blend_op`]
/// -    If [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT::advanced_blend_independent_blend`] is [`FALSE`] and [`color_blend_op`] is an [advanced blend operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blend-advanced), then [`color_blend_op`]**must** be the same for all attachments
/// -    If [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT::advanced_blend_independent_blend`] is [`FALSE`] and [`alpha_blend_op`] is an [advanced blend operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blend-advanced), then [`alpha_blend_op`]**must** be the same for all attachments
/// - If [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT::advanced_blend_all_operations`] is
///   [`FALSE`], then [`color_blend_op`]**must** not be `VK_BLEND_OP_ZERO_EXT`,
///   `VK_BLEND_OP_SRC_EXT`, `VK_BLEND_OP_DST_EXT`, `VK_BLEND_OP_SRC_OVER_EXT`,
///   `VK_BLEND_OP_DST_OVER_EXT`, `VK_BLEND_OP_SRC_IN_EXT`, `VK_BLEND_OP_DST_IN_EXT`,
///   `VK_BLEND_OP_SRC_OUT_EXT`, `VK_BLEND_OP_DST_OUT_EXT`, `VK_BLEND_OP_SRC_ATOP_EXT`,
///   `VK_BLEND_OP_DST_ATOP_EXT`, `VK_BLEND_OP_XOR_EXT`, `VK_BLEND_OP_INVERT_EXT`,
///   `VK_BLEND_OP_INVERT_RGB_EXT`, `VK_BLEND_OP_LINEARDODGE_EXT`, `VK_BLEND_OP_LINEARBURN_EXT`,
///   `VK_BLEND_OP_VIVIDLIGHT_EXT`, `VK_BLEND_OP_LINEARLIGHT_EXT`, `VK_BLEND_OP_PINLIGHT_EXT`,
///   `VK_BLEND_OP_HARDMIX_EXT`, `VK_BLEND_OP_PLUS_EXT`, `VK_BLEND_OP_PLUS_CLAMPED_EXT`,
///   `VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT`, `VK_BLEND_OP_PLUS_DARKER_EXT`, `VK_BLEND_OP_MINUS_EXT`,
///   `VK_BLEND_OP_MINUS_CLAMPED_EXT`, `VK_BLEND_OP_CONTRAST_EXT`, `VK_BLEND_OP_INVERT_OVG_EXT`,
///   `VK_BLEND_OP_RED_EXT`, `VK_BLEND_OP_GREEN_EXT`, or `VK_BLEND_OP_BLUE_EXT`
/// - If [`color_blend_op`] or [`alpha_blend_op`] is an [advanced blend operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blend-advanced),
///   then `colorAttachmentCount` of the subpass this pipeline is compiled against **must** be less
///   than or equal to
///   [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT::advanced_blend_max_color_attachments`]
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::constant_alpha_color_blend_factors`] is
///   [`FALSE`], [`src_color_blend_factor`]**must** not be `VK_BLEND_FACTOR_CONSTANT_ALPHA` or
///   `VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA`
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::constant_alpha_color_blend_factors`] is
///   [`FALSE`], [`dst_color_blend_factor`]**must** not be `VK_BLEND_FACTOR_CONSTANT_ALPHA` or
///   `VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA`
///Valid Usage (Implicit)
/// - [`src_color_blend_factor`]**must** be a valid [`BlendFactor`] value
/// - [`dst_color_blend_factor`]**must** be a valid [`BlendFactor`] value
/// - [`color_blend_op`]**must** be a valid [`BlendOp`] value
/// - [`src_alpha_blend_factor`]**must** be a valid [`BlendFactor`] value
/// - [`dst_alpha_blend_factor`]**must** be a valid [`BlendFactor`] value
/// - [`alpha_blend_op`]**must** be a valid [`BlendOp`] value
/// - [`color_write_mask`]**must** be a valid combination of [`ColorComponentFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BlendFactor`]
/// - [`BlendOp`]
/// - [`Bool32`]
/// - [`ColorComponentFlags`]
/// - [`PipelineColorBlendStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineColorBlendAttachmentState {
    ///[`blend_enable`] controls whether blending is enabled for the
    ///corresponding color attachment.
    ///If blending is not enabled, the source fragment’s color for that
    ///attachment is passed through unmodified.
    blend_enable: Bool32,
    ///[`src_color_blend_factor`] selects which blend factor is used to
    ///determine the source factors (S<sub>r</sub>,S<sub>g</sub>,S<sub>b</sub>).
    src_color_blend_factor: BlendFactor,
    ///[`dst_color_blend_factor`] selects which blend factor is used to
    ///determine the destination factors (D<sub>r</sub>,D<sub>g</sub>,D<sub>b</sub>).
    dst_color_blend_factor: BlendFactor,
    ///[`color_blend_op`] selects which blend operation is used to calculate
    ///the RGB values to write to the color attachment.
    color_blend_op: BlendOp,
    ///[`src_alpha_blend_factor`] selects which blend factor is used to
    ///determine the source factor S<sub>a</sub>.
    src_alpha_blend_factor: BlendFactor,
    ///[`dst_alpha_blend_factor`] selects which blend factor is used to
    ///determine the destination factor D<sub>a</sub>.
    dst_alpha_blend_factor: BlendFactor,
    ///[`alpha_blend_op`] selects which blend operation is use to calculate the
    ///alpha values to write to the color attachment.
    alpha_blend_op: BlendOp,
    ///[`color_write_mask`] is a bitmask of [`ColorComponentFlagBits`]
    ///specifying which of the R, G, B, and/or A components are enabled for
    ///writing, as described for the [Color Write
    ///Mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-color-write-mask).
    color_write_mask: ColorComponentFlags,
}
///[VkPipelineColorBlendStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline color blend state
///# C Specifications
///The [`PipelineColorBlendStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineColorBlendStateCreateInfo {
///    VkStructureType                               sType;
///    const void*                                   pNext;
///    VkPipelineColorBlendStateCreateFlags          flags;
///    VkBool32                                      logicOpEnable;
///    VkLogicOp                                     logicOp;
///    uint32_t                                      attachmentCount;
///    const VkPipelineColorBlendAttachmentState*    pAttachments;
///    float                                         blendConstants[4];
///} VkPipelineColorBlendStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`PipelineColorBlendStateCreateFlagBits`] specifying additional
///   color blending information.
/// - [`logic_op_enable`] controls whether to apply [Logical Operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-logicop).
/// - [`logic_op`] selects which logical operation to apply.
/// - [`attachment_count`] is the number of [`PipelineColorBlendAttachmentState`] elements in
///   [`p_attachments`].
/// - [`p_attachments`] is a pointer to an array of [`PipelineColorBlendAttachmentState`] structures
///   defining blend state for each color attachment.
/// - [`blend_constants`] is a pointer to an array of four values used as the R, G, B, and A components of the blend constant that are used in blending, depending on the [blend factor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blendfactors).
///# Description
///Valid Usage
/// - If the [independent blending](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-independentBlend)
///   feature is not enabled, all elements of [`p_attachments`]**must** be identical
/// - If the [logic operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-logicOp)
///   feature is not enabled, [`logic_op_enable`]**must** be [`FALSE`]
/// - If [`logic_op_enable`] is [`TRUE`], [`logic_op`]**must** be a valid [`LogicOp`] value
/// - If the [`rasterizationOrderColorAttachmentAccess`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-rasterizationOrderColorAttachmentAccess)
///   feature is not enabled, [`flags`]**must** not include
///   `VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`PipelineColorBlendAdvancedStateCreateInfoEXT`] or [`PipelineColorWriteCreateInfoEXT`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`PipelineColorBlendStateCreateFlagBits`] values
/// - If [`attachment_count`] is not `0`, [`p_attachments`]**must** be a valid pointer to an array
///   of [`attachment_count`] valid [`PipelineColorBlendAttachmentState`] structures
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`LogicOp`]
/// - [`PipelineColorBlendAttachmentState`]
/// - [`PipelineColorBlendStateCreateFlags`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineColorBlendStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of
    ///[`PipelineColorBlendStateCreateFlagBits`] specifying additional
    ///color blending information.
    flags: PipelineColorBlendStateCreateFlags,
    ///[`logic_op_enable`] controls whether to apply [Logical Operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-logicop).
    logic_op_enable: Bool32,
    ///[`logic_op`] selects which logical operation to apply.
    logic_op: LogicOp,
    ///[`attachment_count`] is the number of
    ///[`PipelineColorBlendAttachmentState`] elements in
    ///[`p_attachments`].
    attachment_count: u32,
    ///[`p_attachments`] is a pointer to an array of
    ///[`PipelineColorBlendAttachmentState`] structures defining blend
    ///state for each color attachment.
    p_attachments: *mut PipelineColorBlendAttachmentState,
    ///[`blend_constants`] is a pointer to an array of four values used as the
    ///R, G, B, and A components of the blend constant that are used in
    ///blending, depending on the [blend factor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blendfactors).
    blend_constants: [f32; 4],
}
///[VkPipelineDynamicStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineDynamicStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline dynamic state
///# C Specifications
///The [`PipelineDynamicStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineDynamicStateCreateInfo {
///    VkStructureType                      sType;
///    const void*                          pNext;
///    VkPipelineDynamicStateCreateFlags    flags;
///    uint32_t                             dynamicStateCount;
///    const VkDynamicState*                pDynamicStates;
///} VkPipelineDynamicStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`dynamic_state_count`] is the number of elements in the [`p_dynamic_states`] array.
/// - [`p_dynamic_states`] is a pointer to an array of [`DynamicState`] values specifying which
///   pieces of pipeline state will use the values from dynamic state commands rather than from
///   pipeline state creation information.
///# Description
///Valid Usage
/// - Each element of [`p_dynamic_states`]**must** be unique
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be `0`
/// - If [`dynamic_state_count`] is not `0`, [`p_dynamic_states`]**must** be a valid pointer to an
///   array of [`dynamic_state_count`] valid [`DynamicState`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DynamicState`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`PipelineDynamicStateCreateFlags`]
/// - [`RayTracingPipelineCreateInfoKHR`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineDynamicStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineDynamicStateCreateFlags,
    ///[`dynamic_state_count`] is the number of elements in the
    ///[`p_dynamic_states`] array.
    dynamic_state_count: u32,
    ///[`p_dynamic_states`] is a pointer to an array of [`DynamicState`]
    ///values specifying which pieces of pipeline state will use the values
    ///from dynamic state commands rather than from pipeline state creation
    ///information.
    p_dynamic_states: *mut DynamicState,
}
///[VkStencilOpState](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkStencilOpState.html) - Structure specifying stencil operation state
///# C Specifications
///The [`StencilOpState`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkStencilOpState {
///    VkStencilOp    failOp;
///    VkStencilOp    passOp;
///    VkStencilOp    depthFailOp;
///    VkCompareOp    compareOp;
///    uint32_t       compareMask;
///    uint32_t       writeMask;
///    uint32_t       reference;
///} VkStencilOpState;
///```
///# Members
/// - [`fail_op`] is a [`StencilOp`] value specifying the action performed on samples that fail the
///   stencil test.
/// - [`pass_op`] is a [`StencilOp`] value specifying the action performed on samples that pass both
///   the depth and stencil tests.
/// - [`depth_fail_op`] is a [`StencilOp`] value specifying the action performed on samples that
///   pass the stencil test and fail the depth test.
/// - [`compare_op`] is a [`CompareOp`] value specifying the comparison operator used in the stencil
///   test.
/// - [`compare_mask`] selects the bits of the unsigned integer stencil values participating in the
///   stencil test.
/// - [`write_mask`] selects the bits of the unsigned integer stencil values updated by the stencil
///   test in the stencil framebuffer attachment.
/// - [`reference`] is an integer reference value that is used in the unsigned stencil comparison.
///# Description
///Valid Usage (Implicit)
/// - [`fail_op`]**must** be a valid [`StencilOp`] value
/// - [`pass_op`]**must** be a valid [`StencilOp`] value
/// - [`depth_fail_op`]**must** be a valid [`StencilOp`] value
/// - [`compare_op`]**must** be a valid [`CompareOp`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CompareOp`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`StencilOp`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct StencilOpState {
    ///[`fail_op`] is a [`StencilOp`] value specifying the action
    ///performed on samples that fail the stencil test.
    fail_op: StencilOp,
    ///[`pass_op`] is a [`StencilOp`] value specifying the action
    ///performed on samples that pass both the depth and stencil tests.
    pass_op: StencilOp,
    ///[`depth_fail_op`] is a [`StencilOp`] value specifying the action
    ///performed on samples that pass the stencil test and fail the depth test.
    depth_fail_op: StencilOp,
    ///[`compare_op`] is a [`CompareOp`] value specifying the comparison
    ///operator used in the stencil test.
    compare_op: CompareOp,
    ///[`compare_mask`] selects the bits of the unsigned integer stencil
    ///values participating in the stencil test.
    compare_mask: u32,
    ///[`write_mask`] selects the bits of the unsigned integer stencil values
    ///updated by the stencil test in the stencil framebuffer attachment.
    write_mask: u32,
    ///[`reference`] is an integer reference value that is used in the
    ///unsigned stencil comparison.
    reference: u32,
}
///[VkPipelineDepthStencilStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineDepthStencilStateCreateInfo.html) - Structure specifying parameters of a newly created pipeline depth stencil state
///# C Specifications
///The [`PipelineDepthStencilStateCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineDepthStencilStateCreateInfo {
///    VkStructureType                           sType;
///    const void*                               pNext;
///    VkPipelineDepthStencilStateCreateFlags    flags;
///    VkBool32                                  depthTestEnable;
///    VkBool32                                  depthWriteEnable;
///    VkCompareOp                               depthCompareOp;
///    VkBool32                                  depthBoundsTestEnable;
///    VkBool32                                  stencilTestEnable;
///    VkStencilOpState                          front;
///    VkStencilOpState                          back;
///    float                                     minDepthBounds;
///    float                                     maxDepthBounds;
///} VkPipelineDepthStencilStateCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`PipelineDepthStencilStateCreateFlagBits`] specifying additional
///   depth/stencil state information.
/// - [`depth_test_enable`] controls whether [depth testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth)
///   is enabled.
/// - [`depth_write_enable`] controls whether [depth writes](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth-write)
///   are enabled when [`depth_test_enable`] is [`TRUE`]. Depth writes are always disabled when
///   [`depth_test_enable`] is [`FALSE`].
/// - [`depth_compare_op`] is the comparison operator used in the [depth test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth).
/// - [`depth_bounds_test_enable`] controls whether [depth bounds testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-dbt)
///   is enabled.
/// - [`stencil_test_enable`] controls whether [stencil testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-stencil)
///   is enabled.
/// - [`front`] and [`back`] control the parameters of the [stencil test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-stencil).
/// - [`min_depth_bounds`] is the minimum depth bound used in the [depth bounds test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-dbt).
/// - [`max_depth_bounds`] is the maximum depth bound used in the [depth bounds test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-dbt).
///# Description
///Valid Usage
/// - If the [depth bounds testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-depthBounds)
///   feature is not enabled, [`depth_bounds_test_enable`]**must** be [`FALSE`]
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::separate_stencil_mask_ref`] is [`FALSE`], and
///   the value of [`PipelineDepthStencilStateCreateInfo`]::[`stencil_test_enable`] is [`TRUE`], and
///   the value of [`PipelineRasterizationStateCreateInfo::cull_mode`] is `VK_CULL_MODE_NONE`, the
///   value of `reference` in each of the [`StencilOpState`] structs in [`front`] and
///   [`back`]**must** be the same
/// - If the [`rasterizationOrderDepthAttachmentAccess`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-rasterizationOrderDepthAttachmentAccess)
///   feature is not enabled, [`flags`]**must** not include
///   `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM`
/// - If the [`rasterizationOrderStencilAttachmentAccess`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-rasterizationOrderStencilAttachmentAccess)
///   feature is not enabled, [`flags`]**must** not include
///   `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be a valid combination of [`PipelineDepthStencilStateCreateFlagBits`] values
/// - [`depth_compare_op`]**must** be a valid [`CompareOp`] value
/// - [`front`]**must** be a valid [`StencilOpState`] structure
/// - [`back`]**must** be a valid [`StencilOpState`] structure
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`CompareOp`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`PipelineDepthStencilStateCreateFlags`]
/// - [`StencilOpState`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineDepthStencilStateCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of
    ///[`PipelineDepthStencilStateCreateFlagBits`] specifying additional
    ///depth/stencil state information.
    flags: PipelineDepthStencilStateCreateFlags,
    ///[`depth_test_enable`] controls whether [depth testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth)
    ///is enabled.
    depth_test_enable: Bool32,
    ///[`depth_write_enable`] controls whether [depth
    ///writes](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth-write) are enabled when [`depth_test_enable`] is [`TRUE`].
    ///Depth writes are always disabled when [`depth_test_enable`] is
    ///[`FALSE`].
    depth_write_enable: Bool32,
    ///[`depth_compare_op`] is the comparison operator used in the
    ///[depth test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-depth).
    depth_compare_op: CompareOp,
    ///[`depth_bounds_test_enable`] controls whether [depth bounds
    ///testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-dbt) is enabled.
    depth_bounds_test_enable: Bool32,
    ///[`stencil_test_enable`] controls whether [stencil
    ///testing](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-stencil) is enabled.
    stencil_test_enable: Bool32,
    ///[`front`] and [`back`] control the parameters of the
    ///[stencil test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-stencil).
    front: StencilOpState,
    ///No documentation found
    back: StencilOpState,
    ///[`min_depth_bounds`] is the minimum depth bound used in the
    ///[depth bounds test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-dbt).
    min_depth_bounds: f32,
    ///[`max_depth_bounds`] is the maximum depth bound used in the
    ///[depth bounds test](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-dbt).
    max_depth_bounds: f32,
}
///[VkGraphicsPipelineCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkGraphicsPipelineCreateInfo.html) - Structure specifying parameters of a newly created graphics pipeline
///# C Specifications
///The [`GraphicsPipelineCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkGraphicsPipelineCreateInfo {
///    VkStructureType                                  sType;
///    const void*                                      pNext;
///    VkPipelineCreateFlags                            flags;
///    uint32_t                                         stageCount;
///    const VkPipelineShaderStageCreateInfo*           pStages;
///    const VkPipelineVertexInputStateCreateInfo*      pVertexInputState;
///    const VkPipelineInputAssemblyStateCreateInfo*    pInputAssemblyState;
///    const VkPipelineTessellationStateCreateInfo*     pTessellationState;
///    const VkPipelineViewportStateCreateInfo*         pViewportState;
///    const VkPipelineRasterizationStateCreateInfo*    pRasterizationState;
///    const VkPipelineMultisampleStateCreateInfo*      pMultisampleState;
///    const VkPipelineDepthStencilStateCreateInfo*     pDepthStencilState;
///    const VkPipelineColorBlendStateCreateInfo*       pColorBlendState;
///    const VkPipelineDynamicStateCreateInfo*          pDynamicState;
///    VkPipelineLayout                                 layout;
///    VkRenderPass                                     renderPass;
///    uint32_t                                         subpass;
///    VkPipeline                                       basePipelineHandle;
///    int32_t                                          basePipelineIndex;
///} VkGraphicsPipelineCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`PipelineCreateFlagBits`] specifying how the pipeline will be
///   generated.
/// - [`stage_count`] is the number of entries in the [`p_stages`] array.
/// - [`p_stages`] is a pointer to an array of [`stage_count`][`PipelineShaderStageCreateInfo`]
///   structures describing the set of the shader stages to be included in the graphics pipeline.
/// - [`p_vertex_input_state`] is a pointer to a [`PipelineVertexInputStateCreateInfo`] structure
///   defining vertex input state for use with vertex shading.
/// - [`p_input_assembly_state`] is a pointer to a [`PipelineInputAssemblyStateCreateInfo`] structure which determines input assembly behavior for vertex shading, as described in [Drawing Commands](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing).
/// - [`p_tessellation_state`] is a pointer to a [`PipelineTessellationStateCreateInfo`] structure
///   defining tessellation state used by tessellation shaders.
/// - [`p_viewport_state`] is a pointer to a [`PipelineViewportStateCreateInfo`] structure defining
///   viewport state used when rasterization is enabled.
/// - [`p_rasterization_state`] is a pointer to a [`PipelineRasterizationStateCreateInfo`] structure
///   defining rasterization state.
/// - [`p_multisample_state`] is a pointer to a [`PipelineMultisampleStateCreateInfo`] structure
///   defining multisample state used when rasterization is enabled.
/// - [`p_depth_stencil_state`] is a pointer to a [`PipelineDepthStencilStateCreateInfo`] structure
///   defining depth/stencil state used when rasterization is enabled for depth or stencil
///   attachments accessed during rendering.
/// - [`p_color_blend_state`] is a pointer to a [`PipelineColorBlendStateCreateInfo`] structure
///   defining color blend state used when rasterization is enabled for any color attachments
///   accessed during rendering.
/// - [`p_dynamic_state`] is a pointer to a [`PipelineDynamicStateCreateInfo`] structure defining
///   which properties of the pipeline state object are dynamic and **can** be changed independently
///   of the pipeline state. This **can** be `NULL`, which means no state in the pipeline is
///   considered dynamic.
/// - [`layout`] is the description of binding locations used by both the pipeline and descriptor
///   sets used with the pipeline.
/// - [`render_pass`] is a handle to a render pass object describing the environment in which the pipeline will be used. The pipeline **must** only be used with a render pass instance compatible with the one provided. See [Render Pass Compatibility](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility) for more information.
/// - [`subpass`] is the index of the subpass in the render pass where this pipeline will be used.
/// - [`base_pipeline_handle`] is a pipeline to derive from.
/// - [`base_pipeline_index`] is an index into the `pCreateInfos` parameter to use as a pipeline to
///   derive from.
///# Description
///The parameters [`base_pipeline_handle`] and [`base_pipeline_index`] are
///described in more detail in [Pipeline
///Derivatives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipelines-pipeline-derivatives).If any shader stage fails to compile,
///the compile log will be reported back to the application, and
///`VK_ERROR_INVALID_SHADER_NV` will be generated.The state required for a graphics pipeline is
/// divided into
///[vertex input state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-vertex-input),
///[pre-rasterization shader
///state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), [fragment shader
///state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and [fragment output
///state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output).Vertex input state is defined by:
/// - [`PipelineVertexInputStateCreateInfo`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
///Pre-rasterization shader state is defined by:
/// - [`PipelineShaderStageCreateInfo`] entries for:  - Vertex shaders  - Tessellation control
///   shaders  - Tessellation evaluation shaders  - Geometry shaders  - Task shaders  - Mesh shaders
/// - Within the [`PipelineLayout`], all bindings that affect the specified shader stages
/// - [`PipelineViewportStateCreateInfo`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`PipelineTessellationStateCreateInfo`]
/// - [`RenderPass`] and [`subpass`] parameter
/// - [`PipelineDiscardRectangleStateCreateInfoEXT`]
/// - [`PipelineFragmentShadingRateStateCreateInfoKHR`]
/// - [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
///Fragment shader state is defined by:
/// - A [`PipelineShaderStageCreateInfo`] entry for the fragment shader
/// - Within the [`PipelineLayout`], all bindings that affect the fragment shader
/// - [`PipelineMultisampleStateCreateInfo`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`RenderPass`] and [`subpass`] parameter
/// - [`PipelineFragmentShadingRateStateCreateInfoKHR`]
/// - [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
///Fragment output state is defined by:
/// - [`PipelineColorBlendStateCreateInfo`]
/// - The `alphaToCoverageEnable` and `alphaToOneEnable` members of
///   [`PipelineMultisampleStateCreateInfo`].
/// - [`RenderPass`] and [`subpass`] parameter
///A complete graphics pipeline always includes
///[pre-rasterization shader
///state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), with other subsets included depending on that state.
///If the [pre-rasterization
///shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) includes a vertex shader, then
///[vertex input state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-vertex-input) is included
///in a complete graphics pipeline.
///If the value of
///[`PipelineRasterizationStateCreateInfo::rasterizer_discard_enable`]
///in the [pre-rasterization
///shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) is [`FALSE`]
///or the `VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE` dynamic state is
///enabled
///[fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) and
///[fragment output interface
///state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output) is included in a complete graphics pipeline.Pipelines **must** be created with a complete set of pipeline state.Valid Usage
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_index`] is -1, [`base_pipeline_handle`]**must** be a valid handle to a
///   graphics [`Pipeline`]
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_handle`] is [`crate::utils::Handle::null`], [`base_pipeline_index`]**must** be
///   a valid index into the calling command’s `pCreateInfos` parameter
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_index`] is not -1, [`base_pipeline_handle`]**must** be
///   [`crate::utils::Handle::null`]
/// - If [`flags`] contains the `VK_PIPELINE_CREATE_DERIVATIVE_BIT` flag, and
///   [`base_pipeline_handle`] is not [`crate::utils::Handle::null`],
///   [`base_pipeline_index`]**must** be -1
/// - The `stage` member of each element of [`p_stages`]**must** be unique
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   the geometric shader stages provided in [`p_stages`]**must** be either from the mesh shading
///   pipeline (`stage` is `VK_SHADER_STAGE_TASK_BIT_NV` or `VK_SHADER_STAGE_MESH_BIT_NV`) or from
///   the primitive shading pipeline (`stage` is `VK_SHADER_STAGE_VERTEX_BIT`,
///   `VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT`, `VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT`, or
///   `VK_SHADER_STAGE_GEOMETRY_BIT`)
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   the `stage` member of one element of [`p_stages`]**must** be either
///   `VK_SHADER_STAGE_VERTEX_BIT` or `VK_SHADER_STAGE_MESH_BIT_NV`
/// - The `stage` member of each element of [`p_stages`]**must** not be
///   `VK_SHADER_STAGE_COMPUTE_BIT`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes a tessellation control shader stage, it **must** include a
///   tessellation evaluation shader stage
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes a tessellation evaluation shader stage, it **must** include a
///   tessellation control shader stage
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes a tessellation control shader stage and a tessellation evaluation
///   shader stage, [`p_tessellation_state`]**must** be a valid pointer to a valid
///   [`PipelineTessellationStateCreateInfo`] structure
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes tessellation shader stages, the shader code of at least one stage
///   **must** contain an `OpExecutionMode` instruction specifying the type of subdivision in the
///   pipeline
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes tessellation shader stages, and the shader code of both stages
///   contain an `OpExecutionMode` instruction specifying the type of subdivision in the pipeline,
///   they **must** both specify the same subdivision mode
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes tessellation shader stages, the shader code of at least one stage
///   **must** contain an `OpExecutionMode` instruction specifying the output patch size in the
///   pipeline
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes tessellation shader stages, and the shader code of both contain an
///   `OpExecutionMode` instruction specifying the out patch size in the pipeline, they **must**
///   both specify the same patch size
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`p_stages`] includes tessellation shader stages, the `topology` member of
///   `pInputAssembly`**must** be `VK_PRIMITIVE_TOPOLOGY_PATCH_LIST`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and the `topology` member of `pInputAssembly` is `VK_PRIMITIVE_TOPOLOGY_PATCH_LIST`,
///   [`p_stages`]**must** include tessellation shader stages
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) and [`p_stages`] includes a geometry shader stage, and does not include any tessellation shader stages, its shader code **must** contain an `OpExecutionMode` instruction specifying an input primitive type that is [compatible](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-geometry-execution) with the primitive topology specified in `pInputAssembly`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) and [`p_stages`] includes a geometry shader stage, and also includes tessellation shader stages, its shader code **must** contain an `OpExecutionMode` instruction specifying an input primitive type that is [compatible](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-geometry-execution) with the primitive topology that is output by the tessellation stages
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   it includes both a fragment shader and a geometry shader, and the fragment shader code reads
///   from an input variable that is decorated with `PrimitiveId`, then the geometry shader code
///   **must** write to a matching output variable, decorated with `PrimitiveId`, in all execution
///   paths
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   it includes a mesh shader and the fragment shader code reads from an input variable that is
///   decorated with `PrimitiveId`, then the mesh shader code **must** write to a matching output
///   variable, decorated with `PrimitiveId`, in all execution paths
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`] and the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) the fragment shader **must** not read from any input attachment that is defined as [`ATTACHMENT_UNUSED`] in [`subpass`]
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and multiple pre-rasterization shader stages are included in [`p_stages`], the shader code for
///   the entry points identified by those [`p_stages`] and the rest of the state identified by this
///   structure **must** adhere to the pipeline linking rules described in the [Shader Interfaces](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces)
///   chapter
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   the fragment shader and last [pre-rasterization shader stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and any relevant state **must** adhere to the pipeline linking rules described in the [Shader Interfaces](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces)
///   chapter
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`], the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and [`subpass`] uses a depth/stencil attachment in [`render_pass`] with a read-only layout for the depth aspect in the [`AttachmentReference`] defined by [`subpass`], the `depthWriteEnable` member of [`p_depth_stencil_state`]**must** be [`FALSE`]
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`], the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and [`subpass`] uses a depth/stencil attachment in [`render_pass`] with a read-only layout for the stencil aspect in the [`AttachmentReference`] defined by [`subpass`], the `failOp`, `passOp` and `depthFailOp` members of each of the `front` and `back` members of [`p_depth_stencil_state`]**must** be `VK_STENCIL_OP_KEEP`
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`], and the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output), then for each color attachment in the subpass, if the [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features) of the format of the corresponding attachment description do not contain `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT`, then the `blendEnable` member of the corresponding element of the `pAttachments` member of [`p_color_blend_state`]**must** be [`FALSE`]
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`], and the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output), and the subpass uses color attachments, the `attachmentCount` member of [`p_color_blend_state`]**must** be equal to the `colorAttachmentCount` used to create [`subpass`]
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_VIEWPORT` or `VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT`, the `pViewports` member
///   of [`p_viewport_state`]**must** be a valid pointer to an array of
///   `pViewportState->viewportCount` valid [`Viewport`] structures
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_SCISSOR` or `VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT`, the `pScissors` member of
///   [`p_viewport_state`]**must** be a valid pointer to an array of
///   `pViewportState->scissorCount`[`Rect2D`] structures
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and the wide lines feature is not enabled, and no element of the `pDynamicStates` member of
///   [`p_dynamic_state`] is `VK_DYNAMIC_STATE_LINE_WIDTH`, the `lineWidth` member of
///   [`p_rasterization_state`]**must** be `1.0`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and the `rasterizerDiscardEnable` member of [`p_rasterization_state`] is [`FALSE`],
///   [`p_viewport_state`]**must** be a valid pointer to a valid [`PipelineViewportStateCreateInfo`]
///   structure
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and the graphics pipeline state was created with the
///   `VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE` dynamic state enabled,
///   [`p_viewport_state`]**must** be a valid pointer to a valid [`PipelineViewportStateCreateInfo`]
///   structure
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   [`p_multisample_state`]**must** be a valid pointer to a valid
///   [`PipelineMultisampleStateCreateInfo`] structure
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`], the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and [`subpass`] uses a depth/stencil attachment, [`p_depth_stencil_state`]**must** be a valid pointer to a valid [`PipelineDepthStencilStateCreateInfo`] structure
/// -    If [`render_pass`] is not [`crate::utils::Handle::null`], the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output), and [`subpass`] uses color attachments, [`p_color_blend_state`]**must** be a valid pointer to a valid [`PipelineColorBlendStateCreateInfo`] structure
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   the depth bias clamping feature is not enabled, no element of the `pDynamicStates` member of
///   [`p_dynamic_state`] is `VK_DYNAMIC_STATE_DEPTH_BIAS`, and the `depthBiasEnable` member of
///   [`p_rasterization_state`] is [`TRUE`], the `depthBiasClamp` member of
///   [`p_rasterization_state`]**must** be `0.0`
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the `[`VK_EXT_depth_range_unrestricted`]` extension is not enabled and no element of the
///   `pDynamicStates` member of [`p_dynamic_state`] is `VK_DYNAMIC_STATE_DEPTH_BOUNDS`, and the
///   `depthBoundsTestEnable` member of [`p_depth_stencil_state`] is [`TRUE`], the `minDepthBounds`
///   and `maxDepthBounds` members of [`p_depth_stencil_state`]**must** be between `0.0` and `1.0`,
///   inclusive
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT`, and the `sampleLocationsEnable` member of a
///   [`PipelineSampleLocationsStateCreateInfoEXT`] structure included in the [`p_next`] chain of
///   [`p_multisample_state`] is [`TRUE`],
///   `sampleLocationsInfo.sampleLocationGridSize.width`**must** evenly divide
///   [`MultisamplePropertiesEXT`]::`sampleLocationGridSize.width` as returned by
///   [`GetPhysicalDeviceMultisamplePropertiesEXT`] with a `samples` parameter equaling
///   `rasterizationSamples`
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT`, and the `sampleLocationsEnable` member of a
///   [`PipelineSampleLocationsStateCreateInfoEXT`] structure included in the [`p_next`] chain of
///   [`p_multisample_state`] is [`TRUE`],
///   `sampleLocationsInfo.sampleLocationGridSize.height`**must** evenly divide
///   [`MultisamplePropertiesEXT`]::`sampleLocationGridSize.height` as returned by
///   [`GetPhysicalDeviceMultisamplePropertiesEXT`] with a `samples` parameter equaling
///   `rasterizationSamples`
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT`, and the `sampleLocationsEnable` member of a
///   [`PipelineSampleLocationsStateCreateInfoEXT`] structure included in the [`p_next`] chain of
///   [`p_multisample_state`] is [`TRUE`], `sampleLocationsInfo.sampleLocationsPerPixel`**must**
///   equal `rasterizationSamples`
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the `sampleLocationsEnable` member of a [`PipelineSampleLocationsStateCreateInfoEXT`]
///   structure included in the [`p_next`] chain of [`p_multisample_state`] is [`TRUE`], the
///   fragment shader code **must** not statically use the extended instruction
///   `InterpolateAtSample`
/// - [`layout`]**must** be [consistent](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-pipelinelayout-consistency)
///   with all shaders specified in [`p_stages`]
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and neither the `[`VK_AMD_mixed_attachment_samples`]` nor the
///   `[`VK_NV_framebuffer_mixed_samples`]` extensions are enabled, and if [`subpass`] uses color
///   and/or depth/stencil attachments, then the `rasterizationSamples` member of
///   [`p_multisample_state`]**must** be the same as the sample count for those subpass attachments
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the `[`VK_AMD_mixed_attachment_samples`]` extension is enabled, and if [`subpass`] uses
///   color and/or depth/stencil attachments, then the `rasterizationSamples` member of
///   [`p_multisample_state`]**must** equal the maximum of the sample counts of those subpass
///   attachments
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the `[`VK_NV_framebuffer_mixed_samples`]` extension is enabled, and if [`subpass`] has a
///   depth/stencil attachment and depth test, stencil test, or depth bounds test are enabled, then
///   the `rasterizationSamples` member of [`p_multisample_state`]**must** be the same as the sample
///   count of the depth/stencil attachment
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the `[`VK_NV_framebuffer_mixed_samples`]` extension is enabled, and if [`subpass`] has any
///   color attachments, then the `rasterizationSamples` member of [`p_multisample_state`]**must**
///   be greater than or equal to the sample count for those subpass attachments
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the `[`VK_NV_coverage_reduction_mode`]` extension is enabled, the coverage reduction mode
///   specified by [`PipelineCoverageReductionStateCreateInfoNV::coverage_reduction_mode`], the
///   `rasterizationSamples` member of [`p_multisample_state`] and the sample counts for the color
///   and depth/stencil attachments (if the subpass has them) **must** be a valid combination
///   returned by [`GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV`]
/// -    If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) and [`subpass`] does not use any color and/or depth/stencil attachments, then the `rasterizationSamples` member of [`p_multisample_state`]**must** follow the rules for a [zero-attachment subpass](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-noattachments)
/// - If [`render_pass`] is a valid renderPass, [`subpass`]**must** be a valid subpass within
///   [`render_pass`]
/// -    If [`render_pass`] is a valid renderPass, the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), and the [`render_pass`] has multiview enabled and [`subpass`] has more than one bit set in the view mask and `multiviewTessellationShader` is not enabled, then [`p_stages`]**must** not include tessellation shaders
/// -    If [`render_pass`] is a valid renderPass, the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), and the [`render_pass`] has multiview enabled and [`subpass`] has more than one bit set in the view mask and `multiviewGeometryShader` is not enabled, then [`p_stages`]**must** not include a geometry shader
/// -    If [`render_pass`] is a valid renderPass, the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), and the [`render_pass`] has multiview enabled and [`subpass`] has more than one bit set in the view mask, shaders in the pipeline **must** not write to the `Layer` built-in output
/// -    If [`render_pass`] is a valid renderPass and the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), and the [`render_pass`] has multiview enabled, then all shaders **must** not include variables decorated with the `Layer` built-in decoration in their interfaces
/// - [`flags`]**must** not contain the `VK_PIPELINE_CREATE_DISPATCH_BASE` flag
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and an input attachment was referenced by an `aspectMask` at [`render_pass`] creation time,
///   the fragment shader **must** only read from the aspects that were specified for that input
///   attachment
/// - The number of resources in [`layout`] accessible to each shader stage that is used by the
///   pipeline **must** be less than or equal to [`PhysicalDeviceLimits::max_per_stage_resources`]
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV`, and the `viewportWScalingEnable` member of a
///   [`PipelineViewportWScalingStateCreateInfoNV`] structure, included in the [`p_next`] chain of
///   [`p_viewport_state`], is [`TRUE`], the `pViewportWScalings` member of the
///   [`PipelineViewportWScalingStateCreateInfoNV`]**must** be a pointer to an array of
///   [`PipelineViewportWScalingStateCreateInfoNV::viewport_count`] valid [`ViewportWScalingNV`]
///   structures
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV`, and if `pViewportState->pNext` chain includes a
///   [`PipelineViewportExclusiveScissorStateCreateInfoNV`] structure, and if its
///   `exclusiveScissorCount` member is not `0`, then its `pExclusiveScissors` member **must** be a
///   valid pointer to an array of `exclusiveScissorCount`[`Rect2D`] structures
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV`, and if `pViewportState->pNext` chain
///   includes a [`PipelineViewportShadingRateImageStateCreateInfoNV`] structure, then its
///   `pShadingRatePalettes` member **must** be a valid pointer to an array of `viewportCount` valid
///   [`ShadingRatePaletteNV`] structures
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT`, and if [`p_next`] chain includes a
///   [`PipelineDiscardRectangleStateCreateInfoEXT`] structure, and if its `discardRectangleCount`
///   member is not `0`, then its `pDiscardRectangles` member **must** be a valid pointer to an
///   array of `discardRectangleCount`[`Rect2D`] structures
/// - If the pipeline is being created with [vertex input state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-vertex-input),
///   and `VK_DYNAMIC_STATE_VERTEX_INPUT_EXT` is not set, [`p_vertex_input_state`]**must** be a
///   valid pointer to a valid [`PipelineVertexInputStateCreateInfo`] structure
/// - If the pipeline is being created with [vertex input state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-vertex-input),
///   [`p_input_assembly_state`]**must** be a valid pointer to a valid
///   [`PipelineInputAssemblyStateCreateInfo`] structure
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   the `Xfb` execution mode **can** be specified by no more than one shader stage in [`p_stages`]
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), and any shader stage in [`p_stages`] specifies `Xfb` execution mode it **must** be the last [pre-rasterization shader stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and a [`PipelineRasterizationStateStreamCreateInfoEXT::rasterization_stream`] value other than
///   zero is specified, all variables in the output interface of the entry point being compiled
///   decorated with `Position`, `PointSize`, `ClipDistance`, or `CullDistance`**must** be decorated
///   with identical `Stream` values that match the `rasterizationStream`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and [`PipelineRasterizationStateStreamCreateInfoEXT::rasterization_stream`] is zero, or not
///   specified, all variables in the output interface of the entry point being compiled decorated
///   with `Position`, `PointSize`, `ClipDistance`, or `CullDistance`**must** be decorated with a
///   `Stream` value of zero, or **must** not specify the `Stream` decoration
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and the last [pre-rasterization shader stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   is a geometry shader, and that geometry shader uses the `GeometryStreams` capability, then
///   [`PhysicalDeviceTransformFeedbackFeaturesEXT::geometry_streams`] feature **must** be enabled
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and there are any mesh shader stages in the pipeline there **must** not be any shader stage in
///   the pipeline with a `Xfb` execution mode
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and at least one of [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   the `lineRasterizationMode` member of a [`PipelineRasterizationLineStateCreateInfoEXT`]
///   structure included in the [`p_next`] chain of [`p_rasterization_state`] is
///   `VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT` or
///   `VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT`, then the `alphaToCoverageEnable`,
///   `alphaToOneEnable`, and `sampleShadingEnable` members of [`p_multisample_state`]**must** all
///   be [`FALSE`]
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   the `stippledLineEnable` member of [`PipelineRasterizationLineStateCreateInfoEXT`] is
///   [`TRUE`], and no element of the `pDynamicStates` member of [`p_dynamic_state`] is
///   `VK_DYNAMIC_STATE_LINE_STIPPLE_EXT`, then the `lineStippleFactor` member of
///   [`PipelineRasterizationLineStateCreateInfoEXT`]**must** be in the range [1,256]
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_LIBRARY_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR`
/// - [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR`
/// - [`flags`]**must** not include `VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and `VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT` is included in the `pDynamicStates` array then
///   `viewportCount`**must** be zero
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and `VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT` is included in the `pDynamicStates` array then
///   `scissorCount`**must** be zero
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and `VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT` is included in the `pDynamicStates` array then
///   `VK_DYNAMIC_STATE_VIEWPORT`**must** not be present
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization),
///   and `VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT` is included in the `pDynamicStates` array then
///   `VK_DYNAMIC_STATE_SCISSOR`**must** not be present
/// - If the [extendedDynamicState2LogicOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-extendedDynamicState2LogicOp)
///   feature is not enabled, there **must** be no element of the `pDynamicStates` member of
///   [`p_dynamic_state`] set to `VK_DYNAMIC_STATE_LOGIC_OP_EXT`
/// - If the [extendedDynamicState2PatchControlPoints](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-extendedDynamicState2PatchControlPoints)
///   feature is not enabled, there **must** be no element of the `pDynamicStates` member of
///   [`p_dynamic_state`] set to `VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT`
/// - If [`flags`] includes `VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV`, then the [[`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV::device_generated_commands`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-deviceGeneratedCommands)
///   feature **must** be enabled
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and [`flags`] includes `VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV`, then all stages **must**
///   not specify `Xfb` execution mode
/// - If the [`pipelineCreationCacheControl`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineCreationCacheControl)
///   feature is not enabled, [`flags`]**must** not include
///   `VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT` or
///   `VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`,
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.width`**must** be greater
///   than or equal to `1`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`,
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.height`**must** be greater
///   than or equal to `1`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`,
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.width`**must** be a
///   power-of-two value
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`,
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.height`**must** be a
///   power-of-two value
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`,
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.width`**must** be less than
///   or equal to `4`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`,
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.height`**must** be less than
///   or equal to `4`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`pipelineFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineFragmentShadingRate) is not enabled, [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.width` and [`PipelineFragmentShadingRateStateCreateInfoKHR`]::`fragmentSize.height`**must** both be equal to `1`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`primitiveFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveFragmentShadingRate) is not enabled, [`PipelineFragmentShadingRateStateCreateInfoKHR::combiner_ops`][0] **must** be `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`attachmentFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-attachmentFragmentShadingRate) is not enabled, [`PipelineFragmentShadingRateStateCreateInfoKHR::combiner_ops`][1] **must** be `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and the [`primitiveFragmentShadingRateWithMultipleViewports`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-primitiveFragmentShadingRateWithMultipleViewports)
///   limit is not supported, `VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT` is not included in
///   `pDynamicState->pDynamicStates`, and [`PipelineViewportStateCreateInfo::viewport_count`] is
///   greater than `1`, entry points specified in [`p_stages`]**must** not write to the
///   `PrimitiveShadingRateKHR` built-in
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and the [`primitiveFragmentShadingRateWithMultipleViewports`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-primitiveFragmentShadingRateWithMultipleViewports)
///   limit is not supported, and entry points specified in [`p_stages`] write to the
///   `ViewportIndex` built-in, they **must** not also write to the `PrimitiveShadingRateKHR`
///   built-in
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and the [`primitiveFragmentShadingRateWithMultipleViewports`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-primitiveFragmentShadingRateWithMultipleViewports)
///   limit is not supported, and entry points specified in [`p_stages`] write to the
///   `ViewportMaskNV` built-in, they **must** not also write to the `PrimitiveShadingRateKHR`
///   built-in
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   the [`fragmentShadingRateNonTrivialCombinerOps`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-fragmentShadingRateNonTrivialCombinerOps)
///   limit is not supported, and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`, elements of
///   [`PipelineFragmentShadingRateStateCreateInfoKHR::combiner_ops`]**must** be
///   `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR` or
///   `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`fragmentShadingRateEnums` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentShadingRateEnums) is not enabled, [`PipelineFragmentShadingRateEnumStateCreateInfoNV::shading_rate_type`]**must** be equal to `VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`pipelineFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineFragmentShadingRate) is not enabled, [`PipelineFragmentShadingRateEnumStateCreateInfoNV::shading_rate`]**must** be equal to `VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`primitiveFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-primitiveFragmentShadingRate) is not enabled, [`PipelineFragmentShadingRateEnumStateCreateInfoNV::combiner_ops`][0] **must** be `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR`
/// -    If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization) or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in `pDynamicState->pDynamicStates`, and the [`attachmentFragmentShadingRate` feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-attachmentFragmentShadingRate) is not enabled, [`PipelineFragmentShadingRateEnumStateCreateInfoNV::combiner_ops`][1] **must** be `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the [`fragmentShadingRateNonTrivialCombinerOps`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-fragmentShadingRateNonTrivialCombinerOps)
///   limit is not supported and `VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR` is not included in
///   `pDynamicState->pDynamicStates`, elements of
///   [`PipelineFragmentShadingRateEnumStateCreateInfoNV::combiner_ops`]**must** be
///   `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR` or
///   `VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the [supersampleFragmentShadingRates feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-supersampleFragmentShadingRates)
///   is not enabled, [`PipelineFragmentShadingRateEnumStateCreateInfoNV::shading_rate`]**must** not
///   be equal to `VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV`,
///   `VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV`,
///   `VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV`, or
///   `VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   or [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader),
///   and the [noInvocationFragmentShadingRates feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-noInvocationFragmentShadingRates)
///   is not enabled, [`PipelineFragmentShadingRateEnumStateCreateInfoNV::shading_rate`]**must** not
///   be equal to `VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV`
/// - All elements of the `pDynamicStates` member of [`p_dynamic_state`]**must** not be
///   `VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR`
/// - If the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization)
///   and the [vertexInputDynamicState](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-vertexInputDynamicState)
///   feature is not enabled, there **must** be no element of the `pDynamicStates` member of
///   [`p_dynamic_state`] set to `VK_DYNAMIC_STATE_VERTEX_INPUT_EXT`
/// - The pipeline **must** be created with a [complete set of state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-complete)
/// - If the [colorWriteEnable](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-colorWriteEnable)
///   feature is not enabled, there **must** be no element of the `pDynamicStates` member of
///   [`p_dynamic_state`] set to `VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT`
/// - If the pipeline is being created with fragment shader state, and the
///   [`VK_QCOM_render_pass_shader_resolve`] extension is enabled, and if subpass has any input
///   attachments, and if the subpass description contains
///   `VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM`, then the sample count of the input
///   attachments **must** equal `rasterizationSamples`
/// - If the pipeline is being created with fragment shader state, and the
///   [`VK_QCOM_render_pass_shader_resolve`] extension is enabled, and if the subpass description
///   contains `VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM`, then `sampleShadingEnable`**must**
///   be false
/// - If [`flags`] includes `VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM`, then the subpass
///   **must** be the last subpass in a subpass dependency chain
/// - If [`flags`] includes `VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM`, and if
///   `pResolveAttachments` is not `NULL`, then each resolve attachment **must** be
///   [`ATTACHMENT_UNUSED`]
/// - If the [`dynamicRendering`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dynamicRendering)
///   feature is not enabled, [`render_pass`]**must** not be [`crate::utils::Handle::null`]
/// -    If [`render_pass`] is [`crate::utils::Handle::null`], the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader), and either of [`PipelineRenderingCreateInfo`]::depthAttachmentFormat or [`PipelineRenderingCreateInfo`]::stencilAttachmentFormat are not `VK_FORMAT_UNDEFINED`, [`p_depth_stencil_state`]**must** be a valid pointer to a valid [`PipelineDepthStencilStateCreateInfo`] structure
/// -    If [`render_pass`] is [`crate::utils::Handle::null`], the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output), and [`PipelineRenderingCreateInfo`]::colorAttachmentCount is not equal to `0`, [`p_color_blend_state`]**must** be a valid pointer to a valid [`PipelineColorBlendStateCreateInfo`] structure
/// -    If [`render_pass`] is [`crate::utils::Handle::null`] and the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output), `pColorBlendState->attachmentCount`**must** be equal to [`PipelineRenderingCreateInfo`]::colorAttachmentCount
/// -    If [`render_pass`] is [`crate::utils::Handle::null`] and the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader) the fragment shader **must** not read from any input attachment
/// -    If [`render_pass`] is [`crate::utils::Handle::null`], the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), the `viewMask` member of a [`PipelineRenderingCreateInfo`] structure included in the [`p_next`] chain is not `0`, and the [`multiviewTessellationShader`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-multiview-tess) feature is not enabled, then [`p_stages`]**must** not include tessellation shaders
/// -    If [`render_pass`] is [`crate::utils::Handle::null`], the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), the `viewMask` member of a [`PipelineRenderingCreateInfo`] structure included in the [`p_next`] chain is not `0`, and the [`multiviewGeometryShader`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-multiview-gs) feature is not enabled, then [`p_stages`]**must** not include a geometry shader
/// -    If [`render_pass`] is [`crate::utils::Handle::null`], the pipeline is being created with [pre-rasterization shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-pre-rasterization), and the `viewMask` member of a [`PipelineRenderingCreateInfo`] structure included in the [`p_next`] chain is not `0`, shaders in [`p_stages`]**must** not include variables decorated with the `Layer` built-in decoration in their interfaces
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and [`render_pass`] is [`crate::utils::Handle::null`],
///   `pColorBlendState->attachmentCount`**must** be equal to the `colorAttachmentCount` member of
///   the [`PipelineRenderingCreateInfo`] structure included in the [`p_next`] chain
/// - If the pipeline is being created with [fragment shader state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-shader)
///   and [`render_pass`] is [`crate::utils::Handle::null`], fragment shaders in
///   [`p_stages`]**must** not include the `InputAttachment` capability
/// -    If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output) and [`render_pass`] is [`crate::utils::Handle::null`], for each color attachment format defined by the `pColorAttachmentFormats` member of [`PipelineRenderingCreateInfo`], if its [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features) do not contain `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT`, then the `blendEnable` member of the corresponding element of the `pAttachments` member of [`p_color_blend_state`]**must** be [`FALSE`]
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and [`render_pass`] is [`crate::utils::Handle::null`], if the [`p_next`] chain includes
///   [`AttachmentSampleCountInfoAMD`] or [`AttachmentSampleCountInfoNV`], the
///   `colorAttachmentCount` member of that structure **must** be equal to the value of
///   [`PipelineRenderingCreateInfo::color_attachment_count`]
/// -    If [`p_stages`] includes a fragment shader stage, and the fragment shader code enables [early fragment tests](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-fragment-earlytest), the [`flags`] member of [`PipelineDepthStencilStateCreateInfo`]**must** not include `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM` or `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM`
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and the [`flags`] member of [`PipelineColorBlendStateCreateInfo`] includes
///   `VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM`,
///   `renderpass`**must** not be [`crate::utils::Handle::null`]
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and the [`flags`] member of [`PipelineDepthStencilStateCreateInfo`] includes
///   `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM`
///   or `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM`,
///   `renderpass`**must** not be [`crate::utils::Handle::null`]
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and the [`flags`] member of [`PipelineColorBlendStateCreateInfo`] includes
///   `VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM`[`subpass`]*
///   *must** have been created with
///   `VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM`
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and the [`flags`] member of [`PipelineDepthStencilStateCreateInfo`] includes
///   `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM`,
///   [`subpass`]**must** have been created with
///   `VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM`
/// - If the pipeline is being created with [fragment output interface state](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#pipeline-graphics-subsets-fragment-output)
///   and the [`flags`] member of [`PipelineDepthStencilStateCreateInfo`] includes
///   `VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM`,
///   [`subpass`]**must** have been created with
///   `VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`AttachmentSampleCountInfoAMD`],
///   [`GraphicsPipelineShaderGroupsCreateInfoNV`], [`MultiviewPerViewAttributesInfoNVX`],
///   [`PipelineCompilerControlCreateInfoAMD`], [`PipelineCreationFeedbackCreateInfo`],
///   [`PipelineDiscardRectangleStateCreateInfoEXT`],
///   [`PipelineFragmentShadingRateEnumStateCreateInfoNV`],
///   [`PipelineFragmentShadingRateStateCreateInfoKHR`], [`PipelineRenderingCreateInfo`], or
///   [`PipelineRepresentativeFragmentTestStateCreateInfoNV`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`PipelineCreateFlagBits`] values
/// - [`p_stages`]**must** be a valid pointer to an array of [`stage_count`] valid
///   [`PipelineShaderStageCreateInfo`] structures
/// - [`p_rasterization_state`]**must** be a valid pointer to a valid
///   [`PipelineRasterizationStateCreateInfo`] structure
/// - If [`p_dynamic_state`] is not `NULL`, [`p_dynamic_state`]**must** be a valid pointer to a
///   valid [`PipelineDynamicStateCreateInfo`] structure
/// - [`layout`]**must** be a valid [`PipelineLayout`] handle
/// - If [`render_pass`] is not [`crate::utils::Handle::null`], [`render_pass`]**must** be a valid
///   [`RenderPass`] handle
/// - [`stage_count`]**must** be greater than `0`
/// - Each of [`base_pipeline_handle`], [`layout`], and [`render_pass`] that are valid handles of
///   non-ignored parameters **must** have been created, allocated, or retrieved from the same
///   [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Pipeline`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`PipelineCreateFlags`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`PipelineDynamicStateCreateInfo`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`PipelineLayout`]
/// - [`PipelineMultisampleStateCreateInfo`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`PipelineShaderStageCreateInfo`]
/// - [`PipelineTessellationStateCreateInfo`]
/// - [`PipelineVertexInputStateCreateInfo`]
/// - [`PipelineViewportStateCreateInfo`]
/// - [`RenderPass`]
/// - [`StructureType`]
/// - [`CreateGraphicsPipelines`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct GraphicsPipelineCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`PipelineCreateFlagBits`] specifying
    ///how the pipeline will be generated.
    flags: PipelineCreateFlags,
    ///[`stage_count`] is the number of entries in the [`p_stages`] array.
    stage_count: u32,
    ///[`p_stages`] is a pointer to an array of [`stage_count`][`PipelineShaderStageCreateInfo`]
    /// structures describing the set of the shader stages to be included in the graphics
    /// pipeline.
    p_stages: *mut PipelineShaderStageCreateInfo<'lt>,
    ///[`p_vertex_input_state`] is a pointer to a
    ///[`PipelineVertexInputStateCreateInfo`] structure defining vertex
    ///input state for use with vertex shading.
    p_vertex_input_state: *mut PipelineVertexInputStateCreateInfo<'lt>,
    ///[`p_input_assembly_state`] is a pointer to a
    ///[`PipelineInputAssemblyStateCreateInfo`] structure which determines
    ///input assembly behavior for vertex shading, as described in [Drawing Commands](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing).
    p_input_assembly_state: *mut PipelineInputAssemblyStateCreateInfo<'lt>,
    ///[`p_tessellation_state`] is a pointer to a
    ///[`PipelineTessellationStateCreateInfo`] structure defining
    ///tessellation state used by tessellation shaders.
    p_tessellation_state: *mut PipelineTessellationStateCreateInfo<'lt>,
    ///[`p_viewport_state`] is a pointer to a
    ///[`PipelineViewportStateCreateInfo`] structure defining viewport
    ///state used when rasterization is enabled.
    p_viewport_state: *mut PipelineViewportStateCreateInfo<'lt>,
    ///[`p_rasterization_state`] is a pointer to a
    ///[`PipelineRasterizationStateCreateInfo`] structure defining
    ///rasterization state.
    p_rasterization_state: *mut PipelineRasterizationStateCreateInfo<'lt>,
    ///[`p_multisample_state`] is a pointer to a
    ///[`PipelineMultisampleStateCreateInfo`] structure defining
    ///multisample state used when rasterization is enabled.
    p_multisample_state: *mut PipelineMultisampleStateCreateInfo<'lt>,
    ///[`p_depth_stencil_state`] is a pointer to a
    ///[`PipelineDepthStencilStateCreateInfo`] structure defining
    ///depth/stencil state used when rasterization is enabled for depth or
    ///stencil attachments accessed during rendering.
    p_depth_stencil_state: *mut PipelineDepthStencilStateCreateInfo<'lt>,
    ///[`p_color_blend_state`] is a pointer to a
    ///[`PipelineColorBlendStateCreateInfo`] structure defining color blend
    ///state used when rasterization is enabled for any color attachments
    ///accessed during rendering.
    p_color_blend_state: *mut PipelineColorBlendStateCreateInfo<'lt>,
    ///[`p_dynamic_state`] is a pointer to a
    ///[`PipelineDynamicStateCreateInfo`] structure defining which
    ///properties of the pipeline state object are dynamic and **can** be changed
    ///independently of the pipeline state.
    ///This **can** be `NULL`, which means no state in the pipeline is considered
    ///dynamic.
    p_dynamic_state: *mut PipelineDynamicStateCreateInfo<'lt>,
    ///[`layout`] is the description of binding locations used by both the
    ///pipeline and descriptor sets used with the pipeline.
    layout: PipelineLayout,
    ///[`render_pass`] is a handle to a render pass object describing the
    ///environment in which the pipeline will be used.
    ///The pipeline **must** only be used with a render pass instance compatible
    ///with the one provided.
    ///See [Render Pass Compatibility](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility) for more
    ///information.
    render_pass: RenderPass,
    ///[`subpass`] is the index of the subpass in the render pass where this
    ///pipeline will be used.
    subpass: u32,
    ///[`base_pipeline_handle`] is a pipeline to derive from.
    base_pipeline_handle: Pipeline,
    ///[`base_pipeline_index`] is an index into the `pCreateInfos`
    ///parameter to use as a pipeline to derive from.
    base_pipeline_index: i32,
}
///[VkPipelineCacheCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheCreateInfo.html) - Structure specifying parameters of a newly created pipeline cache
///# C Specifications
///The [`PipelineCacheCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineCacheCreateInfo {
///    VkStructureType               sType;
///    const void*                   pNext;
///    VkPipelineCacheCreateFlags    flags;
///    size_t                        initialDataSize;
///    const void*                   pInitialData;
///} VkPipelineCacheCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`PipelineCacheCreateFlagBits`] specifying the behavior of the
///   pipeline cache.
/// - [`initial_data_size`] is the number of bytes in [`p_initial_data`]. If [`initial_data_size`]
///   is zero, the pipeline cache will initially be empty.
/// - [`p_initial_data`] is a pointer to previously retrieved pipeline cache data. If the pipeline
///   cache data is incompatible (as defined below) with the device, the pipeline cache will be
///   initially empty. If [`initial_data_size`] is zero, [`p_initial_data`] is ignored.
///# Description
///Valid Usage
/// - If [`initial_data_size`] is not `0`, it **must** be equal to the size of [`p_initial_data`],
///   as returned by [`GetPipelineCacheData`] when [`p_initial_data`] was originally retrieved
/// - If [`initial_data_size`] is not `0`, [`p_initial_data`]**must** have been retrieved from a
///   previous call to [`GetPipelineCacheData`]
/// - If the [`pipelineCreationCacheControl`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineCreationCacheControl)
///   feature is not enabled, [`flags`]**must** not include
///   `VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be a valid combination of [`PipelineCacheCreateFlagBits`] values
/// - If [`initial_data_size`] is not `0`, [`p_initial_data`]**must** be a valid pointer to an array
///   of [`initial_data_size`] bytes
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineCacheCreateFlags`]
/// - [`StructureType`]
/// - [`CreatePipelineCache`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineCacheCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`PipelineCacheCreateFlagBits`]
    ///specifying the behavior of the pipeline cache.
    flags: PipelineCacheCreateFlags,
    ///[`initial_data_size`] is the number of bytes in [`p_initial_data`].
    ///If [`initial_data_size`] is zero, the pipeline cache will initially be
    ///empty.
    initial_data_size: usize,
    ///[`p_initial_data`] is a pointer to previously retrieved pipeline cache
    ///data.
    ///If the pipeline cache data is incompatible (as defined below) with the
    ///device, the pipeline cache will be initially empty.
    ///If [`initial_data_size`] is zero, [`p_initial_data`] is ignored.
    p_initial_data: *mut c_void,
}
///[VkPipelineCacheHeaderVersionOne](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheHeaderVersionOne.html) - Structure describing the layout of the pipeline cache header
///# C Specifications
///Version one of the pipeline cache header is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineCacheHeaderVersionOne {
///    uint32_t                        headerSize;
///    VkPipelineCacheHeaderVersion    headerVersion;
///    uint32_t                        vendorID;
///    uint32_t                        deviceID;
///    uint8_t                         pipelineCacheUUID[VK_UUID_SIZE];
///} VkPipelineCacheHeaderVersionOne;
///```
///# Members
/// - [`header_size`] is the length in bytes of the pipeline cache header.
/// - [`header_version`] is a [`PipelineCacheHeaderVersion`] enum value specifying the version of
///   the header. A consumer of the pipeline cache **should** use the cache version to interpret the
///   remainder of the cache header.
/// - [`vendor_id`] is the [`PhysicalDeviceProperties`]::[`vendor_id`] of the implementation.
/// - [`device_id`] is the [`PhysicalDeviceProperties`]::[`device_id`] of the implementation.
/// - [`pipeline_cache_uuid`] is the [`PhysicalDeviceProperties`]::[`pipeline_cache_uuid`] of the
///   implementation.
///# Description
///Unlike most structures declared by the Vulkan API, all fields of this
///structure are written with the least significant byte first, regardless of
///host byte-order.The C language specification does not define the packing of structure
///members.
///This layout assumes tight structure member packing, with members laid out in
///the order listed in the structure, and the intended size of the structure is
///32 bytes.
///If a compiler produces code that diverges from that pattern, applications
///**must** employ another method to set values at the correct offsets.Valid Usage
/// - [`header_size`]**must** be 32
/// - [`header_version`]**must** be `VK_PIPELINE_CACHE_HEADER_VERSION_ONE`
///Valid Usage (Implicit)
/// - [`header_version`]**must** be a valid [`PipelineCacheHeaderVersion`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineCacheHeaderVersion`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineCacheHeaderVersionOne {
    ///[`header_size`] is the length in bytes of the pipeline cache header.
    header_size: u32,
    ///[`header_version`] is a [`PipelineCacheHeaderVersion`] enum value
    ///specifying the version of the header.
    ///A consumer of the pipeline cache **should** use the cache version to
    ///interpret the remainder of the cache header.
    header_version: PipelineCacheHeaderVersion,
    ///[`vendor_id`] is the [`PhysicalDeviceProperties`]::[`vendor_id`]
    ///of the implementation.
    vendor_id: u32,
    ///[`device_id`] is the [`PhysicalDeviceProperties`]::[`device_id`]
    ///of the implementation.
    device_id: u32,
    ///[`pipeline_cache_uuid`] is the
    ///[`PhysicalDeviceProperties`]::[`pipeline_cache_uuid`] of the
    ///implementation.
    pipeline_cache_uuid: [u8; UUID_SIZE],
}
///[VkPushConstantRange](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPushConstantRange.html) - Structure specifying a push constant range
///# C Specifications
///The [`PushConstantRange`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPushConstantRange {
///    VkShaderStageFlags    stageFlags;
///    uint32_t              offset;
///    uint32_t              size;
///} VkPushConstantRange;
///```
///# Members
/// - [`stage_flags`] is a set of stage flags describing the shader stages that will access a range
///   of push constants. If a particular stage is not included in the range, then accessing members
///   of that range of push constants from the corresponding shader stage will return undefined
///   values.
/// - [`offset`] and [`size`] are the start offset and size, respectively, consumed by the range.
///   Both [`offset`] and [`size`] are in units of bytes and **must** be a multiple of 4. The layout
///   of the push constant variables is specified in the shader.
///# Description
///Valid Usage
/// - [`offset`]**must** be less than [`PhysicalDeviceLimits::max_push_constants_size`]
/// - [`offset`]**must** be a multiple of `4`
/// - [`size`]**must** be greater than `0`
/// - [`size`]**must** be a multiple of `4`
/// - [`size`]**must** be less than or equal to [`PhysicalDeviceLimits::max_push_constants_size`]
///   minus [`offset`]
///Valid Usage (Implicit)
/// - [`stage_flags`]**must** be a valid combination of [`ShaderStageFlagBits`] values
/// - [`stage_flags`]**must** not be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineLayoutCreateInfo`]
/// - [`ShaderStageFlags`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PushConstantRange {
    ///[`stage_flags`] is a set of stage flags describing the shader stages
    ///that will access a range of push constants.
    ///If a particular stage is not included in the range, then accessing
    ///members of that range of push constants from the corresponding shader
    ///stage will return undefined values.
    stage_flags: ShaderStageFlags,
    ///[`offset`] and [`size`] are the start offset and size, respectively,
    ///consumed by the range.
    ///Both [`offset`] and [`size`] are in units of bytes and **must** be a
    ///multiple of 4.
    ///The layout of the push constant variables is specified in the shader.
    offset: u32,
    ///No documentation found
    size: u32,
}
///[VkPipelineLayoutCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineLayoutCreateInfo.html) - Structure specifying the parameters of a newly created pipeline layout object
///# C Specifications
///The [`PipelineLayoutCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPipelineLayoutCreateInfo {
///    VkStructureType                 sType;
///    const void*                     pNext;
///    VkPipelineLayoutCreateFlags     flags;
///    uint32_t                        setLayoutCount;
///    const VkDescriptorSetLayout*    pSetLayouts;
///    uint32_t                        pushConstantRangeCount;
///    const VkPushConstantRange*      pPushConstantRanges;
///} VkPipelineLayoutCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`set_layout_count`] is the number of descriptor sets included in the pipeline layout.
/// - [`p_set_layouts`] is a pointer to an array of [`DescriptorSetLayout`] objects.
/// - [`push_constant_range_count`] is the number of push constant ranges included in the pipeline
///   layout.
/// - [`p_push_constant_ranges`] is a pointer to an array of [`PushConstantRange`] structures
///   defining a set of push constant ranges for use in a single pipeline layout. In addition to
///   descriptor set layouts, a pipeline layout also describes how many push constants **can** be
///   accessed by each stage of the pipeline.
///# Description
///Valid Usage
/// - [`set_layout_count`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_bound_descriptor_sets`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_SAMPLER` and `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` accessible to
///   any given shader stage across all elements of [`p_set_layouts`]**must** be less than or equal
///   to [`PhysicalDeviceLimits::max_per_stage_descriptor_samplers`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` and `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`
///   accessible to any given shader stage across all elements of [`p_set_layouts`]**must** be less
///   than or equal to [`PhysicalDeviceLimits::max_per_stage_descriptor_uniform_buffers`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` and `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`
///   accessible to any given shader stage across all elements of [`p_set_layouts`]**must** be less
///   than or equal to [`PhysicalDeviceLimits::max_per_stage_descriptor_storage_buffers`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, and
///   `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_per_stage_descriptor_sampled_images`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, and `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`
///   accessible to any given shader stage across all elements of [`p_set_layouts`]**must** be less
///   than or equal to [`PhysicalDeviceLimits::max_per_stage_descriptor_storage_images`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_per_stage_descriptor_input_attachments`]
/// - The total number of bindings in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceInlineUniformBlockProperties::max_per_stage_descriptor_inline_uniform_blocks`]
/// - The total number of descriptors with a `descriptorType` of `VK_DESCRIPTOR_TYPE_SAMPLER` and
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_per_stage_descriptor_update_after_bind_samplers`]
/// - The total number of descriptors with a `descriptorType` of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER`
///   and `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` accessible to any given shader stage across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_per_stage_descriptor_update_after_bind_uniform_buffers`]
/// - The total number of descriptors with a `descriptorType` of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER`
///   and `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` accessible to any given shader stage across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_per_stage_descriptor_update_after_bind_storage_buffers`]
/// - The total number of descriptors with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, and
///   `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_per_stage_descriptor_update_after_bind_sampled_images`]
/// - The total number of descriptors with a `descriptorType` of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`,
///   and `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_per_stage_descriptor_update_after_bind_storage_images`]
/// - The total number of descriptors with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` accessible to any given shader stage across all elements
///   of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_per_stage_descriptor_update_after_bind_input_attachments`]
/// - The total number of bindings with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` accessible to any given shader stage across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceInlineUniformBlockProperties::
///   max_per_stage_descriptor_update_after_bind_inline_uniform_blocks`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_SAMPLER` and `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` accessible
///   across all shader stages and across all elements of [`p_set_layouts`]**must** be less than or
///   equal to [`PhysicalDeviceLimits::max_descriptor_set_samplers`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_descriptor_set_uniform_buffers`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` accessible across all shader stages and across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_descriptor_set_uniform_buffers_dynamic`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_descriptor_set_storage_buffers`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` accessible across all shader stages and across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_descriptor_set_storage_buffers_dynamic`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, and
///   `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_descriptor_set_sampled_images`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, and `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`
///   accessible across all shader stages and across all elements of [`p_set_layouts`]**must** be
///   less than or equal to [`PhysicalDeviceLimits::max_descriptor_set_storage_images`]
/// - The total number of descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_descriptor_set_input_attachments`]
/// - The total number of bindings in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` accessible across all shader stages and across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceInlineUniformBlockProperties::max_descriptor_set_inline_uniform_blocks`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_SAMPLER` and
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::max_descriptor_set_update_after_bind_samplers`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` accessible
///   across all shader stages and across all elements of [`p_set_layouts`]**must** be less than or
///   equal to [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_uniform_buffers`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`
///   accessible across all shader stages and across all elements of [`p_set_layouts`]**must** be
///   less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_uniform_buffers_dynamic`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` accessible
///   across all shader stages and across all elements of [`p_set_layouts`]**must** be less than or
///   equal to [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_storage_buffers`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`
///   accessible across all shader stages and across all elements of [`p_set_layouts`]**must** be
///   less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_storage_buffers_dynamic`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`,
///   `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, and `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` accessible
///   across all shader stages and across all elements of [`p_set_layouts`]**must** be less than or
///   equal to [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_sampled_images`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, and
///   `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_storage_images`]
/// - The total number of descriptors of the type `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` accessible
///   across all shader stages and across all elements of [`p_set_layouts`]**must** be less than or
///   equal to [`PhysicalDeviceDescriptorIndexingProperties::
///   max_descriptor_set_update_after_bind_input_attachments`]
/// - The total number of bindings with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK` accessible across all shader stages and across all
///   elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceInlineUniformBlockProperties::
///   max_descriptor_set_update_after_bind_inline_uniform_blocks`]
/// - Any two elements of [`p_push_constant_ranges`]**must** not include the same stage in
///   `stageFlags`
/// - [`p_set_layouts`]**must** not contain more than one descriptor set layout that was created
///   with `VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR` set
/// - The total number of bindings in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR` accessible to any given shader stage across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceAccelerationStructurePropertiesKHR::
///   max_per_stage_descriptor_acceleration_structures`]
/// - The total number of bindings with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR` accessible to any given shader stage across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceAccelerationStructurePropertiesKHR::
///   max_per_stage_descriptor_update_after_bind_acceleration_structures`]
/// - The total number of bindings in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set with a `descriptorType`
///   of `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR` accessible across all shader stages and
///   across all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceAccelerationStructurePropertiesKHR::
///   max_descriptor_set_acceleration_structures`]
/// - The total number of bindings with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR` accessible across all shader stages and across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceAccelerationStructurePropertiesKHR::
///   max_descriptor_set_update_after_bind_acceleration_structures`]
/// - The total number of bindings with a `descriptorType` of
///   `VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV` accessible across all shader stages and across
///   all elements of [`p_set_layouts`]**must** be less than or equal to
///   [`PhysicalDeviceRayTracingPropertiesNV::max_descriptor_set_acceleration_structures`]
/// -    The total number of `pImmutableSamplers` created with [`flags`] containing `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT` or `VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT` across all shader stages and across all elements of [`p_set_layouts`]**must** be less than or equal to [[`PhysicalDeviceFragmentDensityMap2PropertiesEXT::max_descriptor_set_subsampled_samplers`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxDescriptorSetSubsampledSamplers)
/// - Any element of [`p_set_layouts`]**must** not have been created with the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE` bit set
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be `0`
/// - If [`set_layout_count`] is not `0`, [`p_set_layouts`]**must** be a valid pointer to an array
///   of [`set_layout_count`] valid [`DescriptorSetLayout`] handles
/// - If [`push_constant_range_count`] is not `0`, [`p_push_constant_ranges`]**must** be a valid
///   pointer to an array of [`push_constant_range_count`] valid [`PushConstantRange`] structures
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorSetLayout`]
/// - [`PipelineLayoutCreateFlags`]
/// - [`PushConstantRange`]
/// - [`StructureType`]
/// - [`CreatePipelineLayout`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineLayoutCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: PipelineLayoutCreateFlags,
    ///[`set_layout_count`] is the number of descriptor sets included in the
    ///pipeline layout.
    set_layout_count: u32,
    ///[`p_set_layouts`] is a pointer to an array of
    ///[`DescriptorSetLayout`] objects.
    p_set_layouts: *mut DescriptorSetLayout,
    ///[`push_constant_range_count`] is the number of push constant ranges
    ///included in the pipeline layout.
    push_constant_range_count: u32,
    ///[`p_push_constant_ranges`] is a pointer to an array of
    ///[`PushConstantRange`] structures defining a set of push constant
    ///ranges for use in a single pipeline layout.
    ///In addition to descriptor set layouts, a pipeline layout also describes
    ///how many push constants **can** be accessed by each stage of the pipeline.
    p_push_constant_ranges: *mut PushConstantRange,
}
///[VkSamplerCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerCreateInfo.html) - Structure specifying parameters of a newly created sampler
///# C Specifications
///The [`SamplerCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSamplerCreateInfo {
///    VkStructureType         sType;
///    const void*             pNext;
///    VkSamplerCreateFlags    flags;
///    VkFilter                magFilter;
///    VkFilter                minFilter;
///    VkSamplerMipmapMode     mipmapMode;
///    VkSamplerAddressMode    addressModeU;
///    VkSamplerAddressMode    addressModeV;
///    VkSamplerAddressMode    addressModeW;
///    float                   mipLodBias;
///    VkBool32                anisotropyEnable;
///    float                   maxAnisotropy;
///    VkBool32                compareEnable;
///    VkCompareOp             compareOp;
///    float                   minLod;
///    float                   maxLod;
///    VkBorderColor           borderColor;
///    VkBool32                unnormalizedCoordinates;
///} VkSamplerCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`SamplerCreateFlagBits`] describing additional parameters of the
///   sampler.
/// - [`mag_filter`] is a [`Filter`] value specifying the magnification filter to apply to lookups.
/// - [`min_filter`] is a [`Filter`] value specifying the minification filter to apply to lookups.
/// - [`mipmap_mode`] is a [`SamplerMipmapMode`] value specifying the mipmap filter to apply to
///   lookups.
/// - [`address_mode_u`] is a [`SamplerAddressMode`] value specifying the addressing mode for U
///   coordinates outside [0,1).
/// - [`address_mode_v`] is a [`SamplerAddressMode`] value specifying the addressing mode for V
///   coordinates outside [0,1).
/// - [`address_mode_w`] is a [`SamplerAddressMode`] value specifying the addressing mode for W
///   coordinates outside [0,1).
/// - [`mip_lod_bias`] is the bias to be added to mipmap LOD (level-of-detail) calculation and bias provided by image sampling functions in SPIR-V, as described in the [Level-of-Detail Operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-level-of-detail-operation) section.
/// - [`anisotropy_enable`] is [`TRUE`] to enable anisotropic filtering, as described in the [Texel Anisotropic Filtering](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-anisotropic-filtering) section, or [`FALSE`] otherwise.
/// - [`max_anisotropy`] is the anisotropy value clamp used by the sampler when
///   [`anisotropy_enable`] is [`TRUE`]. If [`anisotropy_enable`] is [`FALSE`], [`max_anisotropy`]
///   is ignored.
/// - [`compare_enable`] is [`TRUE`] to enable comparison against a reference value during lookups,
///   or [`FALSE`] otherwise.  - Note: Some implementations will default to shader state if this
///   member does not match.
/// - [`compare_op`] is a [`CompareOp`] value specifying the comparison function to apply to fetched
///   data before filtering as described in the [Depth Compare Operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-depth-compare-operation)
///   section.
/// - [`min_lod`] is used to clamp the [minimum of the computed LOD value](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-level-of-detail-operation).
/// - [`max_lod`] is used to clamp the [maximum of the computed LOD value](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-level-of-detail-operation).
///   To avoid clamping the maximum value, set [`max_lod`] to the constant [`LOD_CLAMP_NONE`].
/// - [`border_color`] is a [`BorderColor`] value specifying the predefined border color to use.
/// - [`unnormalized_coordinates`] controls whether to use unnormalized or normalized texel
///   coordinates to address texels of the image. When set to [`TRUE`], the range of the image
///   coordinates used to lookup the texel is in the range of zero to the image size in each
///   dimension. When set to [`FALSE`] the range of image coordinates is zero to one.When
///   [`unnormalized_coordinates`] is [`TRUE`], images the sampler is used with in the shader have
///   the following requirements:  - The `viewType`**must** be either `VK_IMAGE_VIEW_TYPE_1D` or
///   `VK_IMAGE_VIEW_TYPE_2D`.  - The image view **must** have a single layer and a single mip
///   level. When [`unnormalized_coordinates`] is [`TRUE`], image built-in functions in the shader
///   that use the sampler have the following requirements:  - The functions **must** not use
///   projection.  - The functions **must** not use offsets.
///# Description
///The maximum number of sampler objects which **can** be simultaneously created
///on a device is implementation-dependent and specified by the
///[maxSamplerAllocationCount](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxSamplerAllocationCount) member of the
///[`PhysicalDeviceLimits`] structure.Since [`Sampler`] is a non-dispatchable handle type,
/// implementations
///**may** return the same handle for sampler state vectors that are identical.
///In such cases, all such objects would only count once against the
///`maxSamplerAllocationCount` limit.Valid Usage
/// - The absolute value of [`mip_lod_bias`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_sampler_lod_bias`]
/// - If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///   [`PhysicalDevicePortabilitySubsetFeaturesKHR::sampler_mip_lod_bias`] is [`FALSE`],
///   [`mip_lod_bias`]**must** be zero
/// - [`max_lod`]**must** be greater than or equal to [`min_lod`]
/// - If the [anisotropic sampling](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-samplerAnisotropy)
///   feature is not enabled, [`anisotropy_enable`]**must** be [`FALSE`]
/// - If [`anisotropy_enable`] is [`TRUE`], [`max_anisotropy`]**must** be between `1.0` and
///   [`PhysicalDeviceLimits::max_sampler_anisotropy`], inclusive
/// - If [sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion)
///   is enabled and the [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features)
///   of the sampler Y′C<sub>B</sub>C<sub>R</sub> conversion do not support
///   `VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT`,
///   [`min_filter`] and [`mag_filter`]**must** be equal to the sampler Y′C<sub>B</sub>C<sub>R</sub>
///   conversion’s `chromaFilter`
/// - If [`unnormalized_coordinates`] is [`TRUE`], [`min_filter`] and [`mag_filter`]**must** be
///   equal
/// - If [`unnormalized_coordinates`] is [`TRUE`], [`mipmap_mode`]**must** be
///   `VK_SAMPLER_MIPMAP_MODE_NEAREST`
/// - If [`unnormalized_coordinates`] is [`TRUE`], [`min_lod`] and [`max_lod`]**must** be zero
/// - If [`unnormalized_coordinates`] is [`TRUE`], [`address_mode_u`] and [`address_mode_v`]**must**
///   each be either `VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE` or
///   `VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER`
/// - If [`unnormalized_coordinates`] is [`TRUE`], [`anisotropy_enable`]**must** be [`FALSE`]
/// - If [`unnormalized_coordinates`] is [`TRUE`], [`compare_enable`]**must** be [`FALSE`]
/// - If any of [`address_mode_u`], [`address_mode_v`] or [`address_mode_w`] are
///   `VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER`, [`border_color`]**must** be a valid [`BorderColor`]
///   value
/// - If [sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion)
///   is enabled, [`address_mode_u`], [`address_mode_v`], and [`address_mode_w`]**must** be
///   `VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE`, [`anisotropy_enable`]**must** be [`FALSE`], and
///   [`unnormalized_coordinates`]**must** be [`FALSE`]
/// -    The sampler reduction mode **must** be set to `VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE` if [sampler Y′C<sub>B</sub>C<sub>R</sub> conversion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-YCbCr-conversion) is enabled
/// - If [samplerMirrorClampToEdge](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-samplerMirrorClampToEdge)
///   is not enabled, and if the `[`VK_KHR_sampler_mirror_clamp_to_edge`]` extension is not enabled,
///   [`address_mode_u`], [`address_mode_v`] and [`address_mode_w`]**must** not be
///   `VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE`
/// - If [`compare_enable`] is [`TRUE`], [`compare_op`]**must** be a valid [`CompareOp`] value
/// - If either [`mag_filter`] or [`min_filter`] is `VK_FILTER_CUBIC_EXT`,
///   [`anisotropy_enable`]**must** be [`FALSE`]
/// - If [`compare_enable`] is [`TRUE`], the `reductionMode` member of
///   [`SamplerReductionModeCreateInfo`]**must** be `VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE`
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then [`min_filter`] and
///   [`mag_filter`]**must** be equal
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then [`mipmap_mode`]**must** be
///   `VK_SAMPLER_MIPMAP_MODE_NEAREST`
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then [`min_lod`] and
///   [`max_lod`]**must** be zero
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then [`address_mode_u`] and
///   [`address_mode_v`]**must** each be either `VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE` or
///   `VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER`
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then
///   [`anisotropy_enable`]**must** be [`FALSE`]
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then [`compare_enable`]**must**
///   be [`FALSE`]
/// - If [`flags`] includes `VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT`, then
///   [`unnormalized_coordinates`]**must** be [`FALSE`]
/// - If [`border_color`] is one of `VK_BORDER_COLOR_FLOAT_CUSTOM_EXT` or
///   `VK_BORDER_COLOR_INT_CUSTOM_EXT`, then a [`SamplerCustomBorderColorCreateInfoEXT`]**must** be
///   included in the [`p_next`] chain
/// - If the [`customBorderColors`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-customBorderColors)
///   feature is not enabled, [`border_color`]**must** not be `VK_BORDER_COLOR_FLOAT_CUSTOM_EXT` or
///   `VK_BORDER_COLOR_INT_CUSTOM_EXT`
/// - If [`border_color`] is one of `VK_BORDER_COLOR_FLOAT_CUSTOM_EXT` or
///   `VK_BORDER_COLOR_INT_CUSTOM_EXT`, and [`SamplerCustomBorderColorCreateInfoEXT::format`] is not
///   `VK_FORMAT_UNDEFINED`, [`SamplerCustomBorderColorCreateInfoEXT::custom_border_color`]**must**
///   be within the range of values representable in `format`
/// -    The maximum number of samplers with custom border colors which **can** be simultaneously created on a device is implementation-dependent and specified by the [maxCustomBorderColorSamplers](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxCustomBorderColorSamplers) member of the [`PhysicalDeviceCustomBorderColorPropertiesEXT`] structure
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`SamplerBorderColorComponentMappingCreateInfoEXT`],
///   [`SamplerCustomBorderColorCreateInfoEXT`], [`SamplerReductionModeCreateInfo`], or
///   [`SamplerYcbcrConversionInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`SamplerCreateFlagBits`] values
/// - [`mag_filter`]**must** be a valid [`Filter`] value
/// - [`min_filter`]**must** be a valid [`Filter`] value
/// - [`mipmap_mode`]**must** be a valid [`SamplerMipmapMode`] value
/// - [`address_mode_u`]**must** be a valid [`SamplerAddressMode`] value
/// - [`address_mode_v`]**must** be a valid [`SamplerAddressMode`] value
/// - [`address_mode_w`]**must** be a valid [`SamplerAddressMode`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`BorderColor`]
/// - [`CompareOp`]
/// - [`Filter`]
/// - [`SamplerAddressMode`]
/// - [`SamplerCreateFlags`]
/// - [`SamplerMipmapMode`]
/// - [`StructureType`]
/// - [`CreateSampler`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SamplerCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`SamplerCreateFlagBits`] describing
    ///additional parameters of the sampler.
    flags: SamplerCreateFlags,
    ///[`mag_filter`] is a [`Filter`] value specifying the magnification
    ///filter to apply to lookups.
    mag_filter: Filter,
    ///[`min_filter`] is a [`Filter`] value specifying the minification
    ///filter to apply to lookups.
    min_filter: Filter,
    ///[`mipmap_mode`] is a [`SamplerMipmapMode`] value specifying the
    ///mipmap filter to apply to lookups.
    mipmap_mode: SamplerMipmapMode,
    ///[`address_mode_u`] is a [`SamplerAddressMode`] value specifying the
    ///addressing mode for U coordinates outside [0,1).
    address_mode_u: SamplerAddressMode,
    ///[`address_mode_v`] is a [`SamplerAddressMode`] value specifying the
    ///addressing mode for V coordinates outside [0,1).
    address_mode_v: SamplerAddressMode,
    ///[`address_mode_w`] is a [`SamplerAddressMode`] value specifying the
    ///addressing mode for W coordinates outside [0,1).
    address_mode_w: SamplerAddressMode,
    ///[`mip_lod_bias`] is the bias to be added to
    ///mipmap LOD (level-of-detail) calculation and bias provided by image
    ///sampling functions in SPIR-V, as described in the
    ///[Level-of-Detail Operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-level-of-detail-operation)
    ///section.
    mip_lod_bias: f32,
    ///[`anisotropy_enable`] is [`TRUE`] to
    ///enable anisotropic filtering, as described in the
    ///[Texel Anisotropic Filtering](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-anisotropic-filtering)
    ///section, or [`FALSE`] otherwise.
    anisotropy_enable: Bool32,
    ///[`max_anisotropy`] is the anisotropy value clamp used by the sampler
    ///when [`anisotropy_enable`] is [`TRUE`].
    ///If [`anisotropy_enable`] is [`FALSE`], [`max_anisotropy`] is
    ///ignored.
    max_anisotropy: f32,
    ///[`compare_enable`] is [`TRUE`] to enable comparison against a
    ///reference value during lookups, or [`FALSE`] otherwise.
    /// - Note: Some implementations will default to shader state if this member does not match.
    compare_enable: Bool32,
    ///[`compare_op`] is a [`CompareOp`] value specifying the comparison
    ///function to apply to fetched data before filtering as described in the
    ///[Depth Compare Operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-depth-compare-operation) section.
    compare_op: CompareOp,
    ///[`min_lod`] is used to clamp the [minimum of the computed LOD value](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-level-of-detail-operation).
    min_lod: f32,
    ///[`max_lod`] is used to clamp the [maximum of the computed LOD value](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-level-of-detail-operation).
    ///To avoid clamping the maximum value, set [`max_lod`] to the constant
    ///[`LOD_CLAMP_NONE`].
    max_lod: f32,
    ///[`border_color`] is a [`BorderColor`] value specifying the
    ///predefined border color to use.
    border_color: BorderColor,
    ///[`unnormalized_coordinates`]
    ///controls whether to use unnormalized or normalized texel coordinates to
    ///address texels of the image.
    ///When set to [`TRUE`], the range of the image coordinates used to
    ///lookup the texel is in the range of zero to the image size in each
    ///dimension.
    ///When set to [`FALSE`] the range of image coordinates is zero to
    ///one.When [`unnormalized_coordinates`] is [`TRUE`], images the sampler is
    ///used with in the shader have the following requirements:
    /// - The `viewType`**must** be either `VK_IMAGE_VIEW_TYPE_1D` or `VK_IMAGE_VIEW_TYPE_2D`.
    /// - The image view **must** have a single layer and a single mip level.
    ///When [`unnormalized_coordinates`] is [`TRUE`], image built-in
    ///functions in the shader that use the sampler have the following
    ///requirements:
    /// - The functions **must** not use projection.
    /// - The functions **must** not use offsets.
    unnormalized_coordinates: Bool32,
}
///[VkCommandPoolCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandPoolCreateInfo.html) - Structure specifying parameters of a newly created command pool
///# C Specifications
///The [`CommandPoolCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkCommandPoolCreateInfo {
///    VkStructureType             sType;
///    const void*                 pNext;
///    VkCommandPoolCreateFlags    flags;
///    uint32_t                    queueFamilyIndex;
///} VkCommandPoolCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`CommandPoolCreateFlagBits`] indicating usage behavior for the pool
///   and command buffers allocated from it.
/// - [`queue_family_index`] designates a queue family as described in section [Queue Family Properties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-queueprops).
///   All command buffers allocated from this command pool **must** be submitted on queues from the
///   same queue family.
///# Description
///Valid Usage
/// - If the protected memory feature is not enabled, the `VK_COMMAND_POOL_CREATE_PROTECTED_BIT` bit
///   of [`flags`]**must** not be set
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be a valid combination of [`CommandPoolCreateFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandPoolCreateFlags`]
/// - [`StructureType`]
/// - [`CreateCommandPool`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CommandPoolCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`CommandPoolCreateFlagBits`] indicating
    ///usage behavior for the pool and command buffers allocated from it.
    flags: CommandPoolCreateFlags,
    ///[`queue_family_index`] designates a queue family as described in section
    ///[Queue Family Properties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-queueprops).
    ///All command buffers allocated from this command pool **must** be submitted
    ///on queues from the same queue family.
    queue_family_index: u32,
}
///[VkCommandBufferAllocateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferAllocateInfo.html) - Structure specifying the allocation parameters for command buffer object
///# C Specifications
///The [`CommandBufferAllocateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkCommandBufferAllocateInfo {
///    VkStructureType         sType;
///    const void*             pNext;
///    VkCommandPool           commandPool;
///    VkCommandBufferLevel    level;
///    uint32_t                commandBufferCount;
///} VkCommandBufferAllocateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`command_pool`] is the command pool from which the command buffers are allocated.
/// - [`level`] is a [`CommandBufferLevel`] value specifying the command buffer level.
/// - [`command_buffer_count`] is the number of command buffers to allocate from the pool.
///# Description
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`command_pool`]**must** be a valid [`CommandPool`] handle
/// - [`level`]**must** be a valid [`CommandBufferLevel`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandBufferLevel`]
/// - [`CommandPool`]
/// - [`StructureType`]
/// - [`AllocateCommandBuffers`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CommandBufferAllocateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`command_pool`] is the command pool from which the command buffers are
    ///allocated.
    command_pool: CommandPool,
    ///[`level`] is a [`CommandBufferLevel`] value specifying the command
    ///buffer level.
    level: CommandBufferLevel,
    ///[`command_buffer_count`] is the number of command buffers to allocate
    ///from the pool.
    command_buffer_count: u32,
}
///[VkCommandBufferInheritanceInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceInfo.html) - Structure specifying command buffer inheritance information
///# C Specifications
///If the command buffer is a secondary command buffer, then the
///[`CommandBufferInheritanceInfo`] structure defines any state that will
///be inherited from the primary command buffer:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkCommandBufferInheritanceInfo {
///    VkStructureType                  sType;
///    const void*                      pNext;
///    VkRenderPass                     renderPass;
///    uint32_t                         subpass;
///    VkFramebuffer                    framebuffer;
///    VkBool32                         occlusionQueryEnable;
///    VkQueryControlFlags              queryFlags;
///    VkQueryPipelineStatisticFlags    pipelineStatistics;
///} VkCommandBufferInheritanceInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`render_pass`] is a [`RenderPass`] object defining which render passes the [`CommandBuffer`] will be [compatible](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility) with and **can** be executed within.
/// - [`subpass`] is the index of the subpass within the render pass instance that the
///   [`CommandBuffer`] will be executed within.
/// - [`framebuffer`]**can** refer to the [`Framebuffer`] object that the [`CommandBuffer`] will be
///   rendering to if it is executed within a render pass instance. It **can** be
///   [`crate::utils::Handle::null`] if the framebuffer is not known.
/// - [`occlusion_query_enable`] specifies whether the command buffer **can** be executed while an
///   occlusion query is active in the primary command buffer. If this is [`TRUE`], then this
///   command buffer **can** be executed whether the primary command buffer has an occlusion query
///   active or not. If this is [`FALSE`], then the primary command buffer **must** not have an
///   occlusion query active.
/// - [`query_flags`] specifies the query flags that **can** be used by an active occlusion query in
///   the primary command buffer when this secondary command buffer is executed. If this value
///   includes the `VK_QUERY_CONTROL_PRECISE_BIT` bit, then the active query **can** return boolean
///   results or actual sample counts. If this bit is not set, then the active query **must** not
///   use the `VK_QUERY_CONTROL_PRECISE_BIT` bit.
/// - [`pipeline_statistics`] is a bitmask of [`QueryPipelineStatisticFlagBits`] specifying the set
///   of pipeline statistics that **can** be counted by an active query in the primary command
///   buffer when this secondary command buffer is executed. If this value includes a given bit,
///   then this command buffer **can** be executed whether the primary command buffer has a pipeline
///   statistics query active that includes this bit or not. If this value excludes a given bit,
///   then the active pipeline statistics query **must** not be from a query pool that counts that
///   statistic.
///# Description
///If the [`CommandBuffer`] will not be executed within a render pass
///instance,
///or if the render pass instance was begun with [`CmdBeginRendering`],
///[`render_pass`], [`subpass`], and [`framebuffer`] are ignored.Valid Usage
/// - If the [inherited queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-inheritedQueries)
///   feature is not enabled, [`occlusion_query_enable`]**must** be [`FALSE`]
/// - If the [inherited queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-inheritedQueries)
///   feature is enabled, [`query_flags`]**must** be a valid combination of [`QueryControlFlagBits`]
///   values
/// - If the [inherited queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-inheritedQueries)
///   feature is not enabled, [`query_flags`]**must** be `0`
/// - If the [pipeline statistics queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineStatisticsQuery)
///   feature is enabled, [`pipeline_statistics`]**must** be a valid combination of
///   [`QueryPipelineStatisticFlagBits`] values
/// - If the [pipeline statistics queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineStatisticsQuery)
///   feature is not enabled, [`pipeline_statistics`]**must** be `0`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`AttachmentSampleCountInfoAMD`],
///   [`CommandBufferInheritanceConditionalRenderingInfoEXT`],
///   [`CommandBufferInheritanceRenderPassTransformInfoQCOM`],
///   [`CommandBufferInheritanceRenderingInfo`], [`CommandBufferInheritanceViewportScissorInfoNV`],
///   or [`MultiviewPerViewAttributesInfoNVX`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - Both of [`framebuffer`], and [`render_pass`] that are valid handles of non-ignored parameters
///   **must** have been created, allocated, or retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`CommandBufferBeginInfo`]
/// - [`Framebuffer`]
/// - [`QueryControlFlags`]
/// - [`QueryPipelineStatisticFlags`]
/// - [`RenderPass`]
/// - [`StructureType`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CommandBufferInheritanceInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`render_pass`] is a [`RenderPass`] object defining which render
    ///passes the [`CommandBuffer`] will be [compatible](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility) with and **can** be executed within.
    render_pass: RenderPass,
    ///[`subpass`] is the index of the subpass within the render pass
    ///instance that the [`CommandBuffer`] will be executed within.
    subpass: u32,
    ///[`framebuffer`]**can** refer to the [`Framebuffer`] object that the
    ///[`CommandBuffer`] will be rendering to if it is executed within a
    ///render pass instance.
    ///It **can** be [`crate::utils::Handle::null`] if the framebuffer is not known.
    framebuffer: Framebuffer,
    ///[`occlusion_query_enable`] specifies whether the command buffer **can** be
    ///executed while an occlusion query is active in the primary command
    ///buffer.
    ///If this is [`TRUE`], then this command buffer **can** be executed
    ///whether the primary command buffer has an occlusion query active or not.
    ///If this is [`FALSE`], then the primary command buffer **must** not
    ///have an occlusion query active.
    occlusion_query_enable: Bool32,
    ///[`query_flags`] specifies the query flags that **can** be used by an
    ///active occlusion query in the primary command buffer when this secondary
    ///command buffer is executed.
    ///If this value includes the `VK_QUERY_CONTROL_PRECISE_BIT` bit, then
    ///the active query **can** return boolean results or actual sample counts.
    ///If this bit is not set, then the active query **must** not use the
    ///`VK_QUERY_CONTROL_PRECISE_BIT` bit.
    query_flags: QueryControlFlags,
    ///[`pipeline_statistics`] is a bitmask of
    ///[`QueryPipelineStatisticFlagBits`] specifying the set of pipeline
    ///statistics that **can** be counted by an active query in the primary
    ///command buffer when this secondary command buffer is executed.
    ///If this value includes a given bit, then this command buffer **can** be
    ///executed whether the primary command buffer has a pipeline statistics
    ///query active that includes this bit or not.
    ///If this value excludes a given bit, then the active pipeline statistics
    ///query **must** not be from a query pool that counts that statistic.
    pipeline_statistics: QueryPipelineStatisticFlags,
}
///[VkCommandBufferBeginInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferBeginInfo.html) - Structure specifying a command buffer begin operation
///# C Specifications
///The [`CommandBufferBeginInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkCommandBufferBeginInfo {
///    VkStructureType                          sType;
///    const void*                              pNext;
///    VkCommandBufferUsageFlags                flags;
///    const VkCommandBufferInheritanceInfo*    pInheritanceInfo;
///} VkCommandBufferBeginInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`CommandBufferUsageFlagBits`] specifying usage behavior for the
///   command buffer.
/// - [`p_inheritance_info`] is a pointer to a [`CommandBufferInheritanceInfo`] structure, used if
///   `commandBuffer` is a secondary command buffer. If this is a primary command buffer, then this
///   value is ignored.
///# Description
///Valid Usage
/// - If [`flags`] contains `VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT`, the `framebuffer`
///   member of [`p_inheritance_info`]**must** be either [`crate::utils::Handle::null`], or a valid
///   [`Framebuffer`] that is compatible with the `renderPass` member of [`p_inheritance_info`]
/// - If [`flags`] contains `VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT` and the `renderPass`
///   member of [`p_inheritance_info`] is not [`crate::utils::Handle::null`], `renderPass`**must**
///   be a valid [`RenderPass`]
/// - If [`flags`] contains `VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT` and the `renderPass`
///   member of [`p_inheritance_info`] is not [`crate::utils::Handle::null`], the `subpass` member
///   of [`p_inheritance_info`]**must** be a valid subpass index within the `renderPass` member of
///   [`p_inheritance_info`]
/// - If [`flags`] contains `VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT` and the `renderPass`
///   member of [`p_inheritance_info`] is [`crate::utils::Handle::null`], the [`p_next`] chain of
///   [`p_inheritance_info`]**must** include a [`CommandBufferInheritanceRenderingInfo`] structure
/// - If [`flags`] contains `VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT`, the `renderPass`
///   member of [`p_inheritance_info`] is [`crate::utils::Handle::null`], and the [`p_next`] chain
///   of [`p_inheritance_info`] includes a [`AttachmentSampleCountInfoAMD`] or
///   [`AttachmentSampleCountInfoNV`] structure, the `colorAttachmentCount` member of that structure
///   **must** be equal to the value of
///   [`CommandBufferInheritanceRenderingInfo::color_attachment_count`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`DeviceGroupCommandBufferBeginInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`CommandBufferUsageFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandBufferInheritanceInfo`]
/// - [`CommandBufferUsageFlags`]
/// - [`StructureType`]
/// - [`BeginCommandBuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CommandBufferBeginInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`CommandBufferUsageFlagBits`]
    ///specifying usage behavior for the command buffer.
    flags: CommandBufferUsageFlags,
    ///[`p_inheritance_info`] is a pointer to a
    ///[`CommandBufferInheritanceInfo`] structure, used if
    ///`commandBuffer` is a secondary command buffer.
    ///If this is a primary command buffer, then this value is ignored.
    p_inheritance_info: *mut CommandBufferInheritanceInfo<'lt>,
}
///[VkRenderPassBeginInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderPassBeginInfo.html) - Structure specifying render pass begin information
///# C Specifications
///The [`RenderPassBeginInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkRenderPassBeginInfo {
///    VkStructureType        sType;
///    const void*            pNext;
///    VkRenderPass           renderPass;
///    VkFramebuffer          framebuffer;
///    VkRect2D               renderArea;
///    uint32_t               clearValueCount;
///    const VkClearValue*    pClearValues;
///} VkRenderPassBeginInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`render_pass`] is the render pass to begin an instance of.
/// - [`framebuffer`] is the framebuffer containing the attachments that are used with the render
///   pass.
/// - [`render_area`] is the render area that is affected by the render pass instance, and is
///   described in more detail below.
/// - [`clear_value_count`] is the number of elements in [`p_clear_values`].
/// - [`p_clear_values`] is a pointer to an array of [`clear_value_count`][`ClearValue`] structures
///   containing clear values for each attachment, if the attachment uses a `loadOp` value of
///   `VK_ATTACHMENT_LOAD_OP_CLEAR` or if the attachment has a depth/stencil format and uses a
///   `stencilLoadOp` value of `VK_ATTACHMENT_LOAD_OP_CLEAR`. The array is indexed by attachment
///   number. Only elements corresponding to cleared attachments are used. Other elements of
///   [`p_clear_values`] are ignored.
///# Description
///[`render_area`] is the render area that is affected by the render pass
///instance.
///The effects of attachment load, store and multisample resolve operations are
///restricted to the pixels whose x and y coordinates fall within the render
///area on all attachments.
///The render area extends to all layers of [`framebuffer`].
///The application **must** ensure (using scissor if necessary) that all rendering
///is contained within the render area.
///The render area, after any transform specified by
///[`RenderPassTransformBeginInfoQCOM::transform`] is applied, **must**
///be contained within the framebuffer dimensions.If [render pass transform](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-renderpass-transform) is
///enabled, then [`render_area`]**must** equal the framebuffer pre-transformed
///dimensions.
///After [`render_area`] has been transformed by
///[`RenderPassTransformBeginInfoQCOM::transform`], the resulting
///render area **must** be equal to the framebuffer dimensions.If [subpass shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-subpassShading) is enabled, then
///[`render_area`]**must** equal the framebuffer dimensions.When multiview is enabled, the resolve
/// operation at the end of a subpass
///applies to all views in the view mask.Valid Usage
/// - [`clear_value_count`]**must** be greater than the largest attachment index in [`render_pass`]
///   specifying a `loadOp` (or `stencilLoadOp`, if the attachment has a depth/stencil format) of
///   `VK_ATTACHMENT_LOAD_OP_CLEAR`
/// - If [`clear_value_count`] is not `0`, [`p_clear_values`]**must** be a valid pointer to an array
///   of [`clear_value_count`][`ClearValue`] unions
/// - [`render_pass`]**must** be [compatible](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility)
///   with the [`render_pass`] member of the [`FramebufferCreateInfo`] structure specified when
///   creating [`framebuffer`]
/// - If the [`p_next`] chain does not contain [`DeviceGroupRenderPassBeginInfo`] or its
///   `deviceRenderAreaCount` member is equal to 0, `renderArea.offset.x`**must** be greater than or
///   equal to 0
/// - If the [`p_next`] chain does not contain [`DeviceGroupRenderPassBeginInfo`] or its
///   `deviceRenderAreaCount` member is equal to 0, `renderArea.offset.y`**must** be greater than or
///   equal to 0
/// - If the [`p_next`] chain does not contain [`DeviceGroupRenderPassBeginInfo`] or its
///   `deviceRenderAreaCount` member is equal to 0, `renderArea.offset.x` +
///   `renderArea.extent.width`**must** be less than or equal to [`FramebufferCreateInfo::width`]
///   the [`framebuffer`] was created with
/// - If the [`p_next`] chain does not contain [`DeviceGroupRenderPassBeginInfo`] or its
///   `deviceRenderAreaCount` member is equal to 0, `renderArea.offset.y` +
///   `renderArea.extent.height`**must** be less than or equal to [`FramebufferCreateInfo::height`]
///   the [`framebuffer`] was created with
/// - If the [`p_next`] chain contains [`DeviceGroupRenderPassBeginInfo`], `offset.x` +
///   `extent.width` of each element of `pDeviceRenderAreas`**must** be less than or equal to
///   [`FramebufferCreateInfo::width`] the [`framebuffer`] was created with
/// - If the [`p_next`] chain contains [`DeviceGroupRenderPassBeginInfo`], `offset.y` +
///   `extent.height` of each element of `pDeviceRenderAreas`**must** be less than or equal to
///   [`FramebufferCreateInfo::height`] the [`framebuffer`] was created with
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that did not
///   include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, and the [`p_next`] chain includes a
///   [`RenderPassAttachmentBeginInfo`] structure, its `attachmentCount`**must** be zero
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `attachmentCount` of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be equal
///   to the value of [`FramebufferAttachmentsCreateInfo::attachment_image_info_count`] used to
///   create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** have
///   been created on the same [`Device`] as [`framebuffer`] and [`render_pass`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] of an image created with a value of [`ImageCreateInfo::flags`] equal to the
///   `flags` member of the corresponding element of
///   [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used to create [`framebuffer`]
/// -    If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a [`ImageView`] with [an inherited usage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-image-inherited-usage) equal to the `usage` member of the corresponding element of [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used to create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] with a width equal to the `width` member of the corresponding element of
///   [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used to create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] with a height equal to the `height` member of the corresponding element of
///   [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used to create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] of an image created with a value of
///   [`ImageViewCreateInfo`]::`subresourceRange.layerCount` equal to the `layerCount` member of the
///   corresponding element of [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used
///   to create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] of an image created with a value of
///   [`ImageFormatListCreateInfo::view_format_count`] equal to the `viewFormatCount` member of the
///   corresponding element of [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used
///   to create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] of an image created with a set of elements in
///   [`ImageFormatListCreateInfo::p_view_formats`] equal to the set of elements in the
///   `pViewFormats` member of the corresponding element of
///   [`FramebufferAttachmentsCreateInfo::p_attachment_image_infos`] used to create [`framebuffer`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] of an image created with a value of [`ImageViewCreateInfo::format`] equal to the
///   corresponding value of [`AttachmentDescription::format`] in [`render_pass`]
/// - If [`framebuffer`] was created with a [`FramebufferCreateInfo::flags`] value that included
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of the `pAttachments` member of a
///   [`RenderPassAttachmentBeginInfo`] structure included in the [`p_next`] chain **must** be a
///   [`ImageView`] of an image created with a value of [`ImageCreateInfo::samples`] equal to the
///   corresponding value of [`AttachmentDescription::samples`] in [`render_pass`]
/// - If the [`p_next`] chain includes [`RenderPassTransformBeginInfoQCOM`],
///   `renderArea.offset`**must** equal (0,0)
/// - If the [`p_next`] chain includes [`RenderPassTransformBeginInfoQCOM`], `renderArea.extent`
///   transformed by [`RenderPassTransformBeginInfoQCOM::transform`]**must** equal the
///   [`framebuffer`] dimensions
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`DeviceGroupRenderPassBeginInfo`],
///   [`RenderPassAttachmentBeginInfo`], [`RenderPassSampleLocationsBeginInfoEXT`], or
///   [`RenderPassTransformBeginInfoQCOM`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`render_pass`]**must** be a valid [`RenderPass`] handle
/// - [`framebuffer`]**must** be a valid [`Framebuffer`] handle
/// - Both of [`framebuffer`], and [`render_pass`]**must** have been created, allocated, or
///   retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ClearValue`]
/// - [`Framebuffer`]
/// - [`Rect2D`]
/// - [`RenderPass`]
/// - [`StructureType`]
/// - [`CmdBeginRenderPass`]
/// - [`CmdBeginRenderPass2`]
/// - [`CmdBeginRenderPass2KHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct RenderPassBeginInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`render_pass`] is the render pass to begin an instance of.
    render_pass: RenderPass,
    ///[`framebuffer`] is the framebuffer containing the attachments that are
    ///used with the render pass.
    framebuffer: Framebuffer,
    ///[`render_area`] is the render area that is affected by the render pass
    ///instance, and is described in more detail below.
    render_area: Rect2D,
    ///[`clear_value_count`] is the number of elements in [`p_clear_values`].
    clear_value_count: u32,
    ///[`p_clear_values`] is a pointer to an array of [`clear_value_count`][`ClearValue`]
    /// structures containing clear values for each attachment, if the attachment uses a
    /// `loadOp` value of `VK_ATTACHMENT_LOAD_OP_CLEAR` or if the attachment has a
    ///depth/stencil format and uses a `stencilLoadOp` value of
    ///`VK_ATTACHMENT_LOAD_OP_CLEAR`.
    ///The array is indexed by attachment number.
    ///Only elements corresponding to cleared attachments are used.
    ///Other elements of [`p_clear_values`] are ignored.
    p_clear_values: *mut ClearValue,
}
///[VkClearDepthStencilValue](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkClearDepthStencilValue.html) - Structure specifying a clear depth stencil value
///# C Specifications
///The [`ClearDepthStencilValue`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkClearDepthStencilValue {
///    float       depth;
///    uint32_t    stencil;
///} VkClearDepthStencilValue;
///```
///# Members
/// - [`depth`] is the clear value for the depth aspect of the depth/stencil attachment. It is a
///   floating-point value which is automatically converted to the attachment’s format.
/// - [`stencil`] is the clear value for the stencil aspect of the depth/stencil attachment. It is a
///   32-bit integer value which is converted to the attachment’s format by taking the appropriate
///   number of LSBs.
///# Description
///Valid Usage
/// - Unless the `[`VK_EXT_depth_range_unrestricted`]` extension is enabled [`depth`]**must** be
///   between `0.0` and `1.0`, inclusive
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ClearValue`]
/// - [`CmdClearDepthStencilImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ClearDepthStencilValue {
    ///[`depth`] is the clear value for the depth aspect of the depth/stencil
    ///attachment.
    ///It is a floating-point value which is automatically converted to the
    ///attachment’s format.
    depth: f32,
    ///[`stencil`] is the clear value for the stencil aspect of the
    ///depth/stencil attachment.
    ///It is a 32-bit integer value which is converted to the attachment’s
    ///format by taking the appropriate number of LSBs.
    stencil: u32,
}
///[VkClearAttachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkClearAttachment.html) - Structure specifying a clear attachment
///# C Specifications
///The [`ClearAttachment`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkClearAttachment {
///    VkImageAspectFlags    aspectMask;
///    uint32_t              colorAttachment;
///    VkClearValue          clearValue;
///} VkClearAttachment;
///```
///# Members
/// - [`aspect_mask`] is a mask selecting the color, depth and/or stencil aspects of the attachment
///   to be cleared.
/// - [`color_attachment`] is only meaningful if `VK_IMAGE_ASPECT_COLOR_BIT` is set in
///   [`aspect_mask`], in which case it is an index into the currently bound color attachments.
/// - [`clear_value`] is the color or depth/stencil value to clear the attachment to, as described in [Clear Values](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#clears-values) below.
///# Description
///Valid Usage
/// - If [`aspect_mask`] includes `VK_IMAGE_ASPECT_COLOR_BIT`, it **must** not include
///   `VK_IMAGE_ASPECT_DEPTH_BIT` or `VK_IMAGE_ASPECT_STENCIL_BIT`
/// - [`aspect_mask`]**must** not include `VK_IMAGE_ASPECT_METADATA_BIT`
/// - [`aspect_mask`]**must** not include `VK_IMAGE_ASPECT_MEMORY_PLANE*_i_*BIT_EXT` for any index
///   *i*
/// - [`clear_value`]**must** be a valid [`ClearValue`] union
///Valid Usage (Implicit)
/// - [`aspect_mask`]**must** be a valid combination of [`ImageAspectFlagBits`] values
/// - [`aspect_mask`]**must** not be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ClearValue`]
/// - [`ImageAspectFlags`]
/// - [`CmdClearAttachments`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ClearAttachment {
    ///[`aspect_mask`] is a mask selecting the color, depth and/or stencil
    ///aspects of the attachment to be cleared.
    aspect_mask: ImageAspectFlags,
    ///[`color_attachment`] is only meaningful if
    ///`VK_IMAGE_ASPECT_COLOR_BIT` is set in [`aspect_mask`], in which
    ///case it is an index into the currently bound color attachments.
    color_attachment: u32,
    ///[`clear_value`] is the color or depth/stencil value to clear the
    ///attachment to, as described in [Clear Values](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#clears-values) below.
    clear_value: ClearValue,
}
///[VkAttachmentDescription](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescription.html) - Structure specifying an attachment description
///# C Specifications
///The [`AttachmentDescription`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkAttachmentDescription {
///    VkAttachmentDescriptionFlags    flags;
///    VkFormat                        format;
///    VkSampleCountFlagBits           samples;
///    VkAttachmentLoadOp              loadOp;
///    VkAttachmentStoreOp             storeOp;
///    VkAttachmentLoadOp              stencilLoadOp;
///    VkAttachmentStoreOp             stencilStoreOp;
///    VkImageLayout                   initialLayout;
///    VkImageLayout                   finalLayout;
///} VkAttachmentDescription;
///```
///# Members
/// - [`flags`] is a bitmask of [`AttachmentDescriptionFlagBits`] specifying additional properties
///   of the attachment.
/// - [`format`] is a [`Format`] value specifying the format of the image view that will be used for
///   the attachment.
/// - [`samples`] is a [`SampleCountFlagBits`] value specifying the number of samples of the image.
/// - [`load_op`] is a [`AttachmentLoadOp`] value specifying how the contents of color and depth
///   components of the attachment are treated at the beginning of the subpass where it is first
///   used.
/// - [`store_op`] is a [`AttachmentStoreOp`] value specifying how the contents of color and depth
///   components of the attachment are treated at the end of the subpass where it is last used.
/// - [`stencil_load_op`] is a [`AttachmentLoadOp`] value specifying how the contents of stencil
///   components of the attachment are treated at the beginning of the subpass where it is first
///   used.
/// - [`stencil_store_op`] is a [`AttachmentStoreOp`] value specifying how the contents of stencil
///   components of the attachment are treated at the end of the last subpass where it is used.
/// - [`initial_layout`] is the layout the attachment image subresource will be in when a render
///   pass instance begins.
/// - [`final_layout`] is the layout the attachment image subresource will be transitioned to when a
///   render pass instance ends.
///# Description
///If the attachment uses a color format, then [`load_op`] and [`store_op`]
///are used, and [`stencil_load_op`] and [`stencil_store_op`] are ignored.
///If the format has depth and/or stencil components, [`load_op`] and
///[`store_op`] apply only to the depth data, while [`stencil_load_op`] and
///[`stencil_store_op`] define how the stencil data is handled.
///[`load_op`] and [`stencil_load_op`] define the *load operations* that
///execute as part of the first subpass that uses the attachment.
///[`store_op`] and [`stencil_store_op`] define the *store operations* that
///execute as part of the last subpass that uses the attachment.The load operation for each sample
/// in an attachment happens-before any
///recorded command which accesses the sample in the first subpass where the
///attachment is used.
///Load operations for attachments with a depth/stencil format execute in the
///`VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT` pipeline stage.
///Load operations for attachments with a color format execute in the
///`VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT` pipeline stage.The store operation for each
/// sample in an attachment happens-after any
///recorded command which accesses the sample in the last subpass where the
///attachment is used.
///Store operations for attachments with a depth/stencil format execute in the
///`VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT` pipeline stage.
///Store operations for attachments with a color format execute in the
///`VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT` pipeline stage.If an attachment is not used by
/// any subpass, then [`load_op`],
///[`store_op`], [`stencil_store_op`], and [`stencil_load_op`] are ignored,
///and the attachment’s memory contents will not be modified by execution of a
///render pass instance.The load and store operations apply on the first and last use of each view
///in the render pass, respectively.
///If a view index of an attachment is not included in the view mask in any
///subpass that uses it, then the load and store operations are ignored, and
///the attachment’s memory contents will not be modified by execution of a
///render pass instance.During a render pass instance, input/color attachments with color formats
///that have a component size of 8, 16, or 32 bits **must** be represented in the
///attachment’s format throughout the instance.
///Attachments with other floating- or fixed-point color formats, or with depth
///components **may** be represented in a format with a precision higher than the
///attachment format, but **must** be represented with the same range.
///When such a component is loaded via the [`load_op`], it will be converted
///into an implementation-dependent format used by the render pass.
///Such components **must** be converted from the render pass format, to the
///format of the attachment, before they are resolved or stored at the end of a
///render pass instance via [`store_op`].
///Conversions occur as described in [Numeric
///Representation and Computation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-numerics) and [Fixed-Point
///Data Conversions](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fixedconv).If [`flags`] includes `VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT`, then
///the attachment is treated as if it shares physical memory with another
///attachment in the same render pass.
///This information limits the ability of the implementation to reorder certain
///operations (like layout transitions and the [`load_op`]) such that it is
///not improperly reordered against other uses of the same physical memory via
///a different attachment.
///This is described in more detail below.If a render pass uses multiple attachments that alias the
/// same device
///memory, those attachments **must** each include the
///`VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT` bit in their attachment
///description flags.
///Attachments aliasing the same memory occurs in multiple ways:
/// - Multiple attachments being assigned the same image view as part of framebuffer creation.
/// - Attachments using distinct image views that correspond to the same image subresource of an
///   image.
/// - Attachments using views of distinct image subresources which are bound to overlapping memory
///   ranges.
///Multiple attachments that alias the same memory **must** not be used in a
///single subpass.
///A given attachment index **must** not be used multiple times in a single
///subpass, with one exception: two subpass attachments **can** use the same
///attachment index if at least one use is as an input attachment and neither
///use is as a resolve or preserve attachment.
///In other words, the same view **can** be used simultaneously as an input and
///color or depth/stencil attachment, but **must** not be used as multiple color
///or depth/stencil attachments nor as resolve or preserve attachments.
///The precise set of valid scenarios is described in more detail
///[below](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-feedbackloop).If a set of attachments alias each other, then all except the first to be
///used in the render pass **must** use an [`initial_layout`] of
///`VK_IMAGE_LAYOUT_UNDEFINED`, since the earlier uses of the other aliases
///make their contents undefined.
///Once an alias has been used and a different alias has been used after it,
///the first alias **must** not be used in any later subpasses.
///However, an application **can** assign the same image view to multiple aliasing
///attachment indices, which allows that image view to be used multiple times
///even if other aliases are used in between.Valid Usage
/// - [`final_layout`]**must** not be `VK_IMAGE_LAYOUT_UNDEFINED` or
///   `VK_IMAGE_LAYOUT_PREINITIALIZED`
/// - If [`format`] is a color format, [`initial_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a color format, [`initial_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL`
/// - If [`format`] is a depth/stencil format, [`initial_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL`
/// - If [`format`] is a color format, [`final_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a color format, [`final_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL`
/// - If [`format`] is a depth/stencil format, [`final_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL`
/// - If the [`separateDepthStencilLayouts`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-separateDepthStencilLayouts)
///   feature is not enabled, [`initial_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`, `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If the [`separateDepthStencilLayouts`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-separateDepthStencilLayouts)
///   feature is not enabled, [`final_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`, `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a color format, [`initial_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`, `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a color format, [`final_layout`]**must** not be
///   `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`, `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a depth/stencil format which includes both depth and stencil aspects,
///   [`initial_layout`]**must** not be `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`, `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or
///   `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a depth/stencil format which includes both depth and stencil aspects,
///   [`final_layout`]**must** not be `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`, `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or
///   `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a depth/stencil format which includes only the depth aspect,
///   [`initial_layout`]**must** not be `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a depth/stencil format which includes only the depth aspect,
///   [`final_layout`]**must** not be `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
/// - If [`format`] is a depth/stencil format which includes only the stencil aspect,
///   [`initial_layout`]**must** not be `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`
/// - If [`format`] is a depth/stencil format which includes only the stencil aspect,
///   [`final_layout`]**must** not be `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`
///Valid Usage (Implicit)
/// - [`flags`]**must** be a valid combination of [`AttachmentDescriptionFlagBits`] values
/// - [`format`]**must** be a valid [`Format`] value
/// - [`samples`]**must** be a valid [`SampleCountFlagBits`] value
/// - [`load_op`]**must** be a valid [`AttachmentLoadOp`] value
/// - [`store_op`]**must** be a valid [`AttachmentStoreOp`] value
/// - [`stencil_load_op`]**must** be a valid [`AttachmentLoadOp`] value
/// - [`stencil_store_op`]**must** be a valid [`AttachmentStoreOp`] value
/// - [`initial_layout`]**must** be a valid [`ImageLayout`] value
/// - [`final_layout`]**must** be a valid [`ImageLayout`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescriptionFlags`]
/// - [`AttachmentLoadOp`]
/// - [`AttachmentStoreOp`]
/// - [`Format`]
/// - [`ImageLayout`]
/// - [`RenderPassCreateInfo`]
/// - [`SampleCountFlagBits`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct AttachmentDescription {
    ///[`flags`] is a bitmask of [`AttachmentDescriptionFlagBits`]
    ///specifying additional properties of the attachment.
    flags: AttachmentDescriptionFlags,
    ///[`format`] is a [`Format`] value specifying the format of the
    ///image view that will be used for the attachment.
    format: Format,
    ///[`samples`] is a [`SampleCountFlagBits`] value specifying the
    ///number of samples of the image.
    samples: SampleCountFlagBits,
    ///[`load_op`] is a [`AttachmentLoadOp`] value specifying how the
    ///contents of color and depth components of the attachment are treated at
    ///the beginning of the subpass where it is first used.
    load_op: AttachmentLoadOp,
    ///[`store_op`] is a [`AttachmentStoreOp`] value specifying how the
    ///contents of color and depth components of the attachment are treated at
    ///the end of the subpass where it is last used.
    store_op: AttachmentStoreOp,
    ///[`stencil_load_op`] is a [`AttachmentLoadOp`] value specifying how
    ///the contents of stencil components of the attachment are treated at the
    ///beginning of the subpass where it is first used.
    stencil_load_op: AttachmentLoadOp,
    ///[`stencil_store_op`] is a [`AttachmentStoreOp`] value specifying how
    ///the contents of stencil components of the attachment are treated at the
    ///end of the last subpass where it is used.
    stencil_store_op: AttachmentStoreOp,
    ///[`initial_layout`] is the layout the attachment image subresource will
    ///be in when a render pass instance begins.
    initial_layout: ImageLayout,
    ///[`final_layout`] is the layout the attachment image subresource will be
    ///transitioned to when a render pass instance ends.
    final_layout: ImageLayout,
}
///[VkAttachmentReference](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentReference.html) - Structure specifying an attachment reference
///# C Specifications
///The [`AttachmentReference`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkAttachmentReference {
///    uint32_t         attachment;
///    VkImageLayout    layout;
///} VkAttachmentReference;
///```
///# Members
/// - [`attachment`] is either an integer value identifying an attachment at the corresponding index
///   in [`RenderPassCreateInfo::p_attachments`], or [`ATTACHMENT_UNUSED`] to signify that this
///   attachment is not used.
/// - [`layout`] is a [`ImageLayout`] value specifying the layout the attachment uses during the
///   subpass.
///# Description
///Valid Usage
/// - If [`attachment`] is not [`ATTACHMENT_UNUSED`], [`layout`]**must** not be
///   `VK_IMAGE_LAYOUT_UNDEFINED`, `VK_IMAGE_LAYOUT_PREINITIALIZED`,
///   `VK_IMAGE_LAYOUT_PRESENT_SRC_KHR`, `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`,
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`, `VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`, or
///   `VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`
///Valid Usage (Implicit)
/// - [`layout`]**must** be a valid [`ImageLayout`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageLayout`]
/// - [`RenderPassFragmentDensityMapCreateInfoEXT`]
/// - [`SubpassDescription`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct AttachmentReference {
    ///[`attachment`] is either an integer value identifying an attachment at
    ///the corresponding index in
    ///[`RenderPassCreateInfo`]::`pAttachments`, or
    ///[`ATTACHMENT_UNUSED`] to signify that this attachment is not used.
    attachment: u32,
    ///[`layout`] is a [`ImageLayout`] value specifying the layout the
    ///attachment uses during the subpass.
    layout: ImageLayout,
}
///[VkSubpassDescription](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubpassDescription.html) - Structure specifying a subpass description
///# C Specifications
///The [`SubpassDescription`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSubpassDescription {
///    VkSubpassDescriptionFlags       flags;
///    VkPipelineBindPoint             pipelineBindPoint;
///    uint32_t                        inputAttachmentCount;
///    const VkAttachmentReference*    pInputAttachments;
///    uint32_t                        colorAttachmentCount;
///    const VkAttachmentReference*    pColorAttachments;
///    const VkAttachmentReference*    pResolveAttachments;
///    const VkAttachmentReference*    pDepthStencilAttachment;
///    uint32_t                        preserveAttachmentCount;
///    const uint32_t*                 pPreserveAttachments;
///} VkSubpassDescription;
///```
///# Members
/// - [`flags`] is a bitmask of [`SubpassDescriptionFlagBits`] specifying usage of the subpass.
/// - [`pipeline_bind_point`] is a [`PipelineBindPoint`] value specifying the pipeline type
///   supported for this subpass.
/// - [`input_attachment_count`] is the number of input attachments.
/// - [`p_input_attachments`] is a pointer to an array of [`AttachmentReference`] structures
///   defining the input attachments for this subpass and their layouts.
/// - [`color_attachment_count`] is the number of color attachments.
/// - [`p_color_attachments`] is a pointer to an array of
///   [`color_attachment_count`][`AttachmentReference`] structures defining the color attachments
///   for this subpass and their layouts.
/// - [`p_resolve_attachments`] is `NULL` or a pointer to an array of
///   [`color_attachment_count`][`AttachmentReference`] structures defining the resolve attachments
///   for this subpass and their layouts.
/// - [`p_depth_stencil_attachment`] is a pointer to a [`AttachmentReference`] structure specifying
///   the depth/stencil attachment for this subpass and its layout.
/// - [`preserve_attachment_count`] is the number of preserved attachments.
/// - [`p_preserve_attachments`] is a pointer to an array of [`preserve_attachment_count`] render
///   pass attachment indices identifying attachments that are not used by this subpass, but whose
///   contents **must** be preserved throughout the subpass.
///# Description
///Each element of the [`p_input_attachments`] array corresponds to an input
///attachment index in a fragment shader, i.e. if a shader declares an image
///variable decorated with a `InputAttachmentIndex` value of **X**, then it
///uses the attachment provided in [`p_input_attachments`][**X**].
///Input attachments **must** also be bound to the pipeline in a descriptor set.
///If the `attachment` member of any element of [`p_input_attachments`] is
///[`ATTACHMENT_UNUSED`], the application **must** not read from the
///corresponding input attachment index.
///Fragment shaders **can** use subpass input variables to access the contents of
///an input attachment at the fragment’s (x, y, layer) framebuffer coordinates.
///Input attachments **must** not be used by any subpasses within a render pass
///that enables [render pass transform](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-renderpass-transform).Each element of the [`p_color_attachments`] array corresponds to an output
///location in the shader, i.e. if the shader declares an output variable
///decorated with a `Location` value of **X**, then it uses the attachment
///provided in [`p_color_attachments`][**X**].
///If the `attachment` member of any element of [`p_color_attachments`] is
///[`ATTACHMENT_UNUSED`],
///or if [Color Write Enable](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-color-write-enable) has been
///disabled for the corresponding attachment index,
///then writes to the corresponding location by a fragment shader are
///discarded.If
///[`flags`] does not include
///`VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM`, and if
///[`p_resolve_attachments`] is not `NULL`, each of its elements corresponds to
///a color attachment (the element in [`p_color_attachments`] at the same
///index), and a multisample resolve operation is defined for each attachment.
///At the end of each subpass, multisample resolve operations read the
///subpass’s color attachments, and resolve the samples for each pixel within
///the render area to the same pixel location in the corresponding resolve
///attachments, unless the resolve attachment index is
///[`ATTACHMENT_UNUSED`].Similarly, if
///[`flags`] does not include
///`VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM`, and
///[`SubpassDescriptionDepthStencilResolve::p_depth_stencil_resolve_attachment`]
///is not `NULL` and does not have the value [`ATTACHMENT_UNUSED`], it
///corresponds to the depth/stencil attachment in
///[`p_depth_stencil_attachment`], and multisample resolve operations for depth
///and stencil are defined by
///[`SubpassDescriptionDepthStencilResolve::depth_resolve_mode`] and
///[`SubpassDescriptionDepthStencilResolve::stencil_resolve_mode`],
///respectively.
///At the end of each subpass, multisample resolve operations read the
///subpass’s depth/stencil attachment, and resolve the samples for each pixel
///to the same pixel location in the corresponding resolve attachment.
///If [`SubpassDescriptionDepthStencilResolve::depth_resolve_mode`] is
///`VK_RESOLVE_MODE_NONE`, then the depth component of the resolve
///attachment is not written to and its contents are preserved.
///Similarly, if
///[`SubpassDescriptionDepthStencilResolve::stencil_resolve_mode`] is
///`VK_RESOLVE_MODE_NONE`, then the stencil component of the resolve
///attachment is not written to and its contents are preserved.
///[`SubpassDescriptionDepthStencilResolve::depth_resolve_mode`] is
///ignored if the [`Format`] of the `pDepthStencilResolveAttachment`
///does not have a depth component.
///Similarly,
///[`SubpassDescriptionDepthStencilResolve::stencil_resolve_mode`] is
///ignored if the [`Format`] of the `pDepthStencilResolveAttachment`
///does not have a stencil component.If the image subresource range referenced by the depth/stencil
/// attachment is
///created with
///`VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT`, then the
///multisample resolve operation uses the sample locations state specified in
///the `sampleLocationsInfo` member of the element of the
///[`RenderPassSampleLocationsBeginInfoEXT::p_post_subpass_sample_locations`]
///for the subpass.If [`p_depth_stencil_attachment`] is `NULL`, or if its attachment index is
///[`ATTACHMENT_UNUSED`], it indicates that no depth/stencil attachment
///will be used in the subpass.The contents of an attachment within the render area become
/// undefined at
///the start of a subpass **S** if all of the following conditions are true:
/// - The attachment is used as a color, depth/stencil, or resolve attachment in any subpass in the
///   render pass.
/// - There is a subpass **S<sub>1</sub>** that uses or preserves the attachment, and a subpass
///   dependency from **S<sub>1</sub>** to **S**.
/// - The attachment is not used or preserved in subpass **S**.
///In addition, the contents of an attachment within the render area become
///undefined at the start of a subpass **S** if all of the following conditions
///are true:
/// - `VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM` is set.
/// - The attachment is used as a color or depth/stencil in the subpass.
///Once the contents of an attachment become undefined in subpass **S**, they
///remain undefined for subpasses in subpass dependency chains starting with
///subpass **S** until they are written again.
///However, they remain valid for subpasses in other subpass dependency chains
///starting with subpass **S<sub>1</sub>** if those subpasses use or preserve the
///attachment.Valid Usage
/// - [`pipeline_bind_point`]**must** be `VK_PIPELINE_BIND_POINT_GRAPHICS` or
///   `VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI`
/// - [`color_attachment_count`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_color_attachments`]
/// - If the first use of an attachment in this render pass is as an input attachment, and the
///   attachment is not also used as a color or depth/stencil attachment in the same subpass, then
///   `loadOp`**must** not be `VK_ATTACHMENT_LOAD_OP_CLEAR`
/// - If [`p_resolve_attachments`] is not `NULL`, for each resolve attachment that is not
///   [`ATTACHMENT_UNUSED`], the corresponding color attachment **must** not be
///   [`ATTACHMENT_UNUSED`]
/// - If [`p_resolve_attachments`] is not `NULL`, for each resolve attachment that is not
///   [`ATTACHMENT_UNUSED`], the corresponding color attachment **must** not have a sample count of
///   `VK_SAMPLE_COUNT_1_BIT`
/// - If [`p_resolve_attachments`] is not `NULL`, each resolve attachment that is not
///   [`ATTACHMENT_UNUSED`]**must** have a sample count of `VK_SAMPLE_COUNT_1_BIT`
/// - If [`p_resolve_attachments`] is not `NULL`, each resolve attachment that is not
///   [`ATTACHMENT_UNUSED`]**must** have the same [`Format`] as its corresponding color attachment
/// - All attachments in [`p_color_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have the
///   same sample count
/// -    All attachments in [`p_input_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have image formats whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features) contain at least `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT` or `VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// -    All attachments in [`p_color_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have image formats whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features) contain `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT`
/// -    All attachments in [`p_resolve_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have image formats whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features) contain `VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT`
/// -    If [`p_depth_stencil_attachment`] is not `NULL` and the attachment is not [`ATTACHMENT_UNUSED`] then it **must** have an image format whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features) contain `VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// -    If the [`linearColorAttachment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-linearColorAttachment) feature is enabled and the image is created with `VK_IMAGE_TILING_LINEAR`, all attachments in [`p_input_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have image formats whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features)**must** contain `VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV`
/// -    If the [`linearColorAttachment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-linearColorAttachment) feature is enabled and the image is created with `VK_IMAGE_TILING_LINEAR`, all attachments in [`p_color_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have image formats whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features)**must** contain `VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV`
/// -    If the [`linearColorAttachment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-linearColorAttachment) feature is enabled and the image is created with `VK_IMAGE_TILING_LINEAR`, all attachments in [`p_resolve_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have image formats whose [potential format features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#potential-format-features)**must** contain `VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV`
/// - If the `[`VK_AMD_mixed_attachment_samples`]` extension is enabled, and all attachments in
///   [`p_color_attachments`] that are not [`ATTACHMENT_UNUSED`]**must** have a sample count that is
///   smaller than or equal to the sample count of [`p_depth_stencil_attachment`] if it is not
///   [`ATTACHMENT_UNUSED`]
/// - If neither the `[`VK_AMD_mixed_attachment_samples`]` nor the
///   `[`VK_NV_framebuffer_mixed_samples`]` extensions are enabled, and if
///   [`p_depth_stencil_attachment`] is not [`ATTACHMENT_UNUSED`] and any attachments in
///   [`p_color_attachments`] are not [`ATTACHMENT_UNUSED`], they **must** have the same sample
///   count
/// - Each element of [`p_preserve_attachments`]**must** not be [`ATTACHMENT_UNUSED`]
/// - Each element of [`p_preserve_attachments`]**must** not also be an element of any other member
///   of the subpass description
/// - If any attachment is used by more than one [`AttachmentReference`] member, then each use
///   **must** use the same `layout`
/// - Each attachment **must** follow the [image layout requirements](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#attachment-type-imagelayout)
///   specified for its attachment type
/// - If [`flags`] includes `VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX`, it **must**
///   also include `VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX`
/// - If [`flags`] includes `VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM`, and if
///   [`p_resolve_attachments`] is not `NULL`, then each resolve attachment **must** be
///   [`ATTACHMENT_UNUSED`]
/// - If [`flags`] includes `VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM`, then the subpass
///   **must** be the last subpass in a subpass dependency chain
/// - If the render pass is created with `VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM` each of the
///   elements of [`p_input_attachments`]**must** be [`ATTACHMENT_UNUSED`]
/// - [`p_depth_stencil_attachment`] and [`p_color_attachments`] must not contain references to the
///   same attachment
///Valid Usage (Implicit)
/// - [`flags`]**must** be a valid combination of [`SubpassDescriptionFlagBits`] values
/// - [`pipeline_bind_point`]**must** be a valid [`PipelineBindPoint`] value
/// - If [`input_attachment_count`] is not `0`, [`p_input_attachments`]**must** be a valid pointer
///   to an array of [`input_attachment_count`] valid [`AttachmentReference`] structures
/// - If [`color_attachment_count`] is not `0`, [`p_color_attachments`]**must** be a valid pointer
///   to an array of [`color_attachment_count`] valid [`AttachmentReference`] structures
/// - If [`color_attachment_count`] is not `0`, and [`p_resolve_attachments`] is not `NULL`,
///   [`p_resolve_attachments`]**must** be a valid pointer to an array of [`color_attachment_count`]
///   valid [`AttachmentReference`] structures
/// - If [`p_depth_stencil_attachment`] is not `NULL`, [`p_depth_stencil_attachment`]**must** be a
///   valid pointer to a valid [`AttachmentReference`] structure
/// - If [`preserve_attachment_count`] is not `0`, [`p_preserve_attachments`]**must** be a valid
///   pointer to an array of [`preserve_attachment_count`]`uint32_t` values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentReference`]
/// - [`PipelineBindPoint`]
/// - [`RenderPassCreateInfo`]
/// - [`SubpassDescriptionFlags`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SubpassDescription<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`flags`] is a bitmask of [`SubpassDescriptionFlagBits`]
    ///specifying usage of the subpass.
    flags: SubpassDescriptionFlags,
    ///[`pipeline_bind_point`] is a [`PipelineBindPoint`] value specifying
    ///the pipeline type supported for this subpass.
    pipeline_bind_point: PipelineBindPoint,
    ///[`input_attachment_count`] is the number of input attachments.
    input_attachment_count: u32,
    ///[`p_input_attachments`] is a pointer to an array of
    ///[`AttachmentReference`] structures defining the input attachments
    ///for this subpass and their layouts.
    p_input_attachments: *mut AttachmentReference,
    ///[`color_attachment_count`] is the number of color attachments.
    color_attachment_count: u32,
    ///[`p_color_attachments`] is a pointer to an array of
    ///[`color_attachment_count`][`AttachmentReference`] structures
    ///defining the color attachments for this subpass and their layouts.
    p_color_attachments: *mut AttachmentReference,
    ///[`p_resolve_attachments`] is `NULL` or a pointer to an array of
    ///[`color_attachment_count`][`AttachmentReference`] structures
    ///defining the resolve attachments for this subpass and their layouts.
    p_resolve_attachments: *mut AttachmentReference,
    ///[`p_depth_stencil_attachment`] is a pointer to a
    ///[`AttachmentReference`] structure specifying the depth/stencil
    ///attachment for this subpass and its layout.
    p_depth_stencil_attachment: *mut AttachmentReference,
    ///[`preserve_attachment_count`] is the number of preserved attachments.
    preserve_attachment_count: u32,
    ///[`p_preserve_attachments`] is a pointer to an array of
    ///[`preserve_attachment_count`] render pass attachment indices identifying
    ///attachments that are not used by this subpass, but whose contents **must**
    ///be preserved throughout the subpass.
    p_preserve_attachments: *mut u32,
}
///[VkSubpassDependency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubpassDependency.html) - Structure specifying a subpass dependency
///# C Specifications
///The [`SubpassDependency`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSubpassDependency {
///    uint32_t                srcSubpass;
///    uint32_t                dstSubpass;
///    VkPipelineStageFlags    srcStageMask;
///    VkPipelineStageFlags    dstStageMask;
///    VkAccessFlags           srcAccessMask;
///    VkAccessFlags           dstAccessMask;
///    VkDependencyFlags       dependencyFlags;
///} VkSubpassDependency;
///```
///# Members
/// - [`src_subpass`] is the subpass index of the first subpass in the dependency, or
///   [`SUBPASS_EXTERNAL`].
/// - [`dst_subpass`] is the subpass index of the second subpass in the dependency, or
///   [`SUBPASS_EXTERNAL`].
/// - [`src_stage_mask`] is a bitmask of [`PipelineStageFlagBits`] specifying the [source stage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks).
/// - [`dst_stage_mask`] is a bitmask of [`PipelineStageFlagBits`] specifying the [destination stage
///   mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks)
/// - [`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a [destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
/// - [`dependency_flags`] is a bitmask of [`DependencyFlagBits`].
///# Description
///If [`src_subpass`] is equal to [`dst_subpass`] then the
///[`SubpassDependency`] describes a
///[subpass
///self-dependency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-barriers-subpass-self-dependencies), and only constrains the pipeline barriers allowed within
///a subpass instance.
///Otherwise, when a render pass instance which includes a subpass dependency
///is submitted to a queue, it defines a memory dependency between the
///subpasses identified by [`src_subpass`] and [`dst_subpass`].If [`src_subpass`] is equal to
/// [`SUBPASS_EXTERNAL`], the first
///[synchronization scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-scopes) includes
///commands that occur earlier in [submission
///order](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-submission-order) than the [`CmdBeginRenderPass`] used to begin the render pass
///instance.
///Otherwise, the first set of commands includes all commands submitted as part
///of the subpass instance identified by [`src_subpass`] and any load, store
///or multisample resolve operations on attachments used in [`src_subpass`].
///In either case, the first synchronization scope is limited to operations on
///the pipeline stages determined by the
///[source stage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks) specified by
///[`src_stage_mask`].If [`dst_subpass`] is equal to [`SUBPASS_EXTERNAL`], the second
///[synchronization scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-scopes) includes
///commands that occur later in [submission
///order](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-submission-order) than the [`CmdEndRenderPass`] used to end the render pass
///instance.
///Otherwise, the second set of commands includes all commands submitted as
///part of the subpass instance identified by [`dst_subpass`] and any load,
///store or multisample resolve operations on attachments used in
///[`dst_subpass`].
///In either case, the second synchronization scope is limited to operations on
///the pipeline stages determined by the
///[destination stage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks) specified
///by [`dst_stage_mask`].The first [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to accesses in the pipeline stages determined by the
///[source stage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks) specified by
///[`src_stage_mask`].
///It is also limited to access types in the [source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks) specified by [`src_access_mask`].The second [access scope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-access-scopes) is
///limited to accesses in the pipeline stages determined by the
///[destination stage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks) specified
///by [`dst_stage_mask`].
///It is also limited to access types in the [destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks) specified by [`dst_access_mask`].The [availability and
///visibility operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-dependencies-available-and-visible) defined by a subpass dependency affect the execution
///of [image layout transitions](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-layout-transitions) within the
///render pass.Valid Usage
/// - If the [geometry shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-geometryShader)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT`
/// - If the [tessellation shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-tessellationShader)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT` or
///   `VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT`
/// - If the [conditional rendering](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-conditionalRendering)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT`
/// - If the [fragment density map](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-fragmentDensityMap)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT`
/// - If the [transform feedback](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-transformFeedback)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT`
/// - If the [mesh shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-meshShader)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV`
/// - If the [task shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-taskShader)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV`
/// - If the [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-shadingRateImage)
///   feature is not enabled, [`src_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV`
/// - If the [`synchronization2`](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-synchronization2)
///   feature is not enabled, [`src_stage_mask`]**must** not be `0`
///
/// - If the [geometry shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-geometryShader)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT`
/// - If the [tessellation shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-tessellationShader)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT` or
///   `VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT`
/// - If the [conditional rendering](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-conditionalRendering)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT`
/// - If the [fragment density map](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-fragmentDensityMap)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT`
/// - If the [transform feedback](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-transformFeedback)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT`
/// - If the [mesh shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-meshShader)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV`
/// - If the [task shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-taskShader)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV`
/// - If the [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-shadingRateImage)
///   feature is not enabled, [`dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV`
/// - If the [`synchronization2`](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-synchronization2)
///   feature is not enabled, [`dst_stage_mask`]**must** not be `0`
/// - [`src_subpass`]**must** be less than or equal to [`dst_subpass`], unless one of them is
///   [`SUBPASS_EXTERNAL`], to avoid cyclic dependencies and ensure a valid execution order
/// - [`src_subpass`] and [`dst_subpass`]**must** not both be equal to [`SUBPASS_EXTERNAL`]
/// - If [`src_subpass`] is equal to [`dst_subpass`] and not all of the stages in [`src_stage_mask`]
///   and [`dst_stage_mask`] are [framebuffer-space stages](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-framebuffer-regions),
///   the [logically latest](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-order)
///   pipeline stage in [`src_stage_mask`]**must** be [logically earlier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-order)
///   than or equal to the [logically earliest](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-order)
///   pipeline stage in [`dst_stage_mask`]
/// -    Any access flag included in [`src_access_mask`]**must** be supported by one of the pipeline stages in [`src_stage_mask`], as specified in the [table of supported access types](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-types-supported)
/// -    Any access flag included in [`dst_access_mask`]**must** be supported by one of the pipeline stages in [`dst_stage_mask`], as specified in the [table of supported access types](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-types-supported)
/// -    If [`src_subpass`] equals [`dst_subpass`], and [`src_stage_mask`] and [`dst_stage_mask`] both include a [framebuffer-space stage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-framebuffer-regions), then [`dependency_flags`]**must** include `VK_DEPENDENCY_BY_REGION_BIT`
/// - If [`dependency_flags`] includes `VK_DEPENDENCY_VIEW_LOCAL_BIT`, [`src_subpass`]**must** not
///   be equal to [`SUBPASS_EXTERNAL`]
/// - If [`dependency_flags`] includes `VK_DEPENDENCY_VIEW_LOCAL_BIT`, [`dst_subpass`]**must** not
///   be equal to [`SUBPASS_EXTERNAL`]
/// - If [`src_subpass`] equals [`dst_subpass`] and that subpass has more than one bit set in the
///   view mask, then [`dependency_flags`]**must** include `VK_DEPENDENCY_VIEW_LOCAL_BIT`
///Valid Usage (Implicit)
/// - [`src_stage_mask`]**must** be a valid combination of [`PipelineStageFlagBits`] values
/// - [`dst_stage_mask`]**must** be a valid combination of [`PipelineStageFlagBits`] values
/// - [`src_access_mask`]**must** be a valid combination of [`AccessFlagBits`] values
/// - [`dst_access_mask`]**must** be a valid combination of [`AccessFlagBits`] values
/// - [`dependency_flags`]**must** be a valid combination of [`DependencyFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccessFlags`]
/// - [`DependencyFlags`]
/// - [`PipelineStageFlags`]
/// - [`RenderPassCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SubpassDependency {
    ///[`src_subpass`] is the subpass index of the first subpass in the
    ///dependency, or [`SUBPASS_EXTERNAL`].
    src_subpass: u32,
    ///[`dst_subpass`] is the subpass index of the second subpass in the
    ///dependency, or [`SUBPASS_EXTERNAL`].
    dst_subpass: u32,
    ///[`src_stage_mask`] is a bitmask of [`PipelineStageFlagBits`]
    ///specifying the [source stage
    ///mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks).
    src_stage_mask: PipelineStageFlags,
    ///[`dst_stage_mask`] is a bitmask of [`PipelineStageFlagBits`]
    ///specifying the [destination
    ///stage mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-masks)
    dst_stage_mask: PipelineStageFlags,
    ///[`src_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[source access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    src_access_mask: AccessFlags,
    ///[`dst_access_mask`] is a bitmask of [`AccessFlagBits`] specifying a
    ///[destination access mask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-access-masks).
    dst_access_mask: AccessFlags,
    ///[`dependency_flags`] is a bitmask of [`DependencyFlagBits`].
    dependency_flags: DependencyFlags,
}
///[VkRenderPassCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreateInfo.html) - Structure specifying parameters of a newly created render pass
///# C Specifications
///The [`RenderPassCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkRenderPassCreateInfo {
///    VkStructureType                   sType;
///    const void*                       pNext;
///    VkRenderPassCreateFlags           flags;
///    uint32_t                          attachmentCount;
///    const VkAttachmentDescription*    pAttachments;
///    uint32_t                          subpassCount;
///    const VkSubpassDescription*       pSubpasses;
///    uint32_t                          dependencyCount;
///    const VkSubpassDependency*        pDependencies;
///} VkRenderPassCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`RenderPassCreateFlagBits`]
/// - [`attachment_count`] is the number of attachments used by this render pass.
/// - [`p_attachments`] is a pointer to an array of [`attachment_count`][`AttachmentDescription`]
///   structures describing the attachments used by the render pass.
/// - [`subpass_count`] is the number of subpasses to create.
/// - [`p_subpasses`] is a pointer to an array of [`subpass_count`][`SubpassDescription`] structures
///   describing each subpass.
/// - [`dependency_count`] is the number of memory dependencies between pairs of subpasses.
/// - [`p_dependencies`] is a pointer to an array of [`dependency_count`][`SubpassDependency`]
///   structures describing dependencies between pairs of subpasses.
///# Description
///Valid Usage
/// - If the `attachment` member of any element of `pInputAttachments`, `pColorAttachments`,
///   `pResolveAttachments` or `pDepthStencilAttachment`, or any element of `pPreserveAttachments`
///   in any element of [`p_subpasses`] is not [`ATTACHMENT_UNUSED`], then it **must** be less than
///   [`attachment_count`]
/// - If the pNext chain includes a [`RenderPassFragmentDensityMapCreateInfoEXT`] structure and the
///   `fragmentDensityMapAttachment` member is not [`ATTACHMENT_UNUSED`], then `attachment`**must**
///   be less than [`attachment_count`]
/// - For any member of [`p_attachments`] with a `loadOp` equal to `VK_ATTACHMENT_LOAD_OP_CLEAR`,
///   the first use of that attachment **must** not specify a `layout` equal to
///   `VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`
/// - For any member of [`p_attachments`] with a `stencilLoadOp` equal to
///   `VK_ATTACHMENT_LOAD_OP_CLEAR`, the first use of that attachment **must** not specify a
///   `layout` equal to `VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL` or
///   `VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`
/// - For any member of [`p_attachments`] with a `loadOp` equal to `VK_ATTACHMENT_LOAD_OP_CLEAR`,
///   the first use of that attachment **must** not specify a `layout` equal to
///   `VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL`
/// - For any member of [`p_attachments`] with a `stencilLoadOp` equal to
///   `VK_ATTACHMENT_LOAD_OP_CLEAR`, the first use of that attachment **must** not specify a
///   `layout` equal to `VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL`
/// - If the [`p_next`] chain includes a [`RenderPassInputAttachmentAspectCreateInfo`] structure,
///   the `subpass` member of each element of its `pAspectReferences` member **must** be less than
///   [`subpass_count`]
/// - If the [`p_next`] chain includes a [`RenderPassInputAttachmentAspectCreateInfo`] structure,
///   the `inputAttachmentIndex` member of each element of its `pAspectReferences` member **must**
///   be less than the value of `inputAttachmentCount` in the element of [`p_subpasses`] identified
///   by its `subpass` member
/// - If the [`p_next`] chain includes a [`RenderPassInputAttachmentAspectCreateInfo`] structure,
///   for any element of the `pInputAttachments` member of any element of [`p_subpasses`] where the
///   `attachment` member is not [`ATTACHMENT_UNUSED`], the `aspectMask` member of the corresponding
///   element of [`RenderPassInputAttachmentAspectCreateInfo::p_aspect_references`]**must** only
///   include aspects that are present in images of the format specified by the element of
///   [`p_attachments`] at `attachment`
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, and its
///   [`subpass_count`] member is not zero, that member **must** be equal to the value of
///   [`subpass_count`]
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, if its
///   [`dependency_count`] member is not zero, it **must** be equal to [`dependency_count`]
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, for each
///   non-zero element of `pViewOffsets`, the `srcSubpass` and `dstSubpass` members of
///   [`p_dependencies`] at the same index **must** not be equal
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, for any
///   element of [`p_dependencies`] with a `dependencyFlags` member that does not include
///   `VK_DEPENDENCY_VIEW_LOCAL_BIT`, the corresponding element of the `pViewOffsets` member of that
///   [`RenderPassMultiviewCreateInfo`] instance **must** be `0`
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, elements of
///   its `pViewMasks` member **must** either all be `0`, or all not be `0`
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, and each
///   element of its `pViewMasks` member is `0`, the `dependencyFlags` member of each element of
///   [`p_dependencies`]**must** not include `VK_DEPENDENCY_VIEW_LOCAL_BIT`
/// - If the [`p_next`] chain includes a [`RenderPassMultiviewCreateInfo`] structure, and each
///   element of its `pViewMasks` member is `0`, its `correlationMaskCount` member **must** be `0`
/// -    For any element of [`p_dependencies`], if the `srcSubpass` is not [`SUBPASS_EXTERNAL`], all stage flags included in the `srcStageMask` member of that dependency **must** be a pipeline stage supported by the [pipeline](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-types) identified by the `pipelineBindPoint` member of the source subpass
/// -    For any element of [`p_dependencies`], if the `dstSubpass` is not [`SUBPASS_EXTERNAL`], all stage flags included in the `dstStageMask` member of that dependency **must** be a pipeline stage supported by the [pipeline](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-types) identified by the `pipelineBindPoint` member of the destination subpass
/// - The `srcSubpass` member of each element of [`p_dependencies`]**must** be less than
///   [`subpass_count`]
/// - The `dstSubpass` member of each element of [`p_dependencies`]**must** be less than
///   [`subpass_count`]
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of
///   [`RenderPassFragmentDensityMapCreateInfoEXT`], [`RenderPassInputAttachmentAspectCreateInfo`],
///   or [`RenderPassMultiviewCreateInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`RenderPassCreateFlagBits`] values
/// - If [`attachment_count`] is not `0`, [`p_attachments`]**must** be a valid pointer to an array
///   of [`attachment_count`] valid [`AttachmentDescription`] structures
/// - [`p_subpasses`]**must** be a valid pointer to an array of [`subpass_count`] valid
///   [`SubpassDescription`] structures
/// - If [`dependency_count`] is not `0`, [`p_dependencies`]**must** be a valid pointer to an array
///   of [`dependency_count`] valid [`SubpassDependency`] structures
/// - [`subpass_count`]**must** be greater than `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`RenderPassCreateFlags`]
/// - [`StructureType`]
/// - [`SubpassDependency`]
/// - [`SubpassDescription`]
/// - [`CreateRenderPass`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct RenderPassCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`RenderPassCreateFlagBits`]
    flags: RenderPassCreateFlags,
    ///[`attachment_count`] is the number of attachments used by this render
    ///pass.
    attachment_count: u32,
    ///[`p_attachments`] is a pointer to an array of [`attachment_count`][`AttachmentDescription`]
    /// structures describing the attachments used by the render pass.
    p_attachments: *mut AttachmentDescription,
    ///[`subpass_count`] is the number of subpasses to create.
    subpass_count: u32,
    ///[`p_subpasses`] is a pointer to an array of [`subpass_count`][`SubpassDescription`]
    /// structures describing each subpass.
    p_subpasses: *mut SubpassDescription<'lt>,
    ///[`dependency_count`] is the number of memory dependencies between pairs
    ///of subpasses.
    dependency_count: u32,
    ///[`p_dependencies`] is a pointer to an array of [`dependency_count`][`SubpassDependency`]
    /// structures describing dependencies between pairs of subpasses.
    p_dependencies: *mut SubpassDependency,
}
///[VkEventCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkEventCreateInfo.html) - Structure specifying parameters of a newly created event
///# C Specifications
///The [`EventCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkEventCreateInfo {
///    VkStructureType       sType;
///    const void*           pNext;
///    VkEventCreateFlags    flags;
///} VkEventCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`EventCreateFlagBits`] defining additional creation parameters.
///# Description
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_EVENT_CREATE_INFO`
/// - [`p_next`]**must** be `NULL`
/// - [`flags`]**must** be a valid combination of [`EventCreateFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`EventCreateFlags`]
/// - [`StructureType`]
/// - [`CreateEvent`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct EventCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`EventCreateFlagBits`] defining
    ///additional creation parameters.
    flags: EventCreateFlags,
}
///[VkFenceCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFenceCreateInfo.html) - Structure specifying parameters of a newly created fence
///# C Specifications
///The [`FenceCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkFenceCreateInfo {
///    VkStructureType       sType;
///    const void*           pNext;
///    VkFenceCreateFlags    flags;
///} VkFenceCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`FenceCreateFlagBits`] specifying the initial state and behavior of
///   the fence.
///# Description
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_FENCE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`ExportFenceCreateInfo`] or
///   [`ExportFenceWin32HandleInfoKHR`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`FenceCreateFlagBits`] values
///# Related
/// - [`crate::vulkan1_0`]
/// - [`FenceCreateFlags`]
/// - [`StructureType`]
/// - [`CreateFence`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct FenceCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`FenceCreateFlagBits`] specifying the
    ///initial state and behavior of the fence.
    flags: FenceCreateFlags,
}
///[VkPhysicalDeviceFeatures](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html) - Structure describing the fine-grained features that can be supported by an implementation
///# C Specifications
///The [`PhysicalDeviceFeatures`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPhysicalDeviceFeatures {
///    VkBool32    robustBufferAccess;
///    VkBool32    fullDrawIndexUint32;
///    VkBool32    imageCubeArray;
///    VkBool32    independentBlend;
///    VkBool32    geometryShader;
///    VkBool32    tessellationShader;
///    VkBool32    sampleRateShading;
///    VkBool32    dualSrcBlend;
///    VkBool32    logicOp;
///    VkBool32    multiDrawIndirect;
///    VkBool32    drawIndirectFirstInstance;
///    VkBool32    depthClamp;
///    VkBool32    depthBiasClamp;
///    VkBool32    fillModeNonSolid;
///    VkBool32    depthBounds;
///    VkBool32    wideLines;
///    VkBool32    largePoints;
///    VkBool32    alphaToOne;
///    VkBool32    multiViewport;
///    VkBool32    samplerAnisotropy;
///    VkBool32    textureCompressionETC2;
///    VkBool32    textureCompressionASTC_LDR;
///    VkBool32    textureCompressionBC;
///    VkBool32    occlusionQueryPrecise;
///    VkBool32    pipelineStatisticsQuery;
///    VkBool32    vertexPipelineStoresAndAtomics;
///    VkBool32    fragmentStoresAndAtomics;
///    VkBool32    shaderTessellationAndGeometryPointSize;
///    VkBool32    shaderImageGatherExtended;
///    VkBool32    shaderStorageImageExtendedFormats;
///    VkBool32    shaderStorageImageMultisample;
///    VkBool32    shaderStorageImageReadWithoutFormat;
///    VkBool32    shaderStorageImageWriteWithoutFormat;
///    VkBool32    shaderUniformBufferArrayDynamicIndexing;
///    VkBool32    shaderSampledImageArrayDynamicIndexing;
///    VkBool32    shaderStorageBufferArrayDynamicIndexing;
///    VkBool32    shaderStorageImageArrayDynamicIndexing;
///    VkBool32    shaderClipDistance;
///    VkBool32    shaderCullDistance;
///    VkBool32    shaderFloat64;
///    VkBool32    shaderInt64;
///    VkBool32    shaderInt16;
///    VkBool32    shaderResourceResidency;
///    VkBool32    shaderResourceMinLod;
///    VkBool32    sparseBinding;
///    VkBool32    sparseResidencyBuffer;
///    VkBool32    sparseResidencyImage2D;
///    VkBool32    sparseResidencyImage3D;
///    VkBool32    sparseResidency2Samples;
///    VkBool32    sparseResidency4Samples;
///    VkBool32    sparseResidency8Samples;
///    VkBool32    sparseResidency16Samples;
///    VkBool32    sparseResidencyAliased;
///    VkBool32    variableMultisampleRate;
///    VkBool32    inheritedQueries;
///} VkPhysicalDeviceFeatures;
///```
///# Members
///This structure describes the following features:
///# Description
/// - [`robust_buffer_access`] specifies that accesses to buffers are bounds-checked against the range of the buffer descriptor (as determined by [`DescriptorBufferInfo::range`], [`BufferViewCreateInfo::range`], or the size of the buffer). Out of bounds accesses **must** not cause application termination, and the effects of shader loads, stores, and atomics **must** conform to an implementation-dependent behavior as described below.  - A buffer access is considered to be out of bounds if any of the following are true:   - The pointer was formed by `OpImageTexelPointer` and the coordinate is less than zero or greater than or equal to the number of whole elements in the bound range.   - The pointer was not formed by `OpImageTexelPointer` and the object pointed to is not wholly contained within the bound range. This includes accesses performed via *variable pointers* where the buffer descriptor being accessed cannot be statically determined. Uninitialized pointers and pointers equal to `OpConstantNull` are treated as pointing to a zero-sized object, so all accesses through such pointers are considered to be out of bounds. Buffer accesses through buffer device addresses are not bounds-checked. If the [`cooperativeMatrixRobustBufferAccess`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-cooperativeMatrixRobustBufferAccess) feature is not enabled, then accesses using `OpCooperativeMatrixLoadNV` and `OpCooperativeMatrixStoreNV`**may** not be bounds-checked.   - If [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is not enabled and any buffer access is determined to be out of bounds, then any other access of the same type (load, store, or atomic) to the same buffer that accesses an address less than 16 bytes away from the out of bounds address **may** also be considered out of bounds.   - If the access is a load that reads from the same memory locations as a prior store in the same shader invocation, with no other intervening accesses to the same memory locations in that shader invocation, then the result of the load **may** be the value stored by the store instruction, even if the access is out of bounds. If the load is `Volatile`, then an out of bounds load **must** return the appropriate out of bounds value.   - Accesses to descriptors written with a [`crate::utils::Handle::null`] resource or view are not considered to be out of bounds. Instead, each type of descriptor access defines a specific behavior for accesses to a null descriptor.  - Out-of-bounds buffer loads will return any of the following values:   - If the access is to a uniform buffer and [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, loads of offsets between the end of the descriptor range and the end of the descriptor range rounded up to a multiple of [robustUniformBufferAccessSizeAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-robustUniformBufferAccessSizeAlignment) bytes **must** return either zero values or the contents of the memory at the offset being loaded. Loads of offsets past the descriptor range rounded up to a multiple of [robustUniformBufferAccessSizeAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-robustUniformBufferAccessSizeAlignment) bytes **must** return zero values.   - If the access is to a storage buffer and [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, loads of offsets between the end of the descriptor range and the end of the descriptor range rounded up to a multiple of [robustStorageBufferAccessSizeAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-robustStorageBufferAccessSizeAlignment) bytes **must** return either zero values or the contents of the memory at the offset being loaded. Loads of offsets past the descriptor range rounded up to a multiple of [robustStorageBufferAccessSizeAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-robustStorageBufferAccessSizeAlignment) bytes **must** return zero values. Similarly, stores to addresses between the end of the descriptor range and the end of the descriptor range rounded up to a multiple of [robustStorageBufferAccessSizeAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-robustStorageBufferAccessSizeAlignment) bytes **may** be discarded.   - Non-atomic accesses to storage buffers that are a multiple of 32 bits **may** be decomposed into 32-bit accesses that are individually bounds-checked.   - If the access is to an index buffer and [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, zero values **must** be returned.   - If the access is to a uniform texel buffer or storage texel buffer and [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, zero values **must** be returned, and then [Conversion to RGBA](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-conversion-to-rgba) is applied based on the buffer view’s format.   - Values from anywhere within the memory range(s) bound to the buffer (possibly including bytes of memory past the end of the buffer, up to the end of the bound range).   - Zero values, or (0,0,0,x) vectors for vector reads where x is a valid value represented in the type of the vector components and **may** be any of:    - 0, 1, or the maximum representable positive integer value, for signed or unsigned integer components    - 0.0 or 1.0, for floating-point components    - Out-of-bounds writes **may** modify values within the memory range(s) bound to the buffer, but **must** not modify any other memory.   - If [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, out of bounds writes **must** not modify any memory.   - Out-of-bounds atomics **may** modify values within the memory range(s) bound to the buffer, but **must** not modify any other memory, and return an undefined value.   - If [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, out of bounds atomics **must** not modify any memory, and return an undefined value.   - If [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is disabled, vertex input attributes are considered out of bounds if the offset of the attribute in the bound vertex buffer range plus the size of the attribute is greater than either:   - `vertexBufferRangeSize`, if `bindingStride` == 0; or   - (`vertexBufferRangeSize` - (`vertexBufferRangeSize` % `bindingStride`)) where `vertexBufferRangeSize` is the byte size of the memory range bound to the vertex buffer binding and `bindingStride` is the byte stride of the corresponding vertex input binding. Further, if any vertex input attribute using a specific vertex input binding is out of bounds, then all vertex input attributes using that vertex input binding for that vertex shader invocation are considered out of bounds.   - If a vertex input attribute is out of bounds, it will be assigned one of the following values:    - Values from anywhere within the memory range(s) bound to the buffer, converted according to the format of the attribute.    - Zero values, format converted according to the format of the attribute.    - Zero values, or (0,0,0,x) vectors, as described above.    - If [`robustBufferAccess2`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-robustBufferAccess2) is enabled, vertex input attributes are considered out of bounds if the offset of the attribute in the bound vertex buffer range plus the size of the attribute is greater than the byte size of the memory range bound to the vertex buffer binding.   - If a vertex input attribute is out of bounds, the [raw data](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input-extraction) extracted are zero values, and missing G, B, or A components are [filled with (0,0,1)](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#fxvertex-input-extraction).   - If [`robust_buffer_access`] is not enabled, applications **must** not perform out of bounds accesses.
/// - [`full_draw_index_uint_32`] specifies the full 32-bit range of indices is supported for indexed draw calls when using a [`IndexType`] of `VK_INDEX_TYPE_UINT32`. `maxDrawIndexedIndexValue` is the maximum index value that **may** be used (aside from the primitive restart index, which is always 2<sup>32</sup>-1 when the [`IndexType`] is `VK_INDEX_TYPE_UINT32`). If this feature is supported, `maxDrawIndexedIndexValue`**must** be 2<sup>32</sup>-1; otherwise it **must** be no smaller than 2<sup>24</sup>-1. See [maxDrawIndexedIndexValue](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxDrawIndexedIndexValue).
/// - [`image_cube_array`] specifies whether image views with a [`ImageViewType`] of
///   `VK_IMAGE_VIEW_TYPE_CUBE_ARRAY`**can** be created, and that the corresponding
///   `SampledCubeArray` and `ImageCubeArray` SPIR-V capabilities **can** be used in shader code.
/// - [`independent_blend`] specifies whether the [`PipelineColorBlendAttachmentState`] settings are
///   controlled independently per-attachment. If this feature is not enabled, the
///   [`PipelineColorBlendAttachmentState`] settings for all color attachments **must** be
///   identical. Otherwise, a different [`PipelineColorBlendAttachmentState`]**can** be provided for
///   each bound color attachment.
/// - [`geometry_shader`] specifies whether geometry shaders are supported. If this feature is not
///   enabled, the `VK_SHADER_STAGE_GEOMETRY_BIT` and `VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT` enum
///   values **must** not be used. This also specifies whether shader modules **can** declare the
///   `Geometry` capability.
/// - [`tessellation_shader`] specifies whether tessellation control and evaluation shaders are
///   supported. If this feature is not enabled, the `VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT`,
///   `VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT`,
///   `VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT`,
///   `VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT`, and
///   `VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO` enum values **must** not be used.
///   This also specifies whether shader modules **can** declare the `Tessellation` capability.
/// - [`sample_rate_shading`] specifies whether [Sample Shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-sampleshading)
///   and multisample interpolation are supported. If this feature is not enabled, the
///   `sampleShadingEnable` member of the [`PipelineMultisampleStateCreateInfo`] structure **must**
///   be set to [`FALSE`] and the `minSampleShading` member is ignored. This also specifies whether
///   shader modules **can** declare the `SampleRateShading` capability.
/// - [`dual_src_blend`] specifies whether blend operations which take two sources are supported. If
///   this feature is not enabled, the `VK_BLEND_FACTOR_SRC1_COLOR`, `VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR`,
///   `VK_BLEND_FACTOR_SRC1_ALPHA`, and `VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA` enum values **must** not
///   be used as source or destination blending factors. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb).
/// - [`logic_op`] specifies whether logic operations are supported. If this feature is not enabled,
///   the `logicOpEnable` member of the [`PipelineColorBlendStateCreateInfo`] structure **must** be
///   set to [`FALSE`], and the [`logic_op`] member is ignored.
/// - [`multi_draw_indirect`] specifies whether multiple draw indirect is supported. If this feature
///   is not enabled, the `drawCount` parameter to the [`CmdDrawIndirect`] and [`CmdDrawIndexedIndirect`]
///   commands **must** be 0 or 1. The `maxDrawIndirectCount` member of the [`PhysicalDeviceLimits`]
///   structure **must** also be 1 if this feature is not supported. See [maxDrawIndirectCount](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxDrawIndirectCount).
/// - [`draw_indirect_first_instance`] specifies whether indirect drawing calls support the
///   `firstInstance` parameter. If this feature is not enabled, the `firstInstance` member of all
///   [`DrawIndirectCommand`] and [`DrawIndexedIndirectCommand`] structures that are provided to the
///   [`CmdDrawIndirect`] and [`CmdDrawIndexedIndirect`] commands **must** be 0.
/// - [`depth_clamp`] specifies whether depth clamping is supported. If this feature is not enabled,
///   the `depthClampEnable` member of the [`PipelineRasterizationStateCreateInfo`] structure
///   **must** be set to [`FALSE`]. Otherwise, setting `depthClampEnable` to [`TRUE`] will enable
///   depth clamping.
/// - [`depth_bias_clamp`] specifies whether depth bias clamping is supported. If this feature is
///   not enabled, the [`depth_bias_clamp`] member of the [`PipelineRasterizationStateCreateInfo`]
///   structure **must** be set to 0.0 unless the `VK_DYNAMIC_STATE_DEPTH_BIAS` dynamic state is
///   enabled, and the [`depth_bias_clamp`] parameter to [`CmdSetDepthBias`]**must** be set to 0.0.
/// - [`fill_mode_non_solid`] specifies whether point and wireframe fill modes are supported. If
///   this feature is not enabled, the `VK_POLYGON_MODE_POINT` and `VK_POLYGON_MODE_LINE` enum
///   values **must** not be used.
/// - [`depth_bounds`] specifies whether depth bounds tests are supported. If this feature is not
///   enabled, the `depthBoundsTestEnable` member of the [`PipelineDepthStencilStateCreateInfo`]
///   structure **must** be set to [`FALSE`]. When `depthBoundsTestEnable` is set to [`FALSE`], the
///   `minDepthBounds` and `maxDepthBounds` members of the [`PipelineDepthStencilStateCreateInfo`]
///   structure are ignored.
/// - [`wide_lines`] specifies whether lines with width other than 1.0 are supported. If this
///   feature is not enabled, the `lineWidth` member of the [`PipelineRasterizationStateCreateInfo`]
///   structure **must** be set to 1.0 unless the `VK_DYNAMIC_STATE_LINE_WIDTH` dynamic state is
///   enabled, and the `lineWidth` parameter to [`CmdSetLineWidth`]**must** be set to 1.0. When this
///   feature is supported, the range and granularity of supported line widths are indicated by the
///   `lineWidthRange` and `lineWidthGranularity` members of the [`PhysicalDeviceLimits`] structure,
///   respectively.
/// - [`large_points`] specifies whether points with size greater than 1.0 are supported. If this
///   feature is not enabled, only a point size of 1.0 written by a shader is supported. The range
///   and granularity of supported point sizes are indicated by the `pointSizeRange` and
///   `pointSizeGranularity` members of the [`PhysicalDeviceLimits`] structure, respectively.
/// - [`alpha_to_one`] specifies whether the implementation is able to replace the alpha value of the fragment shader color output in the [Multisample Coverage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-covg) fragment operation. If this feature is not enabled, then the `alphaToOneEnable` member of the [`PipelineMultisampleStateCreateInfo`] structure **must** be set to [`FALSE`]. Otherwise setting `alphaToOneEnable` to [`TRUE`] will enable alpha-to-one behavior.
/// - [`multi_viewport`] specifies whether more than one viewport is supported. If this feature is
///   not enabled:  - The `viewportCount` and `scissorCount` members of the
///   [`PipelineViewportStateCreateInfo`] structure **must** be set to 1.  - The `firstViewport` and
///   `viewportCount` parameters to the [`CmdSetViewport`] command **must** be set to 0 and 1,
///   respectively.  - The `firstScissor` and `scissorCount` parameters to the [`CmdSetScissor`]
///   command **must** be set to 0 and 1, respectively.  - The `exclusiveScissorCount` member of the
///   [`PipelineViewportExclusiveScissorStateCreateInfoNV`] structure **must** be set to 0 or 1.  -
///   The `firstExclusiveScissor` and `exclusiveScissorCount` parameters to the
///   [`CmdSetExclusiveScissorNV`] command **must** be set to 0 and 1, respectively.
/// - [`sampler_anisotropy`] specifies whether anisotropic filtering is supported. If this feature
///   is not enabled, the `anisotropyEnable` member of the [`SamplerCreateInfo`] structure **must**
///   be [`FALSE`].
/// - [`texture_compression_etc_2`] specifies whether all of the ETC2 and EAC compressed texture
///   formats are supported. If this feature is enabled, then the
///   `VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`, `VK_FORMAT_FEATURE_BLIT_SRC_BIT` and
///   `VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT` features **must** be supported in
///   `optimalTilingFeatures` for the following formats:  - `VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK`  -
///   `VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK`  - `VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK`  -
///   `VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK`  - `VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK`  -
///   `VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK`  - `VK_FORMAT_EAC_R11_UNORM_BLOCK`  -
///   `VK_FORMAT_EAC_R11_SNORM_BLOCK`  - `VK_FORMAT_EAC_R11G11_UNORM_BLOCK`  -
///   `VK_FORMAT_EAC_R11G11_SNORM_BLOCK` To query for additional properties, or if the feature is
///   not enabled, [`GetPhysicalDeviceFormatProperties`] and
///   [`GetPhysicalDeviceImageFormatProperties`]**can** be used to check for supported properties of
///   individual formats as normal.
/// - [`texture_compression_astc_ldr`] specifies whether all of the ASTC LDR compressed texture
///   formats are supported. If this feature is enabled, then the
///   `VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`, `VK_FORMAT_FEATURE_BLIT_SRC_BIT` and
///   `VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT` features **must** be supported in
///   `optimalTilingFeatures` for the following formats:  - `VK_FORMAT_ASTC_4x4_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_4x4_SRGB_BLOCK`  - `VK_FORMAT_ASTC_5x4_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_5x4_SRGB_BLOCK`  - `VK_FORMAT_ASTC_5x5_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_5x5_SRGB_BLOCK`  - `VK_FORMAT_ASTC_6x5_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_6x5_SRGB_BLOCK`  - `VK_FORMAT_ASTC_6x6_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_6x6_SRGB_BLOCK`  - `VK_FORMAT_ASTC_8x5_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_8x5_SRGB_BLOCK`  - `VK_FORMAT_ASTC_8x6_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_8x6_SRGB_BLOCK`  - `VK_FORMAT_ASTC_8x8_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_8x8_SRGB_BLOCK`  - `VK_FORMAT_ASTC_10x5_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_10x5_SRGB_BLOCK`  - `VK_FORMAT_ASTC_10x6_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_10x6_SRGB_BLOCK`  - `VK_FORMAT_ASTC_10x8_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_10x8_SRGB_BLOCK`  - `VK_FORMAT_ASTC_10x10_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_10x10_SRGB_BLOCK`  - `VK_FORMAT_ASTC_12x10_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_12x10_SRGB_BLOCK`  - `VK_FORMAT_ASTC_12x12_UNORM_BLOCK`  -
///   `VK_FORMAT_ASTC_12x12_SRGB_BLOCK` To query for additional properties, or if the feature is not
///   enabled, [`GetPhysicalDeviceFormatProperties`] and
///   [`GetPhysicalDeviceImageFormatProperties`]**can** be used to check for supported properties of
///   individual formats as normal.
/// - [`texture_compression_bc`] specifies whether all of the BC compressed texture formats are
///   supported. If this feature is enabled, then the `VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`,
///   `VK_FORMAT_FEATURE_BLIT_SRC_BIT` and `VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT`
///   features **must** be supported in `optimalTilingFeatures` for the following formats:  -
///   `VK_FORMAT_BC1_RGB_UNORM_BLOCK`  - `VK_FORMAT_BC1_RGB_SRGB_BLOCK`  -
///   `VK_FORMAT_BC1_RGBA_UNORM_BLOCK`  - `VK_FORMAT_BC1_RGBA_SRGB_BLOCK`  -
///   `VK_FORMAT_BC2_UNORM_BLOCK`  - `VK_FORMAT_BC2_SRGB_BLOCK`  - `VK_FORMAT_BC3_UNORM_BLOCK`  -
///   `VK_FORMAT_BC3_SRGB_BLOCK`  - `VK_FORMAT_BC4_UNORM_BLOCK`  - `VK_FORMAT_BC4_SNORM_BLOCK`  -
///   `VK_FORMAT_BC5_UNORM_BLOCK`  - `VK_FORMAT_BC5_SNORM_BLOCK`  - `VK_FORMAT_BC6H_UFLOAT_BLOCK`  -
///   `VK_FORMAT_BC6H_SFLOAT_BLOCK`  - `VK_FORMAT_BC7_UNORM_BLOCK`  - `VK_FORMAT_BC7_SRGB_BLOCK` To
///   query for additional properties, or if the feature is not enabled,
///   [`GetPhysicalDeviceFormatProperties`] and [`GetPhysicalDeviceImageFormatProperties`]**can** be
///   used to check for supported properties of individual formats as normal.
/// - [`occlusion_query_precise`] specifies whether occlusion queries returning actual sample counts
///   are supported. Occlusion queries are created in a [`QueryPool`] by specifying the `queryType`
///   of `VK_QUERY_TYPE_OCCLUSION` in the [`QueryPoolCreateInfo`] structure which is passed to
///   [`CreateQueryPool`]. If this feature is enabled, queries of this type **can** enable
///   `VK_QUERY_CONTROL_PRECISE_BIT` in the `flags` parameter to [`CmdBeginQuery`]. If this feature
///   is not supported, the implementation supports only boolean occlusion queries. When any samples
///   are passed, boolean queries will return a non-zero result value, otherwise a result value of
///   zero is returned. When this feature is enabled and `VK_QUERY_CONTROL_PRECISE_BIT` is set,
///   occlusion queries will report the actual number of samples passed.
/// - [`pipeline_statistics_query`] specifies whether the pipeline statistics queries are supported.
///   If this feature is not enabled, queries of type `VK_QUERY_TYPE_PIPELINE_STATISTICS`**cannot**
///   be created, and none of the [`QueryPipelineStatisticFlagBits`] bits **can** be set in the
///   `pipelineStatistics` member of the [`QueryPoolCreateInfo`] structure.
/// - [`vertex_pipeline_stores_and_atomics`] specifies whether storage buffers and images support
///   stores and atomic operations in the vertex, tessellation, and geometry shader stages. If this
///   feature is not enabled, all storage image, storage texel buffer, and storage buffer variables
///   used by these stages in shader modules **must** be decorated with the `NonWritable` decoration
///   (or the `readonly` memory qualifier in GLSL).
/// - [`fragment_stores_and_atomics`] specifies whether storage buffers and images support stores
///   and atomic operations in the fragment shader stage. If this feature is not enabled, all
///   storage image, storage texel buffer, and storage buffer variables used by the fragment stage
///   in shader modules **must** be decorated with the `NonWritable` decoration (or the `readonly`
///   memory qualifier in GLSL).
/// - [`shader_tessellation_and_geometry_point_size`] specifies whether the `PointSize` built-in decoration is available in the tessellation control, tessellation evaluation, and geometry shader stages. If this feature is not enabled, members decorated with the `PointSize` built-in decoration **must** not be read from or written to and all points written from a tessellation or geometry shader will have a size of 1.0. This also specifies whether shader modules **can** declare the `TessellationPointSize` capability for tessellation control and evaluation shaders, or if the shader modules **can** declare the `GeometryPointSize` capability for geometry shaders. An implementation supporting this feature **must** also support one or both of the [[`tessellation_shader`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-tessellationShader) or [[`geometry_shader`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-geometryShader) features.
/// - [`shader_image_gather_extended`] specifies whether the extended set of image gather
///   instructions are available in shader code. If this feature is not enabled, the
///   `OpImage*Gather` instructions do not support the `Offset` and `ConstOffsets` operands. This
///   also specifies whether shader modules **can** declare the `ImageGatherExtended` capability.
/// - [`shader_storage_image_extended_formats`] specifies whether all the “storage image extended
///   formats” below are supported; if this feature is supported, then the
///   `VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT`**must** be supported in `optimalTilingFeatures` for the
///   following formats:  - `VK_FORMAT_R16G16_SFLOAT`  - `VK_FORMAT_B10G11R11_UFLOAT_PACK32`  -
///   `VK_FORMAT_R16_SFLOAT`  - `VK_FORMAT_R16G16B16A16_UNORM`  -
///   `VK_FORMAT_A2B10G10R10_UNORM_PACK32`  - `VK_FORMAT_R16G16_UNORM`  - `VK_FORMAT_R8G8_UNORM`  -
///   `VK_FORMAT_R16_UNORM`  - `VK_FORMAT_R8_UNORM`  - `VK_FORMAT_R16G16B16A16_SNORM`  -
///   `VK_FORMAT_R16G16_SNORM`  - `VK_FORMAT_R8G8_SNORM`  - `VK_FORMAT_R16_SNORM`  -
///   `VK_FORMAT_R8_SNORM`  - `VK_FORMAT_R16G16_SINT`  - `VK_FORMAT_R8G8_SINT`  -
///   `VK_FORMAT_R16_SINT`  - `VK_FORMAT_R8_SINT`  - `VK_FORMAT_A2B10G10R10_UINT_PACK32`  -
///   `VK_FORMAT_R16G16_UINT`  - `VK_FORMAT_R8G8_UINT`  - `VK_FORMAT_R16_UINT`  -
///   `VK_FORMAT_R8_UINT`
/// - [`shader_storage_image_multisample`] specifies whether multisampled storage images are
///   supported. If this feature is not enabled, images that are created with a `usage` that
///   includes `VK_IMAGE_USAGE_STORAGE_BIT`**must** be created with `samples` equal to
///   `VK_SAMPLE_COUNT_1_BIT`. This also specifies whether shader modules **can** declare the
///   `StorageImageMultisample` and `ImageMSArray` capabilities.
/// - [`shader_storage_image_read_without_format`] specifies whether storage images require a format
///   qualifier to be specified when reading. [`shader_storage_image_read_without_format`] applies only
///   to formats listed in the [storage without format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-without-shader-storage-format)
///   list.
/// - [`shader_storage_image_write_without_format`] specifies whether storage images require a format qualifier to be specified when writing. [`shader_storage_image_write_without_format`] applies only to formats listed in the [storage without format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-without-shader-storage-format) list.
/// - [`shader_uniform_buffer_array_dynamic_indexing`] specifies whether arrays of uniform buffers
///   **can** be indexed by *dynamically uniform* integer expressions in shader code. If this
///   feature is not enabled, resources with a descriptor type of
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`**must** be
///   indexed only by constant integral expressions when aggregated into arrays in shader code. This
///   also specifies whether shader modules **can** declare the `UniformBufferArrayDynamicIndexing`
///   capability.
/// - [`shader_sampled_image_array_dynamic_indexing`] specifies whether arrays of samplers or
///   sampled images **can** be indexed by dynamically uniform integer expressions in shader code.
///   If this feature is not enabled, resources with a descriptor type of
///   `VK_DESCRIPTOR_TYPE_SAMPLER`, `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, or
///   `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`**must** be indexed only by constant integral expressions
///   when aggregated into arrays in shader code. This also specifies whether shader modules **can**
///   declare the `SampledImageArrayDynamicIndexing` capability.
/// - [`shader_storage_buffer_array_dynamic_indexing`] specifies whether arrays of storage buffers
///   **can** be indexed by dynamically uniform integer expressions in shader code. If this feature
///   is not enabled, resources with a descriptor type of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`**must** be indexed only by constant integral
///   expressions when aggregated into arrays in shader code. This also specifies whether shader
///   modules **can** declare the `StorageBufferArrayDynamicIndexing` capability.
/// - [`shader_storage_image_array_dynamic_indexing`] specifies whether arrays of storage images
///   **can** be indexed by dynamically uniform integer expressions in shader code. If this feature
///   is not enabled, resources with a descriptor type of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`**must**
///   be indexed only by constant integral expressions when aggregated into arrays in shader code.
///   This also specifies whether shader modules **can** declare the
///   `StorageImageArrayDynamicIndexing` capability.
/// - [`shader_clip_distance`] specifies whether clip distances are supported in shader code. If
///   this feature is not enabled, any members decorated with the `ClipDistance` built-in decoration
///   **must** not be read from or written to in shader modules. This also specifies whether shader
///   modules **can** declare the `ClipDistance` capability.
/// - [`shader_cull_distance`] specifies whether cull distances are supported in shader code. If
///   this feature is not enabled, any members decorated with the `CullDistance` built-in decoration
///   **must** not be read from or written to in shader modules. This also specifies whether shader
///   modules **can** declare the `CullDistance` capability.
/// - [`shader_float_64`] specifies whether 64-bit floats (doubles) are supported in shader code. If
///   this feature is not enabled, 64-bit floating-point types **must** not be used in shader code.
///   This also specifies whether shader modules **can** declare the `Float64` capability. Declaring
///   and using 64-bit floats is enabled for all storage classes that SPIR-V allows with the
///   `Float64` capability.
/// - [`shader_int_64`] specifies whether 64-bit integers (signed and unsigned) are supported in
///   shader code. If this feature is not enabled, 64-bit integer types **must** not be used in
///   shader code. This also specifies whether shader modules **can** declare the `Int64`
///   capability. Declaring and using 64-bit integers is enabled for all storage classes that SPIR-V
///   allows with the `Int64` capability.
/// - [`shader_int_16`] specifies whether 16-bit integers (signed and unsigned) are supported in
///   shader code. If this feature is not enabled, 16-bit integer types **must** not be used in
///   shader code. This also specifies whether shader modules **can** declare the `Int16`
///   capability. However, this only enables a subset of the storage classes that SPIR-V allows for
///   the `Int16` SPIR-V capability: Declaring and using 16-bit integers in the `Private`,
///   `Workgroup` (for non-Block variables), and `Function` storage classes is enabled, while
///   declaring them in the interface storage classes (e.g., `UniformConstant`, `Uniform`,
///   `StorageBuffer`, `Input`, `Output`, and `PushConstant`) is not enabled.
/// - [`shader_resource_residency`] specifies whether image operations that return resource
///   residency information are supported in shader code. If this feature is not enabled, the
///   `OpImageSparse*` instructions **must** not be used in shader code. This also specifies whether
///   shader modules **can** declare the `SparseResidency` capability. The feature requires at least
///   one of the `sparseResidency*` features to be supported.
/// - [`shader_resource_min_lod`] specifies whether image operations specifying the minimum resource
///   LOD are supported in shader code. If this feature is not enabled, the `MinLod` image operand
///   **must** not be used in shader code. This also specifies whether shader modules **can**
///   declare the `MinLod` capability.
/// - [`sparse_binding`] specifies whether resource memory **can** be managed at opaque sparse block
///   level instead of at the object level. If this feature is not enabled, resource memory **must**
///   be bound only on a per-object basis using the [`BindBufferMemory`] and [`BindImageMemory`] commands.
///   In this case, buffers and images **must** not be created with `VK_BUFFER_CREATE_SPARSE_BINDING_BIT`
///   and `VK_IMAGE_CREATE_SPARSE_BINDING_BIT` set in the `flags` member of the [`BufferCreateInfo`]
///   and [`ImageCreateInfo`] structures, respectively. Otherwise resource memory **can** be managed
///   as described in [Sparse Resource Features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseresourcefeatures).
/// - [`sparse_residency_buffer`] specifies whether the device **can** access partially resident
///   buffers. If this feature is not enabled, buffers **must** not be created with
///   `VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member of the [`BufferCreateInfo`]
///   structure.
/// - [`sparse_residency_image_2_d`] specifies whether the device **can** access partially resident
///   2D images with 1 sample per pixel. If this feature is not enabled, images with an `imageType`
///   of `VK_IMAGE_TYPE_2D` and `samples` set to `VK_SAMPLE_COUNT_1_BIT`**must** not be created with
///   `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member of the [`ImageCreateInfo`]
///   structure.
/// - [`sparse_residency_image_3_d`] specifies whether the device **can** access partially resident
///   3D images. If this feature is not enabled, images with an `imageType` of
///   `VK_IMAGE_TYPE_3D`**must** not be created with `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in
///   the `flags` member of the [`ImageCreateInfo`] structure.
/// - [`sparse_residency_2_samples`] specifies whether the physical device **can** access partially
///   resident 2D images with 2 samples per pixel. If this feature is not enabled, images with an
///   `imageType` of `VK_IMAGE_TYPE_2D` and `samples` set to `VK_SAMPLE_COUNT_2_BIT`**must** not be
///   created with `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member of the
///   [`ImageCreateInfo`] structure.
/// - [`sparse_residency_4_samples`] specifies whether the physical device **can** access partially
///   resident 2D images with 4 samples per pixel. If this feature is not enabled, images with an
///   `imageType` of `VK_IMAGE_TYPE_2D` and `samples` set to `VK_SAMPLE_COUNT_4_BIT`**must** not be
///   created with `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member of the
///   [`ImageCreateInfo`] structure.
/// - [`sparse_residency_8_samples`] specifies whether the physical device **can** access partially
///   resident 2D images with 8 samples per pixel. If this feature is not enabled, images with an
///   `imageType` of `VK_IMAGE_TYPE_2D` and `samples` set to `VK_SAMPLE_COUNT_8_BIT`**must** not be
///   created with `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member of the
///   [`ImageCreateInfo`] structure.
/// - [`sparse_residency_16_samples`] specifies whether the physical device **can** access partially
///   resident 2D images with 16 samples per pixel. If this feature is not enabled, images with an
///   `imageType` of `VK_IMAGE_TYPE_2D` and `samples` set to `VK_SAMPLE_COUNT_16_BIT`**must** not be
///   created with `VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member of the
///   [`ImageCreateInfo`] structure.
/// - [`sparse_residency_aliased`] specifies whether the physical device **can** correctly access
///   data aliased into multiple locations. If this feature is not enabled, the
///   `VK_BUFFER_CREATE_SPARSE_ALIASED_BIT` and `VK_IMAGE_CREATE_SPARSE_ALIASED_BIT` enum values
///   **must** not be used in `flags` members of the [`BufferCreateInfo`] and [`ImageCreateInfo`]
///   structures, respectively.
/// - [`variable_multisample_rate`] specifies whether all pipelines that will be bound to a command buffer during a [subpass which uses no attachments](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-noattachments)**must** have the same value for [`PipelineMultisampleStateCreateInfo::rasterization_samples`]. If set to [`TRUE`], the implementation supports variable multisample rates in a subpass which uses no attachments. If set to [`FALSE`], then all pipelines bound in such a subpass **must** have the same multisample rate. This has no effect in situations where a subpass uses any attachments.
/// - [`inherited_queries`] specifies whether a secondary command buffer **may** be executed while a
///   query is active.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`DeviceCreateInfo`]
/// - [`PhysicalDeviceFeatures2`]
/// - [`GetPhysicalDeviceFeatures`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PhysicalDeviceFeatures {
    ///If [`robust_buffer_access`] is not enabled, applications **must** not
    ///perform out of bounds accesses.
    robust_buffer_access: Bool32,
    ///[`full_draw_index_uint_32`] specifies the
    ///full 32-bit range of indices is supported for indexed draw calls when
    ///using a [`IndexType`] of `VK_INDEX_TYPE_UINT32`.
    ///`maxDrawIndexedIndexValue` is the maximum index value that **may** be
    ///used (aside from the primitive restart index, which is always 2<sup>32</sup>-1
    ///when the [`IndexType`] is `VK_INDEX_TYPE_UINT32`).
    ///If this feature is supported, `maxDrawIndexedIndexValue`**must** be
    ///2<sup>32</sup>-1; otherwise it **must** be no smaller than 2<sup>24</sup>-1.
    ///See [maxDrawIndexedIndexValue](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxDrawIndexedIndexValue).
    full_draw_index_uint_32: Bool32,
    ///[`image_cube_array`] specifies whether image
    ///views with a [`ImageViewType`] of
    ///`VK_IMAGE_VIEW_TYPE_CUBE_ARRAY`**can** be created, and that the
    ///corresponding `SampledCubeArray` and `ImageCubeArray` SPIR-V
    ///capabilities **can** be used in shader code.
    image_cube_array: Bool32,
    ///[`independent_blend`] specifies whether
    ///the [`PipelineColorBlendAttachmentState`] settings are controlled
    ///independently per-attachment.
    ///If this feature is not enabled, the
    ///[`PipelineColorBlendAttachmentState`] settings for all color
    ///attachments **must** be identical.
    ///Otherwise, a different [`PipelineColorBlendAttachmentState`]**can** be
    ///provided for each bound color attachment.
    independent_blend: Bool32,
    ///[`geometry_shader`] specifies whether
    ///geometry shaders are supported.
    ///If this feature is not enabled, the `VK_SHADER_STAGE_GEOMETRY_BIT`
    ///and `VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT` enum values **must** not be
    ///used.
    ///This also specifies whether shader modules **can** declare the
    ///`Geometry` capability.
    geometry_shader: Bool32,
    ///[`tessellation_shader`] specifies
    ///whether tessellation control and evaluation shaders are supported.
    ///If this feature is not enabled, the
    ///`VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT`,
    ///`VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT`,
    ///`VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT`,
    ///`VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT`, and
    ///`VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO` enum
    ///values **must** not be used.
    ///This also specifies whether shader modules **can** declare the
    ///`Tessellation` capability.
    tessellation_shader: Bool32,
    ///[`sample_rate_shading`] specifies whether
    ///[Sample Shading](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-sampleshading) and multisample interpolation
    ///are supported.
    ///If this feature is not enabled, the `sampleShadingEnable` member of
    ///the [`PipelineMultisampleStateCreateInfo`] structure **must** be set to
    ///[`FALSE`] and the `minSampleShading` member is ignored.
    ///This also specifies whether shader modules **can** declare the
    ///`SampleRateShading` capability.
    sample_rate_shading: Bool32,
    ///[`dual_src_blend`] specifies whether blend
    ///operations which take two sources are supported.
    ///If this feature is not enabled, the `VK_BLEND_FACTOR_SRC1_COLOR`,
    ///`VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR`,
    ///`VK_BLEND_FACTOR_SRC1_ALPHA`, and
    ///`VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA` enum values **must** not be used
    ///as source or destination blending factors.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb).
    dual_src_blend: Bool32,
    ///[`logic_op`] specifies whether logic operations
    ///are supported.
    ///If this feature is not enabled, the `logicOpEnable` member of the
    ///[`PipelineColorBlendStateCreateInfo`] structure **must** be set to
    ///[`FALSE`], and the [`logic_op`] member is ignored.
    logic_op: Bool32,
    ///[`multi_draw_indirect`] specifies whether
    ///multiple draw indirect is supported.
    ///If this feature is not enabled, the `drawCount` parameter to the
    ///[`CmdDrawIndirect`] and [`CmdDrawIndexedIndirect`] commands
    ///**must** be 0 or 1.
    ///The `maxDrawIndirectCount` member of the
    ///[`PhysicalDeviceLimits`] structure **must** also be 1 if this feature
    ///is not supported.
    ///See [maxDrawIndirectCount](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxDrawIndirectCount).
    multi_draw_indirect: Bool32,
    ///[`draw_indirect_first_instance`]
    ///specifies whether indirect drawing calls support the `firstInstance`
    ///parameter.
    ///If this feature is not enabled, the `firstInstance` member of all
    ///[`DrawIndirectCommand`] and [`DrawIndexedIndirectCommand`]
    ///structures that are provided to the [`CmdDrawIndirect`] and
    ///[`CmdDrawIndexedIndirect`] commands **must** be 0.
    draw_indirect_first_instance: Bool32,
    ///[`depth_clamp`] specifies whether depth
    ///clamping is supported.
    ///If this feature is not enabled, the `depthClampEnable` member of the
    ///[`PipelineRasterizationStateCreateInfo`] structure **must** be set to
    ///[`FALSE`].
    ///Otherwise, setting `depthClampEnable` to [`TRUE`] will enable
    ///depth clamping.
    depth_clamp: Bool32,
    ///[`depth_bias_clamp`] specifies whether depth
    ///bias clamping is supported.
    ///If this feature is not enabled, the [`depth_bias_clamp`] member of the
    ///[`PipelineRasterizationStateCreateInfo`] structure **must** be set to
    ///0.0 unless the `VK_DYNAMIC_STATE_DEPTH_BIAS` dynamic state is
    ///enabled, and the [`depth_bias_clamp`] parameter to
    ///[`CmdSetDepthBias`]**must** be set to 0.0.
    depth_bias_clamp: Bool32,
    ///[`fill_mode_non_solid`] specifies whether
    ///point and wireframe fill modes are supported.
    ///If this feature is not enabled, the `VK_POLYGON_MODE_POINT` and
    ///`VK_POLYGON_MODE_LINE` enum values **must** not be used.
    fill_mode_non_solid: Bool32,
    ///[`depth_bounds`] specifies whether depth
    ///bounds tests are supported.
    ///If this feature is not enabled, the `depthBoundsTestEnable` member
    ///of the [`PipelineDepthStencilStateCreateInfo`] structure **must** be
    ///set to [`FALSE`].
    ///When `depthBoundsTestEnable` is set to [`FALSE`], the
    ///`minDepthBounds` and `maxDepthBounds` members of the
    ///[`PipelineDepthStencilStateCreateInfo`] structure are ignored.
    depth_bounds: Bool32,
    ///[`wide_lines`] specifies whether lines with
    ///width other than 1.0 are supported.
    ///If this feature is not enabled, the `lineWidth` member of the
    ///[`PipelineRasterizationStateCreateInfo`] structure **must** be set to
    ///1.0 unless the `VK_DYNAMIC_STATE_LINE_WIDTH` dynamic state is
    ///enabled, and the `lineWidth` parameter to [`CmdSetLineWidth`]**must** be set to 1.0.
    ///When this feature is supported, the range and granularity of supported
    ///line widths are indicated by the `lineWidthRange` and
    ///`lineWidthGranularity` members of the [`PhysicalDeviceLimits`]
    ///structure, respectively.
    wide_lines: Bool32,
    ///[`large_points`] specifies whether points with
    ///size greater than 1.0 are supported.
    ///If this feature is not enabled, only a point size of 1.0 written by a
    ///shader is supported.
    ///The range and granularity of supported point sizes are indicated by the
    ///`pointSizeRange` and `pointSizeGranularity` members of the
    ///[`PhysicalDeviceLimits`] structure, respectively.
    large_points: Bool32,
    ///[`alpha_to_one`] specifies whether the
    ///implementation is able to replace the alpha value of the fragment shader
    ///color output in the [Multisample Coverage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-covg) fragment
    ///operation.
    ///If this feature is not enabled, then the `alphaToOneEnable` member
    ///of the [`PipelineMultisampleStateCreateInfo`] structure **must** be set
    ///to [`FALSE`].
    ///Otherwise setting `alphaToOneEnable` to [`TRUE`] will enable
    ///alpha-to-one behavior.
    alpha_to_one: Bool32,
    ///[`multi_viewport`] specifies whether more
    ///than one viewport is supported.
    ///If this feature is not enabled:
    /// - The `viewportCount` and `scissorCount` members of the [`PipelineViewportStateCreateInfo`]
    ///   structure **must** be set to 1.
    /// - The `firstViewport` and `viewportCount` parameters to the [`CmdSetViewport`] command
    ///   **must** be set to 0 and 1, respectively.
    /// - The `firstScissor` and `scissorCount` parameters to the [`CmdSetScissor`] command **must**
    ///   be set to 0 and 1, respectively.
    /// - The `exclusiveScissorCount` member of the
    ///   [`PipelineViewportExclusiveScissorStateCreateInfoNV`] structure **must** be set to 0 or 1.
    /// - The `firstExclusiveScissor` and `exclusiveScissorCount` parameters to the
    ///   [`CmdSetExclusiveScissorNV`] command **must** be set to 0 and 1, respectively.
    multi_viewport: Bool32,
    ///[`sampler_anisotropy`] specifies whether
    ///anisotropic filtering is supported.
    ///If this feature is not enabled, the `anisotropyEnable` member of the
    ///[`SamplerCreateInfo`] structure **must** be [`FALSE`].
    sampler_anisotropy: Bool32,
    ///[`texture_compression_etc_2`]
    ///specifies whether all of the ETC2 and EAC compressed texture formats are
    ///supported.
    ///If this feature is enabled, then the
    ///`VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`,
    ///`VK_FORMAT_FEATURE_BLIT_SRC_BIT` and
    ///`VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT` features **must**
    ///be supported in `optimalTilingFeatures` for the following formats:
    /// - `VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK`
    /// - `VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK`
    /// - `VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK`
    /// - `VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK`
    /// - `VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK`
    /// - `VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK`
    /// - `VK_FORMAT_EAC_R11_UNORM_BLOCK`
    /// - `VK_FORMAT_EAC_R11_SNORM_BLOCK`
    /// - `VK_FORMAT_EAC_R11G11_UNORM_BLOCK`
    /// - `VK_FORMAT_EAC_R11G11_SNORM_BLOCK`
    ///To query for additional properties, or if the feature is not enabled,
    ///[`GetPhysicalDeviceFormatProperties`] and
    ///[`GetPhysicalDeviceImageFormatProperties`]**can** be used to check for
    ///supported properties of individual formats as normal.
    texture_compression_etc_2: Bool32,
    ///[`texture_compression_astc_ldr`]
    ///specifies whether all of the ASTC LDR compressed texture formats are
    ///supported.
    ///If this feature is enabled, then the
    ///`VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`,
    ///`VK_FORMAT_FEATURE_BLIT_SRC_BIT` and
    ///`VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT` features **must**
    ///be supported in `optimalTilingFeatures` for the following formats:
    /// - `VK_FORMAT_ASTC_4x4_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_4x4_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_5x4_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_5x4_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_5x5_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_5x5_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_6x5_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_6x5_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_6x6_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_6x6_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_8x5_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_8x5_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_8x6_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_8x6_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_8x8_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_8x8_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_10x5_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_10x5_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_10x6_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_10x6_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_10x8_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_10x8_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_10x10_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_10x10_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_12x10_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_12x10_SRGB_BLOCK`
    /// - `VK_FORMAT_ASTC_12x12_UNORM_BLOCK`
    /// - `VK_FORMAT_ASTC_12x12_SRGB_BLOCK`
    ///To query for additional properties, or if the feature is not enabled,
    ///[`GetPhysicalDeviceFormatProperties`] and
    ///[`GetPhysicalDeviceImageFormatProperties`]**can** be used to check for
    ///supported properties of individual formats as normal.
    texture_compression_astc_ldr: Bool32,
    ///[`texture_compression_bc`] specifies
    ///whether all of the BC compressed texture formats are supported.
    ///If this feature is enabled, then the
    ///`VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT`,
    ///`VK_FORMAT_FEATURE_BLIT_SRC_BIT` and
    ///`VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT` features **must**
    ///be supported in `optimalTilingFeatures` for the following formats:
    /// - `VK_FORMAT_BC1_RGB_UNORM_BLOCK`
    /// - `VK_FORMAT_BC1_RGB_SRGB_BLOCK`
    /// - `VK_FORMAT_BC1_RGBA_UNORM_BLOCK`
    /// - `VK_FORMAT_BC1_RGBA_SRGB_BLOCK`
    /// - `VK_FORMAT_BC2_UNORM_BLOCK`
    /// - `VK_FORMAT_BC2_SRGB_BLOCK`
    /// - `VK_FORMAT_BC3_UNORM_BLOCK`
    /// - `VK_FORMAT_BC3_SRGB_BLOCK`
    /// - `VK_FORMAT_BC4_UNORM_BLOCK`
    /// - `VK_FORMAT_BC4_SNORM_BLOCK`
    /// - `VK_FORMAT_BC5_UNORM_BLOCK`
    /// - `VK_FORMAT_BC5_SNORM_BLOCK`
    /// - `VK_FORMAT_BC6H_UFLOAT_BLOCK`
    /// - `VK_FORMAT_BC6H_SFLOAT_BLOCK`
    /// - `VK_FORMAT_BC7_UNORM_BLOCK`
    /// - `VK_FORMAT_BC7_SRGB_BLOCK`
    ///To query for additional properties, or if the feature is not enabled,
    ///[`GetPhysicalDeviceFormatProperties`] and
    ///[`GetPhysicalDeviceImageFormatProperties`]**can** be used to check for
    ///supported properties of individual formats as normal.
    texture_compression_bc: Bool32,
    ///[`occlusion_query_precise`] specifies
    ///whether occlusion queries returning actual sample counts are supported.
    ///Occlusion queries are created in a [`QueryPool`] by specifying the
    ///`queryType` of `VK_QUERY_TYPE_OCCLUSION` in the
    ///[`QueryPoolCreateInfo`] structure which is passed to
    ///[`CreateQueryPool`].
    ///If this feature is enabled, queries of this type **can** enable
    ///`VK_QUERY_CONTROL_PRECISE_BIT` in the `flags` parameter to
    ///[`CmdBeginQuery`].
    ///If this feature is not supported, the implementation supports only
    ///boolean occlusion queries.
    ///When any samples are passed, boolean queries will return a non-zero
    ///result value, otherwise a result value of zero is returned.
    ///When this feature is enabled and `VK_QUERY_CONTROL_PRECISE_BIT` is
    ///set, occlusion queries will report the actual number of samples passed.
    occlusion_query_precise: Bool32,
    ///[`pipeline_statistics_query`]
    ///specifies whether the pipeline statistics queries are supported.
    ///If this feature is not enabled, queries of type
    ///`VK_QUERY_TYPE_PIPELINE_STATISTICS`**cannot** be created, and none of
    ///the [`QueryPipelineStatisticFlagBits`] bits **can** be set in the
    ///`pipelineStatistics` member of the [`QueryPoolCreateInfo`]
    ///structure.
    pipeline_statistics_query: Bool32,
    ///[`vertex_pipeline_stores_and_atomics`] specifies whether storage buffers
    ///and images support stores and atomic operations in the vertex,
    ///tessellation, and geometry shader stages.
    ///If this feature is not enabled, all storage image, storage texel buffer,
    ///and storage buffer variables used by these stages in shader modules
    ///**must** be decorated with the `NonWritable` decoration (or the
    ///`readonly` memory qualifier in GLSL).
    vertex_pipeline_stores_and_atomics: Bool32,
    ///[`fragment_stores_and_atomics`]
    ///specifies whether storage buffers and images support stores and atomic
    ///operations in the fragment shader stage.
    ///If this feature is not enabled, all storage image, storage texel buffer,
    ///and storage buffer variables used by the fragment stage in shader
    ///modules **must** be decorated with the `NonWritable` decoration (or the
    ///`readonly` memory qualifier in GLSL).
    fragment_stores_and_atomics: Bool32,
    ///[`shader_tessellation_and_geometry_point_size`] specifies whether the
    ///`PointSize` built-in decoration is available in the tessellation
    ///control, tessellation evaluation, and geometry shader stages.
    ///If this feature is not enabled, members decorated with the
    ///`PointSize` built-in decoration **must** not be read from or written to
    ///and all points written from a tessellation or geometry shader will have
    ///a size of 1.0.
    ///This also specifies whether shader modules **can** declare the
    ///`TessellationPointSize` capability for tessellation control and
    ///evaluation shaders, or if the shader modules **can** declare the
    ///`GeometryPointSize` capability for geometry shaders.
    ///An implementation supporting this feature **must** also support one or both
    ///of the [[`tessellation_shader`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-tessellationShader) or
    ///[[`geometry_shader`]](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-geometryShader) features.
    shader_tessellation_and_geometry_point_size: Bool32,
    ///[`shader_image_gather_extended`]
    ///specifies whether the extended set of image gather instructions are
    ///available in shader code.
    ///If this feature is not enabled, the `OpImage*Gather` instructions do
    ///not support the `Offset` and `ConstOffsets` operands.
    ///This also specifies whether shader modules **can** declare the
    ///`ImageGatherExtended` capability.
    shader_image_gather_extended: Bool32,
    ///[`shader_storage_image_extended_formats`] specifies whether all the
    ///“storage image extended formats” below are supported; if this feature
    ///is supported, then the `VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT`**must**
    ///be supported in `optimalTilingFeatures` for the following formats:
    /// - `VK_FORMAT_R16G16_SFLOAT`
    /// - `VK_FORMAT_B10G11R11_UFLOAT_PACK32`
    /// - `VK_FORMAT_R16_SFLOAT`
    /// - `VK_FORMAT_R16G16B16A16_UNORM`
    /// - `VK_FORMAT_A2B10G10R10_UNORM_PACK32`
    /// - `VK_FORMAT_R16G16_UNORM`
    /// - `VK_FORMAT_R8G8_UNORM`
    /// - `VK_FORMAT_R16_UNORM`
    /// - `VK_FORMAT_R8_UNORM`
    /// - `VK_FORMAT_R16G16B16A16_SNORM`
    /// - `VK_FORMAT_R16G16_SNORM`
    /// - `VK_FORMAT_R8G8_SNORM`
    /// - `VK_FORMAT_R16_SNORM`
    /// - `VK_FORMAT_R8_SNORM`
    /// - `VK_FORMAT_R16G16_SINT`
    /// - `VK_FORMAT_R8G8_SINT`
    /// - `VK_FORMAT_R16_SINT`
    /// - `VK_FORMAT_R8_SINT`
    /// - `VK_FORMAT_A2B10G10R10_UINT_PACK32`
    /// - `VK_FORMAT_R16G16_UINT`
    /// - `VK_FORMAT_R8G8_UINT`
    /// - `VK_FORMAT_R16_UINT`
    /// - `VK_FORMAT_R8_UINT`
    shader_storage_image_extended_formats: Bool32,
    ///[`shader_storage_image_multisample`] specifies whether multisampled
    ///storage images are supported.
    ///If this feature is not enabled, images that are created with a
    ///`usage` that includes `VK_IMAGE_USAGE_STORAGE_BIT`**must** be
    ///created with `samples` equal to `VK_SAMPLE_COUNT_1_BIT`.
    ///This also specifies whether shader modules **can** declare the
    ///`StorageImageMultisample` and `ImageMSArray` capabilities.
    shader_storage_image_multisample: Bool32,
    ///[`shader_storage_image_read_without_format`] specifies whether storage
    ///images require a format qualifier to be specified when reading.
    ///[`shader_storage_image_read_without_format`] applies only to formats listed
    ///in the [storage without format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-without-shader-storage-format)
    ///list.
    shader_storage_image_read_without_format: Bool32,
    ///[`shader_storage_image_write_without_format`] specifies whether storage
    ///images require a format qualifier to be specified when writing.
    ///[`shader_storage_image_write_without_format`] applies only to formats
    ///listed in the [storage without
    ///format](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-without-shader-storage-format) list.
    shader_storage_image_write_without_format: Bool32,
    ///[`shader_uniform_buffer_array_dynamic_indexing`] specifies whether arrays
    ///of uniform buffers **can** be indexed by *dynamically uniform* integer
    ///expressions in shader code.
    ///If this feature is not enabled, resources with a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`**must** be indexed only by
    ///constant integral expressions when aggregated into arrays in shader
    ///code.
    ///This also specifies whether shader modules **can** declare the
    ///`UniformBufferArrayDynamicIndexing` capability.
    shader_uniform_buffer_array_dynamic_indexing: Bool32,
    ///[`shader_sampled_image_array_dynamic_indexing`] specifies whether arrays of
    ///samplers or sampled images **can** be indexed by dynamically uniform
    ///integer expressions in shader code.
    ///If this feature is not enabled, resources with a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_SAMPLER`,
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, or
    ///`VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`**must** be indexed only by constant
    ///integral expressions when aggregated into arrays in shader code.
    ///This also specifies whether shader modules **can** declare the
    ///`SampledImageArrayDynamicIndexing` capability.
    shader_sampled_image_array_dynamic_indexing: Bool32,
    ///[`shader_storage_buffer_array_dynamic_indexing`] specifies whether arrays
    ///of storage buffers **can** be indexed by dynamically uniform integer
    ///expressions in shader code.
    ///If this feature is not enabled, resources with a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`**must** be indexed only by
    ///constant integral expressions when aggregated into arrays in shader
    ///code.
    ///This also specifies whether shader modules **can** declare the
    ///`StorageBufferArrayDynamicIndexing` capability.
    shader_storage_buffer_array_dynamic_indexing: Bool32,
    ///[`shader_storage_image_array_dynamic_indexing`] specifies whether arrays of
    ///storage images **can** be indexed by dynamically uniform integer
    ///expressions in shader code.
    ///If this feature is not enabled, resources with a descriptor type of
    ///`VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`**must** be indexed only by constant
    ///integral expressions when aggregated into arrays in shader code.
    ///This also specifies whether shader modules **can** declare the
    ///`StorageImageArrayDynamicIndexing` capability.
    shader_storage_image_array_dynamic_indexing: Bool32,
    ///[`shader_clip_distance`] specifies
    ///whether clip distances are supported in shader code.
    ///If this feature is not enabled, any members decorated with the
    ///`ClipDistance` built-in decoration **must** not be read from or written
    ///to in shader modules.
    ///This also specifies whether shader modules **can** declare the
    ///`ClipDistance` capability.
    shader_clip_distance: Bool32,
    ///[`shader_cull_distance`] specifies
    ///whether cull distances are supported in shader code.
    ///If this feature is not enabled, any members decorated with the
    ///`CullDistance` built-in decoration **must** not be read from or written
    ///to in shader modules.
    ///This also specifies whether shader modules **can** declare the
    ///`CullDistance` capability.
    shader_cull_distance: Bool32,
    ///[`shader_float_64`] specifies whether 64-bit
    ///floats (doubles) are supported in shader code.
    ///If this feature is not enabled, 64-bit floating-point types **must** not be
    ///used in shader code.
    ///This also specifies whether shader modules **can** declare the `Float64`
    ///capability.
    ///Declaring and using 64-bit floats is enabled for all storage classes
    ///that SPIR-V allows with the `Float64` capability.
    shader_float_64: Bool32,
    ///[`shader_int_64`] specifies whether 64-bit
    ///integers (signed and unsigned) are supported in shader code.
    ///If this feature is not enabled, 64-bit integer types **must** not be used
    ///in shader code.
    ///This also specifies whether shader modules **can** declare the `Int64`
    ///capability.
    ///Declaring and using 64-bit integers is enabled for all storage classes
    ///that SPIR-V allows with the `Int64` capability.
    shader_int_64: Bool32,
    ///[`shader_int_16`] specifies whether 16-bit
    ///integers (signed and unsigned) are supported in shader code.
    ///If this feature is not enabled, 16-bit integer types **must** not be used
    ///in shader code.
    ///This also specifies whether shader modules **can** declare the `Int16`
    ///capability.
    ///However, this only enables a subset of the storage classes that SPIR-V
    ///allows for the `Int16` SPIR-V capability: Declaring and using 16-bit
    ///integers in the `Private`,
    ///`Workgroup` (for non-Block variables),
    ///and `Function` storage classes is enabled, while declaring them in
    ///the interface storage classes (e.g., `UniformConstant`, `Uniform`,
    ///`StorageBuffer`, `Input`, `Output`, and `PushConstant`) is
    ///not enabled.
    shader_int_16: Bool32,
    ///[`shader_resource_residency`]
    ///specifies whether image operations that return resource residency
    ///information are supported in shader code.
    ///If this feature is not enabled, the `OpImageSparse*` instructions
    ///**must** not be used in shader code.
    ///This also specifies whether shader modules **can** declare the
    ///`SparseResidency` capability.
    ///The feature requires at least one of the `sparseResidency*` features
    ///to be supported.
    shader_resource_residency: Bool32,
    ///[`shader_resource_min_lod`] specifies
    ///whether image operations specifying the minimum resource LOD are
    ///supported in shader code.
    ///If this feature is not enabled, the `MinLod` image operand **must** not
    ///be used in shader code.
    ///This also specifies whether shader modules **can** declare the `MinLod`
    ///capability.
    shader_resource_min_lod: Bool32,
    ///[`sparse_binding`] specifies whether
    ///resource memory **can** be managed at opaque sparse block level instead of
    ///at the object level.
    ///If this feature is not enabled, resource memory **must** be bound only on a
    ///per-object basis using the [`BindBufferMemory`] and
    ///[`BindImageMemory`] commands.
    ///In this case, buffers and images **must** not be created with
    ///`VK_BUFFER_CREATE_SPARSE_BINDING_BIT` and
    ///`VK_IMAGE_CREATE_SPARSE_BINDING_BIT` set in the `flags` member
    ///of the [`BufferCreateInfo`] and [`ImageCreateInfo`] structures,
    ///respectively.
    ///Otherwise resource memory **can** be managed as described in
    ///[Sparse Resource Features](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseresourcefeatures).
    sparse_binding: Bool32,
    ///[`sparse_residency_buffer`] specifies
    ///whether the device **can** access partially resident buffers.
    ///If this feature is not enabled, buffers **must** not be created with
    ///`VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags`
    ///member of the [`BufferCreateInfo`] structure.
    sparse_residency_buffer: Bool32,
    ///[`sparse_residency_image_2_d`]
    ///specifies whether the device **can** access partially resident 2D images
    ///with 1 sample per pixel.
    ///If this feature is not enabled, images with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and `samples` set to
    ///`VK_SAMPLE_COUNT_1_BIT`**must** not be created with
    ///`VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member
    ///of the [`ImageCreateInfo`] structure.
    sparse_residency_image_2_d: Bool32,
    ///[`sparse_residency_image_3_d`]
    ///specifies whether the device **can** access partially resident 3D images.
    ///If this feature is not enabled, images with an `imageType` of
    ///`VK_IMAGE_TYPE_3D`**must** not be created with
    ///`VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member
    ///of the [`ImageCreateInfo`] structure.
    sparse_residency_image_3_d: Bool32,
    ///[`sparse_residency_2_samples`]
    ///specifies whether the physical device **can** access partially resident 2D
    ///images with 2 samples per pixel.
    ///If this feature is not enabled, images with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and `samples` set to
    ///`VK_SAMPLE_COUNT_2_BIT`**must** not be created with
    ///`VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member
    ///of the [`ImageCreateInfo`] structure.
    sparse_residency_2_samples: Bool32,
    ///[`sparse_residency_4_samples`]
    ///specifies whether the physical device **can** access partially resident 2D
    ///images with 4 samples per pixel.
    ///If this feature is not enabled, images with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and `samples` set to
    ///`VK_SAMPLE_COUNT_4_BIT`**must** not be created with
    ///`VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member
    ///of the [`ImageCreateInfo`] structure.
    sparse_residency_4_samples: Bool32,
    ///[`sparse_residency_8_samples`]
    ///specifies whether the physical device **can** access partially resident 2D
    ///images with 8 samples per pixel.
    ///If this feature is not enabled, images with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and `samples` set to
    ///`VK_SAMPLE_COUNT_8_BIT`**must** not be created with
    ///`VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member
    ///of the [`ImageCreateInfo`] structure.
    sparse_residency_8_samples: Bool32,
    ///[`sparse_residency_16_samples`]
    ///specifies whether the physical device **can** access partially resident 2D
    ///images with 16 samples per pixel.
    ///If this feature is not enabled, images with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and `samples` set to
    ///`VK_SAMPLE_COUNT_16_BIT`**must** not be created with
    ///`VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT` set in the `flags` member
    ///of the [`ImageCreateInfo`] structure.
    sparse_residency_16_samples: Bool32,
    ///[`sparse_residency_aliased`]
    ///specifies whether the physical device **can** correctly access data aliased
    ///into multiple locations.
    ///If this feature is not enabled, the
    ///`VK_BUFFER_CREATE_SPARSE_ALIASED_BIT` and
    ///`VK_IMAGE_CREATE_SPARSE_ALIASED_BIT` enum values **must** not be used
    ///in `flags` members of the [`BufferCreateInfo`] and
    ///[`ImageCreateInfo`] structures, respectively.
    sparse_residency_aliased: Bool32,
    ///[`variable_multisample_rate`]
    ///specifies whether all pipelines that will be bound to a command buffer
    ///during a [subpass which uses no attachments](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-noattachments)**must** have the same value for
    ///[`PipelineMultisampleStateCreateInfo`]::`rasterizationSamples`.
    ///If set to [`TRUE`], the implementation supports variable
    ///multisample rates in a subpass which uses no attachments.
    ///If set to [`FALSE`], then all pipelines bound in such a subpass
    ///**must** have the same multisample rate.
    ///This has no effect in situations where a subpass uses any attachments.
    variable_multisample_rate: Bool32,
    ///[`inherited_queries`] specifies whether a
    ///secondary command buffer **may** be executed while a query is active.
    inherited_queries: Bool32,
}
///[VkPhysicalDeviceSparseProperties](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html) - Structure specifying physical device sparse memory properties
///# C Specifications
///The [`PhysicalDeviceSparseProperties`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPhysicalDeviceSparseProperties {
///    VkBool32    residencyStandard2DBlockShape;
///    VkBool32    residencyStandard2DMultisampleBlockShape;
///    VkBool32    residencyStandard3DBlockShape;
///    VkBool32    residencyAlignedMipSize;
///    VkBool32    residencyNonResidentStrict;
///} VkPhysicalDeviceSparseProperties;
///```
///# Members
/// - [`residency_standard_2_d_block_shape`] is [`TRUE`] if the physical device will access all single-sample 2D sparse resources using the standard sparse image block shapes (based on image format), as described in the [Standard Sparse Image Block Shapes (Single Sample)](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseblockshapessingle) table. If this property is not supported the value returned in the `imageGranularity` member of the [`SparseImageFormatProperties`] structure for single-sample 2D images is not **required** to match the standard sparse image block dimensions listed in the table.
/// - [`residency_standard_2_d_multisample_block_shape`] is [`TRUE`] if the physical device will access all multisample 2D sparse resources using the standard sparse image block shapes (based on image format), as described in the [Standard Sparse Image Block Shapes (MSAA)](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseblockshapesmsaa) table. If this property is not supported, the value returned in the `imageGranularity` member of the [`SparseImageFormatProperties`] structure for multisample 2D images is not **required** to match the standard sparse image block dimensions listed in the table.
/// - [`residency_standard_3_d_block_shape`] is [`TRUE`] if the physical device will access all 3D sparse resources using the standard sparse image block shapes (based on image format), as described in the [Standard Sparse Image Block Shapes (Single Sample)](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseblockshapessingle) table. If this property is not supported, the value returned in the `imageGranularity` member of the [`SparseImageFormatProperties`] structure for 3D images is not **required** to match the standard sparse image block dimensions listed in the table.
/// - [`residency_aligned_mip_size`] is [`TRUE`] if images with mip level dimensions that are not
///   integer multiples of the corresponding dimensions of the sparse image block **may** be placed
///   in the mip tail. If this property is not reported, only mip levels with dimensions smaller
///   than the `imageGranularity` member of the [`SparseImageFormatProperties`] structure will be
///   placed in the mip tail. If this property is reported the implementation is allowed to return
///   `VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT` in the `flags` member of
///   [`SparseImageFormatProperties`], indicating that mip level dimensions that are not integer
///   multiples of the corresponding dimensions of the sparse image block will be placed in the mip
///   tail.
/// - [`residency_non_resident_strict`] specifies whether the physical device **can** consistently
///   access non-resident regions of a resource. If this property is [`TRUE`], access to
///   non-resident regions of resources will be guaranteed to return values as if the resource was
///   populated with 0; writes to non-resident regions will be discarded.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`PhysicalDeviceProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PhysicalDeviceSparseProperties {
    ///[`residency_standard_2_d_block_shape`] is [`TRUE`] if the physical
    ///device will access all single-sample 2D sparse resources using the
    ///standard sparse image block shapes (based on image format), as described
    ///in the [Standard Sparse Image
    ///Block Shapes (Single Sample)](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseblockshapessingle) table.
    ///If this property is not supported the value returned in the
    ///`imageGranularity` member of the [`SparseImageFormatProperties`]
    ///structure for single-sample 2D images is not **required** to match the
    ///standard sparse image block dimensions listed in the table.
    residency_standard_2_d_block_shape: Bool32,
    ///[`residency_standard_2_d_multisample_block_shape`] is [`TRUE`] if the
    ///physical device will access all multisample 2D sparse resources using
    ///the standard sparse image block shapes (based on image format), as
    ///described in the [Standard Sparse
    ///Image Block Shapes (MSAA)](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseblockshapesmsaa) table.
    ///If this property is not supported, the value returned in the
    ///`imageGranularity` member of the [`SparseImageFormatProperties`]
    ///structure for multisample 2D images is not **required** to match the
    ///standard sparse image block dimensions listed in the table.
    residency_standard_2_d_multisample_block_shape: Bool32,
    ///[`residency_standard_3_d_block_shape`] is [`TRUE`] if the physical
    ///device will access all 3D sparse resources using the standard sparse
    ///image block shapes (based on image format), as described in the
    ///[Standard Sparse Image Block
    ///Shapes (Single Sample)](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#sparsememory-sparseblockshapessingle) table.
    ///If this property is not supported, the value returned in the
    ///`imageGranularity` member of the [`SparseImageFormatProperties`]
    ///structure for 3D images is not **required** to match the standard sparse
    ///image block dimensions listed in the table.
    residency_standard_3_d_block_shape: Bool32,
    ///[`residency_aligned_mip_size`] is [`TRUE`] if images with mip level
    ///dimensions that are not integer multiples of the corresponding
    ///dimensions of the sparse image block **may** be placed in the mip tail.
    ///If this property is not reported, only mip levels with dimensions
    ///smaller than the `imageGranularity` member of the
    ///[`SparseImageFormatProperties`] structure will be placed in the mip
    ///tail.
    ///If this property is reported the implementation is allowed to return
    ///`VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT` in the `flags`
    ///member of [`SparseImageFormatProperties`], indicating that mip level
    ///dimensions that are not integer multiples of the corresponding
    ///dimensions of the sparse image block will be placed in the mip tail.
    residency_aligned_mip_size: Bool32,
    ///[`residency_non_resident_strict`] specifies whether the physical device
    ///**can** consistently access non-resident regions of a resource.
    ///If this property is [`TRUE`], access to non-resident regions of
    ///resources will be guaranteed to return values as if the resource was
    ///populated with 0; writes to non-resident regions will be discarded.
    residency_non_resident_strict: Bool32,
}
///[VkPhysicalDeviceLimits](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html) - Structure reporting implementation-dependent physical device limits
///# C Specifications
///The [`PhysicalDeviceLimits`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkPhysicalDeviceLimits {
///    uint32_t              maxImageDimension1D;
///    uint32_t              maxImageDimension2D;
///    uint32_t              maxImageDimension3D;
///    uint32_t              maxImageDimensionCube;
///    uint32_t              maxImageArrayLayers;
///    uint32_t              maxTexelBufferElements;
///    uint32_t              maxUniformBufferRange;
///    uint32_t              maxStorageBufferRange;
///    uint32_t              maxPushConstantsSize;
///    uint32_t              maxMemoryAllocationCount;
///    uint32_t              maxSamplerAllocationCount;
///    VkDeviceSize          bufferImageGranularity;
///    VkDeviceSize          sparseAddressSpaceSize;
///    uint32_t              maxBoundDescriptorSets;
///    uint32_t              maxPerStageDescriptorSamplers;
///    uint32_t              maxPerStageDescriptorUniformBuffers;
///    uint32_t              maxPerStageDescriptorStorageBuffers;
///    uint32_t              maxPerStageDescriptorSampledImages;
///    uint32_t              maxPerStageDescriptorStorageImages;
///    uint32_t              maxPerStageDescriptorInputAttachments;
///    uint32_t              maxPerStageResources;
///    uint32_t              maxDescriptorSetSamplers;
///    uint32_t              maxDescriptorSetUniformBuffers;
///    uint32_t              maxDescriptorSetUniformBuffersDynamic;
///    uint32_t              maxDescriptorSetStorageBuffers;
///    uint32_t              maxDescriptorSetStorageBuffersDynamic;
///    uint32_t              maxDescriptorSetSampledImages;
///    uint32_t              maxDescriptorSetStorageImages;
///    uint32_t              maxDescriptorSetInputAttachments;
///    uint32_t              maxVertexInputAttributes;
///    uint32_t              maxVertexInputBindings;
///    uint32_t              maxVertexInputAttributeOffset;
///    uint32_t              maxVertexInputBindingStride;
///    uint32_t              maxVertexOutputComponents;
///    uint32_t              maxTessellationGenerationLevel;
///    uint32_t              maxTessellationPatchSize;
///    uint32_t              maxTessellationControlPerVertexInputComponents;
///    uint32_t              maxTessellationControlPerVertexOutputComponents;
///    uint32_t              maxTessellationControlPerPatchOutputComponents;
///    uint32_t              maxTessellationControlTotalOutputComponents;
///    uint32_t              maxTessellationEvaluationInputComponents;
///    uint32_t              maxTessellationEvaluationOutputComponents;
///    uint32_t              maxGeometryShaderInvocations;
///    uint32_t              maxGeometryInputComponents;
///    uint32_t              maxGeometryOutputComponents;
///    uint32_t              maxGeometryOutputVertices;
///    uint32_t              maxGeometryTotalOutputComponents;
///    uint32_t              maxFragmentInputComponents;
///    uint32_t              maxFragmentOutputAttachments;
///    uint32_t              maxFragmentDualSrcAttachments;
///    uint32_t              maxFragmentCombinedOutputResources;
///    uint32_t              maxComputeSharedMemorySize;
///    uint32_t              maxComputeWorkGroupCount[3];
///    uint32_t              maxComputeWorkGroupInvocations;
///    uint32_t              maxComputeWorkGroupSize[3];
///    uint32_t              subPixelPrecisionBits;
///    uint32_t              subTexelPrecisionBits;
///    uint32_t              mipmapPrecisionBits;
///    uint32_t              maxDrawIndexedIndexValue;
///    uint32_t              maxDrawIndirectCount;
///    float                 maxSamplerLodBias;
///    float                 maxSamplerAnisotropy;
///    uint32_t              maxViewports;
///    uint32_t              maxViewportDimensions[2];
///    float                 viewportBoundsRange[2];
///    uint32_t              viewportSubPixelBits;
///    size_t                minMemoryMapAlignment;
///    VkDeviceSize          minTexelBufferOffsetAlignment;
///    VkDeviceSize          minUniformBufferOffsetAlignment;
///    VkDeviceSize          minStorageBufferOffsetAlignment;
///    int32_t               minTexelOffset;
///    uint32_t              maxTexelOffset;
///    int32_t               minTexelGatherOffset;
///    uint32_t              maxTexelGatherOffset;
///    float                 minInterpolationOffset;
///    float                 maxInterpolationOffset;
///    uint32_t              subPixelInterpolationOffsetBits;
///    uint32_t              maxFramebufferWidth;
///    uint32_t              maxFramebufferHeight;
///    uint32_t              maxFramebufferLayers;
///    VkSampleCountFlags    framebufferColorSampleCounts;
///    VkSampleCountFlags    framebufferDepthSampleCounts;
///    VkSampleCountFlags    framebufferStencilSampleCounts;
///    VkSampleCountFlags    framebufferNoAttachmentsSampleCounts;
///    uint32_t              maxColorAttachments;
///    VkSampleCountFlags    sampledImageColorSampleCounts;
///    VkSampleCountFlags    sampledImageIntegerSampleCounts;
///    VkSampleCountFlags    sampledImageDepthSampleCounts;
///    VkSampleCountFlags    sampledImageStencilSampleCounts;
///    VkSampleCountFlags    storageImageSampleCounts;
///    uint32_t              maxSampleMaskWords;
///    VkBool32              timestampComputeAndGraphics;
///    float                 timestampPeriod;
///    uint32_t              maxClipDistances;
///    uint32_t              maxCullDistances;
///    uint32_t              maxCombinedClipAndCullDistances;
///    uint32_t              discreteQueuePriorities;
///    float                 pointSizeRange[2];
///    float                 lineWidthRange[2];
///    float                 pointSizeGranularity;
///    float                 lineWidthGranularity;
///    VkBool32              strictLines;
///    VkBool32              standardSampleLocations;
///    VkDeviceSize          optimalBufferCopyOffsetAlignment;
///    VkDeviceSize          optimalBufferCopyRowPitchAlignment;
///    VkDeviceSize          nonCoherentAtomSize;
///} VkPhysicalDeviceLimits;
///```
///# Members
///The [`PhysicalDeviceLimits`] are properties of the physical device.
///These are available in the `limits` member of the
///[`PhysicalDeviceProperties`] structure which is returned from
///[`GetPhysicalDeviceProperties`].
///# Description
/// - [`max_image_dimension_1_d`] is the largest dimension (`width`) that is guaranteed to be
///   supported for all images created with an `imageType` of `VK_IMAGE_TYPE_1D`. Some combinations
///   of image parameters (format, usage, etc.) **may** allow support for larger dimensions, which
///   **can** be queried using [`GetPhysicalDeviceImageFormatProperties`].
/// - [`max_image_dimension_2_d`] is the largest dimension (`width` or `height`) that is guaranteed
///   to be supported for all images created with an `imageType` of `VK_IMAGE_TYPE_2D` and without
///   `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT` set in `flags`. Some combinations of image parameters
///   (format, usage, etc.) **may** allow support for larger dimensions, which **can** be queried
///   using [`GetPhysicalDeviceImageFormatProperties`].
/// - [`max_image_dimension_3_d`] is the largest dimension (`width`, `height`, or `depth`) that is
///   guaranteed to be supported for all images created with an `imageType` of `VK_IMAGE_TYPE_3D`.
///   Some combinations of image parameters (format, usage, etc.) **may** allow support for larger
///   dimensions, which **can** be queried using [`GetPhysicalDeviceImageFormatProperties`].
/// - [`max_image_dimension_cube`] is the largest dimension (`width` or `height`) that is guaranteed
///   to be supported for all images created with an `imageType` of `VK_IMAGE_TYPE_2D` and with
///   `VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT` set in `flags`. Some combinations of image parameters
///   (format, usage, etc.) **may** allow support for larger dimensions, which **can** be queried
///   using [`GetPhysicalDeviceImageFormatProperties`].
/// - [`max_image_array_layers`] is the maximum number of layers (`arrayLayers`) for an image.
/// - [`max_texel_buffer_elements`] is the maximum number of addressable texels for a buffer view
///   created on a buffer which was created with the `VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT` or
///   `VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT` set in the `usage` member of the
///   [`BufferCreateInfo`] structure.
/// - [`max_uniform_buffer_range`] is the maximum value that **can** be specified in the `range`
///   member of a [`DescriptorBufferInfo`] structure passed to [`UpdateDescriptorSets`] for
///   descriptors of type `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`.
/// - [`max_storage_buffer_range`] is the maximum value that **can** be specified in the `range`
///   member of a [`DescriptorBufferInfo`] structure passed to [`UpdateDescriptorSets`] for
///   descriptors of type `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`.
/// - [`max_push_constants_size`] is the maximum size, in bytes, of the pool of push constant
///   memory. For each of the push constant ranges indicated by the `pPushConstantRanges` member of
///   the [`PipelineLayoutCreateInfo`] structure, (`offset` +  `size`)**must** be less than or equal
///   to this limit.
/// - [`max_memory_allocation_count`] is the maximum number of device memory allocations, as created
///   by [`AllocateMemory`], which **can** simultaneously exist.
/// - [`max_sampler_allocation_count`] is the maximum number of sampler objects, as created by
///   [`CreateSampler`], which **can** simultaneously exist on a device.
/// - [`buffer_image_granularity`] is the granularity, in bytes, at which buffer or linear image resources, and optimal image resources **can** be bound to adjacent offsets in the same [`DeviceMemory`] object without aliasing. See [Buffer-Image Granularity](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-bufferimagegranularity) for more details.
/// - [`sparse_address_space_size`] is the total amount of address space available, in bytes, for
///   sparse memory resources. This is an upper bound on the sum of the sizes of all sparse
///   resources, regardless of whether any memory is bound to them.
/// - [`max_bound_descriptor_sets`] is the maximum number of descriptor sets that **can** be simultaneously used by a pipeline. All [`DescriptorSet`] decorations in shader modules **must** have a value less than [`max_bound_descriptor_sets`]. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sets](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sets).
/// - [`max_per_stage_descriptor_samplers`] is the maximum number of samplers that **can** be accessible to a single shader stage in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_SAMPLER` or `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. A descriptor is accessible to a shader stage when the `stageFlags` member of the [`DescriptorSetLayoutBinding`] structure has the bit for that shader stage set. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
/// - [`max_per_stage_descriptor_uniform_buffers`] is the maximum number of uniform buffers that **can** be accessible to a single shader stage in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. A descriptor is accessible to a shader stage when the `stageFlags` member of the [`DescriptorSetLayoutBinding`] structure has the bit for that shader stage set. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
/// - [`max_per_stage_descriptor_storage_buffers`] is the maximum number of storage buffers that **can** be accessible to a single shader stage in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. A descriptor is accessible to a pipeline shader stage when the `stageFlags` member of the [`DescriptorSetLayoutBinding`] structure has the bit for that shader stage set. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
/// - [`max_per_stage_descriptor_sampled_images`] is the maximum number of sampled images that **can** be accessible to a single shader stage in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, or `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. A descriptor is accessible to a pipeline shader stage when the `stageFlags` member of the [`DescriptorSetLayoutBinding`] structure has the bit for that shader stage set. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler), [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage), and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
/// - [`max_per_stage_descriptor_storage_images`] is the maximum number of storage images that **can** be accessible to a single shader stage in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, or `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. A descriptor is accessible to a pipeline shader stage when the `stageFlags` member of the [`DescriptorSetLayoutBinding`] structure has the bit for that shader stage set. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage), and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
/// - [`max_per_stage_descriptor_input_attachments`] is the maximum number of input attachments that
///   **can** be accessible to a single shader stage in a pipeline layout. Descriptors with a type of
///   `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` count against this limit. Only descriptors in descriptor
///   set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit
///   set count against this limit. A descriptor is accessible to a pipeline shader stage when the `stageFlags`
///   member of the [`DescriptorSetLayoutBinding`] structure has the bit for that shader stage set. These
///   are only supported for the fragment stage. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
/// - [`max_per_stage_resources`] is the maximum number of resources that **can** be accessible to a
///   single shader stage in a pipeline layout. Descriptors with a type of
///   `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`,
///   `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`,
///   `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`, `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER`,
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER`, `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`,
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, or `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` count
///   against this limit. Only descriptors in descriptor set layouts created without the
///   `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit.
///   For the fragment shader stage the framebuffer color attachments also count against this limit.
/// - [`max_descriptor_set_samplers`] is the maximum number of samplers that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_SAMPLER` or `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
/// - [`max_descriptor_set_uniform_buffers`] is the maximum number of uniform buffers that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
/// - [`max_descriptor_set_uniform_buffers_dynamic`] is the maximum number of dynamic uniform buffers that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
/// - [`max_descriptor_set_storage_buffers`] is the maximum number of storage buffers that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
/// - [`max_descriptor_set_storage_buffers_dynamic`] is the maximum number of dynamic storage buffers that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
/// - [`max_descriptor_set_sampled_images`] is the maximum number of sampled images that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`, `VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, or `VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler), [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage), and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
/// - [`max_descriptor_set_storage_images`] is the maximum number of storage images that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, or `VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage), and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
/// - [`max_descriptor_set_input_attachments`] is the maximum number of input attachments that **can** be included in a pipeline layout. Descriptors with a type of `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` count against this limit. Only descriptors in descriptor set layouts created without the `VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set count against this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
/// - [`max_vertex_input_attributes`] is the maximum number of vertex input attributes that **can** be specified for a graphics pipeline. These are described in the array of [`VertexInputAttributeDescription`] structures that are provided at graphics pipeline creation time via the `pVertexAttributeDescriptions` member of the [`PipelineVertexInputStateCreateInfo`] structure. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-attrib](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-attrib) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
/// - [`max_vertex_input_bindings`] is the maximum number of vertex buffers that **can** be specified for providing vertex attributes to a graphics pipeline. These are described in the array of [`VertexInputBindingDescription`] structures that are provided at graphics pipeline creation time via the `pVertexBindingDescriptions` member of the [`PipelineVertexInputStateCreateInfo`] structure. The `binding` member of [`VertexInputBindingDescription`]**must** be less than this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
/// - [`max_vertex_input_attribute_offset`] is the maximum vertex input attribute offset that **can** be added to the vertex input binding stride. The `offset` member of the [`VertexInputAttributeDescription`] structure **must** be less than or equal to this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
/// - [`max_vertex_input_binding_stride`] is the maximum vertex input binding stride that **can** be
///   specified in a vertex input binding. The `stride` member of the [`VertexInputBindingDescription`]
///   structure **must** be less than or equal to this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
/// - [`max_vertex_output_components`] is the maximum number of components of output variables which
///   **can** be output by a vertex shader. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-vertex](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-vertex).
/// - [`max_tessellation_generation_level`] is the maximum tessellation generation level supported by the fixed-function tessellation primitive generator. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation).
/// - [`max_tessellation_patch_size`] is the maximum patch size, in vertices, of patches that **can** be processed by the tessellation control shader and tessellation primitive generator. The `patchControlPoints` member of the [`PipelineTessellationStateCreateInfo`] structure specified at pipeline creation time and the value provided in the `OutputVertices` execution mode of shader modules **must** be less than or equal to this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation).
/// - [`max_tessellation_control_per_vertex_input_components`] is the maximum number of components
///   of input variables which **can** be provided as per-vertex inputs to the tessellation control
///   shader stage.
/// - [`max_tessellation_control_per_vertex_output_components`] is the maximum number of components
///   of per-vertex output variables which **can** be output from the tessellation control shader
///   stage.
/// - [`max_tessellation_control_per_patch_output_components`] is the maximum number of components
///   of per-patch output variables which **can** be output from the tessellation control shader
///   stage.
/// - [`max_tessellation_control_total_output_components`] is the maximum total number of components
///   of per-vertex and per-patch output variables which **can** be output from the tessellation
///   control shader stage.
/// - [`max_tessellation_evaluation_input_components`] is the maximum number of components of input
///   variables which **can** be provided as per-vertex inputs to the tessellation evaluation shader
///   stage.
/// - [`max_tessellation_evaluation_output_components`] is the maximum number of components of
///   per-vertex output variables which **can** be output from the tessellation evaluation shader
///   stage.
/// - [`max_geometry_shader_invocations`] is the maximum invocation count supported for instanced geometry shaders. The value provided in the `Invocations` execution mode of shader modules **must** be less than or equal to this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#geometry](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#geometry).
/// - [`max_geometry_input_components`] is the maximum number of components of input variables which
///   **can** be provided as inputs to the geometry shader stage.
/// - [`max_geometry_output_components`] is the maximum number of components of output variables
///   which **can** be output from the geometry shader stage.
/// - [`max_geometry_output_vertices`] is the maximum number of vertices which **can** be emitted by
///   any geometry shader.
/// - [`max_geometry_total_output_components`] is the maximum total number of components of output
///   variables, across all emitted vertices, which **can** be output from the geometry shader
///   stage.
/// - [`max_fragment_input_components`] is the maximum number of components of input variables which
///   **can** be provided as inputs to the fragment shader stage.
/// - [`max_fragment_output_attachments`] is the maximum number of output attachments which **can**
///   be written to by the fragment shader stage.
/// - [`max_fragment_dual_src_attachments`] is the maximum number of output attachments which **can** be written to by the fragment shader stage when blending is enabled and one of the dual source blend modes is in use. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb) and [dualSrcBlend](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dualSrcBlend).
/// - [`max_fragment_combined_output_resources`] is the total number of storage buffers, storage images, and output `Location` decorated color attachments (described in [Fragment Output Interface](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces-fragmentoutput)) which **can** be used in the fragment shader stage.
/// - [`max_compute_shared_memory_size`] is the maximum total storage size, in bytes, available for variables declared with the `Workgroup` storage class in shader modules (or with the `shared` storage qualifier in GLSL) in the compute shader stage. When variables declared with the `Workgroup` storage class are explicitly laid out (hence they are also decorated with `Block`), the amount of storage consumed is the size of the largest Block variable, not counting any padding at the end. The amount of storage consumed by the non-Block variables declared with the `Workgroup` storage class is implementation-dependent. However, the amount of storage consumed may not exceed the largest block size that would be obtained if all active non-Block variables declared with `Workgroup` storage class were assigned offsets in an arbitrary order by successively taking the smallest valid offset according to the [Standard Storage Buffer Layout](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces-resources-standard-layout) rules. (This is equivalent to using the GLSL std430 layout rules.)
/// - [`max_compute_work_group_count`][3] is the maximum number of local workgroups that **can** be dispatched by a single dispatching command. These three values represent the maximum number of local workgroups for the X, Y, and Z dimensions, respectively. The workgroup count parameters to the dispatching commands **must** be less than or equal to the corresponding limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#dispatch](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#dispatch).
/// - [`max_compute_work_group_invocations`] is the maximum total number of     compute shader
///   invocations in a single local workgroup.     The product of the X, Y, and Z sizes, as
///   specified by the `LocalSize` or `LocalSizeId`     execution mode in shader modules or by the
///   object decorated by the     `WorkgroupSize` decoration, **must** be less than or equal to this
///   limit.
/// - [`max_compute_work_group_size`][3] is     the maximum size of a local compute workgroup, per
///   dimension.     These three values represent the maximum local workgroup size in the X,     Y,
///   and Z dimensions, respectively.     The `x`, `y`, and `z` sizes, as specified by the
///   `LocalSize` or `LocalSizeId`     execution mode or by the object decorated by the
///   `WorkgroupSize`     decoration in shader modules, **must** be less than or equal to the
///   corresponding limit.
/// - [`sub_pixel_precision_bits`] is the number of bits of subpixel precision in framebuffer coordinates x<sub>f</sub> and y<sub>f</sub>. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast).
/// - [`sub_texel_precision_bits`] is the number of bits of precision in the division along an axis
///   of an image used for minification and magnification filters.
///   2<sup>[`sub_texel_precision_bits`]</sup> is the actual number of divisions along each axis of
///   the image represented. Sub-texel values calculated during image sampling will snap to these
///   locations when generating the filtered results.
/// - [`mipmap_precision_bits`] is the number of bits of division that the LOD calculation for
///   mipmap fetching get snapped to when determining the contribution from each mip level to the
///   mip filtered results. 2<sup>[`mipmap_precision_bits`]</sup> is the actual number of divisions.
/// - [`max_draw_indexed_index_value`] is the maximum index value that **can** be used for indexed draw calls when using 32-bit indices. This excludes the primitive restart index value of 0xFFFFFFFF. See [fullDrawIndexUint32](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fullDrawIndexUint32).
/// - [`max_draw_indirect_count`] is the maximum draw count that is supported for indirect drawing calls. See [multiDrawIndirect](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-multiDrawIndirect).
/// - [`max_sampler_lod_bias`] is the maximum absolute sampler LOD bias. The sum of the `mipLodBias`
///   member of the [`SamplerCreateInfo`] structure and the `Bias` operand of image sampling operations
///   in shader modules (or 0 if no `Bias` operand is provided to an image sampling operation) are clamped
///   to the range [-[`max_sampler_lod_bias`],+[`max_sampler_lod_bias`]]. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-mipLodBias](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-mipLodBias).
/// - [`max_sampler_anisotropy`] is the maximum degree of sampler anisotropy. The maximum degree of anisotropic filtering used for an image sampling operation is the minimum of the `maxAnisotropy` member of the [`SamplerCreateInfo`] structure and this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-maxAnisotropy](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-maxAnisotropy).
/// - [`max_viewports`] is the maximum number of active viewports. The `viewportCount` member of the
///   [`PipelineViewportStateCreateInfo`] structure that is provided at pipeline creation **must**
///   be less than or equal to this limit.
/// - [`max_viewport_dimensions`][2] are the maximum viewport dimensions in the X (width) and Y (height) dimensions, respectively. The maximum viewport dimensions **must** be greater than or equal to the largest image which **can** be created and used as a framebuffer attachment. See [Controlling the Viewport](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-viewport).
/// - [`viewport_bounds_range`][2] is the [minimum, maximum] range that the corners of a viewport **must** be contained in. This range **must** be at least [-2 × `size`, 2 × `size` - 1], where `size` = max([`max_viewport_dimensions`][0], [`max_viewport_dimensions`][1]). See [Controlling the Viewport](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-viewport).
/// - [`viewport_sub_pixel_bits`] is the number of bits of subpixel precision for viewport bounds.
///   The subpixel precision that floating-point viewport bounds are interpreted at is given by this
///   limit.
/// - [`min_memory_map_alignment`] is the minimum **required** alignment, in bytes, of host visible memory allocations within the host address space. When mapping a memory allocation with [`MapMemory`], subtracting `offset` bytes from the returned pointer will always produce an integer multiple of this limit. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device-hostaccess](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device-hostaccess). The value **must** be a power of two.
/// - [`min_texel_buffer_offset_alignment`] is the minimum **required** alignment, in bytes, for the
///   `offset` member of the [`BufferViewCreateInfo`] structure for texel buffers. The value **must**
///   be a power of two. If [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment)
///   is enabled, this limit is equivalent to the maximum of the [`uniformTexelBufferOffsetAlignmentBytes`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-uniformTexelBufferOffsetAlignmentBytes)
///   and [`storageTexelBufferOffsetAlignmentBytes`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-storageTexelBufferOffsetAlignmentBytes)
///   members of [`PhysicalDeviceTexelBufferAlignmentProperties`], but smaller alignment is **optionally**
///   allowed by [`storageTexelBufferOffsetSingleTexelAlignment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-storageTexelBufferOffsetSingleTexelAlignment)
///   and [`uniformTexelBufferOffsetSingleTexelAlignment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-uniformTexelBufferOffsetSingleTexelAlignment).
///   If [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment)
///   is not enabled, [`BufferViewCreateInfo::offset`]**must** be a multiple of this value.
/// - [`min_uniform_buffer_offset_alignment`] is the minimum **required** alignment, in bytes, for
///   the `offset` member of the [`DescriptorBufferInfo`] structure for uniform buffers. When a
///   descriptor of type `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` is updated, the `offset`**must** be an integer
///   multiple of this limit. Similarly, dynamic offsets for uniform buffers **must** be multiples
///   of this limit. The value **must** be a power of two.
/// - [`min_storage_buffer_offset_alignment`] is the minimum **required** alignment, in bytes, for
///   the `offset` member of the [`DescriptorBufferInfo`] structure for storage buffers. When a
///   descriptor of type `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
///   `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` is updated, the `offset`**must** be an integer
///   multiple of this limit. Similarly, dynamic offsets for storage buffers **must** be multiples
///   of this limit. The value **must** be a power of two.
/// - [`min_texel_offset`] is the minimum offset value for the `ConstOffset` image operand of any of
///   the `OpImageSample*` or `OpImageFetch*` image instructions.
/// - [`max_texel_offset`] is the maximum offset value for the `ConstOffset` image operand of any of
///   the `OpImageSample*` or `OpImageFetch*` image instructions.
/// - [`min_texel_gather_offset`] is the minimum offset value for the `Offset`, `ConstOffset`, or
///   `ConstOffsets` image operands of any of the `OpImage*Gather` image instructions.
/// - [`max_texel_gather_offset`] is the maximum offset value for the `Offset`, `ConstOffset`, or
///   `ConstOffsets` image operands of any of the `OpImage*Gather` image instructions.
/// - [`min_interpolation_offset`] is the base minimum (inclusive) negative offset value for the
///   `Offset` operand of the `InterpolateAtOffset` extended instruction.
/// - [`max_interpolation_offset`] is the base maximum (inclusive) positive offset value for the
///   `Offset` operand of the `InterpolateAtOffset` extended instruction.
/// - [`sub_pixel_interpolation_offset_bits`] is the number of fractional bits that the `x` and `y`
///   offsets to the `InterpolateAtOffset` extended instruction **may** be rounded to as fixed-point
///   values.
/// - [`max_framebuffer_width`] is the maximum width for a framebuffer. The `width` member of the
///   [`FramebufferCreateInfo`] structure **must** be less than or equal to this limit.
/// - [`max_framebuffer_height`] is the maximum height for a framebuffer. The `height` member of the
///   [`FramebufferCreateInfo`] structure **must** be less than or equal to this limit.
/// - [`max_framebuffer_layers`] is the maximum layer count for a layered framebuffer. The `layers`
///   member of the [`FramebufferCreateInfo`] structure **must** be less than or equal to this
///   limit.
/// - [`framebuffer_color_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`] indicating the color sample counts that are supported for all framebuffer color attachments with floating- or fixed-point formats. For color attachments with integer formats, see [`framebufferIntegerColorSampleCounts`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-framebufferIntegerColorSampleCounts).
/// - [`framebuffer_depth_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`]
///   indicating the supported depth sample counts for all framebuffer depth/stencil attachments,
///   when the format includes a depth component.
/// - [`framebuffer_stencil_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`]
///   indicating the supported stencil sample counts for all framebuffer depth/stencil attachments,
///   when the format includes a stencil component.
/// - [`framebuffer_no_attachments_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`] indicating the supported sample counts for a [subpass which uses no attachments](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-noattachments).
/// - [`max_color_attachments`] is the maximum number of color attachments that **can** be used by a
///   subpass in a render pass. The `colorAttachmentCount` member of the [`SubpassDescription`] or
///   [`SubpassDescription2`] structure **must** be less than or equal to this limit.
/// - [`sampled_image_color_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`]
///   indicating the sample counts supported for all 2D images created with
///   `VK_IMAGE_TILING_OPTIMAL`, `usage` containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and a non-integer
///   color format.
/// - [`sampled_image_integer_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`]
///   indicating the sample counts supported for all 2D images created with
///   `VK_IMAGE_TILING_OPTIMAL`, `usage` containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and an integer
///   color format.
/// - [`sampled_image_depth_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`]
///   indicating the sample counts supported for all 2D images created with
///   `VK_IMAGE_TILING_OPTIMAL`, `usage` containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and a depth
///   format.
/// - [`sampled_image_stencil_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`]
///   indicating the sample counts supported for all 2D images created with
///   `VK_IMAGE_TILING_OPTIMAL`, `usage` containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and a stencil
///   format.
/// - [`storage_image_sample_counts`] is a bitmask<sup>1</sup> of [`SampleCountFlagBits`] indicating
///   the sample counts supported for all 2D images created with `VK_IMAGE_TILING_OPTIMAL`, and
///   `usage` containing `VK_IMAGE_USAGE_STORAGE_BIT`.
/// - [`max_sample_mask_words`] is the maximum number of array elements of a variable decorated with
///   the [`SampleMask`] built-in decoration.
/// - [`timestamp_compute_and_graphics`] specifies support for timestamps on all graphics and compute queues. If this limit is set to [`TRUE`], all queues that advertise the `VK_QUEUE_GRAPHICS_BIT` or `VK_QUEUE_COMPUTE_BIT` in the [`QueueFamilyProperties::queue_flags`] support [`QueueFamilyProperties::timestamp_valid_bits`] of at least 36. See [Timestamp Queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
/// - [`timestamp_period`] is the number of nanoseconds **required** for a timestamp query to be incremented by 1. See [Timestamp Queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
/// - [`max_clip_distances`] is the maximum number of clip distances that **can** be used in a
///   single shader stage. The size of any array declared with the `ClipDistance` built-in
///   decoration in a shader module **must** be less than or equal to this limit.
/// - [`max_cull_distances`] is the maximum number of cull distances that **can** be used in a
///   single shader stage. The size of any array declared with the `CullDistance` built-in
///   decoration in a shader module **must** be less than or equal to this limit.
/// - [`max_combined_clip_and_cull_distances`] is the maximum combined number of clip and cull
///   distances that **can** be used in a single shader stage. The sum of the sizes of any pair of
///   arrays declared with the `ClipDistance` and `CullDistance` built-in decoration used by a
///   single shader stage in a shader module **must** be less than or equal to this limit.
/// - [`discrete_queue_priorities`] is the number of discrete priorities that **can** be assigned to
///   a queue based on the value of each member of [`DeviceQueueCreateInfo::p_queue_priorities`]. This
///   **must** be at least 2, and levels **must** be spread evenly over the range, with at least one
///   level at 1.0, and another at 0.0. See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-priority](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-priority).
/// - [`point_size_range`][2] is the range [`minimum`,`maximum`] of supported sizes for points.
///   Values written to variables decorated with the `PointSize` built-in decoration are clamped to
///   this range.
/// - [`line_width_range`][2] is the range [`minimum`,`maximum`] of supported widths for lines.
///   Values specified by the `lineWidth` member of the [`PipelineRasterizationStateCreateInfo`] or
///   the `lineWidth` parameter to [`CmdSetLineWidth`] are clamped to this range.
/// - [`point_size_granularity`] is the granularity of supported point sizes. Not all point sizes in
///   the range defined by [`point_size_range`] are supported. This limit specifies the granularity
///   (or increment) between successive supported point sizes.
/// - [`line_width_granularity`] is the granularity of supported line widths. Not all line widths in
///   the range defined by [`line_width_range`] are supported. This limit specifies the granularity
///   (or increment) between successive supported line widths.
/// - [`strict_lines`] specifies whether lines are rasterized according to the preferred method of rasterization. If set to [`FALSE`], lines **may** be rasterized under a relaxed set of rules. If set to [`TRUE`], lines are rasterized as per the strict definition. See [Basic Line Segment Rasterization](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-lines-basic).
/// - [`standard_sample_locations`] specifies whether rasterization uses the standard sample locations as documented in [Multisampling](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-multisampling). If set to [`TRUE`], the implementation uses the documented sample locations. If set to [`FALSE`], the implementation **may** use different sample locations.
/// - [`optimal_buffer_copy_offset_alignment`] is the optimal buffer offset alignment in bytes for
///   [`CmdCopyBufferToImage2`], [`CmdCopyBufferToImage`], [`CmdCopyImageToBuffer2`], and
///   [`CmdCopyImageToBuffer`]. The per texel alignment requirements are enforced, but applications
///   **should** use the optimal alignment for optimal performance and power use. The value **must**
///   be a power of two.
/// - [`optimal_buffer_copy_row_pitch_alignment`] is the optimal buffer row pitch alignment in bytes
///   for [`CmdCopyBufferToImage2`], [`CmdCopyBufferToImage`], [`CmdCopyImageToBuffer2`], and
///   [`CmdCopyImageToBuffer`]. Row pitch is the number of bytes between texels with the same X
///   coordinate in adjacent rows (Y coordinates differ by one). The per texel alignment
///   requirements are enforced, but applications **should** use the optimal alignment for optimal
///   performance and power use. The value **must** be a power of two.
/// - [`non_coherent_atom_size`] is the size and alignment in bytes that bounds concurrent access to
///   [host-mapped device memory](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device-hostaccess).
///   The value **must** be a power of two.  * For all bitmasks of [`SampleCountFlagBits`], the sample
///   count limits defined above represent the minimum supported sample counts for each image type. Individual
///   images **may** support additional sample counts, which are queried using [`GetPhysicalDeviceImageFormatProperties`]
///   as described in [Supported Sample Counts](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-supported-sample-counts).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
/// - [`DeviceSize`]
/// - [`PhysicalDeviceProperties`]
/// - [`SampleCountFlags`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, PartialEq, PartialOrd)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PhysicalDeviceLimits {
    ///[`max_image_dimension_1_d`] is the largest
    ///dimension (`width`) that is guaranteed to be supported for all
    ///images created with an `imageType` of `VK_IMAGE_TYPE_1D`.
    ///Some combinations of image parameters (format, usage, etc.) **may** allow
    ///support for larger dimensions, which **can** be queried using
    ///[`GetPhysicalDeviceImageFormatProperties`].
    max_image_dimension_1_d: u32,
    ///[`max_image_dimension_2_d`] is the largest
    ///dimension (`width` or `height`) that is guaranteed to be
    ///supported for all images created with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and without
    ///`VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT` set in `flags`.
    ///Some combinations of image parameters (format, usage, etc.) **may** allow
    ///support for larger dimensions, which **can** be queried using
    ///[`GetPhysicalDeviceImageFormatProperties`].
    max_image_dimension_2_d: u32,
    ///[`max_image_dimension_3_d`] is the largest
    ///dimension (`width`, `height`, or `depth`) that is guaranteed
    ///to be supported for all images created with an `imageType` of
    ///`VK_IMAGE_TYPE_3D`.
    ///Some combinations of image parameters (format, usage, etc.) **may** allow
    ///support for larger dimensions, which **can** be queried using
    ///[`GetPhysicalDeviceImageFormatProperties`].
    max_image_dimension_3_d: u32,
    ///[`max_image_dimension_cube`] is the
    ///largest dimension (`width` or `height`) that is guaranteed to be
    ///supported for all images created with an `imageType` of
    ///`VK_IMAGE_TYPE_2D` and with
    ///`VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT` set in `flags`.
    ///Some combinations of image parameters (format, usage, etc.) **may** allow
    ///support for larger dimensions, which **can** be queried using
    ///[`GetPhysicalDeviceImageFormatProperties`].
    max_image_dimension_cube: u32,
    ///[`max_image_array_layers`] is the maximum
    ///number of layers (`arrayLayers`) for an image.
    max_image_array_layers: u32,
    ///[`max_texel_buffer_elements`] is the
    ///maximum number of addressable texels for a buffer view created on a
    ///buffer which was created with the
    ///`VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT` or
    ///`VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT` set in the `usage`
    ///member of the [`BufferCreateInfo`] structure.
    max_texel_buffer_elements: u32,
    ///[`max_uniform_buffer_range`] is the
    ///maximum value that **can** be specified in the `range` member of a
    ///[`DescriptorBufferInfo`] structure passed to
    ///[`UpdateDescriptorSets`] for descriptors of type
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`.
    max_uniform_buffer_range: u32,
    ///[`max_storage_buffer_range`] is the
    ///maximum value that **can** be specified in the `range` member of a
    ///[`DescriptorBufferInfo`] structure passed to
    ///[`UpdateDescriptorSets`] for descriptors of type
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`.
    max_storage_buffer_range: u32,
    ///[`max_push_constants_size`] is the
    ///maximum size, in bytes, of the pool of push constant memory.
    ///For each of the push constant ranges indicated by the
    ///`pPushConstantRanges` member of the [`PipelineLayoutCreateInfo`]
    ///structure, (`offset` +  `size`)**must** be less than or
    ///equal to this limit.
    max_push_constants_size: u32,
    ///[`max_memory_allocation_count`] is
    ///the maximum number of device memory allocations, as created by
    ///[`AllocateMemory`], which **can** simultaneously exist.
    max_memory_allocation_count: u32,
    ///[`max_sampler_allocation_count`] is
    ///the maximum number of sampler objects, as created by
    ///[`CreateSampler`], which **can** simultaneously exist on a device.
    max_sampler_allocation_count: u32,
    ///[`buffer_image_granularity`] is the
    ///granularity, in bytes, at which buffer or linear image resources, and
    ///optimal image resources **can** be bound to adjacent offsets in the same
    ///[`DeviceMemory`] object without aliasing.
    ///See [Buffer-Image Granularity](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#resources-bufferimagegranularity) for
    ///more details.
    buffer_image_granularity: DeviceSize,
    ///[`sparse_address_space_size`] is the
    ///total amount of address space available, in bytes, for sparse memory
    ///resources.
    ///This is an upper bound on the sum of the sizes of all sparse resources,
    ///regardless of whether any memory is bound to them.
    sparse_address_space_size: DeviceSize,
    ///[`max_bound_descriptor_sets`] is the
    ///maximum number of descriptor sets that **can** be simultaneously used by a
    ///pipeline.
    ///All [`DescriptorSet`] decorations in shader modules **must** have a value
    ///less than [`max_bound_descriptor_sets`].
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sets](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sets).
    max_bound_descriptor_sets: u32,
    ///[`max_per_stage_descriptor_samplers`] is the maximum number of samplers
    ///that **can** be accessible to a single shader stage in a pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_SAMPLER` or
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///A descriptor is accessible to a shader stage when the `stageFlags`
    ///member of the [`DescriptorSetLayoutBinding`] structure has the bit
    ///for that shader stage set.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler) and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
    max_per_stage_descriptor_samplers: u32,
    ///[`max_per_stage_descriptor_uniform_buffers`] is the maximum number of
    ///uniform buffers that **can** be accessible to a single shader stage in a
    ///pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///A descriptor is accessible to a shader stage when the `stageFlags`
    ///member of the [`DescriptorSetLayoutBinding`] structure has the bit
    ///for that shader stage set.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer) and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
    max_per_stage_descriptor_uniform_buffers: u32,
    ///[`max_per_stage_descriptor_storage_buffers`] is the maximum number of
    ///storage buffers that **can** be accessible to a single shader stage in a
    ///pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///A descriptor is accessible to a pipeline shader stage when the
    ///`stageFlags` member of the [`DescriptorSetLayoutBinding`]
    ///structure has the bit for that shader stage set.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer) and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
    max_per_stage_descriptor_storage_buffers: u32,
    ///[`max_per_stage_descriptor_sampled_images`] is the maximum number of
    ///sampled images that **can** be accessible to a single shader stage in a
    ///pipeline layout.
    ///Descriptors with a type of
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`,
    ///`VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///A descriptor is accessible to a pipeline shader stage when the
    ///`stageFlags` member of the [`DescriptorSetLayoutBinding`]
    ///structure has the bit for that shader stage set.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler),
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage), and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
    max_per_stage_descriptor_sampled_images: u32,
    ///[`max_per_stage_descriptor_storage_images`] is the maximum number of
    ///storage images that **can** be accessible to a single shader stage in a
    ///pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///A descriptor is accessible to a pipeline shader stage when the
    ///`stageFlags` member of the [`DescriptorSetLayoutBinding`]
    ///structure has the bit for that shader stage set.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage), and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
    max_per_stage_descriptor_storage_images: u32,
    ///[`max_per_stage_descriptor_input_attachments`] is the maximum number of
    ///input attachments that **can** be accessible to a single shader stage in a
    ///pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`
    ///count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///A descriptor is accessible to a pipeline shader stage when the
    ///`stageFlags` member of the [`DescriptorSetLayoutBinding`]
    ///structure has the bit for that shader stage set.
    ///These are only supported for the fragment stage.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
    max_per_stage_descriptor_input_attachments: u32,
    ///[`max_per_stage_resources`] is the
    ///maximum number of resources that **can** be accessible to a single shader
    ///stage in a pipeline layout.
    ///Descriptors with a type of
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`,
    ///`VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`,
    ///`VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`,
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`,
    ///`VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`,
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER`,
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER`,
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`,
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`, or
    ///`VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT` count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///For the fragment shader stage the framebuffer color attachments also
    ///count against this limit.
    max_per_stage_resources: u32,
    ///[`max_descriptor_set_samplers`] is
    ///the maximum number of samplers that **can** be included in a pipeline
    ///layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_SAMPLER` or
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler) and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
    max_descriptor_set_samplers: u32,
    ///[`max_descriptor_set_uniform_buffers`] is the maximum number of uniform
    ///buffers that **can** be included in a pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer) and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
    max_descriptor_set_uniform_buffers: u32,
    ///[`max_descriptor_set_uniform_buffers_dynamic`] is the maximum number of
    ///dynamic uniform buffers that **can** be included in a pipeline layout.
    ///Descriptors with a type of
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
    max_descriptor_set_uniform_buffers_dynamic: u32,
    ///[`max_descriptor_set_storage_buffers`] is the maximum number of storage
    ///buffers that **can** be included in a pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer) and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
    max_descriptor_set_storage_buffers: u32,
    ///[`max_descriptor_set_storage_buffers_dynamic`] is the maximum number of
    ///dynamic storage buffers that **can** be included in a pipeline layout.
    ///Descriptors with a type of
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` count against this
    ///limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
    max_descriptor_set_storage_buffers_dynamic: u32,
    ///[`max_descriptor_set_sampled_images`] is the maximum number of sampled
    ///images that **can** be included in a pipeline layout.
    ///Descriptors with a type of
    ///`VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`,
    ///`VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE`, or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER` count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler),
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage), and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
    max_descriptor_set_sampled_images: u32,
    ///[`max_descriptor_set_storage_images`] is the maximum number of storage
    ///images that **can** be included in a pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_STORAGE_IMAGE`, or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER` count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage), and
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
    max_descriptor_set_storage_images: u32,
    ///[`max_descriptor_set_input_attachments`] is the maximum number of input
    ///attachments that **can** be included in a pipeline layout.
    ///Descriptors with a type of `VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT`
    ///count against this limit.
    ///Only descriptors in descriptor set layouts created without the
    ///`VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT` bit set
    ///count against this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
    max_descriptor_set_input_attachments: u32,
    ///[`max_vertex_input_attributes`] is
    ///the maximum number of vertex input attributes that **can** be specified for
    ///a graphics pipeline.
    ///These are described in the array of
    ///[`VertexInputAttributeDescription`] structures that are provided at
    ///graphics pipeline creation time via the
    ///`pVertexAttributeDescriptions` member of the
    ///[`PipelineVertexInputStateCreateInfo`] structure.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-attrib](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-attrib) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
    max_vertex_input_attributes: u32,
    ///[`max_vertex_input_bindings`] is the
    ///maximum number of vertex buffers that **can** be specified for providing
    ///vertex attributes to a graphics pipeline.
    ///These are described in the array of
    ///[`VertexInputBindingDescription`] structures that are provided at
    ///graphics pipeline creation time via the `pVertexBindingDescriptions`
    ///member of the [`PipelineVertexInputStateCreateInfo`] structure.
    ///The `binding` member of [`VertexInputBindingDescription`]**must**
    ///be less than this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
    max_vertex_input_bindings: u32,
    ///[`max_vertex_input_attribute_offset`] is the maximum vertex input
    ///attribute offset that **can** be added to the vertex input binding stride.
    ///The `offset` member of the [`VertexInputAttributeDescription`]
    ///structure **must** be less than or equal to this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
    max_vertex_input_attribute_offset: u32,
    ///[`max_vertex_input_binding_stride`]
    ///is the maximum vertex input binding stride that **can** be specified in a
    ///vertex input binding.
    ///The `stride` member of the [`VertexInputBindingDescription`]
    ///structure **must** be less than or equal to this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input).
    max_vertex_input_binding_stride: u32,
    ///[`max_vertex_output_components`] is
    ///the maximum number of components of output variables which **can** be
    ///output by a vertex shader.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-vertex](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#shaders-vertex).
    max_vertex_output_components: u32,
    ///[`max_tessellation_generation_level`] is the maximum tessellation
    ///generation level supported by the fixed-function tessellation primitive
    ///generator.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation).
    max_tessellation_generation_level: u32,
    ///[`max_tessellation_patch_size`] is
    ///the maximum patch size, in vertices, of patches that **can** be processed
    ///by the tessellation control shader and tessellation primitive generator.
    ///The `patchControlPoints` member of the
    ///[`PipelineTessellationStateCreateInfo`] structure specified at
    ///pipeline creation time and the value provided in the `OutputVertices`
    ///execution mode of shader modules **must** be less than or equal to this
    ///limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#tessellation).
    max_tessellation_patch_size: u32,
    ///[`max_tessellation_control_per_vertex_input_components`] is the maximum
    ///number of components of input variables which **can** be provided as
    ///per-vertex inputs to the tessellation control shader stage.
    max_tessellation_control_per_vertex_input_components: u32,
    ///[`max_tessellation_control_per_vertex_output_components`] is the maximum
    ///number of components of per-vertex output variables which **can** be output
    ///from the tessellation control shader stage.
    max_tessellation_control_per_vertex_output_components: u32,
    ///[`max_tessellation_control_per_patch_output_components`] is the maximum
    ///number of components of per-patch output variables which **can** be output
    ///from the tessellation control shader stage.
    max_tessellation_control_per_patch_output_components: u32,
    ///[`max_tessellation_control_total_output_components`] is the maximum total
    ///number of components of per-vertex and per-patch output variables which
    ///**can** be output from the tessellation control shader stage.
    max_tessellation_control_total_output_components: u32,
    ///[`max_tessellation_evaluation_input_components`] is the maximum number of
    ///components of input variables which **can** be provided as per-vertex
    ///inputs to the tessellation evaluation shader stage.
    max_tessellation_evaluation_input_components: u32,
    ///[`max_tessellation_evaluation_output_components`] is the maximum number of
    ///components of per-vertex output variables which **can** be output from the
    ///tessellation evaluation shader stage.
    max_tessellation_evaluation_output_components: u32,
    ///[`max_geometry_shader_invocations`] is the maximum invocation count
    ///supported for instanced geometry shaders.
    ///The value provided in the `Invocations` execution mode of shader
    ///modules **must** be less than or equal to this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#geometry](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#geometry).
    max_geometry_shader_invocations: u32,
    ///[`max_geometry_input_components`]
    ///is the maximum number of components of input variables which **can** be
    ///provided as inputs to the geometry shader stage.
    max_geometry_input_components: u32,
    ///[`max_geometry_output_components`]
    ///is the maximum number of components of output variables which **can** be
    ///output from the geometry shader stage.
    max_geometry_output_components: u32,
    ///[`max_geometry_output_vertices`] is
    ///the maximum number of vertices which **can** be emitted by any geometry
    ///shader.
    max_geometry_output_vertices: u32,
    ///[`max_geometry_total_output_components`] is the maximum total number of
    ///components of output variables, across all emitted vertices, which **can**
    ///be output from the geometry shader stage.
    max_geometry_total_output_components: u32,
    ///[`max_fragment_input_components`]
    ///is the maximum number of components of input variables which **can** be
    ///provided as inputs to the fragment shader stage.
    max_fragment_input_components: u32,
    ///[`max_fragment_output_attachments`] is the maximum number of output
    ///attachments which **can** be written to by the fragment shader stage.
    max_fragment_output_attachments: u32,
    ///[`max_fragment_dual_src_attachments`] is the maximum number of output
    ///attachments which **can** be written to by the fragment shader stage when
    ///blending is enabled and one of the dual source blend modes is in use.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-dsb) and [dualSrcBlend](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-dualSrcBlend).
    max_fragment_dual_src_attachments: u32,
    ///[`max_fragment_combined_output_resources`] is the total number of storage
    ///buffers, storage images, and output `Location` decorated color
    ///attachments (described in [Fragment Output
    ///Interface](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces-fragmentoutput)) which **can** be used in the fragment shader stage.
    max_fragment_combined_output_resources: u32,
    ///[`max_compute_shared_memory_size`]
    ///is the maximum total storage size, in bytes, available for variables
    ///declared with the `Workgroup` storage class in shader modules (or
    ///with the `shared` storage qualifier in GLSL) in the compute shader
    ///stage.
    ///When variables declared with the `Workgroup` storage class are
    ///explicitly laid out (hence they are also decorated with `Block`), the
    ///amount of storage consumed is the size of the largest Block variable,
    ///not counting any padding at the end.
    ///The amount of storage consumed by the
    ///non-Block
    ///variables declared with the `Workgroup` storage class is
    ///implementation-dependent.
    ///However, the amount of storage consumed may not exceed the largest block
    ///size that would be obtained if all active
    ///non-Block
    ///variables declared with `Workgroup` storage class were assigned
    ///offsets in an arbitrary order by successively taking the smallest valid
    ///offset according to the [Standard
    ///Storage Buffer Layout](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#interfaces-resources-standard-layout) rules.
    ///(This is equivalent to using the GLSL std430 layout rules.)
    max_compute_shared_memory_size: u32,
    ///[`max_compute_work_group_count`][3] is
    ///the maximum number of local workgroups that **can** be dispatched by a
    ///single dispatching command.
    ///These three values represent the maximum number of local workgroups for
    ///the X, Y, and Z dimensions, respectively.
    ///The workgroup count parameters to the dispatching commands **must** be less
    ///than or equal to the corresponding limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#dispatch](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#dispatch).
    max_compute_work_group_count: [u32; 3],
    ///[`max_compute_work_group_invocations`] is the maximum total number of
    ///    compute shader invocations in a single local workgroup.
    ///    The product of the X, Y, and Z sizes, as specified by the `LocalSize`
    ///or `LocalSizeId`
    ///    execution mode in shader modules or by the object decorated by the
    ///    `WorkgroupSize` decoration, **must** be less than or equal to this
    ///    limit.
    max_compute_work_group_invocations: u32,
    ///[`max_compute_work_group_size`][3] is
    ///    the maximum size of a local compute workgroup, per dimension.
    ///    These three values represent the maximum local workgroup size in the X,
    ///    Y, and Z dimensions, respectively.
    ///    The `x`, `y`, and `z` sizes, as specified by the
    ///    `LocalSize`
    ///or `LocalSizeId`
    ///    execution mode or by the object decorated by the `WorkgroupSize`
    ///    decoration in shader modules, **must** be less than or equal to the
    ///    corresponding limit.
    max_compute_work_group_size: [u32; 3],
    ///[`sub_pixel_precision_bits`] is the
    ///number of bits of subpixel precision in framebuffer coordinates
    ///x<sub>f</sub> and y<sub>f</sub>.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast).
    sub_pixel_precision_bits: u32,
    ///[`sub_texel_precision_bits`] is the
    ///number of bits of precision in the division along an axis of an image
    ///used for minification and magnification filters.
    ///2<sup>[`sub_texel_precision_bits`]</sup> is the actual number of divisions
    ///along each axis of the image represented.
    ///Sub-texel values calculated during image sampling will snap to these
    ///locations when generating the filtered results.
    sub_texel_precision_bits: u32,
    ///[`mipmap_precision_bits`] is the number
    ///of bits of division that the LOD calculation for mipmap fetching get
    ///snapped to when determining the contribution from each mip level to the
    ///mip filtered results.
    ///2<sup>[`mipmap_precision_bits`]</sup> is the actual number of divisions.
    mipmap_precision_bits: u32,
    ///[`max_draw_indexed_index_value`] is
    ///the maximum index value that **can** be used for indexed draw calls when
    ///using 32-bit indices.
    ///This excludes the primitive restart index value of 0xFFFFFFFF.
    ///See [fullDrawIndexUint32](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fullDrawIndexUint32).
    max_draw_indexed_index_value: u32,
    ///[`max_draw_indirect_count`] is the
    ///maximum draw count that is supported for indirect drawing calls.
    ///See [multiDrawIndirect](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-multiDrawIndirect).
    max_draw_indirect_count: u32,
    ///[`max_sampler_lod_bias`] is the maximum
    ///absolute sampler LOD bias.
    ///The sum of the `mipLodBias` member of the [`SamplerCreateInfo`]
    ///structure and the `Bias` operand of image sampling operations in
    ///shader modules (or 0 if no `Bias` operand is provided to an image
    ///sampling operation) are clamped to the range
    ///[-[`max_sampler_lod_bias`],+[`max_sampler_lod_bias`]].
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-mipLodBias](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-mipLodBias).
    max_sampler_lod_bias: f32,
    ///[`max_sampler_anisotropy`] is the
    ///maximum degree of sampler anisotropy.
    ///The maximum degree of anisotropic filtering used for an image sampling
    ///operation is the minimum of the `maxAnisotropy` member of the
    ///[`SamplerCreateInfo`] structure and this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-maxAnisotropy](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#samplers-maxAnisotropy).
    max_sampler_anisotropy: f32,
    ///[`max_viewports`] is the maximum number of
    ///active viewports.
    ///The `viewportCount` member of the
    ///[`PipelineViewportStateCreateInfo`] structure that is provided at
    ///pipeline creation **must** be less than or equal to this limit.
    max_viewports: u32,
    ///[`max_viewport_dimensions`][2] are the
    ///maximum viewport dimensions in the X (width) and Y (height) dimensions,
    ///respectively.
    ///The maximum viewport dimensions **must** be greater than or equal to the
    ///largest image which **can** be created and used as a framebuffer
    ///attachment.
    ///See [Controlling the Viewport](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-viewport).
    max_viewport_dimensions: [u32; 2],
    ///[`viewport_bounds_range`][2] is the
    ///[minimum, maximum] range that the corners of a viewport **must** be
    ///contained in.
    ///This range **must** be at least [-2 × `size`, 2 ×
    ///`size` - 1], where `size` =
    ///max([`max_viewport_dimensions`][0], [`max_viewport_dimensions`][1]).
    ///See [Controlling the Viewport](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#vertexpostproc-viewport).
    viewport_bounds_range: [f32; 2],
    ///[`viewport_sub_pixel_bits`] is the number
    ///of bits of subpixel precision for viewport bounds.
    ///The subpixel precision that floating-point viewport bounds are
    ///interpreted at is given by this limit.
    viewport_sub_pixel_bits: u32,
    ///[`min_memory_map_alignment`] is the
    ///minimum **required** alignment, in bytes, of host visible memory
    ///allocations within the host address space.
    ///When mapping a memory allocation with [`MapMemory`], subtracting
    ///`offset` bytes from the returned pointer will always produce an
    ///integer multiple of this limit.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device-hostaccess](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device-hostaccess).
    ///The value **must** be a power of two.
    min_memory_map_alignment: usize,
    ///[`min_texel_buffer_offset_alignment`] is the minimum **required** alignment,
    ///in bytes, for the `offset` member of the
    ///[`BufferViewCreateInfo`] structure for texel buffers.
    ///The value **must** be a power of two.
    ///If [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment) is enabled,
    ///this limit is equivalent to the maximum of the
    ///[`uniformTexelBufferOffsetAlignmentBytes`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-uniformTexelBufferOffsetAlignmentBytes) and
    ///[`storageTexelBufferOffsetAlignmentBytes`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-storageTexelBufferOffsetAlignmentBytes) members of
    ///[`PhysicalDeviceTexelBufferAlignmentProperties`], but smaller
    ///alignment is **optionally** allowed by
    ///[`storageTexelBufferOffsetSingleTexelAlignment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-storageTexelBufferOffsetSingleTexelAlignment) and
    ///[`uniformTexelBufferOffsetSingleTexelAlignment`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-uniformTexelBufferOffsetSingleTexelAlignment).
    ///If [texelBufferAlignment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-texelBufferAlignment) is not
    ///enabled,
    ///[`BufferViewCreateInfo`]::`offset`**must** be a multiple of this
    ///value.
    min_texel_buffer_offset_alignment: DeviceSize,
    ///[`min_uniform_buffer_offset_alignment`] is the minimum **required**
    ///alignment, in bytes, for the `offset` member of the
    ///[`DescriptorBufferInfo`] structure for uniform buffers.
    ///When a descriptor of type `VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC` is updated, the
    ///`offset`**must** be an integer multiple of this limit.
    ///Similarly, dynamic offsets for uniform buffers **must** be multiples of
    ///this limit.
    ///The value **must** be a power of two.
    min_uniform_buffer_offset_alignment: DeviceSize,
    ///[`min_storage_buffer_offset_alignment`] is the minimum **required**
    ///alignment, in bytes, for the `offset` member of the
    ///[`DescriptorBufferInfo`] structure for storage buffers.
    ///When a descriptor of type `VK_DESCRIPTOR_TYPE_STORAGE_BUFFER` or
    ///`VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC` is updated, the
    ///`offset`**must** be an integer multiple of this limit.
    ///Similarly, dynamic offsets for storage buffers **must** be multiples of
    ///this limit.
    ///The value **must** be a power of two.
    min_storage_buffer_offset_alignment: DeviceSize,
    ///[`min_texel_offset`] is the minimum offset
    ///value for the `ConstOffset` image operand of any of the
    ///`OpImageSample*` or `OpImageFetch*` image instructions.
    min_texel_offset: i32,
    ///[`max_texel_offset`] is the maximum offset
    ///value for the `ConstOffset` image operand of any of the
    ///`OpImageSample*` or `OpImageFetch*` image instructions.
    max_texel_offset: u32,
    ///[`min_texel_gather_offset`] is the
    ///minimum offset value for the `Offset`, `ConstOffset`, or
    ///`ConstOffsets` image operands of any of the `OpImage*Gather` image
    ///instructions.
    min_texel_gather_offset: i32,
    ///[`max_texel_gather_offset`] is the
    ///maximum offset value for the `Offset`, `ConstOffset`, or
    ///`ConstOffsets` image operands of any of the `OpImage*Gather` image
    ///instructions.
    max_texel_gather_offset: u32,
    ///[`min_interpolation_offset`] is the
    ///base minimum (inclusive) negative offset value for the `Offset`
    ///operand of the `InterpolateAtOffset` extended instruction.
    min_interpolation_offset: f32,
    ///[`max_interpolation_offset`] is the
    ///base maximum (inclusive) positive offset value for the `Offset`
    ///operand of the `InterpolateAtOffset` extended instruction.
    max_interpolation_offset: f32,
    ///[`sub_pixel_interpolation_offset_bits`] is the number of fractional bits
    ///that the `x` and `y` offsets to the `InterpolateAtOffset`
    ///extended instruction **may** be rounded to as fixed-point values.
    sub_pixel_interpolation_offset_bits: u32,
    ///[`max_framebuffer_width`] is the maximum
    ///width for a framebuffer.
    ///The `width` member of the [`FramebufferCreateInfo`] structure
    ///**must** be less than or equal to this limit.
    max_framebuffer_width: u32,
    ///[`max_framebuffer_height`] is the
    ///maximum height for a framebuffer.
    ///The `height` member of the [`FramebufferCreateInfo`] structure
    ///**must** be less than or equal to this limit.
    max_framebuffer_height: u32,
    ///[`max_framebuffer_layers`] is the
    ///maximum layer count for a layered framebuffer.
    ///The `layers` member of the [`FramebufferCreateInfo`] structure
    ///**must** be less than or equal to this limit.
    max_framebuffer_layers: u32,
    ///[`framebuffer_color_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the color sample counts that are
    ///supported for all framebuffer color attachments with floating- or
    ///fixed-point formats.
    ///For color attachments with integer formats, see
    ///[`framebufferIntegerColorSampleCounts`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-framebufferIntegerColorSampleCounts).
    framebuffer_color_sample_counts: SampleCountFlags,
    ///[`framebuffer_depth_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the supported depth sample counts
    ///for all framebuffer depth/stencil attachments, when the format includes
    ///a depth component.
    framebuffer_depth_sample_counts: SampleCountFlags,
    ///[`framebuffer_stencil_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the supported stencil sample
    ///counts for all framebuffer depth/stencil attachments, when the format
    ///includes a stencil component.
    framebuffer_stencil_sample_counts: SampleCountFlags,
    ///[`framebuffer_no_attachments_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the supported sample counts for a
    ///[subpass which uses no attachments](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-noattachments).
    framebuffer_no_attachments_sample_counts: SampleCountFlags,
    ///[`max_color_attachments`] is the maximum
    ///number of color attachments that **can** be used by a subpass in a render
    ///pass.
    ///The `colorAttachmentCount` member of the [`SubpassDescription`]
    ///or [`SubpassDescription2`]
    ///structure **must** be less than or equal to this limit.
    max_color_attachments: u32,
    ///[`sampled_image_color_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the sample counts supported for
    ///all 2D images created with `VK_IMAGE_TILING_OPTIMAL`, `usage`
    ///containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and a non-integer color
    ///format.
    sampled_image_color_sample_counts: SampleCountFlags,
    ///[`sampled_image_integer_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the sample counts supported for
    ///all 2D images created with `VK_IMAGE_TILING_OPTIMAL`, `usage`
    ///containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and an integer color
    ///format.
    sampled_image_integer_sample_counts: SampleCountFlags,
    ///[`sampled_image_depth_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the sample counts supported for
    ///all 2D images created with `VK_IMAGE_TILING_OPTIMAL`, `usage`
    ///containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and a depth format.
    sampled_image_depth_sample_counts: SampleCountFlags,
    ///[`sampled_image_stencil_sample_counts`] is a bitmask<sup>1</sup> of
    ///[`SampleCountFlagBits`] indicating the sample counts supported for
    ///all 2D images created with `VK_IMAGE_TILING_OPTIMAL`, `usage`
    ///containing `VK_IMAGE_USAGE_SAMPLED_BIT`, and a stencil format.
    sampled_image_stencil_sample_counts: SampleCountFlags,
    ///[`storage_image_sample_counts`] is a
    ///bitmask<sup>1</sup> of [`SampleCountFlagBits`] indicating the sample counts
    ///supported for all 2D images created with `VK_IMAGE_TILING_OPTIMAL`,
    ///and `usage` containing `VK_IMAGE_USAGE_STORAGE_BIT`.
    storage_image_sample_counts: SampleCountFlags,
    ///[`max_sample_mask_words`] is the maximum
    ///number of array elements of a variable decorated with the
    ///[`SampleMask`] built-in decoration.
    max_sample_mask_words: u32,
    ///[`timestamp_compute_and_graphics`]
    ///specifies support for timestamps on all graphics and compute queues.
    ///If this limit is set to [`TRUE`], all queues that advertise the
    ///`VK_QUEUE_GRAPHICS_BIT` or `VK_QUEUE_COMPUTE_BIT` in the
    ///[`QueueFamilyProperties`]::`queueFlags` support
    ///[`QueueFamilyProperties`]::`timestampValidBits` of at least 36.
    ///See [Timestamp Queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
    timestamp_compute_and_graphics: Bool32,
    ///[`timestamp_period`] is the number of
    ///nanoseconds **required** for a timestamp query to be incremented by 1.
    ///See [Timestamp Queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
    timestamp_period: f32,
    ///[`max_clip_distances`] is the maximum number
    ///of clip distances that **can** be used in a single shader stage.
    ///The size of any array declared with the `ClipDistance` built-in
    ///decoration in a shader module **must** be less than or equal to this limit.
    max_clip_distances: u32,
    ///[`max_cull_distances`] is the maximum number
    ///of cull distances that **can** be used in a single shader stage.
    ///The size of any array declared with the `CullDistance` built-in
    ///decoration in a shader module **must** be less than or equal to this limit.
    max_cull_distances: u32,
    ///[`max_combined_clip_and_cull_distances`] is the maximum combined number of
    ///clip and cull distances that **can** be used in a single shader stage.
    ///The sum of the sizes of any pair of arrays declared with the
    ///`ClipDistance` and `CullDistance` built-in decoration used by a
    ///single shader stage in a shader module **must** be less than or equal to
    ///this limit.
    max_combined_clip_and_cull_distances: u32,
    ///[`discrete_queue_priorities`] is the
    ///number of discrete priorities that **can** be assigned to a queue based on
    ///the value of each member of
    ///[`DeviceQueueCreateInfo`]::`pQueuePriorities`.
    ///This **must** be at least 2, and levels **must** be spread evenly over the
    ///range, with at least one level at 1.0, and another at 0.0.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-priority](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-priority).
    discrete_queue_priorities: u32,
    ///[`point_size_range`][2] is the range
    ///[`minimum`,`maximum`] of supported sizes for points.
    ///Values written to variables decorated with the `PointSize` built-in
    ///decoration are clamped to this range.
    point_size_range: [f32; 2],
    ///[`line_width_range`][2] is the range
    ///[`minimum`,`maximum`] of supported widths for lines.
    ///Values specified by the `lineWidth` member of the
    ///[`PipelineRasterizationStateCreateInfo`] or the `lineWidth`
    ///parameter to [`CmdSetLineWidth`] are clamped to this range.
    line_width_range: [f32; 2],
    ///[`point_size_granularity`] is the
    ///granularity of supported point sizes.
    ///Not all point sizes in the range defined by [`point_size_range`] are
    ///supported.
    ///This limit specifies the granularity (or increment) between successive
    ///supported point sizes.
    point_size_granularity: f32,
    ///[`line_width_granularity`] is the
    ///granularity of supported line widths.
    ///Not all line widths in the range defined by [`line_width_range`] are
    ///supported.
    ///This limit specifies the granularity (or increment) between successive
    ///supported line widths.
    line_width_granularity: f32,
    ///[`strict_lines`] specifies whether lines are
    ///rasterized according to the preferred method of rasterization.
    ///If set to [`FALSE`], lines **may** be rasterized under a relaxed set
    ///of rules.
    ///If set to [`TRUE`], lines are rasterized as per the strict
    ///definition.
    ///See [Basic Line Segment Rasterization](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-lines-basic).
    strict_lines: Bool32,
    ///[`standard_sample_locations`]
    ///specifies whether rasterization uses the standard sample locations as
    ///documented in [Multisampling](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-multisampling).
    ///If set to [`TRUE`], the implementation uses the documented sample
    ///locations.
    ///If set to [`FALSE`], the implementation **may** use different sample
    ///locations.
    standard_sample_locations: Bool32,
    ///[`optimal_buffer_copy_offset_alignment`] is the optimal buffer offset
    ///alignment in bytes for
    ///[`CmdCopyBufferToImage2`], [`CmdCopyBufferToImage`],
    ///[`CmdCopyImageToBuffer2`], and [`CmdCopyImageToBuffer`].
    ///The per texel alignment requirements are enforced, but applications
    ///**should** use the optimal alignment for optimal performance and power use.
    ///The value **must** be a power of two.
    optimal_buffer_copy_offset_alignment: DeviceSize,
    ///[`optimal_buffer_copy_row_pitch_alignment`] is the optimal buffer row pitch
    ///alignment in bytes for
    ///[`CmdCopyBufferToImage2`], [`CmdCopyBufferToImage`],
    ///[`CmdCopyImageToBuffer2`], and [`CmdCopyImageToBuffer`].
    ///Row pitch is the number of bytes between texels with the same X
    ///coordinate in adjacent rows (Y coordinates differ by one).
    ///The per texel alignment requirements are enforced, but applications
    ///**should** use the optimal alignment for optimal performance and power use.
    ///The value **must** be a power of two.
    optimal_buffer_copy_row_pitch_alignment: DeviceSize,
    ///[`non_coherent_atom_size`] is the size and
    ///alignment in bytes that bounds concurrent access to
    ///[host-mapped device memory](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-device-hostaccess).
    ///The value **must** be a power of two.
    /// * For all bitmasks of [`SampleCountFlagBits`], the sample count limits defined above represent the minimum supported sample counts for each image type. Individual images **may** support additional sample counts, which are queried using [`GetPhysicalDeviceImageFormatProperties`] as described in [Supported Sample Counts](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-supported-sample-counts).
    non_coherent_atom_size: DeviceSize,
}
///[VkSemaphoreCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSemaphoreCreateInfo.html) - Structure specifying parameters of a newly created semaphore
///# C Specifications
///The [`SemaphoreCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSemaphoreCreateInfo {
///    VkStructureType           sType;
///    const void*               pNext;
///    VkSemaphoreCreateFlags    flags;
///} VkSemaphoreCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
///# Description
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`ExportSemaphoreCreateInfo`],
///   [`ExportSemaphoreWin32HandleInfoKHR`], or [`SemaphoreTypeCreateInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SemaphoreCreateFlags`]
/// - [`StructureType`]
/// - [`CreateSemaphore`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SemaphoreCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: SemaphoreCreateFlags,
}
///[VkQueryPoolCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueryPoolCreateInfo.html) - Structure specifying parameters of a newly created query pool
///# C Specifications
///The [`QueryPoolCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkQueryPoolCreateInfo {
///    VkStructureType                  sType;
///    const void*                      pNext;
///    VkQueryPoolCreateFlags           flags;
///    VkQueryType                      queryType;
///    uint32_t                         queryCount;
///    VkQueryPipelineStatisticFlags    pipelineStatistics;
///} VkQueryPoolCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is reserved for future use.
/// - [`query_type`] is a [`QueryType`] value specifying the type of queries managed by the pool.
/// - [`query_count`] is the number of queries managed by the pool.
/// - [`pipeline_statistics`] is a bitmask of [`QueryPipelineStatisticFlagBits`] specifying which counters will be returned in queries on the new pool, as described below in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats).
///# Description
///[`pipeline_statistics`] is ignored if [`query_type`] is not
///`VK_QUERY_TYPE_PIPELINE_STATISTICS`.Valid Usage
/// - If the [pipeline statistics queries](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-pipelineStatisticsQuery)
///   feature is not enabled, [`query_type`]**must** not be `VK_QUERY_TYPE_PIPELINE_STATISTICS`
/// - If [`query_type`] is `VK_QUERY_TYPE_PIPELINE_STATISTICS`, [`pipeline_statistics`]**must** be a
///   valid combination of [`QueryPipelineStatisticFlagBits`] values
/// - If [`query_type`] is `VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR`, the [`p_next`] chain **must**
///   include a [`QueryPoolPerformanceCreateInfoKHR`] structure
/// - [`query_count`]**must** be greater than 0
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`QueryPoolPerformanceCreateInfoKHR`],
///   [`QueryPoolPerformanceQueryCreateInfoINTEL`], [`VideoDecodeH264ProfileEXT`],
///   [`VideoDecodeH265ProfileEXT`], [`VideoEncodeH264ProfileEXT`], [`VideoEncodeH265ProfileEXT`],
///   or [`VideoProfileKHR`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be `0`
/// - [`query_type`]**must** be a valid [`QueryType`] value
///# Related
/// - [`crate::vulkan1_0`]
/// - [`QueryPipelineStatisticFlags`]
/// - [`QueryPoolCreateFlags`]
/// - [`QueryType`]
/// - [`StructureType`]
/// - [`CreateQueryPool`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct QueryPoolCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is reserved for future use.
    flags: QueryPoolCreateFlags,
    ///[`query_type`] is a [`QueryType`] value specifying the type of
    ///queries managed by the pool.
    query_type: QueryType,
    ///[`query_count`] is the number of queries managed by the pool.
    query_count: u32,
    ///[`pipeline_statistics`] is a bitmask of
    ///[`QueryPipelineStatisticFlagBits`] specifying which counters will be
    ///returned in queries on the new pool, as described below in
    ///[https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats).
    pipeline_statistics: QueryPipelineStatisticFlags,
}
///[VkFramebufferCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFramebufferCreateInfo.html) - Structure specifying parameters of a newly created framebuffer
///# C Specifications
///The [`FramebufferCreateInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkFramebufferCreateInfo {
///    VkStructureType             sType;
///    const void*                 pNext;
///    VkFramebufferCreateFlags    flags;
///    VkRenderPass                renderPass;
///    uint32_t                    attachmentCount;
///    const VkImageView*          pAttachments;
///    uint32_t                    width;
///    uint32_t                    height;
///    uint32_t                    layers;
///} VkFramebufferCreateInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`flags`] is a bitmask of [`FramebufferCreateFlagBits`]
/// - [`render_pass`] is a render pass defining what render passes the framebuffer will be compatible with. See [Render Pass Compatibility](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility) for details.
/// - [`attachment_count`] is the number of attachments.
/// - [`p_attachments`] is a pointer to an array of [`ImageView`] handles, each of which will be
///   used as the corresponding attachment in a render pass instance. If [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, this parameter is ignored.
/// - [`width`], [`height`] and [`layers`] define the dimensions of the framebuffer. If the render
///   pass uses multiview, then [`layers`]**must** be one and each attachment requires a number of
///   layers that is greater than the maximum bit index set in the view mask in the subpasses in
///   which it is used.
///# Description
///Applications **must** ensure that all non-attachment writes to memory backing
///image subresources that are used as attachments in a render pass instance
///happen-before or happen-after the render pass instance.
///If an image subresource is written during a render pass instance by anything
///other than load operations, store operations, and layout transitions,
///applications **must** ensure that all non-attachment reads from memory backing
///that image subresource happen-before or happen-after the render pass
///instance.
///For depth/stencil images, the aspects are not treated independently for the
///above guarantees - writes to either aspect **must** be synchronized with
///accesses to the other aspect.It is legal for a subpass to use no color or depth/stencil
/// attachments,
///either because it has no attachment references or because all of them are
///[`ATTACHMENT_UNUSED`].
///This kind of subpass **can** use shader side effects such as image stores and
///atomics to produce an output.
///In this case, the subpass continues to use the [`width`], [`height`],
///and [`layers`] of the framebuffer to define the dimensions of the
///rendering area, and the `rasterizationSamples` from each pipeline’s
///[`PipelineMultisampleStateCreateInfo`] to define the number of samples
///used in rasterization; however, if
///[`PhysicalDeviceFeatures::variable_multisample_rate`] is
///[`FALSE`], then all pipelines to be bound with the subpass **must** have
///the same value for
///[`PipelineMultisampleStateCreateInfo::rasterization_samples`].Valid Usage
/// - If `renderpass` is not [`crate::utils::Handle::null`], [`attachment_count`]**must** be equal
///   to the attachment count specified in [`render_pass`]
/// - If `renderpass` is not [`crate::utils::Handle::null`], [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, and [`attachment_count`] is not `0`,
///   [`p_attachments`]**must** be a valid pointer to an array of [`attachment_count`] valid
///   [`ImageView`] handles
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as a
///   color attachment or resolve attachment by [`render_pass`]**must** have been created with a
///   `usage` value including `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as a
///   depth/stencil attachment by [`render_pass`]**must** have been created with a `usage` value
///   including `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as a
///   depth/stencil resolve attachment by [`render_pass`]**must** have been created with a `usage`
///   value including `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and `renderpass` is not
///   [`crate::utils::Handle::null`], [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as an
///   input attachment by [`render_pass`]**must** have been created with a `usage` value including
///   `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`], each element of [`p_attachments`] that
///   is used as a fragment density map attachment by [`render_pass`]**must** not have been created
///   with a [`flags`] value including `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT`
/// -    If `renderpass` is not [`crate::utils::Handle::null`], [`render_pass`] has a fragment density map attachment, and [non-subsample image feature](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-fragmentDensityMapNonSubsampledImages) is not enabled, each element of [`p_attachments`]**must** have been created with a [`flags`] value including `VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT` unless that element is the fragment density map attachment
/// - If [`render_pass`] was created with [fragment density map offsets](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-fragmentdensitymapoffsets)
///   other than (0,0), each element of [`p_attachments`]**must** have been created with a [`flags`]
///   value including `VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM`.
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`]**must** have been
///   created with a [`Format`] value that matches the [`Format`] specified by the corresponding
///   [`AttachmentDescription`] in [`render_pass`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`]**must** have been
///   created with a `samples` value that matches the `samples` value specified by the corresponding
///   [`AttachmentDescription`] in [`render_pass`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as an
///   input, color, resolve, or depth/stencil attachment by [`render_pass`]**must** have been
///   created with a [`ImageCreateInfo`]::[`width`] greater than or equal to [`width`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as an
///   input, color, resolve, or depth/stencil attachment by [`render_pass`]**must** have been
///   created with a [`ImageCreateInfo`]::[`height`] greater than or equal to [`height`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as an
///   input, color, resolve, or depth/stencil attachment by [`render_pass`]**must** have been
///   created with a [`ImageViewCreateInfo`]::`subresourceRange.layerCount` greater than or equal to
///   [`layers`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`render_pass`] was specified with
///   non-zero view masks, each element of [`p_attachments`] that is used as an input, color,
///   resolve, or depth/stencil attachment by [`render_pass`]**must** have a `layerCount` greater
///   than the index of the most significant bit set in any of those view masks
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`render_pass`] was specified with
///   non-zero view masks, each element of [`p_attachments`] that is referenced by
///   `fragmentDensityMapAttachment`**must** have a `layerCount` equal to `1` or greater than the
///   index of the most significant bit set in any of those view masks
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`render_pass`] was not specified
///   with non-zero view masks, each element of [`p_attachments`] that is referenced by
///   `fragmentDensityMapAttachment`**must** have a `layerCount` equal to `1`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, an element of [`p_attachments`] that is referenced by
///   `fragmentDensityMapAttachment`**must** have a width at least as large as <span
///   class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span
///   class="minner"><span style="top:0em;" class="mopen delimcenter"><span class="delimsizing
///   size2">⌈</span></span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.8801079999999999em;" class="vlist"><span
///   style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord
///   mathdefault mtight">x</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">F</span><span style="margin-right:0.02778em;" class="mord
///   mathdefault mtight">r</span><span class="mord mathdefault mtight">a</span><span
///   style="margin-right:0.03588em;" class="mord mathdefault mtight">g</span><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord
///   mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span
///   style="margin-right:0.02778em;" class="mord mathdefault mtight">D</span><span class="mord
///   mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord
///   mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord
///   mathdefault mtight">t</span><span class="mord mathdefault mtight"
///   style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span
///   style="margin-right:0.01968em;" class="mord mathdefault mtight">l</span><span
///   style="margin-right:0.05764em;" class="mord mathdefault mtight">S</span><span class="mord
///   mathdefault mtight">i</span><span style="margin-right:0.04398em;" class="mord mathdefault
///   mtight">z</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.3448em;"><span
///   style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span
///   style="height:2.5em;" class="pstrut"></span><span class="sizing reset-size3 size1
///   mtight"><span class="mord mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span
///   class="mord mathdefault mtight">h</span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></
///   span></span></span><span style="top:-3.23em;"><span style="height:3em;"
///   class="pstrut"></span><span class="frac-line"
///   style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span
///   class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span
///   class="mord mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span
///   class="mord mathdefault mtight">h</span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose
///   nulldelimiter"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span
///   class="delimsizing size2">⌉</span></span></span></span></span></span>
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, an element of [`p_attachments`] that is referenced by
///   `fragmentDensityMapAttachment`**must** have a height at least as large as <span
///   class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
///   style="height:1.80002em;vertical-align:-0.65002em;" class="strut"></span><span
///   class="minner"><span style="top:0em;" class="mopen delimcenter"><span class="delimsizing
///   size2">⌈</span></span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span
///   style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord
///   mathdefault mtight">x</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight"
///   style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span
///   class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord
///   mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span
///   style="margin-right:0.02778em;" class="mord mathdefault mtight">D</span><span class="mord
///   mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord
///   mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord
///   mathdefault mtight">t</span><span style="margin-right:0.03588em;" class="mord mathdefault
///   mtight">y</span><span style="margin-right:0.13889em;" class="mord mathdefault
///   mtight">T</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault
///   mtight">x</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault
///   mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight"
///   style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span
///   style="margin-right:0.04398em;" class="mord mathdefault mtight">z</span><span class="mord
///   mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span
///   class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.3448em;"><span
///   style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span
///   style="height:2.5em;" class="pstrut"></span><span class="sizing reset-size3 size1
///   mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span
///   class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord
///   mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.29011428571428566em;"><span></span></span></span></span></span></span></
///   span></span></span><span style="top:-3.23em;"><span class="pstrut"
///   style="height:3em;"></span><span style="border-bottom-width:0.04em;"
///   class="frac-line"></span></span><span style="top:-3.446108em;"><span style="height:3em;"
///   class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">e</span><span class="mord mathdefault mtight">i</span><span
///   style="margin-right:0.03588em;" class="mord mathdefault mtight">g</span><span class="mord
///   mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.5480799999999999em;"><span></span></span></span></span></span><span
///   class="mclose nulldelimiter"></span></span></span><span style="top:0em;" class="mclose
///   delimcenter"><span class="delimsizing size2">⌉</span></span></span></span></span></span>
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, and [`render_pass`] was specified with non-zero view masks, each element of [`p_attachments`] that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment) by [`render_pass`]**must** have a `layerCount` that is either `1`, or greater than the index of the most significant bit set in any of those view masks
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, and [`render_pass`] was not specified with non-zero view masks, each element of [`p_attachments`] that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment) by [`render_pass`]**must** have a `layerCount` that is either `1`, or greater than [`layers`]
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, an element of [`p_attachments`] that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)**must** have a width at least as large as ⌈[`width`] / `texelWidth`⌉, where `texelWidth` is the largest value of `shadingRateAttachmentTexelSize.width` in a [`FragmentShadingRateAttachmentInfoKHR`] which references that attachment
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, an element of [`p_attachments`] that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)**must** have a height at least as large as ⌈[`height`] / `texelHeight`⌉, where `texelHeight` is the largest value of `shadingRateAttachmentTexelSize.height` in a [`FragmentShadingRateAttachmentInfoKHR`] which references that attachment
/// - If [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of
///   [`p_attachments`]**must** only specify a single mip level
/// - If [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of
///   [`p_attachments`]**must** have been created with the identity swizzle
/// - [`width`]**must** be greater than `0`
/// - [`width`]**must** be less than or equal to [`maxFramebufferWidth`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxFramebufferWidth)
/// - [`height`]**must** be greater than `0`
/// - [`height`]**must** be less than or equal to [`maxFramebufferHeight`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxFramebufferHeight)
/// - [`layers`]**must** be greater than `0`
/// - [`layers`]**must** be less than or equal to [`maxFramebufferLayers`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxFramebufferLayers)
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`render_pass`] was specified with
///   non-zero view masks, [`layers`]**must** be `1`
/// - If [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of
///   [`p_attachments`] that is a 2D or 2D array image view taken from a 3D image **must** not be a
///   depth/stencil format
/// - If the [imageless framebuffer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-imagelessFramebuffer)
///   feature is not enabled, [`flags`]**must** not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`
/// - If [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`p_next`] chain **must**
///   include a [`FramebufferAttachmentsCreateInfo`] structure
/// - If [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `attachmentImageInfoCount`
///   member of a [`FramebufferAttachmentsCreateInfo`] structure in the [`p_next`] chain **must** be
///   equal to either zero or [`attachment_count`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`width`] member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure in the
///   [`p_next`] chain that is used as an input, color, resolve or depth/stencil attachment in
///   [`render_pass`]**must** be greater than or equal to [`width`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`height`] member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure in the
///   [`p_next`] chain that is used as an input, color, resolve or depth/stencil attachment in
///   [`render_pass`]**must** be greater than or equal to [`height`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`width`] member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure in the
///   [`p_next`] chain that is referenced by
///   [`RenderPassFragmentDensityMapCreateInfoEXT::fragment_density_map_attachment`] in
///   [`render_pass`]**must** be greater than or equal to <span class="katex"><span
///   class="katex-html" aria-hidden="true"><span class="base"><span class="strut"
///   style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span
///   class="mopen delimcenter" style="top:0em;"><span class="delimsizing
///   size2">⌈</span></span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span
///   style="top:-2.6550000000000002em;"><span style="height:3em;" class="pstrut"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord
///   mathdefault mtight">x</span><span style="margin-right:0.13889em;" class="mord mathdefault
///   mtight">F</span><span class="mord mathdefault mtight"
///   style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span
///   class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord
///   mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span class="mord
///   mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault
///   mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault
///   mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault
///   mtight">t</span><span style="margin-right:0.03588em;" class="mord mathdefault
///   mtight">y</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord
///   mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault
///   mtight">i</span><span style="margin-right:0.04398em;" class="mord mathdefault
///   mtight">z</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span
///   class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
///   style="height:0.3448em;"><span
///   style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span
///   style="height:2.5em;" class="pstrut"></span><span class="sizing reset-size3 size1
///   mtight"><span class="mord mtight"><span class="mord mathdefault mtight"
///   style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span
///   class="mord mathdefault mtight">h</span></span></span></span></span><span
///   class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
///   style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></
///   span></span></span><span style="top:-3.23em;"><span class="pstrut"
///   style="height:3em;"></span><span class="frac-line"
///   style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span
///   style="height:3em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
///   class="mord mtight"><span style="margin-right:0.02691em;" class="mord mathdefault
///   mtight">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault
///   mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault
///   mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span style="height:0.481108em;"
///   class="vlist"><span></span></span></span></span></span><span class="mclose
///   nulldelimiter"></span></span></span><span style="top:0em;" class="mclose delimcenter"><span
///   class="delimsizing size2">⌉</span></span></span></span></span></span>
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`height`] member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure included in
///   the [`p_next`] chain that is referenced by
///   [`RenderPassFragmentDensityMapCreateInfoEXT::fragment_density_map_attachment`] in
///   [`render_pass`]**must** be greater than or equal to <span class="katex"><span
///   class="katex-html" aria-hidden="true"><span class="base"><span
///   style="height:1.80002em;vertical-align:-0.65002em;" class="strut"></span><span
///   class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing
///   size2">⌈</span></span><span class="mord"><span class="mord"><span class="mopen
///   nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.9322159999999999em;" class="vlist"><span
///   style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span
///   class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord
///   mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord
///   mathdefault mtight">x</span><span style="margin-right:0.13889em;" class="mord mathdefault
///   mtight">F</span><span style="margin-right:0.02778em;" class="mord mathdefault
///   mtight">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault
///   mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault
///   mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault
///   mtight">n</span><span class="mord mathdefault mtight">t</span><span
///   style="margin-right:0.02778em;" class="mord mathdefault mtight">D</span><span class="mord
///   mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord
///   mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord
///   mathdefault mtight">t</span><span class="mord mathdefault mtight"
///   style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight"
///   style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">e</span><span
///   class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord
///   mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault
///   mtight">i</span><span class="mord mathdefault mtight"
///   style="margin-right:0.04398em;">z</span><span class="mord mtight"><span class="mord
///   mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
///   class="vlist-r"><span style="height:0.3448em;" class="vlist"><span
///   style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span
///   style="height:2.5em;" class="pstrut"></span><span class="sizing reset-size3 size1
///   mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span
///   class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span
///   class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord
///   mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.29011428571428566em;"><span></span></span></span></span></span></span></
///   span></span></span><span style="top:-3.23em;"><span class="pstrut"
///   style="height:3em;"></span><span style="border-bottom-width:0.04em;"
///   class="frac-line"></span></span><span style="top:-3.446108em;"><span class="pstrut"
///   style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
///   mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">e</span><span class="mord mathdefault mtight">i</span><span
///   style="margin-right:0.03588em;" class="mord mathdefault mtight">g</span><span class="mord
///   mathdefault mtight">h</span><span class="mord mathdefault
///   mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span
///   class="vlist-r"><span class="vlist"
///   style="height:0.5480799999999999em;"><span></span></span></span></span></span><span
///   class="mclose nulldelimiter"></span></span></span><span class="mclose delimcenter"
///   style="top:0em;"><span class="delimsizing size2">⌉</span></span></span></span></span></span>
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`width`] member of any element of the `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure in the [`p_next`] chain that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)**must** be greater than or equal to ⌈[`width`] / `texelWidth`⌉, where `texelWidth` is the largest value of `shadingRateAttachmentTexelSize.width` in a [`FragmentShadingRateAttachmentInfoKHR`] which references that attachment
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the [`height`] member of any element of the `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure in the [`p_next`] chain that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)**must** be greater than or equal to ⌈[`height`] / `texelHeight`⌉, where `texelHeight` is the largest value of `shadingRateAttachmentTexelSize.height` in a [`FragmentShadingRateAttachmentInfoKHR`] which references that attachment
/// -    If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `layerCount` member of any element of the `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure in the [`p_next`] chain that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)**must** be either `1`, or greater than or equal to [`layers`]
/// -    If `renderpass` is not [`crate::utils::Handle::null`], [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, and [`render_pass`] was specified with non-zero view masks, each element of [`p_attachments`] that is used as a [fragment shading rate attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment) by [`render_pass`]**must** have a `layerCount` that is either `1`, or greater than the index of the most significant bit set in any of those view masks
/// - If `renderpass` is not [`crate::utils::Handle::null`], multiview is enabled for
///   [`render_pass`], and [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the
///   `layerCount` member of any element of the `pAttachmentImageInfos` member of a
///   [`FramebufferAttachmentsCreateInfo`] structure included in the [`p_next`] chain used as an
///   input, color, resolve, or depth/stencil attachment in [`render_pass`]**must** be greater than
///   the maximum bit index set in the view mask in the subpasses in which it is used in
///   [`render_pass`]
/// - If `renderpass` is not [`crate::utils::Handle::null`], multiview is not enabled for
///   [`render_pass`], and [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the
///   `layerCount` member of any element of the `pAttachmentImageInfos` member of a
///   [`FramebufferAttachmentsCreateInfo`] structure included in the [`p_next`] chain used as an
///   input, color, resolve, or depth/stencil attachment in [`render_pass`]**must** be greater than
///   or equal to [`layers`]
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `usage` member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure included in
///   the [`p_next`] chain that refers to an attachment used as a color attachment or resolve
///   attachment by [`render_pass`]**must** include `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `usage` member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure included in
///   the [`p_next`] chain that refers to an attachment used as a depth/stencil attachment by
///   [`render_pass`]**must** include `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `usage` member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure included in
///   the [`p_next`] chain that refers to an attachment used as a depth/stencil resolve attachment
///   by [`render_pass`]**must** include `VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `usage` member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure included in
///   the [`p_next`] chain that refers to an attachment used as an input attachment by
///   [`render_pass`]**must** include `VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, at least one element of the `pViewFormats` member of
///   any element of the `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`]
///   structure included in the [`p_next`] chain **must** be equal to the corresponding value of
///   [`AttachmentDescription::format`] used to create [`render_pass`]
/// - If [`flags`] does not include `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of
///   [`p_attachments`]**must** have been created with [`ImageViewCreateInfo::view_type`] not equal
///   to `VK_IMAGE_VIEW_TYPE_3D`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] does not include
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, each element of [`p_attachments`] that is used as a
///   fragment shading rate attachment by [`render_pass`]**must** have been created with a `usage`
///   value including `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`
/// - If `renderpass` is not [`crate::utils::Handle::null`] and [`flags`] includes
///   `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, the `usage` member of any element of the
///   `pAttachmentImageInfos` member of a [`FramebufferAttachmentsCreateInfo`] structure included in
///   the [`p_next`] chain that refers to an attachment used as a fragment shading rate attachment
///   by [`render_pass`]**must** include `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR`
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO`
/// - [`p_next`]**must** be `NULL` or a pointer to a valid instance of
///   [`FramebufferAttachmentsCreateInfo`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - [`flags`]**must** be a valid combination of [`FramebufferCreateFlagBits`] values
/// - [`render_pass`]**must** be a valid [`RenderPass`] handle
/// - Both of [`render_pass`], and the elements of [`p_attachments`] that are valid handles of
///   non-ignored parameters **must** have been created, allocated, or retrieved from the same
///   [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`FramebufferCreateFlags`]
/// - [`ImageView`]
/// - [`RenderPass`]
/// - [`StructureType`]
/// - [`CreateFramebuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct FramebufferCreateInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`flags`] is a bitmask of [`FramebufferCreateFlagBits`]
    flags: FramebufferCreateFlags,
    ///[`render_pass`] is a render pass defining what render passes the
    ///framebuffer will be compatible with.
    ///See [Render Pass Compatibility](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-compatibility) for details.
    render_pass: RenderPass,
    ///[`attachment_count`] is the number of attachments.
    attachment_count: u32,
    ///[`p_attachments`] is a pointer to an array of [`ImageView`]
    ///handles, each of which will be used as the corresponding attachment in a
    ///render pass instance.
    ///If [`flags`] includes `VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT`, this
    ///parameter is ignored.
    p_attachments: *mut ImageView,
    ///[`width`], [`height`] and [`layers`] define the dimensions of the
    ///framebuffer.
    ///If the render pass uses multiview, then [`layers`]**must** be one and
    ///each attachment requires a number of layers that is greater than the
    ///maximum bit index set in the view mask in the subpasses in which it is
    ///used.
    width: u32,
    ///No documentation found
    height: u32,
    ///No documentation found
    layers: u32,
}
///[VkDrawIndirectCommand](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDrawIndirectCommand.html) - Structure specifying a indirect drawing command
///# C Specifications
///The [`DrawIndirectCommand`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDrawIndirectCommand {
///    uint32_t    vertexCount;
///    uint32_t    instanceCount;
///    uint32_t    firstVertex;
///    uint32_t    firstInstance;
///} VkDrawIndirectCommand;
///```
///# Members
/// - [`vertex_count`] is the number of vertices to draw.
/// - [`instance_count`] is the number of instances to draw.
/// - [`first_vertex`] is the index of the first vertex to draw.
/// - [`first_instance`] is the instance ID of the first instance to draw.
///# Description
///The members of [`DrawIndirectCommand`] have the same meaning as the
///similarly named parameters of [`CmdDraw`].Valid Usage
/// -    For a given vertex buffer binding, any attribute data fetched **must** be entirely contained within the corresponding vertex buffer binding, as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input)
/// - If the [drawIndirectFirstInstance](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-drawIndirectFirstInstance)
///   feature is not enabled, [`first_instance`]**must** be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CmdDrawIndirect`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DrawIndirectCommand {
    ///[`vertex_count`] is the number of vertices to draw.
    vertex_count: u32,
    ///[`instance_count`] is the number of instances to draw.
    instance_count: u32,
    ///[`first_vertex`] is the index of the first vertex to draw.
    first_vertex: u32,
    ///[`first_instance`] is the instance ID of the first instance to draw.
    first_instance: u32,
}
///[VkDrawIndexedIndirectCommand](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDrawIndexedIndirectCommand.html) - Structure specifying a indexed indirect drawing command
///# C Specifications
///The [`DrawIndexedIndirectCommand`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDrawIndexedIndirectCommand {
///    uint32_t    indexCount;
///    uint32_t    instanceCount;
///    uint32_t    firstIndex;
///    int32_t     vertexOffset;
///    uint32_t    firstInstance;
///} VkDrawIndexedIndirectCommand;
///```
///# Members
/// - [`index_count`] is the number of vertices to draw.
/// - [`instance_count`] is the number of instances to draw.
/// - [`first_index`] is the base index within the index buffer.
/// - [`vertex_offset`] is the value added to the vertex index before indexing into the vertex
///   buffer.
/// - [`first_instance`] is the instance ID of the first instance to draw.
///# Description
///The members of [`DrawIndexedIndirectCommand`] have the same meaning as
///the similarly named parameters of [`CmdDrawIndexed`].Valid Usage
/// -    For a given vertex buffer binding, any attribute data fetched **must** be entirely contained within the corresponding vertex buffer binding, as described in [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fxvertex-input)
/// - (`indexSize` × ([`first_index`] +  [`index_count`]) +  `offset`)**must** be less than or equal
///   to the size of the bound index buffer, with `indexSize` being based on the type specified by
///   `indexType`, where the index buffer, `indexType`, and `offset` are specified via
///   [`CmdBindIndexBuffer`]
/// - If the [drawIndirectFirstInstance](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-drawIndirectFirstInstance)
///   feature is not enabled, [`first_instance`]**must** be `0`
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CmdDrawIndexedIndirect`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DrawIndexedIndirectCommand {
    ///[`index_count`] is the number of vertices to draw.
    index_count: u32,
    ///[`instance_count`] is the number of instances to draw.
    instance_count: u32,
    ///[`first_index`] is the base index within the index buffer.
    first_index: u32,
    ///[`vertex_offset`] is the value added to the vertex index before
    ///indexing into the vertex buffer.
    vertex_offset: i32,
    ///[`first_instance`] is the instance ID of the first instance to draw.
    first_instance: u32,
}
///[VkDispatchIndirectCommand](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDispatchIndirectCommand.html) - Structure specifying a indirect dispatching command
///# C Specifications
///The [`DispatchIndirectCommand`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkDispatchIndirectCommand {
///    uint32_t    x;
///    uint32_t    y;
///    uint32_t    z;
///} VkDispatchIndirectCommand;
///```
///# Members
/// - [`x`] is the number of local workgroups to dispatch in the X dimension.
/// - [`y`] is the number of local workgroups to dispatch in the Y dimension.
/// - [`z`] is the number of local workgroups to dispatch in the Z dimension.
///# Description
///The members of [`DispatchIndirectCommand`] have the same meaning as the
///corresponding parameters of [`CmdDispatch`].Valid Usage
/// - [`x`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_compute_work_group_count`][0]
/// - [`y`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_compute_work_group_count`][1]
/// - [`z`]**must** be less than or equal to
///   [`PhysicalDeviceLimits::max_compute_work_group_count`][2]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CmdDispatchIndirect`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DispatchIndirectCommand {
    ///[`x`] is the number of local workgroups to dispatch in the X
    ///dimension.
    x: u32,
    ///[`y`] is the number of local workgroups to dispatch in the Y
    ///dimension.
    y: u32,
    ///[`z`] is the number of local workgroups to dispatch in the Z
    ///dimension.
    z: u32,
}
///[VkSubmitInfo](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubmitInfo.html) - Structure specifying a queue submit operation
///# C Specifications
///The [`SubmitInfo`] structure is defined as:
///```c
///// Provided by VK_VERSION_1_0
///typedef struct VkSubmitInfo {
///    VkStructureType                sType;
///    const void*                    pNext;
///    uint32_t                       waitSemaphoreCount;
///    const VkSemaphore*             pWaitSemaphores;
///    const VkPipelineStageFlags*    pWaitDstStageMask;
///    uint32_t                       commandBufferCount;
///    const VkCommandBuffer*         pCommandBuffers;
///    uint32_t                       signalSemaphoreCount;
///    const VkSemaphore*             pSignalSemaphores;
///} VkSubmitInfo;
///```
///# Members
/// - [`s_type`] is the type of this structure.
/// - [`p_next`] is `NULL` or a pointer to a structure extending this structure.
/// - [`wait_semaphore_count`] is the number of semaphores upon which to wait before executing the
///   command buffers for the batch.
/// - [`p_wait_semaphores`] is a pointer to an array of [`Semaphore`] handles upon which to wait before the command buffers for this batch begin execution. If semaphores to wait on are provided, they define a [semaphore wait operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-waiting).
/// - [`p_wait_dst_stage_mask`] is a pointer to an array of pipeline stages at which each
///   corresponding semaphore wait will occur.
/// - [`command_buffer_count`] is the number of command buffers to execute in the batch.
/// - [`p_command_buffers`] is a pointer to an array of [`CommandBuffer`] handles to execute in the
///   batch.
/// - [`signal_semaphore_count`] is the number of semaphores to be signaled once the commands
///   specified in [`p_command_buffers`] have completed execution.
/// - [`p_signal_semaphores`] is a pointer to an array of [`Semaphore`] handles which will be signaled when the command buffers for this batch have completed execution. If semaphores to be signaled are provided, they define a [semaphore signal operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-signaling).
///# Description
///The order that command buffers appear in [`p_command_buffers`] is used to
///determine [submission order](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-submission-order), and thus
///all the [implicit ordering guarantees](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-implicit) that
///respect it.
///Other than these implicit ordering guarantees and any [explicit synchronization primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization), these command buffers **may** overlap or
///otherwise execute out of order.Valid Usage
/// - If the [geometry shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-geometryShader)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT`
/// - If the [tessellation shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-tessellationShader)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT` or
///   `VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT`
/// - If the [conditional rendering](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-conditionalRendering)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT`
/// - If the [fragment density map](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-fragmentDensityMap)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT`
/// - If the [transform feedback](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-transformFeedback)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT`
/// - If the [mesh shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-meshShader)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV`
/// - If the [task shaders](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-taskShader)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV`
/// - If the [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-shadingRateImage)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not contain
///   `VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV`
/// - If the [`synchronization2`](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-synchronization2)
///   feature is not enabled, [`p_wait_dst_stage_mask`]**must** not be `0`
/// - Each element of [`p_command_buffers`]**must** not have been allocated with
///   `VK_COMMAND_BUFFER_LEVEL_SECONDARY`
/// - Each element of [`p_wait_dst_stage_mask`]**must** not include `VK_PIPELINE_STAGE_HOST_BIT`
/// - If any element of [`p_wait_semaphores`] or [`p_signal_semaphores`] was created with a
///   [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE`, then the [`p_next`] chain **must** include
///   a [`TimelineSemaphoreSubmitInfo`] structure
/// - If the [`p_next`] chain of this structure includes a [`TimelineSemaphoreSubmitInfo`] structure
///   and any element of [`p_wait_semaphores`] was created with a [`SemaphoreType`] of
///   `VK_SEMAPHORE_TYPE_TIMELINE`, then its `waitSemaphoreValueCount` member **must** equal
///   [`wait_semaphore_count`]
/// - If the [`p_next`] chain of this structure includes a [`TimelineSemaphoreSubmitInfo`] structure
///   and any element of [`p_signal_semaphores`] was created with a [`SemaphoreType`] of
///   `VK_SEMAPHORE_TYPE_TIMELINE`, then its `signalSemaphoreValueCount` member **must** equal
///   [`signal_semaphore_count`]
/// -    For each element of [`p_signal_semaphores`] created with a [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` the corresponding element of [`TimelineSemaphoreSubmitInfo::p_signal_semaphore_values`]**must** have a value greater than the current value of the semaphore when the [semaphore signal operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-signaling) is executed
/// -    For each element of [`p_wait_semaphores`] created with a [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` the corresponding element of [`TimelineSemaphoreSubmitInfo::p_wait_semaphore_values`]**must** have a value which does not differ from the current value of the semaphore or the value of any outstanding semaphore wait or signal operation on that semaphore by more than [`maxTimelineSemaphoreValueDifference`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxTimelineSemaphoreValueDifference)
/// -    For each element of [`p_signal_semaphores`] created with a [`SemaphoreType`] of `VK_SEMAPHORE_TYPE_TIMELINE` the corresponding element of [`TimelineSemaphoreSubmitInfo::p_signal_semaphore_values`]**must** have a value which does not differ from the current value of the semaphore or the value of any outstanding semaphore wait or signal operation on that semaphore by more than [`maxTimelineSemaphoreValueDifference`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-maxTimelineSemaphoreValueDifference)
/// - If the [`p_next`] chain of this structure does not include a [`ProtectedSubmitInfo`] structure
///   with `protectedSubmit` set to [`TRUE`], then each element of the [`p_command_buffers`] array
///   **must** be an unprotected command buffer
/// - If the [`p_next`] chain of this structure includes a [`ProtectedSubmitInfo`] structure with
///   `protectedSubmit` set to [`TRUE`], then each element of the [`p_command_buffers`] array
///   **must** be a protected command buffer
/// - If [`p_command_buffers`] contains any [resumed render pass instances](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-suspension),
///   they **must** be suspended by a render pass instance earlier in submission order within
///   [`p_command_buffers`]
/// - If [`p_command_buffers`] contains any [suspended render pass instances](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-suspension),
///   they **must** be resumed by a render pass instance later in submission order within
///   [`p_command_buffers`]
/// - If [`p_command_buffers`] contains any [suspended render pass instances](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-suspension),
///   there **must** be no action or synchronization commands between that render pass instance and
///   the render pass instance that resumes it
/// - If [`p_command_buffers`] contains any [suspended render pass instances](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-suspension),
///   there **must** be no render pass instances between that render pass instance and the render
///   pass instance that resumes it
/// -    If the [`variableSampleLocations`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#limits-variableSampleLocations) limit is not supported, and any element of [`p_command_buffers`] contains any [suspended render pass instances](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass-suspension), where a graphics pipeline has been bound, any pipelines bound in the render pass instance that resumes it, or any subsequent render pass instances that resume from that one and so on, **must** use the same sample locations
///Valid Usage (Implicit)
/// - [`s_type`]**must** be `VK_STRUCTURE_TYPE_SUBMIT_INFO`
/// - Each [`p_next`] member of any structure (including this one) in the [`p_next`] chain **must**
///   be either `NULL` or a pointer to a valid instance of [`D3D12FenceSubmitInfoKHR`],
///   [`DeviceGroupSubmitInfo`], [`PerformanceQuerySubmitInfoKHR`], [`ProtectedSubmitInfo`],
///   [`TimelineSemaphoreSubmitInfo`], [`Win32KeyedMutexAcquireReleaseInfoKHR`], or
///   [`Win32KeyedMutexAcquireReleaseInfoNV`]
/// - The [`s_type`] value of each struct in the [`p_next`] chain **must** be unique
/// - If [`wait_semaphore_count`] is not `0`, [`p_wait_semaphores`]**must** be a valid pointer to an
///   array of [`wait_semaphore_count`] valid [`Semaphore`] handles
/// - If [`wait_semaphore_count`] is not `0`, [`p_wait_dst_stage_mask`]**must** be a valid pointer
///   to an array of [`wait_semaphore_count`] valid combinations of [`PipelineStageFlagBits`] values
/// - Each element of [`p_wait_dst_stage_mask`]**must** not be `0`
/// - If [`command_buffer_count`] is not `0`, [`p_command_buffers`]**must** be a valid pointer to an
///   array of [`command_buffer_count`] valid [`CommandBuffer`] handles
/// - If [`signal_semaphore_count`] is not `0`, [`p_signal_semaphores`]**must** be a valid pointer
///   to an array of [`signal_semaphore_count`] valid [`Semaphore`] handles
/// - Each of the elements of [`p_command_buffers`], the elements of [`p_signal_semaphores`], and
///   the elements of [`p_wait_semaphores`] that are valid handles of non-ignored parameters
///   **must** have been created, allocated, or retrieved from the same [`Device`]
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandBuffer`]
/// - [`PipelineStageFlags`]
/// - [`Semaphore`]
/// - [`StructureType`]
/// - [`QueueSubmit`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[derive(Clone, Debug, Copy, Eq, Ord, PartialEq, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SubmitInfo<'lt> {
    _lifetime: PhantomData<&'lt ()>,
    ///[`s_type`] is the type of this structure.
    s_type: StructureType,
    ///[`p_next`] is `NULL` or a pointer to a structure extending this
    ///structure.
    p_next: *mut BaseInStructure<'lt>,
    ///[`wait_semaphore_count`] is the number of semaphores upon which to wait
    ///before executing the command buffers for the batch.
    wait_semaphore_count: u32,
    ///[`p_wait_semaphores`] is a pointer to an array of [`Semaphore`]
    ///handles upon which to wait before the command buffers for this batch
    ///begin execution.
    ///If semaphores to wait on are provided, they define a
    ///[semaphore wait operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-waiting).
    p_wait_semaphores: *mut Semaphore,
    ///[`p_wait_dst_stage_mask`] is a pointer to an array of pipeline stages at
    ///which each corresponding semaphore wait will occur.
    p_wait_dst_stage_mask: *mut PipelineStageFlags,
    ///[`command_buffer_count`] is the number of command buffers to execute in
    ///the batch.
    command_buffer_count: u32,
    ///[`p_command_buffers`] is a pointer to an array of [`CommandBuffer`]
    ///handles to execute in the batch.
    p_command_buffers: *mut CommandBuffer,
    ///[`signal_semaphore_count`] is the number of semaphores to be signaled
    ///once the commands specified in [`p_command_buffers`] have completed
    ///execution.
    signal_semaphore_count: u32,
    ///[`p_signal_semaphores`] is a pointer to an array of [`Semaphore`]
    ///handles which will be signaled when the command buffers for this batch
    ///have completed execution.
    ///If semaphores to be signaled are provided, they define a
    ///[semaphore signal operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-semaphores-signaling).
    p_signal_semaphores: *mut Semaphore,
}
