#[cfg(feature = "bytemuck")]
use bytemuck::{Pod, Zeroable};
#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};
///[VK_LOD_CLAMP_NONE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_LOD_CLAMP_NONE.html) - Maximum level of detail unclamped access sentinel
///# C Specifications
///[`LOD_CLAMP_NONE`] is a special constant value used for
///[`SamplerCreateInfo::max_lod`] to indicate that maximum LOD
///clamping should not be performed.
///```c
///#define VK_LOD_CLAMP_NONE                 1000.0F
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_LOD_CLAMP_NONE")]
pub const LOD_CLAMP_NONE: f32 = 1000.0;
///[VK_REMAINING_MIP_LEVELS](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_REMAINING_MIP_LEVELS.html) - Sentinel for all remaining mipmap levels
///# C Specifications
///[`REMAINING_MIP_LEVELS`] is a special constant value used for image
///views to indicate that all remaining mipmap levels in an image after the
///base level should be included in the view.
///```c
///#define VK_REMAINING_MIP_LEVELS           (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_REMAINING_MIP_LEVELS")]
pub const REMAINING_MIP_LEVELS: u32 = !0;
///[VK_REMAINING_ARRAY_LAYERS](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_REMAINING_ARRAY_LAYERS.html) - Sentinel for all remaining array layers
///# C Specifications
///[`REMAINING_ARRAY_LAYERS`] is a special constant value used for image
///views to indicate that all remaining array layers in an image after the base
///layer should be included in the view.
///```c
///#define VK_REMAINING_ARRAY_LAYERS         (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_REMAINING_ARRAY_LAYERS")]
pub const REMAINING_ARRAY_LAYERS: u32 = !0;
///[VK_WHOLE_SIZE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_WHOLE_SIZE.html) - Sentinel value to use entire remaining array length
///# C Specifications
///[`WHOLE_SIZE`] is a special value indicating that the entire remaining
///length of a buffer following a given `offset` should be used.
///It **can** be specified for [`BufferMemoryBarrier::size`] and other
///structures.
///```c
///#define VK_WHOLE_SIZE                     (~0ULL)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_WHOLE_SIZE")]
pub const WHOLE_SIZE: u64 = !0;
///[VK_ATTACHMENT_UNUSED](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_ATTACHMENT_UNUSED.html) - Unused attachment sentinel
///# C Specifications
///[`ATTACHMENT_UNUSED`] is a constant indicating that a render pass
///attachment is not used.
///```c
///#define VK_ATTACHMENT_UNUSED              (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_ATTACHMENT_UNUSED")]
pub const ATTACHMENT_UNUSED: u32 = !0;
///[VK_TRUE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_TRUE.html) - Boolean true value
///# C Specifications
///[`TRUE`] is a constant representing a [`Bool32`]**True** value.
///```c
///#define VK_TRUE                           1U
///```
///# Related
/// - [`FALSE`]
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_TRUE")]
pub const TRUE: u32 = 1;
///[VK_FALSE](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_FALSE.html) - Boolean false value
///# C Specifications
///[`FALSE`] is a constant representing a [`Bool32`]**False** value.
///```c
///#define VK_FALSE                          0U
///```
///# Related
/// - [`TRUE`]
/// - [`crate::vulkan1_0`]
/// - [`Bool32`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_FALSE")]
pub const FALSE: u32 = 0;
///[VK_QUEUE_FAMILY_IGNORED](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_QUEUE_FAMILY_IGNORED.html) - Ignored queue family index sentinel
///# C Specifications
///The special queue family index [`QUEUE_FAMILY_IGNORED`] indicates that
///a queue family parameter or member is ignored.
///```c
///#define VK_QUEUE_FAMILY_IGNORED           (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_QUEUE_FAMILY_IGNORED")]
pub const QUEUE_FAMILY_IGNORED: u32 = !0;
///[VK_SUBPASS_EXTERNAL](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_SUBPASS_EXTERNAL.html) - Subpass index sentinel expanding synchronization scope outside a subpass
///# C Specifications
///[`SUBPASS_EXTERNAL`] is a special subpass index value expanding
///synchronization scope outside a subpass.
///It is described in more detail by [`SubpassDependency`].
///```c
///#define VK_SUBPASS_EXTERNAL               (~0U)
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VK_SUBPASS_EXTERNAL")]
pub const SUBPASS_EXTERNAL: u32 = !0;
///[VkSampleMask](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSampleMask.html) - Mask of sample coverage information
///# C Specifications
///The elements of the sample mask array are of type [`SampleMask`],
///each representing 32 bits of coverage information:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint32_t VkSampleMask;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineMultisampleStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSampleMask")]
pub type SampleMask = u32;
///[VkBool32](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBool32.html) - Vulkan boolean type
///# C Specifications
///[`Bool32`] represents boolean `True` and `False` values, since C does
///not have a sufficiently portable built-in boolean type:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint32_t VkBool32;
///```
///# Related
/// - [`FALSE`]
/// - [`TRUE`]
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureGeometryInstancesDataKHR`]
/// - [`CommandBufferInheritanceConditionalRenderingInfoEXT`]
/// - [`CommandBufferInheritanceInfo`]
/// - [`CommandBufferInheritanceViewportScissorInfoNV`]
/// - [`DedicatedAllocationBufferCreateInfoNV`]
/// - [`DedicatedAllocationImageCreateInfoNV`]
/// - [`DescriptorSetLayoutSupport`]
/// - [`DisplayNativeHdrSurfaceCapabilitiesAMD`]
/// - [`DisplayPresentInfoKHR`]
/// - [`DisplayPropertiesKHR`]
/// - [`FilterCubicImageViewImageFormatPropertiesEXT`]
/// - [`IndirectCommandsLayoutTokenNV`]
/// - [`MemoryDedicatedRequirements`]
/// - [`MultiviewPerViewAttributesInfoNVX`]
/// - [`PerformanceOverrideInfoINTEL`]
/// - [`PerformanceValueDataINTEL`]
/// - [`PhysicalDevice16BitStorageFeatures`]
/// - [`PhysicalDevice4444FormatsFeaturesEXT`]
/// - [`PhysicalDevice8BitStorageFeatures`]
/// - [`PhysicalDeviceAstcDecodeFeaturesEXT`]
/// - [`PhysicalDeviceAccelerationStructureFeaturesKHR`]
/// - [`PhysicalDeviceBlendOperationAdvancedFeaturesEXT`]
/// - [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT`]
/// - [`PhysicalDeviceBorderColorSwizzleFeaturesEXT`]
/// - [`PhysicalDeviceBufferDeviceAddressFeatures`]
/// - [`PhysicalDeviceBufferDeviceAddressFeaturesEXT`]
/// - [`PhysicalDeviceCoherentMemoryFeaturesAMD`]
/// - [`PhysicalDeviceColorWriteEnableFeaturesEXT`]
/// - [`PhysicalDeviceComputeShaderDerivativesFeaturesNV`]
/// - [`PhysicalDeviceConditionalRenderingFeaturesEXT`]
/// - [`PhysicalDeviceConservativeRasterizationPropertiesEXT`]
/// - [`PhysicalDeviceCooperativeMatrixFeaturesNV`]
/// - [`PhysicalDeviceCornerSampledImageFeaturesNV`]
/// - [`PhysicalDeviceCoverageReductionModeFeaturesNV`]
/// - [`PhysicalDeviceCustomBorderColorFeaturesEXT`]
/// - [`PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV`]
/// - [`PhysicalDeviceDepthClipControlFeaturesEXT`]
/// - [`PhysicalDeviceDepthClipEnableFeaturesEXT`]
/// - [`PhysicalDeviceDepthStencilResolveProperties`]
/// - [`PhysicalDeviceDescriptorIndexingFeatures`]
/// - [`PhysicalDeviceDescriptorIndexingProperties`]
/// - [`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV`]
/// - [`PhysicalDeviceDeviceMemoryReportFeaturesEXT`]
/// - [`PhysicalDeviceDiagnosticsConfigFeaturesNV`]
/// - [`PhysicalDeviceDrmPropertiesEXT`]
/// - [`PhysicalDeviceDynamicRenderingFeatures`]
/// - [`PhysicalDeviceExclusiveScissorFeaturesNV`]
/// - [`PhysicalDeviceExtendedDynamicState2FeaturesEXT`]
/// - [`PhysicalDeviceExtendedDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceExternalMemoryRdmaFeaturesNV`]
/// - [`PhysicalDeviceFeatures`]
/// - [`PhysicalDeviceFloatControlsProperties`]
/// - [`PhysicalDeviceFragmentDensityMap2FeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMap2PropertiesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapFeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapPropertiesEXT`]
/// - [`PhysicalDeviceFragmentShaderBarycentricFeaturesNV`]
/// - [`PhysicalDeviceFragmentShaderInterlockFeaturesEXT`]
/// - [`PhysicalDeviceFragmentShadingRateEnumsFeaturesNV`]
/// - [`PhysicalDeviceFragmentShadingRateFeaturesKHR`]
/// - [`PhysicalDeviceFragmentShadingRatePropertiesKHR`]
/// - [`PhysicalDeviceGlobalPriorityQueryFeaturesKHR`]
/// - [`PhysicalDeviceGroupProperties`]
/// - [`PhysicalDeviceHostQueryResetFeatures`]
/// - [`PhysicalDeviceIdProperties`]
/// - [`PhysicalDeviceImageRobustnessFeatures`]
/// - [`PhysicalDeviceImageViewMinLodFeaturesEXT`]
/// - [`PhysicalDeviceImagelessFramebufferFeatures`]
/// - [`PhysicalDeviceIndexTypeUint8FeaturesEXT`]
/// - [`PhysicalDeviceInheritedViewportScissorFeaturesNV`]
/// - [`PhysicalDeviceInlineUniformBlockFeatures`]
/// - [`PhysicalDeviceInvocationMaskFeaturesHUAWEI`]
/// - [`PhysicalDeviceLimits`]
/// - [`PhysicalDeviceLineRasterizationFeaturesEXT`]
/// - [`PhysicalDeviceLinearColorAttachmentFeaturesNV`]
/// - [`PhysicalDeviceMaintenance4Features`]
/// - [`PhysicalDeviceMemoryPriorityFeaturesEXT`]
/// - [`PhysicalDeviceMeshShaderFeaturesNV`]
/// - [`PhysicalDeviceMultiDrawFeaturesEXT`]
/// - [`PhysicalDeviceMultiviewFeatures`]
/// - [`PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX`]
/// - [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE`]
/// - [`PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT`]
/// - [`PhysicalDevicePerformanceQueryFeaturesKHR`]
/// - [`PhysicalDevicePerformanceQueryPropertiesKHR`]
/// - [`PhysicalDevicePipelineCreationCacheControlFeatures`]
/// - [`PhysicalDevicePipelineExecutablePropertiesFeaturesKHR`]
/// - [`PhysicalDevicePortabilitySubsetFeaturesKHR`]
/// - [`PhysicalDevicePresentIdFeaturesKHR`]
/// - [`PhysicalDevicePresentWaitFeaturesKHR`]
/// - [`PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT`]
/// - [`PhysicalDevicePrivateDataFeatures`]
/// - [`PhysicalDeviceProtectedMemoryFeatures`]
/// - [`PhysicalDeviceProtectedMemoryProperties`]
/// - [`PhysicalDeviceProvokingVertexFeaturesEXT`]
/// - [`PhysicalDeviceProvokingVertexPropertiesEXT`]
/// - [`PhysicalDeviceRgba10X6FormatsFeaturesEXT`]
/// - [`PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM`]
/// - [`PhysicalDeviceRayQueryFeaturesKHR`]
/// - [`PhysicalDeviceRayTracingMotionBlurFeaturesNV`]
/// - [`PhysicalDeviceRayTracingPipelineFeaturesKHR`]
/// - [`PhysicalDeviceRepresentativeFragmentTestFeaturesNV`]
/// - [`PhysicalDeviceRobustness2FeaturesEXT`]
/// - [`PhysicalDeviceSampleLocationsPropertiesEXT`]
/// - [`PhysicalDeviceSamplerFilterMinmaxProperties`]
/// - [`PhysicalDeviceSamplerYcbcrConversionFeatures`]
/// - [`PhysicalDeviceScalarBlockLayoutFeatures`]
/// - [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`]
/// - [`PhysicalDeviceShaderAtomicFloat2FeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicFloatFeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicInt64Features`]
/// - [`PhysicalDeviceShaderClockFeaturesKHR`]
/// - [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`]
/// - [`PhysicalDeviceShaderDrawParametersFeatures`]
/// - [`PhysicalDeviceShaderFloat16Int8Features`]
/// - [`PhysicalDeviceShaderImageAtomicInt64FeaturesEXT`]
/// - [`PhysicalDeviceShaderImageFootprintFeaturesNV`]
/// - [`PhysicalDeviceShaderIntegerDotProductFeatures`]
/// - [`PhysicalDeviceShaderIntegerDotProductProperties`]
/// - [`PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL`]
/// - [`PhysicalDeviceShaderSmBuiltinsFeaturesNV`]
/// - [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`]
/// - [`PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR`]
/// - [`PhysicalDeviceShaderTerminateInvocationFeatures`]
/// - [`PhysicalDeviceShadingRateImageFeaturesNV`]
/// - [`PhysicalDeviceSparseProperties`]
/// - [`PhysicalDeviceSubgroupProperties`]
/// - [`PhysicalDeviceSubgroupSizeControlFeatures`]
/// - [`PhysicalDeviceSubpassShadingFeaturesHUAWEI`]
/// - [`PhysicalDeviceSynchronization2Features`]
/// - [`PhysicalDeviceTexelBufferAlignmentFeaturesEXT`]
/// - [`PhysicalDeviceTexelBufferAlignmentProperties`]
/// - [`PhysicalDeviceTextureCompressionAstchdrFeatures`]
/// - [`PhysicalDeviceTimelineSemaphoreFeatures`]
/// - [`PhysicalDeviceTransformFeedbackFeaturesEXT`]
/// - [`PhysicalDeviceTransformFeedbackPropertiesEXT`]
/// - [`PhysicalDeviceUniformBufferStandardLayoutFeatures`]
/// - [`PhysicalDeviceVariablePointersFeatures`]
/// - [`PhysicalDeviceVertexAttributeDivisorFeaturesEXT`]
/// - [`PhysicalDeviceVertexInputDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceVulkan11Features`]
/// - [`PhysicalDeviceVulkan11Properties`]
/// - [`PhysicalDeviceVulkan12Features`]
/// - [`PhysicalDeviceVulkan12Properties`]
/// - [`PhysicalDeviceVulkan13Features`]
/// - [`PhysicalDeviceVulkan13Properties`]
/// - [`PhysicalDeviceVulkanMemoryModelFeatures`]
/// - [`PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR`]
/// - [`PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT`]
/// - [`PhysicalDeviceYcbcrImageArraysFeaturesEXT`]
/// - [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`]
/// - [`PipelineColorBlendAdvancedStateCreateInfoEXT`]
/// - [`PipelineColorBlendAttachmentState`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`PipelineColorWriteCreateInfoEXT`]
/// - [`PipelineCoverageModulationStateCreateInfoNV`]
/// - [`PipelineCoverageToColorStateCreateInfoNV`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`PipelineExecutableInternalRepresentationKHR`]
/// - [`PipelineExecutableStatisticValueKHR`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`PipelineMultisampleStateCreateInfo`]
/// - [`PipelineRasterizationDepthClipStateCreateInfoEXT`]
/// - [`PipelineRasterizationLineStateCreateInfoEXT`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`PipelineRepresentativeFragmentTestStateCreateInfoNV`]
/// - [`PipelineSampleLocationsStateCreateInfoEXT`]
/// - [`PipelineViewportDepthClipControlCreateInfoEXT`]
/// - [`PipelineViewportShadingRateImageStateCreateInfoNV`]
/// - [`PipelineViewportWScalingStateCreateInfoNV`]
/// - [`ProtectedSubmitInfo`]
/// - [`QueueFamilyQueryResultStatusProperties2KHR`]
/// - [`SamplerBorderColorComponentMappingCreateInfoEXT`]
/// - [`SamplerCreateInfo`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`SurfaceCapabilitiesFullScreenExclusiveEXT`]
/// - [`SurfaceProtectedCapabilitiesKHR`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`SwapchainDisplayNativeHdrCreateInfoAMD`]
/// - [`TextureLodGatherFormatPropertiesAMD`]
/// - [`VideoEncodeH264EmitPictureParametersEXT`]
/// - [`VideoEncodeH264RateControlLayerInfoEXT`]
/// - [`VideoEncodeH265EmitPictureParametersEXT`]
/// - [`VideoEncodeH265RateControlLayerInfoEXT`]
/// - [`CmdBuildAccelerationStructureNV`]
/// - [`CmdExecuteGeneratedCommandsNV`]
/// - [`CmdSetColorWriteEnableEXT`]
/// - [`CmdSetDepthBiasEnable`]
/// - [`CmdSetDepthBiasEnableEXT`]
/// - [`CmdSetDepthBoundsTestEnable`]
/// - [`CmdSetDepthBoundsTestEnableEXT`]
/// - [`CmdSetDepthTestEnable`]
/// - [`CmdSetDepthTestEnableEXT`]
/// - [`CmdSetDepthWriteEnable`]
/// - [`CmdSetDepthWriteEnableEXT`]
/// - [`CmdSetPrimitiveRestartEnable`]
/// - [`CmdSetPrimitiveRestartEnableEXT`]
/// - [`CmdSetRasterizerDiscardEnable`]
/// - [`CmdSetRasterizerDiscardEnableEXT`]
/// - [`CmdSetStencilTestEnable`]
/// - [`CmdSetStencilTestEnableEXT`]
/// - [`GetPhysicalDeviceSurfaceSupportKHR`]
/// - [`SetLocalDimmingAMD`]
/// - [`WaitForFences`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBool32")]
pub type Bool32 = u32;
///[VkFlags](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFlags.html) - Vulkan bitmasks
///# C Specifications
///A collection of flags is represented by a bitmask using the type
///[`Flags`]:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint32_t VkFlags;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ColorComponentFlags`]
/// - [`Flags64`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFlags")]
pub type Flags = u32;
///[VkDeviceSize](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceSize.html) - Vulkan device memory size and offsets
///# C Specifications
///[`DeviceSize`] represents device memory size and offset values:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint64_t VkDeviceSize;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureBuildSizesInfoKHR`]
/// - [`AccelerationStructureCreateInfoKHR`]
/// - [`AccelerationStructureCreateInfoNV`]
/// - [`AccelerationStructureGeometryAabbsDataKHR`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`AndroidHardwareBufferPropertiesANDROID`]
/// - [`BindAccelerationStructureMemoryInfoNV`]
/// - [`BindBufferMemoryInfo`]
/// - [`BindImageMemoryInfo`]
/// - [`BufferCopy`]
/// - [`BufferCopy2`]
/// - [`BufferCreateInfo`]
/// - [`BufferImageCopy`]
/// - [`BufferImageCopy2`]
/// - [`BufferMemoryBarrier`]
/// - [`BufferMemoryBarrier2`]
/// - [`BufferViewCreateInfo`]
/// - [`ConditionalRenderingBeginInfoEXT`]
/// - [`DescriptorBufferInfo`]
/// - [`DeviceMemoryReportCallbackDataEXT`]
/// - [`GeneratedCommandsInfoNV`]
/// - [`GeometryAabbNV`]
/// - [`GeometryTrianglesNV`]
/// - [`ImageFormatProperties`]
/// - [`ImageViewAddressPropertiesNVX`]
/// - [`IndirectCommandsStreamNV`]
/// - [`MappedMemoryRange`]
/// - [`MemoryAllocateInfo`]
/// - [`MemoryHeap`]
/// - [`MemoryRequirements`]
/// - [`PhysicalDeviceExternalMemoryHostPropertiesEXT`]
/// - [`PhysicalDeviceLimits`]
/// - [`PhysicalDeviceMaintenance3Properties`]
/// - [`PhysicalDeviceMaintenance4Properties`]
/// - [`PhysicalDeviceMemoryBudgetPropertiesEXT`]
/// - [`PhysicalDeviceRobustness2PropertiesEXT`]
/// - [`PhysicalDeviceTexelBufferAlignmentProperties`]
/// - [`PhysicalDeviceTransformFeedbackPropertiesEXT`]
/// - [`PhysicalDeviceVulkan11Properties`]
/// - [`PhysicalDeviceVulkan13Properties`]
/// - [`SparseImageMemoryBind`]
/// - [`SparseImageMemoryRequirements`]
/// - [`SparseMemoryBind`]
/// - [`StridedDeviceAddressRegionKHR`]
/// - [`SubresourceLayout`]
/// - [`VideoBindMemoryKHR`]
/// - [`VideoCapabilitiesKHR`]
/// - [`VideoDecodeInfoKHR`]
/// - [`VideoEncodeInfoKHR`]
/// - [`BindBufferMemory`]
/// - [`BindImageMemory`]
/// - [`CmdBeginTransformFeedbackEXT`]
/// - [`CmdBindIndexBuffer`]
/// - [`CmdBindTransformFeedbackBuffersEXT`]
/// - [`CmdBindVertexBuffers`]
/// - [`CmdBindVertexBuffers2`]
/// - [`CmdBindVertexBuffers2EXT`]
/// - [`CmdBuildAccelerationStructureNV`]
/// - [`CmdCopyQueryPoolResults`]
/// - [`CmdDispatchIndirect`]
/// - [`CmdDrawIndexedIndirect`]
/// - [`CmdDrawIndexedIndirectCount`]
/// - [`CmdDrawIndexedIndirectCountAMD`]
/// - [`CmdDrawIndexedIndirectCountKHR`]
/// - [`CmdDrawIndirect`]
/// - [`CmdDrawIndirectByteCountEXT`]
/// - [`CmdDrawIndirectCount`]
/// - [`CmdDrawIndirectCountAMD`]
/// - [`CmdDrawIndirectCountKHR`]
/// - [`CmdDrawMeshTasksIndirectCountNV`]
/// - [`CmdDrawMeshTasksIndirectNV`]
/// - [`CmdEndTransformFeedbackEXT`]
/// - [`CmdFillBuffer`]
/// - [`CmdTraceRaysNV`]
/// - [`CmdUpdateBuffer`]
/// - [`CmdWriteBufferMarker2AMD`]
/// - [`CmdWriteBufferMarkerAMD`]
/// - [`GetDeviceMemoryCommitment`]
/// - [`GetQueryPoolResults`]
/// - [`MapMemory`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDeviceSize")]
pub type DeviceSize = u64;
///[VkDeviceAddress](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceAddress.html) - Vulkan device address type
///# C Specifications
///[`DeviceAddress`] represents device buffer address values:
///```c
///// Provided by VK_VERSION_1_0
///typedef uint64_t VkDeviceAddress;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureCreateInfoKHR`]
/// - [`BindIndexBufferIndirectCommandNV`]
/// - [`BindVertexBufferIndirectCommandNV`]
/// - [`BufferDeviceAddressCreateInfoEXT`]
/// - [`DeviceOrHostAddressConstKHR`]
/// - [`DeviceOrHostAddressKHR`]
/// - [`ImageViewAddressPropertiesNVX`]
/// - [`StridedDeviceAddressRegionKHR`]
/// - [`CmdBuildAccelerationStructuresIndirectKHR`]
/// - [`CmdTraceRaysIndirectKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDeviceAddress")]
pub type DeviceAddress = u64;
///[VkImageLayout](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageLayout.html) - Layout of image and image subresources
///# C Specifications
///The set of image layouts consists of:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageLayout {
///    VK_IMAGE_LAYOUT_UNDEFINED = 0,
///    VK_IMAGE_LAYOUT_GENERAL = 1,
///    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
///    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
///    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
///    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
///    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
///    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
///    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
///  // Provided by VK_VERSION_1_1
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
///  // Provided by VK_VERSION_1_1
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
///  // Provided by VK_VERSION_1_2
///    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
///  // Provided by VK_VERSION_1_3
///    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
///  // Provided by VK_VERSION_1_3
///    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
///  // Provided by VK_KHR_swapchain
///    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
///#endif
///  // Provided by VK_KHR_shared_presentable_image
///    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
///  // Provided by VK_EXT_fragment_density_map
///    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002,
///#endif
///  // Provided by VK_KHR_maintenance2
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR =
/// VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
///  // Provided by VK_KHR_maintenance2
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR =
/// VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
///  // Provided by VK_NV_shading_rate_image
///    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV =
/// VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
///  // Provided by VK_KHR_synchronization2
///    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
///  // Provided by VK_KHR_synchronization2
///    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
///} VkImageLayout;
///```
///# Description
///The type(s) of device access supported by each layout are:
/// - [`IMAGE_LAYOUT_UNDEFINED`] specifies that the layout is unknown.
///Image memory **cannot** be transitioned into this layout.
///This layout **can** be used as the `initialLayout` member of
///[`ImageCreateInfo`].
///This layout **can** be used in place of the current image layout in a
///layout transition, but doing so will cause the contents of the image’s
///memory to be undefined.
/// - [`IMAGE_LAYOUT_PREINITIALIZED`] specifies that an image’s memory is
///in a defined layout and **can** be populated by data, but that it has not
///yet been initialized by the driver.
///Image memory **cannot** be transitioned into this layout.
///This layout **can** be used as the `initialLayout` member of
///[`ImageCreateInfo`].
///This layout is intended to be used as the initial layout for an image
///whose contents are written by the host, and hence the data **can** be
///written to memory immediately, without first executing a layout
///transition.
///Currently, [`IMAGE_LAYOUT_PREINITIALIZED`] is only useful with
///[linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource) images because there is not a
///standard layout defined for `VK_IMAGE_TILING_OPTIMAL` images.
/// - [`IMAGE_LAYOUT_GENERAL`] supports all types of device access.
/// - [`IMAGE_LAYOUT_ATTACHMENT_OPTIMAL`] specifies a layout that **must**
///only be used with attachment accesses in the graphics pipeline.
/// - [`IMAGE_LAYOUT_READ_ONLY_OPTIMAL`] specifies a layout allowing read
///only access as an attachment, or in shaders as a sampled image, combined
///image/sampler, or input attachment.
/// - [`IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL`]**must** only be used as a
///color or resolve attachment in a [`Framebuffer`].
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT` usage bit enabled.
/// - [`IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL`] specifies a
///layout for both the depth and stencil aspects of a depth/stencil format
///image allowing read and write access as a depth/stencil attachment.
///It is equivalent to [`IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`] and
///[`IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`].
/// - [`IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`] specifies a layout
///for both the depth and stencil aspects of a depth/stencil format image
///allowing read only access as a depth/stencil attachment or in shaders as
///a sampled image, combined image/sampler, or input attachment.
///It is equivalent to [`IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`] and
///[`IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`].
/// - [`IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL`]
///specifies a layout for depth/stencil format images allowing read and
///write access to the stencil aspect as a stencil attachment, and read
///only access to the depth aspect as a depth attachment or in shaders as a
///sampled image, combined image/sampler, or input attachment.
///It is equivalent to [`IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`] and
///[`IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`].
/// - [`IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL`]
///specifies a layout for depth/stencil format images allowing read and
///write access to the depth aspect as a depth attachment, and read only
///access to the stencil aspect as a stencil attachment or in shaders as a
///sampled image, combined image/sampler, or input attachment.
///It is equivalent to [`IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`] and
///[`IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`].
/// - [`IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`] specifies a layout for
///the depth aspect of a depth/stencil format image allowing read and write
///access as a depth attachment.
/// - [`IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`] specifies a layout for the
///depth aspect of a depth/stencil format image allowing read-only access
///as a depth attachment or in shaders as a sampled image, combined
///image/sampler, or input attachment.
/// - [`IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`] specifies a layout for
///the stencil aspect of a depth/stencil format image allowing read and
///write access as a stencil attachment.
/// - [`IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`] specifies a layout for
///the stencil aspect of a depth/stencil format image allowing read-only
///access as a stencil attachment or in shaders as a sampled image,
///combined image/sampler, or input attachment.
/// - [`IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL`] specifies a layout
///allowing read-only access in a shader as a sampled image, combined
///image/sampler, or input attachment.
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_SAMPLED_BIT` or
///`VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT` usage bits enabled.
/// - [`IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL`]**must** only be used as a
///source image of a transfer command (see the definition of
///[`VK_PIPELINE_STAGE_TRANSFER_BIT`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-transfer)).
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_TRANSFER_SRC_BIT` usage bit enabled.
/// - [`IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL`]**must** only be used as a
///destination image of a transfer command.
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_TRANSFER_DST_BIT` usage bit enabled.
/// - [`IMAGE_LAYOUT_PRESENT_SRC_KHR`]**must** only be used for presenting
///a presentable image for display.
///A swapchain’s image **must** be transitioned to this layout before calling
///[`QueuePresentKHR`], and **must** be transitioned away from this layout
///after calling [`AcquireNextImageKHR`].
/// - [`IMAGE_LAYOUT_SHARED_PRESENT_KHR`] is valid only for shared
///presentable images, and **must** be used for any usage the image supports.
/// - [`IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR`]**must**
///    only be used as a
///    [fragment shading rate
///    attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)
///or
///    [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-shading-rate-image).
///    This layout is valid only for image subresources of images created with
///    the `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR` usage
///    bit enabled.
/// - [`IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT`]**must** only be
///used as a fragment density map attachment in a [`RenderPass`].
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT` usage bit enabled.
/// - [`IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR`]**must** only be used as a
///decode output image of a [video decode
///operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR` usage bit enabled.
/// - [`IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR`] is reserved for future use.
/// - [`IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR`]**must** only be used as a
///decode source or destination image of a [video
///decode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR` usage bit enabled.
/// - [`IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR`] is reserved for future use.
/// - [`IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR`]**must** only be used as a
///encode source image of a [video encode
///operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR` usage bit enabled.
/// - [`IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR`]**must** only be used as a
///encode source or destination image of a [video
///encode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
///This layout is valid only for image subresources of images created with
///the `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR` usage bit enabled.The layout of each image
/// subresource is not a state of the image subresource
///itself, but is rather a property of how the data in memory is organized, and
///thus for each mechanism of accessing an image in the API the application
///**must** specify a parameter or structure member that indicates which image
///layout the image subresource(s) are considered to be in when the image will
///be accessed.
///For transfer commands, this is a parameter to the command (see [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#clears](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#clears)
///and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#copies](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#copies)).
///For use as a framebuffer attachment, this is a member in the substructures
///of the [`RenderPassCreateInfo`] (see [Render Pass](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#renderpass)).
///For use in a descriptor set, this is a member in the
///[`DescriptorImageInfo`] structure (see [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-updates)).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`AttachmentDescriptionStencilLayout`]
/// - [`AttachmentReference`]
/// - [`AttachmentReference2`]
/// - [`AttachmentReferenceStencilLayout`]
/// - [`BlitImageInfo2`]
/// - [`CopyBufferToImageInfo2`]
/// - [`CopyImageInfo2`]
/// - [`CopyImageToBufferInfo2`]
/// - [`DescriptorImageInfo`]
/// - [`ImageCreateInfo`]
/// - [`ImageMemoryBarrier`]
/// - [`ImageMemoryBarrier2`]
/// - [`RenderingAttachmentInfo`]
/// - [`RenderingFragmentDensityMapAttachmentInfoEXT`]
/// - [`RenderingFragmentShadingRateAttachmentInfoKHR`]
/// - [`ResolveImageInfo2`]
/// - [`CmdBindInvocationMaskHUAWEI`]
/// - [`CmdBindShadingRateImageNV`]
/// - [`CmdBlitImage`]
/// - [`CmdClearColorImage`]
/// - [`CmdClearDepthStencilImage`]
/// - [`CmdCopyBufferToImage`]
/// - [`CmdCopyImage`]
/// - [`CmdCopyImageToBuffer`]
/// - [`CmdResolveImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageLayout")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageLayout(i32);
impl const Default for ImageLayout {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for ImageLayout {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("ImageLayout")
            .field(match *self {
                Self::IMAGE_LAYOUT_UNDEFINED => &"IMAGE_LAYOUT_UNDEFINED",
                Self::IMAGE_LAYOUT_GENERAL => &"IMAGE_LAYOUT_GENERAL",
                Self::IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL => &"IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
                Self::IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL => &"IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
                Self::IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL => &"IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
                Self::IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL => &"IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
                Self::IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL => &"IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
                Self::IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL => &"IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
                Self::IMAGE_LAYOUT_PREINITIALIZED => &"IMAGE_LAYOUT_PREINITIALIZED",
                Self::IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL => {
                    &"IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL"
                },
                Self::IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL => {
                    &"IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"
                },
                Self::IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL => &"IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL",
                Self::IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL => &"IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",
                Self::IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL => &"IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",
                Self::IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL => &"IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",
                Self::IMAGE_LAYOUT_READ_ONLY_OPTIMAL => &"IMAGE_LAYOUT_READ_ONLY_OPTIMAL",
                Self::IMAGE_LAYOUT_ATTACHMENT_OPTIMAL => &"IMAGE_LAYOUT_ATTACHMENT_OPTIMAL",
                Self::IMAGE_LAYOUT_PRESENT_SRC_KHR => &"IMAGE_LAYOUT_PRESENT_SRC_KHR",
                Self::IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR => &"IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR",
                Self::IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR => &"IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR",
                Self::IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR => &"IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR",
                Self::IMAGE_LAYOUT_SHARED_PRESENT_KHR => &"IMAGE_LAYOUT_SHARED_PRESENT_KHR",
                Self::IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT => &"IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT",
                Self::IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR => {
                    &"IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"
                },
                Self::IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR => &"IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR",
                Self::IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR => &"IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR",
                Self::IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR => &"IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR",
                other => unreachable!("invalid value for `ImageLayout`: {:?}", other),
            })
            .finish()
    }
}
impl ImageLayout {
    ///[`IMAGE_LAYOUT_UNDEFINED`] specifies that the layout is unknown.
    ///Image memory **cannot** be transitioned into this layout.
    ///This layout **can** be used as the `initialLayout` member of
    ///[`ImageCreateInfo`].
    ///This layout **can** be used in place of the current image layout in a
    ///layout transition, but doing so will cause the contents of the image’s
    ///memory to be undefined.
    pub const IMAGE_LAYOUT_UNDEFINED: Self = Self(0);
    ///[`IMAGE_LAYOUT_GENERAL`] supports all types of device access.
    pub const IMAGE_LAYOUT_GENERAL: Self = Self(1);
    ///[`IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL`]**must** only be used as a
    ///color or resolve attachment in a [`Framebuffer`].
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT` usage bit enabled.
    pub const IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: Self = Self(2);
    ///[`IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL`] specifies a
    ///layout for both the depth and stencil aspects of a depth/stencil format
    ///image allowing read and write access as a depth/stencil attachment.
    ///It is equivalent to [`IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`] and
    ///[`IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`].
    pub const IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: Self = Self(3);
    ///[`IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`] specifies a layout
    ///for both the depth and stencil aspects of a depth/stencil format image
    ///allowing read only access as a depth/stencil attachment or in shaders as
    ///a sampled image, combined image/sampler, or input attachment.
    ///It is equivalent to [`IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`] and
    ///[`IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`].
    pub const IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: Self = Self(4);
    ///[`IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL`] specifies a layout
    ///allowing read-only access in a shader as a sampled image, combined
    ///image/sampler, or input attachment.
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_SAMPLED_BIT` or
    ///`VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT` usage bits enabled.
    pub const IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: Self = Self(5);
    ///[`IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL`]**must** only be used as a
    ///source image of a transfer command (see the definition of
    ///[`VK_PIPELINE_STAGE_TRANSFER_BIT`](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-transfer)).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_TRANSFER_SRC_BIT` usage bit enabled.
    pub const IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: Self = Self(6);
    ///[`IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL`]**must** only be used as a
    ///destination image of a transfer command.
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_TRANSFER_DST_BIT` usage bit enabled.
    pub const IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: Self = Self(7);
    ///[`IMAGE_LAYOUT_PREINITIALIZED`] specifies that an image’s memory is
    ///in a defined layout and **can** be populated by data, but that it has not
    ///yet been initialized by the driver.
    ///Image memory **cannot** be transitioned into this layout.
    ///This layout **can** be used as the `initialLayout` member of
    ///[`ImageCreateInfo`].
    ///This layout is intended to be used as the initial layout for an image
    ///whose contents are written by the host, and hence the data **can** be
    ///written to memory immediately, without first executing a layout
    ///transition.
    ///Currently, [`IMAGE_LAYOUT_PREINITIALIZED`] is only useful with
    ///[linear](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-linear-resource) images because there is not a
    ///standard layout defined for `VK_IMAGE_TILING_OPTIMAL` images.
    pub const IMAGE_LAYOUT_PREINITIALIZED: Self = Self(8);
    ///[`IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL`]
    ///specifies a layout for depth/stencil format images allowing read and
    ///write access to the stencil aspect as a stencil attachment, and read
    ///only access to the depth aspect as a depth attachment or in shaders as a
    ///sampled image, combined image/sampler, or input attachment.
    ///It is equivalent to [`IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`] and
    ///[`IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`].
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: Self = Self(1000117000);
    ///[`IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL`]
    ///specifies a layout for depth/stencil format images allowing read and
    ///write access to the depth aspect as a depth attachment, and read only
    ///access to the stencil aspect as a stencil attachment or in shaders as a
    ///sampled image, combined image/sampler, or input attachment.
    ///It is equivalent to [`IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`] and
    ///[`IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`].
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: Self = Self(1000117001);
    ///[`IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL`] specifies a layout for
    ///the depth aspect of a depth/stencil format image allowing read and write
    ///access as a depth attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: Self = Self(1000241000);
    ///[`IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL`] specifies a layout for the
    ///depth aspect of a depth/stencil format image allowing read-only access
    ///as a depth attachment or in shaders as a sampled image, combined
    ///image/sampler, or input attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: Self = Self(1000241001);
    ///[`IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL`] specifies a layout for
    ///the stencil aspect of a depth/stencil format image allowing read and
    ///write access as a stencil attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: Self = Self(1000241002);
    ///[`IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL`] specifies a layout for
    ///the stencil aspect of a depth/stencil format image allowing read-only
    ///access as a stencil attachment or in shaders as a sampled image,
    ///combined image/sampler, or input attachment.
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: Self = Self(1000241003);
    ///[`IMAGE_LAYOUT_READ_ONLY_OPTIMAL`] specifies a layout allowing read
    ///only access as an attachment, or in shaders as a sampled image, combined
    ///image/sampler, or input attachment.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const IMAGE_LAYOUT_READ_ONLY_OPTIMAL: Self = Self(1000314000);
    ///[`IMAGE_LAYOUT_ATTACHMENT_OPTIMAL`] specifies a layout that **must**
    ///only be used with attachment accesses in the graphics pipeline.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: Self = Self(1000314001);
    ///[`IMAGE_LAYOUT_PRESENT_SRC_KHR`]**must** only be used for presenting
    ///a presentable image for display.
    ///A swapchain’s image **must** be transitioned to this layout before calling
    ///[`QueuePresentKHR`], and **must** be transitioned away from this layout
    ///after calling [`AcquireNextImageKHR`].
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    pub const IMAGE_LAYOUT_PRESENT_SRC_KHR: Self = Self(1000001002);
    ///[`IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR`]**must** only be used as a
    ///decode output image of a [video decode
    ///operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    pub const IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR: Self = Self(1000024000);
    ///[`IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR`] is reserved for future use.
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    pub const IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR: Self = Self(1000024001);
    ///[`IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR`]**must** only be used as a
    ///decode source or destination image of a [video
    ///decode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-decode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    pub const IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR: Self = Self(1000024002);
    ///[`IMAGE_LAYOUT_SHARED_PRESENT_KHR`] is valid only for shared
    ///presentable images, and **must** be used for any usage the image supports.
    ///
    ///Provided by [`crate::extensions::khr_shared_presentable_image`]
    pub const IMAGE_LAYOUT_SHARED_PRESENT_KHR: Self = Self(1000111000);
    ///[`IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT`]**must** only be
    ///used as a fragment density map attachment in a [`RenderPass`].
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    pub const IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: Self = Self(1000218000);
    ///[`IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR`]**must**
    ///    only be used as a
    ///    [fragment shading rate
    ///    attachment](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-fragment-shading-rate-attachment)
    ///or
    ///    [shading rate image](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-shading-rate-image).
    ///    This layout is valid only for image subresources of images created with
    ///    the `VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR` usage
    ///    bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: Self = Self(1000164003);
    ///[`IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR`] is reserved for future use.
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR: Self = Self(1000299000);
    ///[`IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR`]**must** only be used as a
    ///encode source image of a [video encode
    ///operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR: Self = Self(1000299001);
    ///[`IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR`]**must** only be used as a
    ///encode source or destination image of a [video
    ///encode operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#video-encode-operations).
    ///This layout is valid only for image subresources of images created with
    ///the `VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR` usage bit enabled.
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR: Self = Self(1000299002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_2`]
    pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: Self =
        Self::IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_2`]
    pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: Self =
        Self::IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: Self =
        Self::IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: Self = Self::IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: Self = Self::IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: Self = Self::IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: Self = Self::IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: Self = Self::IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: Self = Self::IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkAttachmentLoadOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentLoadOp.html) - Specify how contents of an attachment are treated at the beginning of a subpass
///# C Specifications
///Possible values of [`AttachmentDescription::load_op`] and
///`stencilLoadOp`, specifying how the contents of the attachment are
///treated, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkAttachmentLoadOp {
///    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
///    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
///    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
///  // Provided by VK_EXT_load_store_op_none
///    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
///} VkAttachmentLoadOp;
///```
///# Description
/// - [`ATTACHMENT_LOAD_OP_LOAD`] specifies that the previous contents of
///the image within the render area will be preserved.
///For attachments with a depth/stencil format, this uses the access type
///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT`.
///For attachments with a color format, this uses the access type
///`VK_ACCESS_COLOR_ATTACHMENT_READ_BIT`.
/// - [`ATTACHMENT_LOAD_OP_CLEAR`] specifies that the contents within the
///render area will be cleared to a uniform value, which is specified when
///a render pass instance is begun.
///For attachments with a depth/stencil format, this uses the access type
///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
///For attachments with a color format, this uses the access type
///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`ATTACHMENT_LOAD_OP_DONT_CARE`] specifies that the previous
///contents within the area need not be preserved; the contents of the
///attachment will be undefined inside the render area.
///For attachments with a depth/stencil format, this uses the access type
///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
///For attachments with a color format, this uses the access type
///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`ATTACHMENT_LOAD_OP_NONE_EXT`] specifies that the previous
///contents of the image within the render area will be preserved, but the
///contents of the attachment will be undefined inside the render pass.
///No access type is used as the image is not accessed.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`RenderingAttachmentInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkAttachmentLoadOp")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct AttachmentLoadOp(i32);
impl const Default for AttachmentLoadOp {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for AttachmentLoadOp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("AttachmentLoadOp")
            .field(match *self {
                Self::ATTACHMENT_LOAD_OP_LOAD => &"ATTACHMENT_LOAD_OP_LOAD",
                Self::ATTACHMENT_LOAD_OP_CLEAR => &"ATTACHMENT_LOAD_OP_CLEAR",
                Self::ATTACHMENT_LOAD_OP_DONT_CARE => &"ATTACHMENT_LOAD_OP_DONT_CARE",
                Self::ATTACHMENT_LOAD_OP_NONE_EXT => &"ATTACHMENT_LOAD_OP_NONE_EXT",
                other => unreachable!("invalid value for `AttachmentLoadOp`: {:?}", other),
            })
            .finish()
    }
}
impl AttachmentLoadOp {
    ///[`ATTACHMENT_LOAD_OP_LOAD`] specifies that the previous contents of
    ///the image within the render area will be preserved.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_READ_BIT`.
    pub const ATTACHMENT_LOAD_OP_LOAD: Self = Self(0);
    ///[`ATTACHMENT_LOAD_OP_CLEAR`] specifies that the contents within the
    ///render area will be cleared to a uniform value, which is specified when
    ///a render pass instance is begun.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    pub const ATTACHMENT_LOAD_OP_CLEAR: Self = Self(1);
    ///[`ATTACHMENT_LOAD_OP_DONT_CARE`] specifies that the previous
    ///contents within the area need not be preserved; the contents of the
    ///attachment will be undefined inside the render area.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    pub const ATTACHMENT_LOAD_OP_DONT_CARE: Self = Self(2);
    ///[`ATTACHMENT_LOAD_OP_NONE_EXT`] specifies that the previous
    ///contents of the image within the render area will be preserved, but the
    ///contents of the attachment will be undefined inside the render pass.
    ///No access type is used as the image is not accessed.
    ///
    ///Provided by [`crate::extensions::ext_load_store_op_none`]
    pub const ATTACHMENT_LOAD_OP_NONE_EXT: Self = Self(1000400000);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkAttachmentStoreOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentStoreOp.html) - Specify how contents of an attachment are treated at the end of a subpass
///# C Specifications
///Possible values of [`AttachmentDescription::store_op`] and
///`stencilStoreOp`, specifying how the contents of the attachment are
///treated, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkAttachmentStoreOp {
///    VK_ATTACHMENT_STORE_OP_STORE = 0,
///    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
///  // Provided by VK_VERSION_1_3
///    VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,
///  // Provided by VK_QCOM_render_pass_store_ops
///    VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,
///  // Provided by VK_EXT_load_store_op_none
///    VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,
///} VkAttachmentStoreOp;
///```
///# Description
/// - [`ATTACHMENT_STORE_OP_STORE`] specifies the contents generated
///during the render pass and within the render area are written to memory.
///For attachments with a depth/stencil format, this uses the access type
///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
///For attachments with a color format, this uses the access type
///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`ATTACHMENT_STORE_OP_DONT_CARE`] specifies the contents within the
///render area are not needed after rendering, and **may** be discarded; the
///contents of the attachment will be undefined inside the render area.
///For attachments with a depth/stencil format, this uses the access type
///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
///For attachments with a color format, this uses the access type
///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
/// - [`ATTACHMENT_STORE_OP_NONE`] specifies the contents within the
///render area are not accessed by the store operation.
///However, if the attachment was written to during the render pass, the
///contents of the attachment will be undefined inside the render area.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`RenderingAttachmentInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkAttachmentStoreOp")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct AttachmentStoreOp(i32);
impl const Default for AttachmentStoreOp {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for AttachmentStoreOp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("AttachmentStoreOp")
            .field(match *self {
                Self::ATTACHMENT_STORE_OP_STORE => &"ATTACHMENT_STORE_OP_STORE",
                Self::ATTACHMENT_STORE_OP_DONT_CARE => &"ATTACHMENT_STORE_OP_DONT_CARE",
                Self::ATTACHMENT_STORE_OP_NONE => &"ATTACHMENT_STORE_OP_NONE",
                other => unreachable!("invalid value for `AttachmentStoreOp`: {:?}", other),
            })
            .finish()
    }
}
impl AttachmentStoreOp {
    ///[`ATTACHMENT_STORE_OP_STORE`] specifies the contents generated
    ///during the render pass and within the render area are written to memory.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    pub const ATTACHMENT_STORE_OP_STORE: Self = Self(0);
    ///[`ATTACHMENT_STORE_OP_DONT_CARE`] specifies the contents within the
    ///render area are not needed after rendering, and **may** be discarded; the
    ///contents of the attachment will be undefined inside the render area.
    ///For attachments with a depth/stencil format, this uses the access type
    ///`VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT`.
    ///For attachments with a color format, this uses the access type
    ///`VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT`.
    pub const ATTACHMENT_STORE_OP_DONT_CARE: Self = Self(1);
    ///[`ATTACHMENT_STORE_OP_NONE`] specifies the contents within the
    ///render area are not accessed by the store operation.
    ///However, if the attachment was written to during the render pass, the
    ///contents of the attachment will be undefined inside the render area.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const ATTACHMENT_STORE_OP_NONE: Self = Self(1000301000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const ATTACHMENT_STORE_OP_NONE_KHR: Self = Self::ATTACHMENT_STORE_OP_NONE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_render_pass_store_ops`]
    pub const ATTACHMENT_STORE_OP_NONE_QCOM: Self = Self::ATTACHMENT_STORE_OP_NONE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_load_store_op_none`]
    pub const ATTACHMENT_STORE_OP_NONE_EXT: Self = Self::ATTACHMENT_STORE_OP_NONE;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkImageType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageType.html) - Specifies the type of an image object
///# C Specifications
///Possible values of [`ImageCreateInfo::image_type`], specifying the
///basic dimensionality of an image, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageType {
///    VK_IMAGE_TYPE_1D = 0,
///    VK_IMAGE_TYPE_2D = 1,
///    VK_IMAGE_TYPE_3D = 2,
///} VkImageType;
///```
///# Description
/// - [`IMAGE_TYPE_1D`] specifies a one-dimensional image.
/// - [`IMAGE_TYPE_2D`] specifies a two-dimensional image.
/// - [`IMAGE_TYPE_3D`] specifies a three-dimensional image.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageCreateInfo`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`GetPhysicalDeviceExternalImageFormatPropertiesNV`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageType(i32);
impl const Default for ImageType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for ImageType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("ImageType")
            .field(match *self {
                Self::IMAGE_TYPE_1D => &"IMAGE_TYPE_1D",
                Self::IMAGE_TYPE_2D => &"IMAGE_TYPE_2D",
                Self::IMAGE_TYPE_3D => &"IMAGE_TYPE_3D",
                other => unreachable!("invalid value for `ImageType`: {:?}", other),
            })
            .finish()
    }
}
impl ImageType {
    ///[`IMAGE_TYPE_1D`] specifies a one-dimensional image.
    pub const IMAGE_TYPE_1D: Self = Self(0);
    ///[`IMAGE_TYPE_2D`] specifies a two-dimensional image.
    pub const IMAGE_TYPE_2D: Self = Self(1);
    ///[`IMAGE_TYPE_3D`] specifies a three-dimensional image.
    pub const IMAGE_TYPE_3D: Self = Self(2);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkImageTiling](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageTiling.html) - Specifies the tiling arrangement of data in an image
///# C Specifications
///Possible values of [`ImageCreateInfo::tiling`], specifying the
///tiling arrangement of texel blocks in an image, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageTiling {
///    VK_IMAGE_TILING_OPTIMAL = 0,
///    VK_IMAGE_TILING_LINEAR = 1,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
///} VkImageTiling;
///```
///# Description
/// - [`IMAGE_TILING_OPTIMAL`] specifies optimal tiling (texels are laid
///out in an implementation-dependent arrangement, for more efficient
///memory access).
/// - [`IMAGE_TILING_LINEAR`] specifies linear tiling (texels are laid
///out in memory in row-major order, possibly with some padding on each
///row).
/// - [`IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`] indicates that the image’s
///tiling is defined by a [Linux DRM format
///modifier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-drm-format-modifier).
///The modifier is specified at image creation with
///[`ImageDrmFormatModifierListCreateInfoEXT`] or
///[`ImageDrmFormatModifierExplicitCreateInfoEXT`], and **can** be queried
///with [`GetImageDrmFormatModifierPropertiesEXT`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageCreateInfo`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`GetPhysicalDeviceExternalImageFormatPropertiesNV`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageTiling")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageTiling(i32);
impl const Default for ImageTiling {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for ImageTiling {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("ImageTiling")
            .field(match *self {
                Self::IMAGE_TILING_OPTIMAL => &"IMAGE_TILING_OPTIMAL",
                Self::IMAGE_TILING_LINEAR => &"IMAGE_TILING_LINEAR",
                Self::IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT => &"IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT",
                other => unreachable!("invalid value for `ImageTiling`: {:?}", other),
            })
            .finish()
    }
}
impl ImageTiling {
    ///[`IMAGE_TILING_OPTIMAL`] specifies optimal tiling (texels are laid
    ///out in an implementation-dependent arrangement, for more efficient
    ///memory access).
    pub const IMAGE_TILING_OPTIMAL: Self = Self(0);
    ///[`IMAGE_TILING_LINEAR`] specifies linear tiling (texels are laid
    ///out in memory in row-major order, possibly with some padding on each
    ///row).
    pub const IMAGE_TILING_LINEAR: Self = Self(1);
    ///[`IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT`] indicates that the image’s
    ///tiling is defined by a [Linux DRM format
    ///modifier](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#glossary-drm-format-modifier).
    ///The modifier is specified at image creation with
    ///[`ImageDrmFormatModifierListCreateInfoEXT`] or
    ///[`ImageDrmFormatModifierExplicitCreateInfoEXT`], and **can** be queried
    ///with [`GetImageDrmFormatModifierPropertiesEXT`].
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: Self = Self(1000158000);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkImageViewType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageViewType.html) - Image view types
///# C Specifications
///The types of image views that **can** be created are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkImageViewType {
///    VK_IMAGE_VIEW_TYPE_1D = 0,
///    VK_IMAGE_VIEW_TYPE_2D = 1,
///    VK_IMAGE_VIEW_TYPE_3D = 2,
///    VK_IMAGE_VIEW_TYPE_CUBE = 3,
///    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
///    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
///    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
///} VkImageViewType;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ImageViewCreateInfo`]
/// - [`PhysicalDeviceImageViewImageFormatInfoEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkImageViewType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ImageViewType(i32);
impl const Default for ImageViewType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for ImageViewType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("ImageViewType")
            .field(match *self {
                Self::IMAGE_VIEW_TYPE_1D => &"IMAGE_VIEW_TYPE_1D",
                Self::IMAGE_VIEW_TYPE_2D => &"IMAGE_VIEW_TYPE_2D",
                Self::IMAGE_VIEW_TYPE_3D => &"IMAGE_VIEW_TYPE_3D",
                Self::IMAGE_VIEW_TYPE_CUBE => &"IMAGE_VIEW_TYPE_CUBE",
                Self::IMAGE_VIEW_TYPE_1D_ARRAY => &"IMAGE_VIEW_TYPE_1D_ARRAY",
                Self::IMAGE_VIEW_TYPE_2D_ARRAY => &"IMAGE_VIEW_TYPE_2D_ARRAY",
                Self::IMAGE_VIEW_TYPE_CUBE_ARRAY => &"IMAGE_VIEW_TYPE_CUBE_ARRAY",
                other => unreachable!("invalid value for `ImageViewType`: {:?}", other),
            })
            .finish()
    }
}
impl ImageViewType {
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_1D: Self = Self(0);
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_2D: Self = Self(1);
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_3D: Self = Self(2);
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_CUBE: Self = Self(3);
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_1D_ARRAY: Self = Self(4);
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_2D_ARRAY: Self = Self(5);
    ///No documentation found
    pub const IMAGE_VIEW_TYPE_CUBE_ARRAY: Self = Self(6);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkCommandBufferLevel](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferLevel.html) - Enumerant specifying a command buffer level
///# C Specifications
///Possible values of [`CommandBufferAllocateInfo::level`],
///specifying the command buffer level, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkCommandBufferLevel {
///    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
///    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
///} VkCommandBufferLevel;
///```
///# Description
/// - [`COMMAND_BUFFER_LEVEL_PRIMARY`] specifies a primary command
///buffer.
/// - [`COMMAND_BUFFER_LEVEL_SECONDARY`] specifies a secondary command
///buffer.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`CommandBufferAllocateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkCommandBufferLevel")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CommandBufferLevel(i32);
impl const Default for CommandBufferLevel {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for CommandBufferLevel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("CommandBufferLevel")
            .field(match *self {
                Self::COMMAND_BUFFER_LEVEL_PRIMARY => &"COMMAND_BUFFER_LEVEL_PRIMARY",
                Self::COMMAND_BUFFER_LEVEL_SECONDARY => &"COMMAND_BUFFER_LEVEL_SECONDARY",
                other => unreachable!("invalid value for `CommandBufferLevel`: {:?}", other),
            })
            .finish()
    }
}
impl CommandBufferLevel {
    ///[`COMMAND_BUFFER_LEVEL_PRIMARY`] specifies a primary command
    ///buffer.
    pub const COMMAND_BUFFER_LEVEL_PRIMARY: Self = Self(0);
    ///[`COMMAND_BUFFER_LEVEL_SECONDARY`] specifies a secondary command
    ///buffer.
    pub const COMMAND_BUFFER_LEVEL_SECONDARY: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkComponentSwizzle](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkComponentSwizzle.html) - Specify how a component is swizzled
///# C Specifications
///Possible values of the members of [`ComponentMapping`], specifying the
///component values placed in each component of the output vector, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkComponentSwizzle {
///    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
///    VK_COMPONENT_SWIZZLE_ZERO = 1,
///    VK_COMPONENT_SWIZZLE_ONE = 2,
///    VK_COMPONENT_SWIZZLE_R = 3,
///    VK_COMPONENT_SWIZZLE_G = 4,
///    VK_COMPONENT_SWIZZLE_B = 5,
///    VK_COMPONENT_SWIZZLE_A = 6,
///} VkComponentSwizzle;
///```
///# Description
/// - [`COMPONENT_SWIZZLE_IDENTITY`] specifies that the component is set
///to the identity swizzle.
/// - [`COMPONENT_SWIZZLE_ZERO`] specifies that the component is set to
///zero.
/// - [`COMPONENT_SWIZZLE_ONE`] specifies that the component is set to
///either 1 or 1.0, depending on whether the type of the image view format
///is integer or floating-point respectively, as determined by the
///[Format Definition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-definition) section for each
///[`Format`].
/// - [`COMPONENT_SWIZZLE_R`] specifies that the component is set to the
///value of the R component of the image.
/// - [`COMPONENT_SWIZZLE_G`] specifies that the component is set to the
///value of the G component of the image.
/// - [`COMPONENT_SWIZZLE_B`] specifies that the component is set to the
///value of the B component of the image.
/// - [`COMPONENT_SWIZZLE_A`] specifies that the component is set to the
///value of the A component of the image.Setting the identity swizzle on a component is equivalent
/// to setting the
///identity mapping on that component.
///That is:
///# Related
/// - [`crate::vulkan1_0`]
/// - [`ComponentMapping`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkComponentSwizzle")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ComponentSwizzle(i32);
impl const Default for ComponentSwizzle {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for ComponentSwizzle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("ComponentSwizzle")
            .field(match *self {
                Self::COMPONENT_SWIZZLE_IDENTITY => &"COMPONENT_SWIZZLE_IDENTITY",
                Self::COMPONENT_SWIZZLE_ZERO => &"COMPONENT_SWIZZLE_ZERO",
                Self::COMPONENT_SWIZZLE_ONE => &"COMPONENT_SWIZZLE_ONE",
                Self::COMPONENT_SWIZZLE_R => &"COMPONENT_SWIZZLE_R",
                Self::COMPONENT_SWIZZLE_G => &"COMPONENT_SWIZZLE_G",
                Self::COMPONENT_SWIZZLE_B => &"COMPONENT_SWIZZLE_B",
                Self::COMPONENT_SWIZZLE_A => &"COMPONENT_SWIZZLE_A",
                other => unreachable!("invalid value for `ComponentSwizzle`: {:?}", other),
            })
            .finish()
    }
}
impl ComponentSwizzle {
    ///[`COMPONENT_SWIZZLE_IDENTITY`] specifies that the component is set
    ///to the identity swizzle.
    pub const COMPONENT_SWIZZLE_IDENTITY: Self = Self(0);
    ///[`COMPONENT_SWIZZLE_ZERO`] specifies that the component is set to
    ///zero.
    pub const COMPONENT_SWIZZLE_ZERO: Self = Self(1);
    ///[`COMPONENT_SWIZZLE_ONE`] specifies that the component is set to
    ///either 1 or 1.0, depending on whether the type of the image view format
    ///is integer or floating-point respectively, as determined by the
    ///[Format Definition](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-definition) section for each
    ///[`Format`].
    pub const COMPONENT_SWIZZLE_ONE: Self = Self(2);
    ///[`COMPONENT_SWIZZLE_R`] specifies that the component is set to the
    ///value of the R component of the image.
    pub const COMPONENT_SWIZZLE_R: Self = Self(3);
    ///[`COMPONENT_SWIZZLE_G`] specifies that the component is set to the
    ///value of the G component of the image.
    pub const COMPONENT_SWIZZLE_G: Self = Self(4);
    ///[`COMPONENT_SWIZZLE_B`] specifies that the component is set to the
    ///value of the B component of the image.
    pub const COMPONENT_SWIZZLE_B: Self = Self(5);
    ///[`COMPONENT_SWIZZLE_A`] specifies that the component is set to the
    ///value of the A component of the image.
    pub const COMPONENT_SWIZZLE_A: Self = Self(6);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkDescriptorType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorType.html) - Specifies the type of a descriptor in a descriptor set
///# C Specifications
///The type of descriptors in a descriptor set is specified by
///[`WriteDescriptorSet::descriptor_type`], which **must** be one of the
///values:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkDescriptorType {
///    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
///    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
///    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
///    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
///    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
///    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
///    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
///    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
///    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
///    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
///    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
///  // Provided by VK_VERSION_1_3
///    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
///  // Provided by VK_NV_ray_tracing
///    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
///  // Provided by VK_VALVE_mutable_descriptor_type
///    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
///} VkDescriptorType;
///```
///# Description
/// - [`DESCRIPTOR_TYPE_SAMPLER`] specifies a [sampler descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler).
/// - [`DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`] specifies a
///[combined image sampler
///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
/// - [`DESCRIPTOR_TYPE_SAMPLED_IMAGE`] specifies a
///[sampled image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage).
/// - [`DESCRIPTOR_TYPE_STORAGE_IMAGE`] specifies a
///[storage image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage).
/// - [`DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`] specifies a
///[uniform texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
/// - [`DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`] specifies a
///[storage texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
/// - [`DESCRIPTOR_TYPE_UNIFORM_BUFFER`] specifies a
///[uniform buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer).
/// - [`DESCRIPTOR_TYPE_STORAGE_BUFFER`] specifies a
///[storage buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer).
/// - [`DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`] specifies a
///[dynamic uniform buffer
///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
/// - [`DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`] specifies a
///[dynamic storage buffer
///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
/// - [`DESCRIPTOR_TYPE_INPUT_ATTACHMENT`] specifies an
///[input attachment descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
/// - [`DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`] specifies an
///[inline uniform block](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inlineuniformblock).
/// - [`DESCRIPTOR_TYPE_MUTABLE_VALVE`] specifies a
///[descriptor of mutable type](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-mutable).When a descriptor set is updated via elements of [`WriteDescriptorSet`],
///members of `pImageInfo`, `pBufferInfo` and `pTexelBufferView`
///are only accessed by the implementation when they correspond to descriptor
///type being defined - otherwise they are ignored.
///The members accessed are as follows for each descriptor type:
/// - For [`DESCRIPTOR_TYPE_SAMPLER`], only the `sampler` member of
///each element of [`WriteDescriptorSet::p_image_info`] is
///accessed.
/// - For [`DESCRIPTOR_TYPE_SAMPLED_IMAGE`],
///[`DESCRIPTOR_TYPE_STORAGE_IMAGE`], or
///[`DESCRIPTOR_TYPE_INPUT_ATTACHMENT`], only the `imageView` and
///`imageLayout` members of each element of
///[`WriteDescriptorSet::p_image_info`] are accessed.
/// - For [`DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`], all members of each
///element of [`WriteDescriptorSet::p_image_info`] are accessed.
/// - For [`DESCRIPTOR_TYPE_UNIFORM_BUFFER`],
///[`DESCRIPTOR_TYPE_STORAGE_BUFFER`],
///[`DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`], or
///[`DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`], all members of each
///element of [`WriteDescriptorSet::p_buffer_info`] are accessed.
/// - For [`DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`] or
///[`DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`], each element of
///[`WriteDescriptorSet::p_texel_buffer_view`] is accessed.When updating descriptors with a
/// `descriptorType` of
///[`DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`], none of the `pImageInfo`,
///`pBufferInfo`, or `pTexelBufferView` members are accessed, instead
///the source data of the descriptor update operation is taken from the
///[`WriteDescriptorSetInlineUniformBlock`] structure in the `pNext`
///chain of [`WriteDescriptorSet`].
///When updating descriptors with a `descriptorType` of
///[`DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR`], none of the
///`pImageInfo`, `pBufferInfo`, or `pTexelBufferView` members are
///accessed, instead the source data of the descriptor update operation is
///taken from the [`WriteDescriptorSetAccelerationStructureKHR`] structure
///in the `pNext` chain of [`WriteDescriptorSet`].
///When updating descriptors with a `descriptorType` of
///[`DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV`], none of the
///`pImageInfo`, `pBufferInfo`, or `pTexelBufferView` members are
///accessed, instead the source data of the descriptor update operation is
///taken from the [`WriteDescriptorSetAccelerationStructureNV`] structure
///in the `pNext` chain of [`WriteDescriptorSet`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorPoolSize`]
/// - [`DescriptorSetLayoutBinding`]
/// - [`DescriptorUpdateTemplateEntry`]
/// - [`ImageViewHandleInfoNVX`]
/// - [`MutableDescriptorTypeListVALVE`]
/// - [`WriteDescriptorSet`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDescriptorType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DescriptorType(i32);
impl const Default for DescriptorType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for DescriptorType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("DescriptorType")
            .field(match *self {
                Self::DESCRIPTOR_TYPE_SAMPLER => &"DESCRIPTOR_TYPE_SAMPLER",
                Self::DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER => &"DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER",
                Self::DESCRIPTOR_TYPE_SAMPLED_IMAGE => &"DESCRIPTOR_TYPE_SAMPLED_IMAGE",
                Self::DESCRIPTOR_TYPE_STORAGE_IMAGE => &"DESCRIPTOR_TYPE_STORAGE_IMAGE",
                Self::DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER => &"DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
                Self::DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER => &"DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",
                Self::DESCRIPTOR_TYPE_UNIFORM_BUFFER => &"DESCRIPTOR_TYPE_UNIFORM_BUFFER",
                Self::DESCRIPTOR_TYPE_STORAGE_BUFFER => &"DESCRIPTOR_TYPE_STORAGE_BUFFER",
                Self::DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC => &"DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC",
                Self::DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC => &"DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC",
                Self::DESCRIPTOR_TYPE_INPUT_ATTACHMENT => &"DESCRIPTOR_TYPE_INPUT_ATTACHMENT",
                Self::DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK => &"DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK",
                Self::DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR => &"DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR",
                Self::DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV => &"DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV",
                Self::DESCRIPTOR_TYPE_MUTABLE_VALVE => &"DESCRIPTOR_TYPE_MUTABLE_VALVE",
                other => unreachable!("invalid value for `DescriptorType`: {:?}", other),
            })
            .finish()
    }
}
impl DescriptorType {
    ///[`DESCRIPTOR_TYPE_SAMPLER`] specifies a [sampler descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampler).
    pub const DESCRIPTOR_TYPE_SAMPLER: Self = Self(0);
    ///[`DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER`] specifies a
    ///[combined image sampler
    ///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-combinedimagesampler).
    pub const DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: Self = Self(1);
    ///[`DESCRIPTOR_TYPE_SAMPLED_IMAGE`] specifies a
    ///[sampled image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-sampledimage).
    pub const DESCRIPTOR_TYPE_SAMPLED_IMAGE: Self = Self(2);
    ///[`DESCRIPTOR_TYPE_STORAGE_IMAGE`] specifies a
    ///[storage image descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage).
    pub const DESCRIPTOR_TYPE_STORAGE_IMAGE: Self = Self(3);
    ///[`DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER`] specifies a
    ///[uniform texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer).
    pub const DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: Self = Self(4);
    ///[`DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER`] specifies a
    ///[storage texel buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer).
    pub const DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: Self = Self(5);
    ///[`DESCRIPTOR_TYPE_UNIFORM_BUFFER`] specifies a
    ///[uniform buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbuffer).
    pub const DESCRIPTOR_TYPE_UNIFORM_BUFFER: Self = Self(6);
    ///[`DESCRIPTOR_TYPE_STORAGE_BUFFER`] specifies a
    ///[storage buffer descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebuffer).
    pub const DESCRIPTOR_TYPE_STORAGE_BUFFER: Self = Self(7);
    ///[`DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC`] specifies a
    ///[dynamic uniform buffer
    ///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic).
    pub const DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: Self = Self(8);
    ///[`DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC`] specifies a
    ///[dynamic storage buffer
    ///descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic).
    pub const DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: Self = Self(9);
    ///[`DESCRIPTOR_TYPE_INPUT_ATTACHMENT`] specifies an
    ///[input attachment descriptor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment).
    pub const DESCRIPTOR_TYPE_INPUT_ATTACHMENT: Self = Self(10);
    ///[`DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK`] specifies an
    ///[inline uniform block](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inlineuniformblock).
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: Self = Self(1000138000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: Self = Self(1000150000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: Self = Self(1000165000);
    ///[`DESCRIPTOR_TYPE_MUTABLE_VALVE`] specifies a
    ///[descriptor of mutable type](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-mutable).
    ///
    ///Provided by [`crate::extensions::valve_mutable_descriptor_type`]
    pub const DESCRIPTOR_TYPE_MUTABLE_VALVE: Self = Self(1000351000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_inline_uniform_block`]
    pub const DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: Self = Self::DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkQueryType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueryType.html) - Specify the type of queries managed by a query pool
///# C Specifications
///Possible values of [`QueryPoolCreateInfo::query_type`], specifying
///the type of queries managed by the pool, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkQueryType {
///    VK_QUERY_TYPE_OCCLUSION = 0,
///    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
///    VK_QUERY_TYPE_TIMESTAMP = 2,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
///#endif
///  // Provided by VK_EXT_transform_feedback
///    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
///  // Provided by VK_KHR_performance_query
///    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
///  // Provided by VK_NV_ray_tracing
///    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
///  // Provided by VK_INTEL_performance_query
///    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR = 1000299000,
///#endif
///} VkQueryType;
///```
///# Description
/// - [`QUERY_TYPE_OCCLUSION`] specifies an [occlusion query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-occlusion).
/// - [`QUERY_TYPE_PIPELINE_STATISTICS`] specifies a [pipeline statistics query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats).
/// - [`QUERY_TYPE_TIMESTAMP`] specifies a [timestamp query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
/// - [`QUERY_TYPE_PERFORMANCE_QUERY_KHR`] specifies a
///[performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance).
/// - [`QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT`] specifies a
///[transform feedback query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-transform-feedback).
/// - [`QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR`] specifies
///a [acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
///for use with [`CmdWriteAccelerationStructuresPropertiesKHR`] or
///[`WriteAccelerationStructuresPropertiesKHR`].
/// - [`QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR`]
///specifies a [serialization acceleration
///structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
/// - [`QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV`] specifies a
///[acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
///for use with [`CmdWriteAccelerationStructuresPropertiesNV`].
/// - [`QUERY_TYPE_PERFORMANCE_QUERY_INTEL`] specifies a
///[Intel performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance-intel).
/// - [`QUERY_TYPE_RESULT_STATUS_ONLY_KHR`] specifies a
///[result status query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-result-status-only).
/// - [`QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR`] specifies a
///[video encode bitstream
///range query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-video-encode-bitstream-buffer-range).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`QueryPoolCreateInfo`]
/// - [`CmdWriteAccelerationStructuresPropertiesKHR`]
/// - [`CmdWriteAccelerationStructuresPropertiesNV`]
/// - [`WriteAccelerationStructuresPropertiesKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkQueryType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct QueryType(i32);
impl const Default for QueryType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for QueryType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("QueryType")
            .field(match *self {
                Self::QUERY_TYPE_OCCLUSION => &"QUERY_TYPE_OCCLUSION",
                Self::QUERY_TYPE_PIPELINE_STATISTICS => &"QUERY_TYPE_PIPELINE_STATISTICS",
                Self::QUERY_TYPE_TIMESTAMP => &"QUERY_TYPE_TIMESTAMP",
                Self::QUERY_TYPE_RESULT_STATUS_ONLY_KHR => &"QUERY_TYPE_RESULT_STATUS_ONLY_KHR",
                Self::QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT => &"QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT",
                Self::QUERY_TYPE_PERFORMANCE_QUERY_KHR => &"QUERY_TYPE_PERFORMANCE_QUERY_KHR",
                Self::QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR => {
                    &"QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR"
                },
                Self::QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR => {
                    &"QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR"
                },
                Self::QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV => {
                    &"QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV"
                },
                Self::QUERY_TYPE_PERFORMANCE_QUERY_INTEL => &"QUERY_TYPE_PERFORMANCE_QUERY_INTEL",
                Self::QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR => {
                    &"QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR"
                },
                other => unreachable!("invalid value for `QueryType`: {:?}", other),
            })
            .finish()
    }
}
impl QueryType {
    ///[`QUERY_TYPE_OCCLUSION`] specifies an [occlusion query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-occlusion).
    pub const QUERY_TYPE_OCCLUSION: Self = Self(0);
    ///[`QUERY_TYPE_PIPELINE_STATISTICS`] specifies a [pipeline statistics query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-pipestats).
    pub const QUERY_TYPE_PIPELINE_STATISTICS: Self = Self(1);
    ///[`QUERY_TYPE_TIMESTAMP`] specifies a [timestamp query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-timestamps).
    pub const QUERY_TYPE_TIMESTAMP: Self = Self(2);
    ///[`QUERY_TYPE_RESULT_STATUS_ONLY_KHR`] specifies a
    ///[result status query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-result-status-only).
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const QUERY_TYPE_RESULT_STATUS_ONLY_KHR: Self = Self(1000023000);
    ///[`QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT`] specifies a
    ///[transform feedback query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-transform-feedback).
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    pub const QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: Self = Self(1000028004);
    ///[`QUERY_TYPE_PERFORMANCE_QUERY_KHR`] specifies a
    ///[performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance).
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const QUERY_TYPE_PERFORMANCE_QUERY_KHR: Self = Self(1000116000);
    ///[`QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR`] specifies
    ///a [acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
    ///for use with [`CmdWriteAccelerationStructuresPropertiesKHR`] or
    ///[`WriteAccelerationStructuresPropertiesKHR`].
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: Self = Self(1000150000);
    ///[`QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR`]
    ///specifies a [serialization acceleration
    ///structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: Self = Self(1000150001);
    ///[`QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV`] specifies a
    ///[acceleration structure size query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#acceleration-structure-copying)
    ///for use with [`CmdWriteAccelerationStructuresPropertiesNV`].
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: Self = Self(1000165000);
    ///[`QUERY_TYPE_PERFORMANCE_QUERY_INTEL`] specifies a
    ///[Intel performance query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-performance-intel).
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const QUERY_TYPE_PERFORMANCE_QUERY_INTEL: Self = Self(1000210000);
    ///[`QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR`] specifies a
    ///[video encode bitstream
    ///range query](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#queries-video-encode-bitstream-buffer-range).
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR: Self = Self(1000299000);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkBorderColor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBorderColor.html) - Specify border color used for texture lookups
///# C Specifications
///Possible values of [`SamplerCreateInfo::border_color`], specifying
///the border color used for texture lookups, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkBorderColor {
///    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
///    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
///    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
///    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
///    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
///    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
///  // Provided by VK_EXT_custom_border_color
///    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
///  // Provided by VK_EXT_custom_border_color
///    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
///} VkBorderColor;
///```
///# Description
/// - [`BORDER_COLOR_FLOAT_TRANSPARENT_BLACK`] specifies a transparent,
///floating-point format, black color.
/// - [`BORDER_COLOR_INT_TRANSPARENT_BLACK`] specifies a transparent,
///integer format, black color.
/// - [`BORDER_COLOR_FLOAT_OPAQUE_BLACK`] specifies an opaque,
///floating-point format, black color.
/// - [`BORDER_COLOR_INT_OPAQUE_BLACK`] specifies an opaque, integer
///format, black color.
/// - [`BORDER_COLOR_FLOAT_OPAQUE_WHITE`] specifies an opaque,
///floating-point format, white color.
/// - [`BORDER_COLOR_INT_OPAQUE_WHITE`] specifies an opaque, integer
///format, white color.
/// - [`BORDER_COLOR_FLOAT_CUSTOM_EXT`] indicates that a
///[`SamplerCustomBorderColorCreateInfoEXT`] structure is included in
///the [`SamplerCreateInfo::p_next`] chain containing the color
///data in floating-point format.
/// - [`BORDER_COLOR_INT_CUSTOM_EXT`] indicates that a
///[`SamplerCustomBorderColorCreateInfoEXT`] structure is included in
///the [`SamplerCreateInfo::p_next`] chain containing the color
///data in integer format.These colors are described in detail in [Texel
///Replacement](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-replacement).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SamplerCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBorderColor")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BorderColor(i32);
impl const Default for BorderColor {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for BorderColor {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("BorderColor")
            .field(match *self {
                Self::BORDER_COLOR_FLOAT_TRANSPARENT_BLACK => &"BORDER_COLOR_FLOAT_TRANSPARENT_BLACK",
                Self::BORDER_COLOR_INT_TRANSPARENT_BLACK => &"BORDER_COLOR_INT_TRANSPARENT_BLACK",
                Self::BORDER_COLOR_FLOAT_OPAQUE_BLACK => &"BORDER_COLOR_FLOAT_OPAQUE_BLACK",
                Self::BORDER_COLOR_INT_OPAQUE_BLACK => &"BORDER_COLOR_INT_OPAQUE_BLACK",
                Self::BORDER_COLOR_FLOAT_OPAQUE_WHITE => &"BORDER_COLOR_FLOAT_OPAQUE_WHITE",
                Self::BORDER_COLOR_INT_OPAQUE_WHITE => &"BORDER_COLOR_INT_OPAQUE_WHITE",
                Self::BORDER_COLOR_FLOAT_CUSTOM_EXT => &"BORDER_COLOR_FLOAT_CUSTOM_EXT",
                Self::BORDER_COLOR_INT_CUSTOM_EXT => &"BORDER_COLOR_INT_CUSTOM_EXT",
                other => unreachable!("invalid value for `BorderColor`: {:?}", other),
            })
            .finish()
    }
}
impl BorderColor {
    ///[`BORDER_COLOR_FLOAT_TRANSPARENT_BLACK`] specifies a transparent,
    ///floating-point format, black color.
    pub const BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: Self = Self(0);
    ///[`BORDER_COLOR_INT_TRANSPARENT_BLACK`] specifies a transparent,
    ///integer format, black color.
    pub const BORDER_COLOR_INT_TRANSPARENT_BLACK: Self = Self(1);
    ///[`BORDER_COLOR_FLOAT_OPAQUE_BLACK`] specifies an opaque,
    ///floating-point format, black color.
    pub const BORDER_COLOR_FLOAT_OPAQUE_BLACK: Self = Self(2);
    ///[`BORDER_COLOR_INT_OPAQUE_BLACK`] specifies an opaque, integer
    ///format, black color.
    pub const BORDER_COLOR_INT_OPAQUE_BLACK: Self = Self(3);
    ///[`BORDER_COLOR_FLOAT_OPAQUE_WHITE`] specifies an opaque,
    ///floating-point format, white color.
    pub const BORDER_COLOR_FLOAT_OPAQUE_WHITE: Self = Self(4);
    ///[`BORDER_COLOR_INT_OPAQUE_WHITE`] specifies an opaque, integer
    ///format, white color.
    pub const BORDER_COLOR_INT_OPAQUE_WHITE: Self = Self(5);
    ///[`BORDER_COLOR_FLOAT_CUSTOM_EXT`] indicates that a
    ///[`SamplerCustomBorderColorCreateInfoEXT`] structure is included in
    ///the [`SamplerCreateInfo`]::`pNext` chain containing the color
    ///data in floating-point format.
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    pub const BORDER_COLOR_FLOAT_CUSTOM_EXT: Self = Self(1000287003);
    ///[`BORDER_COLOR_INT_CUSTOM_EXT`] indicates that a
    ///[`SamplerCustomBorderColorCreateInfoEXT`] structure is included in
    ///the [`SamplerCreateInfo`]::`pNext` chain containing the color
    ///data in integer format.
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    pub const BORDER_COLOR_INT_CUSTOM_EXT: Self = Self(1000287004);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkPipelineBindPoint](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineBindPoint.html) - Specify the bind point of a pipeline object to a command buffer
///# C Specifications
///Possible values of [`CmdBindPipeline`]`::pipelineBindPoint`,
///specifying the bind point of a pipeline object, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPipelineBindPoint {
///    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
///    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
///  // Provided by VK_NV_ray_tracing
///    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
///} VkPipelineBindPoint;
///```
///# Description
/// - [`PIPELINE_BIND_POINT_COMPUTE`] specifies binding as a compute
///pipeline.
/// - [`PIPELINE_BIND_POINT_GRAPHICS`] specifies binding as a graphics
///pipeline.
/// - [`PIPELINE_BIND_POINT_RAY_TRACING_KHR`] specifies binding as a ray
///tracing pipeline.
/// - [`PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI`] specifies binding as
///a subpass shading pipeline.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DescriptorUpdateTemplateCreateInfo`]
/// - [`GeneratedCommandsInfoNV`]
/// - [`GeneratedCommandsMemoryRequirementsInfoNV`]
/// - [`IndirectCommandsLayoutCreateInfoNV`]
/// - [`SubpassDescription`]
/// - [`SubpassDescription2`]
/// - [`CmdBindDescriptorSets`]
/// - [`CmdBindPipeline`]
/// - [`CmdBindPipelineShaderGroupNV`]
/// - [`CmdPushDescriptorSetKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPipelineBindPoint")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineBindPoint(i32);
impl const Default for PipelineBindPoint {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for PipelineBindPoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("PipelineBindPoint")
            .field(match *self {
                Self::PIPELINE_BIND_POINT_GRAPHICS => &"PIPELINE_BIND_POINT_GRAPHICS",
                Self::PIPELINE_BIND_POINT_COMPUTE => &"PIPELINE_BIND_POINT_COMPUTE",
                Self::PIPELINE_BIND_POINT_RAY_TRACING_KHR => &"PIPELINE_BIND_POINT_RAY_TRACING_KHR",
                Self::PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI => &"PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI",
                other => unreachable!("invalid value for `PipelineBindPoint`: {:?}", other),
            })
            .finish()
    }
}
impl PipelineBindPoint {
    ///[`PIPELINE_BIND_POINT_GRAPHICS`] specifies binding as a graphics
    ///pipeline.
    pub const PIPELINE_BIND_POINT_GRAPHICS: Self = Self(0);
    ///[`PIPELINE_BIND_POINT_COMPUTE`] specifies binding as a compute
    ///pipeline.
    pub const PIPELINE_BIND_POINT_COMPUTE: Self = Self(1);
    ///[`PIPELINE_BIND_POINT_RAY_TRACING_KHR`] specifies binding as a ray
    ///tracing pipeline.
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const PIPELINE_BIND_POINT_RAY_TRACING_KHR: Self = Self(1000165000);
    ///[`PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI`] specifies binding as
    ///a subpass shading pipeline.
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    pub const PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: Self = Self(1000369003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const PIPELINE_BIND_POINT_RAY_TRACING_NV: Self = Self::PIPELINE_BIND_POINT_RAY_TRACING_KHR;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkPipelineCacheHeaderVersion](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheHeaderVersion.html) - Encode pipeline cache version
///# C Specifications
///Possible values of the `headerVersion` value of the pipeline cache
///header are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPipelineCacheHeaderVersion {
///    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
///} VkPipelineCacheHeaderVersion;
///```
///# Description
/// - [`PIPELINE_CACHE_HEADER_VERSION_ONE`] specifies version one of the
///pipeline cache.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineCacheHeaderVersionOne`]
/// - [`CreatePipelineCache`]
/// - [`GetPipelineCacheData`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPipelineCacheHeaderVersion")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PipelineCacheHeaderVersion(i32);
impl const Default for PipelineCacheHeaderVersion {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for PipelineCacheHeaderVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("PipelineCacheHeaderVersion")
            .field(match *self {
                Self::PIPELINE_CACHE_HEADER_VERSION_ONE => &"PIPELINE_CACHE_HEADER_VERSION_ONE",
                other => unreachable!("invalid value for `PipelineCacheHeaderVersion`: {:?}", other),
            })
            .finish()
    }
}
impl PipelineCacheHeaderVersion {
    ///[`PIPELINE_CACHE_HEADER_VERSION_ONE`] specifies version one of the
    ///pipeline cache.
    pub const PIPELINE_CACHE_HEADER_VERSION_ONE: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkPrimitiveTopology](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPrimitiveTopology.html) - Supported primitive topologies
///# C Specifications
///The primitive topologies defined by [`PrimitiveTopology`] are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPrimitiveTopology {
///    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
///    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
///    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
///    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
///    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
///    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
///    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
///} VkPrimitiveTopology;
///```
///# Description
/// - [`PRIMITIVE_TOPOLOGY_POINT_LIST`] specifies a series of
///[separate point primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-point-lists).
/// - [`PRIMITIVE_TOPOLOGY_LINE_LIST`] specifies a series of
///[separate line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists).
/// - [`PRIMITIVE_TOPOLOGY_LINE_STRIP`] specifies a series of
///[connected line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips) with consecutive lines
///sharing a vertex.
/// - [`PRIMITIVE_TOPOLOGY_TRIANGLE_LIST`] specifies a series of
///[separate triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists).
/// - [`PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP`] specifies a series of
///[connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips) with
///consecutive triangles sharing an edge.
/// - [`PRIMITIVE_TOPOLOGY_TRIANGLE_FAN`] specifies a series of
///[connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-fans) with all
///triangles sharing a common vertex.
///If the `[`VK_KHR_portability_subset`]` extension is enabled, and
///[`PhysicalDevicePortabilitySubsetFeaturesKHR::triangle_fans`]
///is [`FALSE`], then triangle fans are not supported by the
///implementation, and [`PRIMITIVE_TOPOLOGY_TRIANGLE_FAN`]**must** not
///be used.
/// - [`PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY`] specifies a series
///of [separate line primitives with
///adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists-with-adjacency).
/// - [`PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY`] specifies a series
///of [connected line primitives with
///adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips-with-adjacency), with consecutive primitives sharing three vertices.
/// - [`PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY`] specifies a
///series of [separate triangle
///primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists-with-adjacency).
/// - [`PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY`] specifies
///[connected triangle primitives
///with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips-with-adjacency), with consecutive triangles sharing an edge.
/// - [`PRIMITIVE_TOPOLOGY_PATCH_LIST`] specifies
///[separate patch primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-patch-lists).Each primitive topology, and its construction from a list of vertices, is
///described in detail below with a supporting diagram, according to the
///following key:The diagrams are supported with mathematical definitions where the vertices
///(v) and primitives (p) are numbered starting from 0;
///v<sub>0</sub> is the first vertex in the provided data and p<sub>0</sub> is the
///first primitive in the set of primitives defined by the vertices and
///topology.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`CmdSetPrimitiveTopology`]
/// - [`CmdSetPrimitiveTopologyEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPrimitiveTopology")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PrimitiveTopology(i32);
impl const Default for PrimitiveTopology {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for PrimitiveTopology {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("PrimitiveTopology")
            .field(match *self {
                Self::PRIMITIVE_TOPOLOGY_POINT_LIST => &"PRIMITIVE_TOPOLOGY_POINT_LIST",
                Self::PRIMITIVE_TOPOLOGY_LINE_LIST => &"PRIMITIVE_TOPOLOGY_LINE_LIST",
                Self::PRIMITIVE_TOPOLOGY_LINE_STRIP => &"PRIMITIVE_TOPOLOGY_LINE_STRIP",
                Self::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST => &"PRIMITIVE_TOPOLOGY_TRIANGLE_LIST",
                Self::PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP => &"PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP",
                Self::PRIMITIVE_TOPOLOGY_TRIANGLE_FAN => &"PRIMITIVE_TOPOLOGY_TRIANGLE_FAN",
                Self::PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY => &"PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY",
                Self::PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY => &"PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY",
                Self::PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY => {
                    &"PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"
                },
                Self::PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY => {
                    &"PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"
                },
                Self::PRIMITIVE_TOPOLOGY_PATCH_LIST => &"PRIMITIVE_TOPOLOGY_PATCH_LIST",
                other => unreachable!("invalid value for `PrimitiveTopology`: {:?}", other),
            })
            .finish()
    }
}
impl PrimitiveTopology {
    ///[`PRIMITIVE_TOPOLOGY_POINT_LIST`] specifies a series of
    ///[separate point primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-point-lists).
    pub const PRIMITIVE_TOPOLOGY_POINT_LIST: Self = Self(0);
    ///[`PRIMITIVE_TOPOLOGY_LINE_LIST`] specifies a series of
    ///[separate line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists).
    pub const PRIMITIVE_TOPOLOGY_LINE_LIST: Self = Self(1);
    ///[`PRIMITIVE_TOPOLOGY_LINE_STRIP`] specifies a series of
    ///[connected line primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips) with consecutive lines
    ///sharing a vertex.
    pub const PRIMITIVE_TOPOLOGY_LINE_STRIP: Self = Self(2);
    ///[`PRIMITIVE_TOPOLOGY_TRIANGLE_LIST`] specifies a series of
    ///[separate triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists).
    pub const PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: Self = Self(3);
    ///[`PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP`] specifies a series of
    ///[connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips) with
    ///consecutive triangles sharing an edge.
    pub const PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: Self = Self(4);
    ///[`PRIMITIVE_TOPOLOGY_TRIANGLE_FAN`] specifies a series of
    ///[connected triangle primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-fans) with all
    ///triangles sharing a common vertex.
    ///If the `[`VK_KHR_portability_subset`]` extension is enabled, and
    ///[`PhysicalDevicePortabilitySubsetFeaturesKHR`]::`triangleFans`
    ///is [`FALSE`], then triangle fans are not supported by the
    ///implementation, and [`PRIMITIVE_TOPOLOGY_TRIANGLE_FAN`]**must** not
    ///be used.
    pub const PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: Self = Self(5);
    ///[`PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY`] specifies a series
    ///of [separate line primitives with
    ///adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists-with-adjacency).
    pub const PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: Self = Self(6);
    ///[`PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY`] specifies a series
    ///of [connected line primitives with
    ///adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips-with-adjacency), with consecutive primitives sharing three vertices.
    pub const PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: Self = Self(7);
    ///[`PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY`] specifies a
    ///series of [separate triangle
    ///primitives with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists-with-adjacency).
    pub const PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: Self = Self(8);
    ///[`PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY`] specifies
    ///[connected triangle primitives
    ///with adjacency](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips-with-adjacency), with consecutive triangles sharing an edge.
    pub const PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: Self = Self(9);
    ///[`PRIMITIVE_TOPOLOGY_PATCH_LIST`] specifies
    ///[separate patch primitives](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-patch-lists).
    pub const PRIMITIVE_TOPOLOGY_PATCH_LIST: Self = Self(10);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkSharingMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSharingMode.html) - Buffer and image sharing modes
///# C Specifications
///Buffer and image objects are created with a *sharing mode* controlling how
///they **can** be accessed from queues.
///The supported sharing modes are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSharingMode {
///    VK_SHARING_MODE_EXCLUSIVE = 0,
///    VK_SHARING_MODE_CONCURRENT = 1,
///} VkSharingMode;
///```
///# Description
/// - [`SHARING_MODE_EXCLUSIVE`] specifies that access to any range or
///image subresource of the object will be exclusive to a single queue
///family at a time.
/// - [`SHARING_MODE_CONCURRENT`] specifies that concurrent access to any
///range or image subresource of the object from multiple queue families is
///supported.Ranges of buffers and image subresources of image objects created using
///[`SHARING_MODE_EXCLUSIVE`]**must** only be accessed by queues in the
///queue family that has *ownership* of the resource.
///Upon creation, such resources are not owned by any queue family; ownership
///is implicitly acquired upon first use within a queue.
///Once a resource using [`SHARING_MODE_EXCLUSIVE`] is owned by some queue
///family, the application **must** perform a
///[queue family ownership transfer](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-queue-transfers) to make
///the memory contents of a range or image subresource accessible to a
///different queue family.A queue family **can** take ownership of an image subresource or buffer
/// range
///of a resource created with [`SHARING_MODE_EXCLUSIVE`], without an
///ownership transfer, in the same way as for a resource that was just created;
///however, taking ownership in this way has the effect that the contents of
///the image subresource or buffer range are undefined.Ranges of buffers and image subresources of
/// image objects created using
///[`SHARING_MODE_CONCURRENT`]**must** only be accessed by queues from the
///queue families specified through the `queueFamilyIndexCount` and
///`pQueueFamilyIndices` members of the corresponding create info
///structures.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BufferCreateInfo`]
/// - [`ImageCreateInfo`]
/// - [`PhysicalDeviceImageDrmFormatModifierInfoEXT`]
/// - [`SwapchainCreateInfoKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSharingMode")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SharingMode(i32);
impl const Default for SharingMode {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for SharingMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("SharingMode")
            .field(match *self {
                Self::SHARING_MODE_EXCLUSIVE => &"SHARING_MODE_EXCLUSIVE",
                Self::SHARING_MODE_CONCURRENT => &"SHARING_MODE_CONCURRENT",
                other => unreachable!("invalid value for `SharingMode`: {:?}", other),
            })
            .finish()
    }
}
impl SharingMode {
    ///[`SHARING_MODE_EXCLUSIVE`] specifies that access to any range or
    ///image subresource of the object will be exclusive to a single queue
    ///family at a time.
    pub const SHARING_MODE_EXCLUSIVE: Self = Self(0);
    ///[`SHARING_MODE_CONCURRENT`] specifies that concurrent access to any
    ///range or image subresource of the object from multiple queue families is
    ///supported.
    pub const SHARING_MODE_CONCURRENT: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkIndexType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkIndexType.html) - Type of index buffer indices
///# C Specifications
///Possible values of [`CmdBindIndexBuffer`]`::indexType`, specifying
///the size of indices, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkIndexType {
///    VK_INDEX_TYPE_UINT16 = 0,
///    VK_INDEX_TYPE_UINT32 = 1,
///  // Provided by VK_KHR_acceleration_structure
///    VK_INDEX_TYPE_NONE_KHR = 1000165000,
///  // Provided by VK_EXT_index_type_uint8
///    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
///  // Provided by VK_NV_ray_tracing
///    VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
///} VkIndexType;
///```
///# Description
/// - [`INDEX_TYPE_UINT16`] specifies that indices are 16-bit unsigned
///integer values.
/// - [`INDEX_TYPE_UINT32`] specifies that indices are 32-bit unsigned
///integer values.
/// - [`INDEX_TYPE_NONE_KHR`] specifies that no indices are provided.
/// - [`INDEX_TYPE_UINT8_EXT`] specifies that indices are 8-bit unsigned
///integer values.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`BindIndexBufferIndirectCommandNV`]
/// - [`GeometryTrianglesNV`]
/// - [`IndirectCommandsLayoutTokenNV`]
/// - [`CmdBindIndexBuffer`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkIndexType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct IndexType(i32);
impl const Default for IndexType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for IndexType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("IndexType")
            .field(match *self {
                Self::INDEX_TYPE_UINT16 => &"INDEX_TYPE_UINT16",
                Self::INDEX_TYPE_UINT32 => &"INDEX_TYPE_UINT32",
                Self::INDEX_TYPE_NONE_KHR => &"INDEX_TYPE_NONE_KHR",
                Self::INDEX_TYPE_UINT8_EXT => &"INDEX_TYPE_UINT8_EXT",
                other => unreachable!("invalid value for `IndexType`: {:?}", other),
            })
            .finish()
    }
}
impl IndexType {
    ///[`INDEX_TYPE_UINT16`] specifies that indices are 16-bit unsigned
    ///integer values.
    pub const INDEX_TYPE_UINT16: Self = Self(0);
    ///[`INDEX_TYPE_UINT32`] specifies that indices are 32-bit unsigned
    ///integer values.
    pub const INDEX_TYPE_UINT32: Self = Self(1);
    ///[`INDEX_TYPE_NONE_KHR`] specifies that no indices are provided.
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const INDEX_TYPE_NONE_KHR: Self = Self(1000165000);
    ///[`INDEX_TYPE_UINT8_EXT`] specifies that indices are 8-bit unsigned
    ///integer values.
    ///
    ///Provided by [`crate::extensions::ext_index_type_uint_8`]
    pub const INDEX_TYPE_UINT8_EXT: Self = Self(1000265000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const INDEX_TYPE_NONE_NV: Self = Self::INDEX_TYPE_NONE_KHR;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkFilter](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFilter.html) - Specify filters used for texture lookups
///# C Specifications
///Possible values of the [`SamplerCreateInfo::mag_filter`] and
///`minFilter` parameters, specifying filters used for texture lookups,
///are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkFilter {
///    VK_FILTER_NEAREST = 0,
///    VK_FILTER_LINEAR = 1,
///  // Provided by VK_IMG_filter_cubic
///    VK_FILTER_CUBIC_IMG = 1000015000,
///  // Provided by VK_EXT_filter_cubic
///    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
///} VkFilter;
///```
///# Description
/// - [`FILTER_NEAREST`] specifies nearest filtering.
/// - [`FILTER_LINEAR`] specifies linear filtering.
/// - [`FILTER_CUBIC_EXT`] specifies cubic filtering.These filters are described in detail in [Texel
///Filtering](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-filtering).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`BlitImageInfo2`]
/// - [`SamplerCreateInfo`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`CmdBlitImage`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFilter")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Filter(i32);
impl const Default for Filter {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("Filter")
            .field(match *self {
                Self::FILTER_NEAREST => &"FILTER_NEAREST",
                Self::FILTER_LINEAR => &"FILTER_LINEAR",
                Self::FILTER_CUBIC_IMG => &"FILTER_CUBIC_IMG",
                other => unreachable!("invalid value for `Filter`: {:?}", other),
            })
            .finish()
    }
}
impl Filter {
    ///[`FILTER_NEAREST`] specifies nearest filtering.
    pub const FILTER_NEAREST: Self = Self(0);
    ///[`FILTER_LINEAR`] specifies linear filtering.
    pub const FILTER_LINEAR: Self = Self(1);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::img_filter_cubic`]
    pub const FILTER_CUBIC_IMG: Self = Self(1000015000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_filter_cubic`]
    pub const FILTER_CUBIC_EXT: Self = Self::FILTER_CUBIC_IMG;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkSamplerMipmapMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerMipmapMode.html) - Specify mipmap mode used for texture lookups
///# C Specifications
///Possible values of the [`SamplerCreateInfo::mipmap_mode`],
///specifying the mipmap mode used for texture lookups, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSamplerMipmapMode {
///    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
///    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
///} VkSamplerMipmapMode;
///```
///# Description
/// - [`SAMPLER_MIPMAP_MODE_NEAREST`] specifies nearest filtering.
/// - [`SAMPLER_MIPMAP_MODE_LINEAR`] specifies linear filtering.These modes are described in detail
///   in [Texel
///Filtering](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-texel-filtering).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SamplerCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSamplerMipmapMode")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SamplerMipmapMode(i32);
impl const Default for SamplerMipmapMode {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for SamplerMipmapMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("SamplerMipmapMode")
            .field(match *self {
                Self::SAMPLER_MIPMAP_MODE_NEAREST => &"SAMPLER_MIPMAP_MODE_NEAREST",
                Self::SAMPLER_MIPMAP_MODE_LINEAR => &"SAMPLER_MIPMAP_MODE_LINEAR",
                other => unreachable!("invalid value for `SamplerMipmapMode`: {:?}", other),
            })
            .finish()
    }
}
impl SamplerMipmapMode {
    ///[`SAMPLER_MIPMAP_MODE_NEAREST`] specifies nearest filtering.
    pub const SAMPLER_MIPMAP_MODE_NEAREST: Self = Self(0);
    ///[`SAMPLER_MIPMAP_MODE_LINEAR`] specifies linear filtering.
    pub const SAMPLER_MIPMAP_MODE_LINEAR: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkSamplerAddressMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerAddressMode.html) - Specify behavior of sampling with texture coordinates outside an image
///# C Specifications
///Possible values of the [`SamplerCreateInfo`]::`addressMode*`
///parameters, specifying the behavior of sampling with coordinates outside the
///range [0,1] for the respective u, v, or w coordinate
///as defined in the [Wrapping Operation](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#textures-wrapping-operation)
///section, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSamplerAddressMode {
///    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
///    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
///    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
///    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
///  // Provided by VK_VERSION_1_2, VK_KHR_sampler_mirror_clamp_to_edge
///    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
///  // Provided by VK_KHR_sampler_mirror_clamp_to_edge
///    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR =
/// VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
///} VkSamplerAddressMode;
///```
///# Description
/// - [`SAMPLER_ADDRESS_MODE_REPEAT`] specifies that the repeat wrap mode
///will be used.
/// - [`SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT`] specifies that the
///mirrored repeat wrap mode will be used.
/// - [`SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE`] specifies that the clamp to
///edge wrap mode will be used.
/// - [`SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER`] specifies that the clamp
///to border wrap mode will be used.
/// - [`SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE`] specifies that the
///    mirror clamp to edge wrap mode will be used.
///    This is only valid if
///[samplerMirrorClampToEdge](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-samplerMirrorClampToEdge) is enabled, or if
///    the `[`VK_KHR_sampler_mirror_clamp_to_edge`]` extension is enabled.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SamplerCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSamplerAddressMode")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SamplerAddressMode(i32);
impl const Default for SamplerAddressMode {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for SamplerAddressMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("SamplerAddressMode")
            .field(match *self {
                Self::SAMPLER_ADDRESS_MODE_REPEAT => &"SAMPLER_ADDRESS_MODE_REPEAT",
                Self::SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT => &"SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT",
                Self::SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE => &"SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE",
                Self::SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER => &"SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER",
                Self::SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE => &"SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
                other => unreachable!("invalid value for `SamplerAddressMode`: {:?}", other),
            })
            .finish()
    }
}
impl SamplerAddressMode {
    ///[`SAMPLER_ADDRESS_MODE_REPEAT`] specifies that the repeat wrap mode
    ///will be used.
    pub const SAMPLER_ADDRESS_MODE_REPEAT: Self = Self(0);
    ///[`SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT`] specifies that the
    ///mirrored repeat wrap mode will be used.
    pub const SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: Self = Self(1);
    ///[`SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE`] specifies that the clamp to
    ///edge wrap mode will be used.
    pub const SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: Self = Self(2);
    ///[`SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER`] specifies that the clamp
    ///to border wrap mode will be used.
    pub const SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: Self = Self(3);
    ///[`SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE`] specifies that the
    ///    mirror clamp to edge wrap mode will be used.
    ///    This is only valid if
    ///[samplerMirrorClampToEdge](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#features-samplerMirrorClampToEdge) is enabled, or if
    ///    the `[`VK_KHR_sampler_mirror_clamp_to_edge`]` extension is enabled.
    ///
    ///Provided by [`crate::extensions::khr_sampler_mirror_clamp_to_edge`]
    pub const SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: Self = Self(4);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_mirror_clamp_to_edge`]
    pub const SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: Self = Self::SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkCompareOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCompareOp.html) - Stencil comparison function
///# C Specifications
///Possible values of [`StencilOpState::compare_op`], specifying the
///stencil comparison function, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkCompareOp {
///    VK_COMPARE_OP_NEVER = 0,
///    VK_COMPARE_OP_LESS = 1,
///    VK_COMPARE_OP_EQUAL = 2,
///    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
///    VK_COMPARE_OP_GREATER = 4,
///    VK_COMPARE_OP_NOT_EQUAL = 5,
///    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
///    VK_COMPARE_OP_ALWAYS = 7,
///} VkCompareOp;
///```
///# Description
/// - [`COMPARE_OP_NEVER`] specifies that the test evaluates to false.
/// - [`COMPARE_OP_LESS`] specifies that the test evaluates A < B.
/// - [`COMPARE_OP_EQUAL`] specifies that the test evaluates A = B.
/// - [`COMPARE_OP_LESS_OR_EQUAL`] specifies that the test evaluates
///A ≤ B.
/// - [`COMPARE_OP_GREATER`] specifies that the test evaluates A >
///B.
/// - [`COMPARE_OP_NOT_EQUAL`] specifies that the test evaluates A
///≠ B.
/// - [`COMPARE_OP_GREATER_OR_EQUAL`] specifies that the test evaluates
///A ≥ B.
/// - [`COMPARE_OP_ALWAYS`] specifies that the test evaluates to true.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`SamplerCreateInfo`]
/// - [`StencilOpState`]
/// - [`CmdSetDepthCompareOp`]
/// - [`CmdSetDepthCompareOpEXT`]
/// - [`CmdSetStencilOp`]
/// - [`CmdSetStencilOpEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkCompareOp")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct CompareOp(i32);
impl const Default for CompareOp {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for CompareOp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("CompareOp")
            .field(match *self {
                Self::COMPARE_OP_NEVER => &"COMPARE_OP_NEVER",
                Self::COMPARE_OP_LESS => &"COMPARE_OP_LESS",
                Self::COMPARE_OP_EQUAL => &"COMPARE_OP_EQUAL",
                Self::COMPARE_OP_LESS_OR_EQUAL => &"COMPARE_OP_LESS_OR_EQUAL",
                Self::COMPARE_OP_GREATER => &"COMPARE_OP_GREATER",
                Self::COMPARE_OP_NOT_EQUAL => &"COMPARE_OP_NOT_EQUAL",
                Self::COMPARE_OP_GREATER_OR_EQUAL => &"COMPARE_OP_GREATER_OR_EQUAL",
                Self::COMPARE_OP_ALWAYS => &"COMPARE_OP_ALWAYS",
                other => unreachable!("invalid value for `CompareOp`: {:?}", other),
            })
            .finish()
    }
}
impl CompareOp {
    ///[`COMPARE_OP_NEVER`] specifies that the test evaluates to false.
    pub const COMPARE_OP_NEVER: Self = Self(0);
    ///[`COMPARE_OP_LESS`] specifies that the test evaluates A < B.
    pub const COMPARE_OP_LESS: Self = Self(1);
    ///[`COMPARE_OP_EQUAL`] specifies that the test evaluates A = B.
    pub const COMPARE_OP_EQUAL: Self = Self(2);
    ///[`COMPARE_OP_LESS_OR_EQUAL`] specifies that the test evaluates
    ///A ≤ B.
    pub const COMPARE_OP_LESS_OR_EQUAL: Self = Self(3);
    ///[`COMPARE_OP_GREATER`] specifies that the test evaluates A >
    ///B.
    pub const COMPARE_OP_GREATER: Self = Self(4);
    ///[`COMPARE_OP_NOT_EQUAL`] specifies that the test evaluates A
    ///≠ B.
    pub const COMPARE_OP_NOT_EQUAL: Self = Self(5);
    ///[`COMPARE_OP_GREATER_OR_EQUAL`] specifies that the test evaluates
    ///A ≥ B.
    pub const COMPARE_OP_GREATER_OR_EQUAL: Self = Self(6);
    ///[`COMPARE_OP_ALWAYS`] specifies that the test evaluates to true.
    pub const COMPARE_OP_ALWAYS: Self = Self(7);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkPolygonMode](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPolygonMode.html) - Control polygon rasterization mode
///# C Specifications
///Possible values of the
///[`PipelineRasterizationStateCreateInfo::polygon_mode`] property of
///the currently active pipeline, specifying the method of rasterization for
///polygons, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPolygonMode {
///    VK_POLYGON_MODE_FILL = 0,
///    VK_POLYGON_MODE_LINE = 1,
///    VK_POLYGON_MODE_POINT = 2,
///  // Provided by VK_NV_fill_rectangle
///    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
///} VkPolygonMode;
///```
///# Description
/// - [`POLYGON_MODE_POINT`] specifies that polygon vertices are drawn as
///points.
/// - [`POLYGON_MODE_LINE`] specifies that polygon edges are drawn as
///line segments.
/// - [`POLYGON_MODE_FILL`] specifies that polygons are rendered using
///the polygon rasterization rules in this section.
/// - [`POLYGON_MODE_FILL_RECTANGLE_NV`] specifies that polygons are
///rendered using polygon rasterization rules, modified to consider a
///sample within the primitive if the sample location is inside the
///axis-aligned bounding box of the triangle after projection.
///Note that the barycentric weights used in attribute interpolation **can**
///extend outside the range [0,1] when these primitives are shaded.
///Special treatment is given to a sample position on the boundary edge of
///the bounding box.
///In such a case, if two rectangles lie on either side of a common edge
///(with identical endpoints) on which a sample position lies, then exactly
///one of the triangles **must** produce a fragment that covers that sample
///during rasterization.Polygons rendered in [`POLYGON_MODE_FILL_RECTANGLE_NV`] mode **may** be
///clipped by the frustum or by user clip planes.
///If clipping is applied, the triangle is culled rather than clipped.Area calculation and
/// facingness are determined for
///[`POLYGON_MODE_FILL_RECTANGLE_NV`] mode using the triangle’s vertices.These modes affect only
/// the final rasterization of polygons: in particular,
///a polygon’s vertices are shaded and the polygon is clipped and possibly
///culled before these modes are applied.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineRasterizationStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPolygonMode")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PolygonMode(i32);
impl const Default for PolygonMode {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for PolygonMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("PolygonMode")
            .field(match *self {
                Self::POLYGON_MODE_FILL => &"POLYGON_MODE_FILL",
                Self::POLYGON_MODE_LINE => &"POLYGON_MODE_LINE",
                Self::POLYGON_MODE_POINT => &"POLYGON_MODE_POINT",
                Self::POLYGON_MODE_FILL_RECTANGLE_NV => &"POLYGON_MODE_FILL_RECTANGLE_NV",
                other => unreachable!("invalid value for `PolygonMode`: {:?}", other),
            })
            .finish()
    }
}
impl PolygonMode {
    ///[`POLYGON_MODE_FILL`] specifies that polygons are rendered using
    ///the polygon rasterization rules in this section.
    pub const POLYGON_MODE_FILL: Self = Self(0);
    ///[`POLYGON_MODE_LINE`] specifies that polygon edges are drawn as
    ///line segments.
    pub const POLYGON_MODE_LINE: Self = Self(1);
    ///[`POLYGON_MODE_POINT`] specifies that polygon vertices are drawn as
    ///points.
    pub const POLYGON_MODE_POINT: Self = Self(2);
    ///[`POLYGON_MODE_FILL_RECTANGLE_NV`] specifies that polygons are
    ///rendered using polygon rasterization rules, modified to consider a
    ///sample within the primitive if the sample location is inside the
    ///axis-aligned bounding box of the triangle after projection.
    ///Note that the barycentric weights used in attribute interpolation **can**
    ///extend outside the range [0,1] when these primitives are shaded.
    ///Special treatment is given to a sample position on the boundary edge of
    ///the bounding box.
    ///In such a case, if two rectangles lie on either side of a common edge
    ///(with identical endpoints) on which a sample position lies, then exactly
    ///one of the triangles **must** produce a fragment that covers that sample
    ///during rasterization.Polygons rendered in [`POLYGON_MODE_FILL_RECTANGLE_NV`] mode **may** be
    ///clipped by the frustum or by user clip planes.
    ///If clipping is applied, the triangle is culled rather than clipped.Area calculation and
    /// facingness are determined for [`POLYGON_MODE_FILL_RECTANGLE_NV`] mode using the
    /// triangle’s vertices.
    ///
    ///Provided by [`crate::extensions::nv_fill_rectangle`]
    pub const POLYGON_MODE_FILL_RECTANGLE_NV: Self = Self(1000153000);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkFrontFace](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFrontFace.html) - Interpret polygon front-facing orientation
///# C Specifications
///The first step of polygon rasterization is to determine whether the triangle
///is *back-facing* or *front-facing*.
///This determination is made based on the sign of the (clipped or unclipped)
///polygon’s area computed in framebuffer coordinates.
///One way to compute this area is:<span class="katex"><span class="katex-html"
/// aria-hidden="true"><span class="base"><span class="strut"
/// style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span
/// class="mord">−</span><span class="mord"><span class="mord"><span class="mopen
/// nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span
/// class="pstrut" style="height:3em;"></span><span class="mord"><span
/// class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut"
/// style="height:3em;"></span><span style="border-bottom-width:0.04em;"
/// class="frac-line"></span></span><span style="top:-3.677em;"><span class="pstrut"
/// style="height:3em;"></span><span class="mord"><span
/// class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.686em;"><span></span></span></span></span></span><span class="mclose
/// nulldelimiter"></span></span></span><span class="mspace"
/// style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.8011130000000004em;"
/// class="vlist"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;"
/// class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span
/// class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span
/// class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol
/// large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span
/// style="height:3.05em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin
/// mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord
/// mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.874664em;" class="vlist"><span
/// style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.1130000000000004em;margin-right:0.05em;"><span style="height:2.7em;"
/// class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.383108em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mord"><span
/// class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.874664em;"><span
/// style="top:-2.4085610000000006em;margin-left:-0.03588em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.113em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">⊕</span><span
/// class="mord mtight">1</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.4275469999999999em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">−</span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut"
/// style="height:1.3022109999999998em;vertical-align:-0.4275469999999999em;"></span><span
/// class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span
/// style="top:-2.4085610000000006em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.10764em;" class="mord mathdefault mtight">f</span></span></span><span
/// style="top:-3.113em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">⊕</span><span
/// class="mord mtight">1</span></span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.4275469999999999em;"><span></span></span></span></span></span></span><span
/// class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">y</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.874664em;"><span
/// style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></
/// span>where <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"
/// class="strut"></span><span class="mord"><span class="mord mathdefault">x</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
/// style="height:0.824664em;" class="vlist"><span
/// style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"
/// class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.4192159999999999em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
/// class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"
/// class="strut"></span><span class="mord"><span class="mord mathdefault"
/// style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span
/// style="top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span
/// style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"
/// class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></
/// span></span> are the x and y
///framebuffer coordinates of the ith vertex of the n-vertex
///polygon (vertices are numbered starting at zero for the purposes of this
///computation) and i ⊕ 1 is (i +  1) mod n.The interpretation of the sign of a is determined by
/// the
///[`PipelineRasterizationStateCreateInfo::front_face`] property of
///the currently active pipeline.
///Possible values are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkFrontFace {
///    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
///    VK_FRONT_FACE_CLOCKWISE = 1,
///} VkFrontFace;
///```
///# Description
/// - [`FRONT_FACE_COUNTER_CLOCKWISE`] specifies that a triangle with
///positive area is considered front-facing.
/// - [`FRONT_FACE_CLOCKWISE`] specifies that a triangle with negative
///area is considered front-facing.Any triangle which is not front-facing is back-facing, including
/// zero-area
///triangles.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`CmdSetFrontFace`]
/// - [`CmdSetFrontFaceEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFrontFace")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct FrontFace(i32);
impl const Default for FrontFace {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for FrontFace {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("FrontFace")
            .field(match *self {
                Self::FRONT_FACE_COUNTER_CLOCKWISE => &"FRONT_FACE_COUNTER_CLOCKWISE",
                Self::FRONT_FACE_CLOCKWISE => &"FRONT_FACE_CLOCKWISE",
                other => unreachable!("invalid value for `FrontFace`: {:?}", other),
            })
            .finish()
    }
}
impl FrontFace {
    ///[`FRONT_FACE_COUNTER_CLOCKWISE`] specifies that a triangle with
    ///positive area is considered front-facing.
    pub const FRONT_FACE_COUNTER_CLOCKWISE: Self = Self(0);
    ///[`FRONT_FACE_CLOCKWISE`] specifies that a triangle with negative
    ///area is considered front-facing.
    pub const FRONT_FACE_CLOCKWISE: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkBlendFactor](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBlendFactor.html) - Framebuffer blending factors
///# C Specifications
///The source and destination color and alpha blending factors are selected
///from the enum:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkBlendFactor {
///    VK_BLEND_FACTOR_ZERO = 0,
///    VK_BLEND_FACTOR_ONE = 1,
///    VK_BLEND_FACTOR_SRC_COLOR = 2,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
///    VK_BLEND_FACTOR_DST_COLOR = 4,
///    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
///    VK_BLEND_FACTOR_SRC_ALPHA = 6,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
///    VK_BLEND_FACTOR_DST_ALPHA = 8,
///    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
///    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
///    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
///    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
///    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
///    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
///    VK_BLEND_FACTOR_SRC1_COLOR = 15,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
///    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
///    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
///} VkBlendFactor;
///```
///# Description
///The semantics of the enum values are described in the table below:In this table, the following
/// conventions are used:
/// - R<sub>s0</sub>,G<sub>s0</sub>,B<sub>s0</sub> and A<sub>s0</sub> represent the first source
///   color
///R, G, B, and A components, respectively, for the fragment output
///location corresponding to the color attachment being blended.
/// - R<sub>s1</sub>,G<sub>s1</sub>,B<sub>s1</sub> and A<sub>s1</sub> represent the second source
///color R, G, B, and A components, respectively, used in dual source
///blending modes, for the fragment output location corresponding to the
///color attachment being blended.
/// - R<sub>d</sub>,G<sub>d</sub>,B<sub>d</sub> and A<sub>d</sub> represent the R, G, B, and A
///components of the destination color.
///That is, the color currently in the corresponding color attachment for
///this fragment/sample.
/// - R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub> and A<sub>c</sub> represent the blend constant R, G,
///B, and A components, respectively.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineColorBlendAttachmentState`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBlendFactor")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BlendFactor(i32);
impl const Default for BlendFactor {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for BlendFactor {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("BlendFactor")
            .field(match *self {
                Self::BLEND_FACTOR_ZERO => &"BLEND_FACTOR_ZERO",
                Self::BLEND_FACTOR_ONE => &"BLEND_FACTOR_ONE",
                Self::BLEND_FACTOR_SRC_COLOR => &"BLEND_FACTOR_SRC_COLOR",
                Self::BLEND_FACTOR_ONE_MINUS_SRC_COLOR => &"BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
                Self::BLEND_FACTOR_DST_COLOR => &"BLEND_FACTOR_DST_COLOR",
                Self::BLEND_FACTOR_ONE_MINUS_DST_COLOR => &"BLEND_FACTOR_ONE_MINUS_DST_COLOR",
                Self::BLEND_FACTOR_SRC_ALPHA => &"BLEND_FACTOR_SRC_ALPHA",
                Self::BLEND_FACTOR_ONE_MINUS_SRC_ALPHA => &"BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
                Self::BLEND_FACTOR_DST_ALPHA => &"BLEND_FACTOR_DST_ALPHA",
                Self::BLEND_FACTOR_ONE_MINUS_DST_ALPHA => &"BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
                Self::BLEND_FACTOR_CONSTANT_COLOR => &"BLEND_FACTOR_CONSTANT_COLOR",
                Self::BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR => &"BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
                Self::BLEND_FACTOR_CONSTANT_ALPHA => &"BLEND_FACTOR_CONSTANT_ALPHA",
                Self::BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA => &"BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
                Self::BLEND_FACTOR_SRC_ALPHA_SATURATE => &"BLEND_FACTOR_SRC_ALPHA_SATURATE",
                Self::BLEND_FACTOR_SRC1_COLOR => &"BLEND_FACTOR_SRC1_COLOR",
                Self::BLEND_FACTOR_ONE_MINUS_SRC1_COLOR => &"BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",
                Self::BLEND_FACTOR_SRC1_ALPHA => &"BLEND_FACTOR_SRC1_ALPHA",
                Self::BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA => &"BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",
                other => unreachable!("invalid value for `BlendFactor`: {:?}", other),
            })
            .finish()
    }
}
impl BlendFactor {
    ///No documentation found
    pub const BLEND_FACTOR_ZERO: Self = Self(0);
    ///No documentation found
    pub const BLEND_FACTOR_ONE: Self = Self(1);
    ///No documentation found
    pub const BLEND_FACTOR_SRC_COLOR: Self = Self(2);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_SRC_COLOR: Self = Self(3);
    ///No documentation found
    pub const BLEND_FACTOR_DST_COLOR: Self = Self(4);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_DST_COLOR: Self = Self(5);
    ///No documentation found
    pub const BLEND_FACTOR_SRC_ALPHA: Self = Self(6);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: Self = Self(7);
    ///No documentation found
    pub const BLEND_FACTOR_DST_ALPHA: Self = Self(8);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_DST_ALPHA: Self = Self(9);
    ///No documentation found
    pub const BLEND_FACTOR_CONSTANT_COLOR: Self = Self(10);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: Self = Self(11);
    ///No documentation found
    pub const BLEND_FACTOR_CONSTANT_ALPHA: Self = Self(12);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: Self = Self(13);
    ///No documentation found
    pub const BLEND_FACTOR_SRC_ALPHA_SATURATE: Self = Self(14);
    ///No documentation found
    pub const BLEND_FACTOR_SRC1_COLOR: Self = Self(15);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: Self = Self(16);
    ///No documentation found
    pub const BLEND_FACTOR_SRC1_ALPHA: Self = Self(17);
    ///No documentation found
    pub const BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: Self = Self(18);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkBlendOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBlendOp.html) - Framebuffer blending operations
///# C Specifications
///Once the source and destination blend factors have been selected, they along
///with the source and destination components are passed to the blending
///operations.
///RGB and alpha components **can** use different operations.
///Possible values of [`BlendOp`], specifying the operations, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkBlendOp {
///    VK_BLEND_OP_ADD = 0,
///    VK_BLEND_OP_SUBTRACT = 1,
///    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
///    VK_BLEND_OP_MIN = 3,
///    VK_BLEND_OP_MAX = 4,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_ZERO_EXT = 1000148000,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_EXT = 1000148001,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_EXT = 1000148002,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_IN_EXT = 1000148006,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_XOR_EXT = 1000148011,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SCREEN_EXT = 1000148013,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DARKEN_EXT = 1000148015,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_INVERT_EXT = 1000148023,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_EXT = 1000148035,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_MINUS_EXT = 1000148039,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_RED_EXT = 1000148043,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_GREEN_EXT = 1000148044,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_BLEND_OP_BLUE_EXT = 1000148045,
///} VkBlendOp;
///```
///# Description
///The semantics of the basic blend operations are described in the table
///below:In this table, the following conventions are used:
/// - R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub> and A<sub>s0</sub> represent the first source
///color R, G, B, and A components, respectively.
/// - R<sub>d</sub>, G<sub>d</sub>, B<sub>d</sub> and A<sub>d</sub> represent the R, G, B, and A
///components of the destination color.
///That is, the color currently in the corresponding color attachment for
///this fragment/sample.
/// - S<sub>r</sub>, S<sub>g</sub>, S<sub>b</sub> and S<sub>a</sub> represent the source blend
///   factor
///R, G, B, and A components, respectively.
/// - D<sub>r</sub>, D<sub>g</sub>, D<sub>b</sub> and D<sub>a</sub> represent the destination blend
///factor R, G, B, and A components, respectively.The blending operation produces a new set of
/// values R, G, B and
///A, which are written to the framebuffer attachment.
///If blending is not enabled for this attachment, then R, G, B and
///A are assigned R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub> and A<sub>s0</sub>,
///respectively.If the color attachment is fixed-point, the components of the source and
///destination values and blend factors are each clamped to [0,1] or
///[-1,1] respectively for an unsigned normalized or signed normalized
///color attachment prior to evaluating the blend operations.
///If the color attachment is floating-point, no clamping occurs.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineColorBlendAttachmentState`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkBlendOp")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct BlendOp(i32);
impl const Default for BlendOp {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for BlendOp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("BlendOp")
            .field(match *self {
                Self::BLEND_OP_ADD => &"BLEND_OP_ADD",
                Self::BLEND_OP_SUBTRACT => &"BLEND_OP_SUBTRACT",
                Self::BLEND_OP_REVERSE_SUBTRACT => &"BLEND_OP_REVERSE_SUBTRACT",
                Self::BLEND_OP_MIN => &"BLEND_OP_MIN",
                Self::BLEND_OP_MAX => &"BLEND_OP_MAX",
                Self::BLEND_OP_ZERO_EXT => &"BLEND_OP_ZERO_EXT",
                Self::BLEND_OP_SRC_EXT => &"BLEND_OP_SRC_EXT",
                Self::BLEND_OP_DST_EXT => &"BLEND_OP_DST_EXT",
                Self::BLEND_OP_SRC_OVER_EXT => &"BLEND_OP_SRC_OVER_EXT",
                Self::BLEND_OP_DST_OVER_EXT => &"BLEND_OP_DST_OVER_EXT",
                Self::BLEND_OP_SRC_IN_EXT => &"BLEND_OP_SRC_IN_EXT",
                Self::BLEND_OP_DST_IN_EXT => &"BLEND_OP_DST_IN_EXT",
                Self::BLEND_OP_SRC_OUT_EXT => &"BLEND_OP_SRC_OUT_EXT",
                Self::BLEND_OP_DST_OUT_EXT => &"BLEND_OP_DST_OUT_EXT",
                Self::BLEND_OP_SRC_ATOP_EXT => &"BLEND_OP_SRC_ATOP_EXT",
                Self::BLEND_OP_DST_ATOP_EXT => &"BLEND_OP_DST_ATOP_EXT",
                Self::BLEND_OP_XOR_EXT => &"BLEND_OP_XOR_EXT",
                Self::BLEND_OP_MULTIPLY_EXT => &"BLEND_OP_MULTIPLY_EXT",
                Self::BLEND_OP_SCREEN_EXT => &"BLEND_OP_SCREEN_EXT",
                Self::BLEND_OP_OVERLAY_EXT => &"BLEND_OP_OVERLAY_EXT",
                Self::BLEND_OP_DARKEN_EXT => &"BLEND_OP_DARKEN_EXT",
                Self::BLEND_OP_LIGHTEN_EXT => &"BLEND_OP_LIGHTEN_EXT",
                Self::BLEND_OP_COLORDODGE_EXT => &"BLEND_OP_COLORDODGE_EXT",
                Self::BLEND_OP_COLORBURN_EXT => &"BLEND_OP_COLORBURN_EXT",
                Self::BLEND_OP_HARDLIGHT_EXT => &"BLEND_OP_HARDLIGHT_EXT",
                Self::BLEND_OP_SOFTLIGHT_EXT => &"BLEND_OP_SOFTLIGHT_EXT",
                Self::BLEND_OP_DIFFERENCE_EXT => &"BLEND_OP_DIFFERENCE_EXT",
                Self::BLEND_OP_EXCLUSION_EXT => &"BLEND_OP_EXCLUSION_EXT",
                Self::BLEND_OP_INVERT_EXT => &"BLEND_OP_INVERT_EXT",
                Self::BLEND_OP_INVERT_RGB_EXT => &"BLEND_OP_INVERT_RGB_EXT",
                Self::BLEND_OP_LINEARDODGE_EXT => &"BLEND_OP_LINEARDODGE_EXT",
                Self::BLEND_OP_LINEARBURN_EXT => &"BLEND_OP_LINEARBURN_EXT",
                Self::BLEND_OP_VIVIDLIGHT_EXT => &"BLEND_OP_VIVIDLIGHT_EXT",
                Self::BLEND_OP_LINEARLIGHT_EXT => &"BLEND_OP_LINEARLIGHT_EXT",
                Self::BLEND_OP_PINLIGHT_EXT => &"BLEND_OP_PINLIGHT_EXT",
                Self::BLEND_OP_HARDMIX_EXT => &"BLEND_OP_HARDMIX_EXT",
                Self::BLEND_OP_HSL_HUE_EXT => &"BLEND_OP_HSL_HUE_EXT",
                Self::BLEND_OP_HSL_SATURATION_EXT => &"BLEND_OP_HSL_SATURATION_EXT",
                Self::BLEND_OP_HSL_COLOR_EXT => &"BLEND_OP_HSL_COLOR_EXT",
                Self::BLEND_OP_HSL_LUMINOSITY_EXT => &"BLEND_OP_HSL_LUMINOSITY_EXT",
                Self::BLEND_OP_PLUS_EXT => &"BLEND_OP_PLUS_EXT",
                Self::BLEND_OP_PLUS_CLAMPED_EXT => &"BLEND_OP_PLUS_CLAMPED_EXT",
                Self::BLEND_OP_PLUS_CLAMPED_ALPHA_EXT => &"BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",
                Self::BLEND_OP_PLUS_DARKER_EXT => &"BLEND_OP_PLUS_DARKER_EXT",
                Self::BLEND_OP_MINUS_EXT => &"BLEND_OP_MINUS_EXT",
                Self::BLEND_OP_MINUS_CLAMPED_EXT => &"BLEND_OP_MINUS_CLAMPED_EXT",
                Self::BLEND_OP_CONTRAST_EXT => &"BLEND_OP_CONTRAST_EXT",
                Self::BLEND_OP_INVERT_OVG_EXT => &"BLEND_OP_INVERT_OVG_EXT",
                Self::BLEND_OP_RED_EXT => &"BLEND_OP_RED_EXT",
                Self::BLEND_OP_GREEN_EXT => &"BLEND_OP_GREEN_EXT",
                Self::BLEND_OP_BLUE_EXT => &"BLEND_OP_BLUE_EXT",
                other => unreachable!("invalid value for `BlendOp`: {:?}", other),
            })
            .finish()
    }
}
impl BlendOp {
    ///No documentation found
    pub const BLEND_OP_ADD: Self = Self(0);
    ///No documentation found
    pub const BLEND_OP_SUBTRACT: Self = Self(1);
    ///No documentation found
    pub const BLEND_OP_REVERSE_SUBTRACT: Self = Self(2);
    ///No documentation found
    pub const BLEND_OP_MIN: Self = Self(3);
    ///No documentation found
    pub const BLEND_OP_MAX: Self = Self(4);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_ZERO_EXT: Self = Self(1000148000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SRC_EXT: Self = Self(1000148001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DST_EXT: Self = Self(1000148002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SRC_OVER_EXT: Self = Self(1000148003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DST_OVER_EXT: Self = Self(1000148004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SRC_IN_EXT: Self = Self(1000148005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DST_IN_EXT: Self = Self(1000148006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SRC_OUT_EXT: Self = Self(1000148007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DST_OUT_EXT: Self = Self(1000148008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SRC_ATOP_EXT: Self = Self(1000148009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DST_ATOP_EXT: Self = Self(1000148010);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_XOR_EXT: Self = Self(1000148011);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_MULTIPLY_EXT: Self = Self(1000148012);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SCREEN_EXT: Self = Self(1000148013);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_OVERLAY_EXT: Self = Self(1000148014);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DARKEN_EXT: Self = Self(1000148015);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_LIGHTEN_EXT: Self = Self(1000148016);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_COLORDODGE_EXT: Self = Self(1000148017);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_COLORBURN_EXT: Self = Self(1000148018);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_HARDLIGHT_EXT: Self = Self(1000148019);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_SOFTLIGHT_EXT: Self = Self(1000148020);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_DIFFERENCE_EXT: Self = Self(1000148021);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_EXCLUSION_EXT: Self = Self(1000148022);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_INVERT_EXT: Self = Self(1000148023);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_INVERT_RGB_EXT: Self = Self(1000148024);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_LINEARDODGE_EXT: Self = Self(1000148025);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_LINEARBURN_EXT: Self = Self(1000148026);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_VIVIDLIGHT_EXT: Self = Self(1000148027);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_LINEARLIGHT_EXT: Self = Self(1000148028);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_PINLIGHT_EXT: Self = Self(1000148029);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_HARDMIX_EXT: Self = Self(1000148030);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_HSL_HUE_EXT: Self = Self(1000148031);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_HSL_SATURATION_EXT: Self = Self(1000148032);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_HSL_COLOR_EXT: Self = Self(1000148033);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_HSL_LUMINOSITY_EXT: Self = Self(1000148034);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_PLUS_EXT: Self = Self(1000148035);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_PLUS_CLAMPED_EXT: Self = Self(1000148036);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: Self = Self(1000148037);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_PLUS_DARKER_EXT: Self = Self(1000148038);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_MINUS_EXT: Self = Self(1000148039);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_MINUS_CLAMPED_EXT: Self = Self(1000148040);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_CONTRAST_EXT: Self = Self(1000148041);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_INVERT_OVG_EXT: Self = Self(1000148042);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_RED_EXT: Self = Self(1000148043);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_GREEN_EXT: Self = Self(1000148044);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const BLEND_OP_BLUE_EXT: Self = Self(1000148045);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkStencilOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkStencilOp.html) - Stencil comparison function
///# C Specifications
///Possible values of the `failOp`, `passOp`, and `depthFailOp`
///members of [`StencilOpState`], specifying what happens to the stored
///stencil value if this or certain subsequent tests fail or pass, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkStencilOp {
///    VK_STENCIL_OP_KEEP = 0,
///    VK_STENCIL_OP_ZERO = 1,
///    VK_STENCIL_OP_REPLACE = 2,
///    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
///    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
///    VK_STENCIL_OP_INVERT = 5,
///    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
///    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
///} VkStencilOp;
///```
///# Description
/// - [`STENCIL_OP_KEEP`] keeps the current value.
/// - [`STENCIL_OP_ZERO`] sets the value to 0.
/// - [`STENCIL_OP_REPLACE`] sets the value to `reference`.
/// - [`STENCIL_OP_INCREMENT_AND_CLAMP`] increments the current value and
///clamps to the maximum representable unsigned value.
/// - [`STENCIL_OP_DECREMENT_AND_CLAMP`] decrements the current value and
///clamps to 0.
/// - [`STENCIL_OP_INVERT`] bitwise-inverts the current value.
/// - [`STENCIL_OP_INCREMENT_AND_WRAP`] increments the current value and
///wraps to 0 when the maximum value would have been exceeded.
/// - [`STENCIL_OP_DECREMENT_AND_WRAP`] decrements the current value and
///wraps to the maximum possible value when the value would go below 0.For purposes of increment
/// and decrement, the stencil bits are considered as
///an unsigned integer.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`StencilOpState`]
/// - [`CmdSetStencilOp`]
/// - [`CmdSetStencilOpEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkStencilOp")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct StencilOp(i32);
impl const Default for StencilOp {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for StencilOp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("StencilOp")
            .field(match *self {
                Self::STENCIL_OP_KEEP => &"STENCIL_OP_KEEP",
                Self::STENCIL_OP_ZERO => &"STENCIL_OP_ZERO",
                Self::STENCIL_OP_REPLACE => &"STENCIL_OP_REPLACE",
                Self::STENCIL_OP_INCREMENT_AND_CLAMP => &"STENCIL_OP_INCREMENT_AND_CLAMP",
                Self::STENCIL_OP_DECREMENT_AND_CLAMP => &"STENCIL_OP_DECREMENT_AND_CLAMP",
                Self::STENCIL_OP_INVERT => &"STENCIL_OP_INVERT",
                Self::STENCIL_OP_INCREMENT_AND_WRAP => &"STENCIL_OP_INCREMENT_AND_WRAP",
                Self::STENCIL_OP_DECREMENT_AND_WRAP => &"STENCIL_OP_DECREMENT_AND_WRAP",
                other => unreachable!("invalid value for `StencilOp`: {:?}", other),
            })
            .finish()
    }
}
impl StencilOp {
    ///[`STENCIL_OP_KEEP`] keeps the current value.
    pub const STENCIL_OP_KEEP: Self = Self(0);
    ///[`STENCIL_OP_ZERO`] sets the value to 0.
    pub const STENCIL_OP_ZERO: Self = Self(1);
    ///[`STENCIL_OP_REPLACE`] sets the value to `reference`.
    pub const STENCIL_OP_REPLACE: Self = Self(2);
    ///[`STENCIL_OP_INCREMENT_AND_CLAMP`] increments the current value and
    ///clamps to the maximum representable unsigned value.
    pub const STENCIL_OP_INCREMENT_AND_CLAMP: Self = Self(3);
    ///[`STENCIL_OP_DECREMENT_AND_CLAMP`] decrements the current value and
    ///clamps to 0.
    pub const STENCIL_OP_DECREMENT_AND_CLAMP: Self = Self(4);
    ///[`STENCIL_OP_INVERT`] bitwise-inverts the current value.
    pub const STENCIL_OP_INVERT: Self = Self(5);
    ///[`STENCIL_OP_INCREMENT_AND_WRAP`] increments the current value and
    ///wraps to 0 when the maximum value would have been exceeded.
    pub const STENCIL_OP_INCREMENT_AND_WRAP: Self = Self(6);
    ///[`STENCIL_OP_DECREMENT_AND_WRAP`] decrements the current value and
    ///wraps to the maximum possible value when the value would go below 0.
    pub const STENCIL_OP_DECREMENT_AND_WRAP: Self = Self(7);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkLogicOp](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkLogicOp.html) - Framebuffer logical operations
///# C Specifications
///Logical operations are controlled by the `logicOpEnable` and
///`logicOp` members of [`PipelineColorBlendStateCreateInfo`].
///It can also be controlled by [`CmdSetLogicOpEXT`] if graphics pipeline
///is created with `VK_DYNAMIC_STATE_LOGIC_OP_EXT` set in
///[`PipelineDynamicStateCreateInfo::p_dynamic_states`].
///If `logicOpEnable` is [`TRUE`], then a logical operation selected
///by `logicOp` is applied between each color attachment and the fragment’s
///corresponding output value, and blending of all attachments is treated as if
///it were disabled.
///Any attachments using color formats for which logical operations are not
///supported simply pass through the color values unmodified.
///The logical operation is applied independently for each of the red, green,
///blue, and alpha components.
///The `logicOp` is selected from the following operations:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkLogicOp {
///    VK_LOGIC_OP_CLEAR = 0,
///    VK_LOGIC_OP_AND = 1,
///    VK_LOGIC_OP_AND_REVERSE = 2,
///    VK_LOGIC_OP_COPY = 3,
///    VK_LOGIC_OP_AND_INVERTED = 4,
///    VK_LOGIC_OP_NO_OP = 5,
///    VK_LOGIC_OP_XOR = 6,
///    VK_LOGIC_OP_OR = 7,
///    VK_LOGIC_OP_NOR = 8,
///    VK_LOGIC_OP_EQUIVALENT = 9,
///    VK_LOGIC_OP_INVERT = 10,
///    VK_LOGIC_OP_OR_REVERSE = 11,
///    VK_LOGIC_OP_COPY_INVERTED = 12,
///    VK_LOGIC_OP_OR_INVERTED = 13,
///    VK_LOGIC_OP_NAND = 14,
///    VK_LOGIC_OP_SET = 15,
///} VkLogicOp;
///```
///# Description
///The logical operations supported by Vulkan are summarized in the following
///table in which
/// - ¬ is bitwise invert,
/// - ∧ is bitwise and,
/// - ∨ is bitwise or,
/// - ⊕ is bitwise exclusive or,
/// - s is the fragment’s R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub> or A<sub>s0</sub>
///component value for the fragment output corresponding to the color
///attachment being updated, and
/// - d is the color attachment’s R, G, B or A component
///value:The result of the logical operation is then written to the color attachment
///as controlled by the component write mask, described in
///[Blend Operations](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#framebuffer-blendoperations).
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`CmdSetLogicOpEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkLogicOp")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct LogicOp(i32);
impl const Default for LogicOp {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for LogicOp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("LogicOp")
            .field(match *self {
                Self::LOGIC_OP_CLEAR => &"LOGIC_OP_CLEAR",
                Self::LOGIC_OP_AND => &"LOGIC_OP_AND",
                Self::LOGIC_OP_AND_REVERSE => &"LOGIC_OP_AND_REVERSE",
                Self::LOGIC_OP_COPY => &"LOGIC_OP_COPY",
                Self::LOGIC_OP_AND_INVERTED => &"LOGIC_OP_AND_INVERTED",
                Self::LOGIC_OP_NO_OP => &"LOGIC_OP_NO_OP",
                Self::LOGIC_OP_XOR => &"LOGIC_OP_XOR",
                Self::LOGIC_OP_OR => &"LOGIC_OP_OR",
                Self::LOGIC_OP_NOR => &"LOGIC_OP_NOR",
                Self::LOGIC_OP_EQUIVALENT => &"LOGIC_OP_EQUIVALENT",
                Self::LOGIC_OP_INVERT => &"LOGIC_OP_INVERT",
                Self::LOGIC_OP_OR_REVERSE => &"LOGIC_OP_OR_REVERSE",
                Self::LOGIC_OP_COPY_INVERTED => &"LOGIC_OP_COPY_INVERTED",
                Self::LOGIC_OP_OR_INVERTED => &"LOGIC_OP_OR_INVERTED",
                Self::LOGIC_OP_NAND => &"LOGIC_OP_NAND",
                Self::LOGIC_OP_SET => &"LOGIC_OP_SET",
                other => unreachable!("invalid value for `LogicOp`: {:?}", other),
            })
            .finish()
    }
}
impl LogicOp {
    ///No documentation found
    pub const LOGIC_OP_CLEAR: Self = Self(0);
    ///No documentation found
    pub const LOGIC_OP_AND: Self = Self(1);
    ///No documentation found
    pub const LOGIC_OP_AND_REVERSE: Self = Self(2);
    ///No documentation found
    pub const LOGIC_OP_COPY: Self = Self(3);
    ///No documentation found
    pub const LOGIC_OP_AND_INVERTED: Self = Self(4);
    ///No documentation found
    pub const LOGIC_OP_NO_OP: Self = Self(5);
    ///No documentation found
    pub const LOGIC_OP_XOR: Self = Self(6);
    ///No documentation found
    pub const LOGIC_OP_OR: Self = Self(7);
    ///No documentation found
    pub const LOGIC_OP_NOR: Self = Self(8);
    ///No documentation found
    pub const LOGIC_OP_EQUIVALENT: Self = Self(9);
    ///No documentation found
    pub const LOGIC_OP_INVERT: Self = Self(10);
    ///No documentation found
    pub const LOGIC_OP_OR_REVERSE: Self = Self(11);
    ///No documentation found
    pub const LOGIC_OP_COPY_INVERTED: Self = Self(12);
    ///No documentation found
    pub const LOGIC_OP_OR_INVERTED: Self = Self(13);
    ///No documentation found
    pub const LOGIC_OP_NAND: Self = Self(14);
    ///No documentation found
    pub const LOGIC_OP_SET: Self = Self(15);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkInternalAllocationType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkInternalAllocationType.html) - Allocation type
///# C Specifications
///The `allocationType` parameter to the `pfnInternalAllocation` and
///`pfnInternalFree` functions **may** be one of the following values:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkInternalAllocationType {
///    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
///} VkInternalAllocationType;
///```
///# Description
/// - [`INTERNAL_ALLOCATION_TYPE_EXECUTABLE`] specifies that the
///allocation is intended for execution by the host.
///# Related
/// - [`PFNInternalAllocationNotification`]
/// - [`PFNInternalFreeNotification`]
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkInternalAllocationType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct InternalAllocationType(i32);
impl const Default for InternalAllocationType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for InternalAllocationType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("InternalAllocationType")
            .field(match *self {
                Self::INTERNAL_ALLOCATION_TYPE_EXECUTABLE => &"INTERNAL_ALLOCATION_TYPE_EXECUTABLE",
                other => unreachable!("invalid value for `InternalAllocationType`: {:?}", other),
            })
            .finish()
    }
}
impl InternalAllocationType {
    ///[`INTERNAL_ALLOCATION_TYPE_EXECUTABLE`] specifies that the
    ///allocation is intended for execution by the host.
    pub const INTERNAL_ALLOCATION_TYPE_EXECUTABLE: Self = Self(0);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkSystemAllocationScope](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSystemAllocationScope.html) - Allocation scope
///# C Specifications
///Each allocation has an *allocation scope* defining its lifetime and which
///object it is associated with.
///Possible values passed to the `allocationScope` parameter of the
///callback functions specified by [`AllocationCallbacks`], indicating the
///allocation scope, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSystemAllocationScope {
///    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
///    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
///    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
///    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
///    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
///} VkSystemAllocationScope;
///```
///# Description
/// - [`SYSTEM_ALLOCATION_SCOPE_COMMAND`] specifies that the allocation
///is scoped to the duration of the Vulkan command.
/// - [`SYSTEM_ALLOCATION_SCOPE_OBJECT`] specifies that the allocation is
///scoped to the lifetime of the Vulkan object that is being created or
///used.
/// - [`SYSTEM_ALLOCATION_SCOPE_CACHE`] specifies that the allocation is
///scoped to the lifetime of a [`PipelineCache`]
///or [`ValidationCacheEXT`]
///object.
/// - [`SYSTEM_ALLOCATION_SCOPE_DEVICE`] specifies that the allocation is
///scoped to the lifetime of the Vulkan device.
/// - [`SYSTEM_ALLOCATION_SCOPE_INSTANCE`] specifies that the allocation
///is scoped to the lifetime of the Vulkan instance.Most Vulkan commands operate on a single
/// object, or there is a sole object
///that is being created or manipulated.
///When an allocation uses an allocation scope of
///[`SYSTEM_ALLOCATION_SCOPE_OBJECT`] or
///[`SYSTEM_ALLOCATION_SCOPE_CACHE`], the allocation is scoped to the
///object being created or manipulated.When an implementation requires host memory, it will make
/// callbacks to the
///application using the most specific allocator and allocation scope
///available:
/// - If an allocation is scoped to the duration of a command, the allocator
///will use the [`SYSTEM_ALLOCATION_SCOPE_COMMAND`] allocation scope.
///The most specific allocator available is used: if the object being
///created or manipulated has an allocator, that object’s allocator will be
///used, else if the parent [`Device`] has an allocator it will be
///used, else if the parent [`Instance`] has an allocator it will be
///used.
///Else,
/// - If an allocation is associated with a
///[`ValidationCacheEXT`] or
///[`PipelineCache`] object, the allocator will use the
///[`SYSTEM_ALLOCATION_SCOPE_CACHE`] allocation scope.
///The most specific allocator available is used (cache, else device, else
///instance).
///Else,
/// - If an allocation is scoped to the lifetime of an object, that object is
///being created or manipulated by the command, and that object’s type is
///not [`Device`] or [`Instance`], the allocator will use an
///allocation scope of [`SYSTEM_ALLOCATION_SCOPE_OBJECT`].
///The most specific allocator available is used (object, else device, else
///instance).
///Else,
/// - If an allocation is scoped to the lifetime of a device, the allocator
///will use an allocation scope of [`SYSTEM_ALLOCATION_SCOPE_DEVICE`].
///The most specific allocator available is used (device, else instance).
///Else,
/// - If the allocation is scoped to the lifetime of an instance and the
///instance has an allocator, its allocator will be used with an allocation
///scope of [`SYSTEM_ALLOCATION_SCOPE_INSTANCE`].
/// - Otherwise an implementation will allocate memory through an alternative
///mechanism that is unspecified.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AllocationCallbacks`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSystemAllocationScope")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SystemAllocationScope(i32);
impl const Default for SystemAllocationScope {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for SystemAllocationScope {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("SystemAllocationScope")
            .field(match *self {
                Self::SYSTEM_ALLOCATION_SCOPE_COMMAND => &"SYSTEM_ALLOCATION_SCOPE_COMMAND",
                Self::SYSTEM_ALLOCATION_SCOPE_OBJECT => &"SYSTEM_ALLOCATION_SCOPE_OBJECT",
                Self::SYSTEM_ALLOCATION_SCOPE_CACHE => &"SYSTEM_ALLOCATION_SCOPE_CACHE",
                Self::SYSTEM_ALLOCATION_SCOPE_DEVICE => &"SYSTEM_ALLOCATION_SCOPE_DEVICE",
                Self::SYSTEM_ALLOCATION_SCOPE_INSTANCE => &"SYSTEM_ALLOCATION_SCOPE_INSTANCE",
                other => unreachable!("invalid value for `SystemAllocationScope`: {:?}", other),
            })
            .finish()
    }
}
impl SystemAllocationScope {
    ///[`SYSTEM_ALLOCATION_SCOPE_COMMAND`] specifies that the allocation
    ///is scoped to the duration of the Vulkan command.
    pub const SYSTEM_ALLOCATION_SCOPE_COMMAND: Self = Self(0);
    ///[`SYSTEM_ALLOCATION_SCOPE_OBJECT`] specifies that the allocation is
    ///scoped to the lifetime of the Vulkan object that is being created or
    ///used.
    pub const SYSTEM_ALLOCATION_SCOPE_OBJECT: Self = Self(1);
    ///[`SYSTEM_ALLOCATION_SCOPE_CACHE`] specifies that the allocation is
    ///scoped to the lifetime of a [`PipelineCache`]
    ///or [`ValidationCacheEXT`]
    ///object.
    pub const SYSTEM_ALLOCATION_SCOPE_CACHE: Self = Self(2);
    ///[`SYSTEM_ALLOCATION_SCOPE_DEVICE`] specifies that the allocation is
    ///scoped to the lifetime of the Vulkan device.
    pub const SYSTEM_ALLOCATION_SCOPE_DEVICE: Self = Self(3);
    ///[`SYSTEM_ALLOCATION_SCOPE_INSTANCE`] specifies that the allocation
    ///is scoped to the lifetime of the Vulkan instance.
    pub const SYSTEM_ALLOCATION_SCOPE_INSTANCE: Self = Self(4);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkPhysicalDeviceType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceType.html) - Supported physical device types
///# C Specifications
///The physical device types which **may** be returned in
///[`PhysicalDeviceProperties::device_type`] are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkPhysicalDeviceType {
///    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
///    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
///    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
///    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
///    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
///} VkPhysicalDeviceType;
///```
///# Description
/// - [`PHYSICAL_DEVICE_TYPE_OTHER`] - the device does not match any
///other available types.
/// - [`PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU`] - the device is typically
///one embedded in or tightly coupled with the host.
/// - [`PHYSICAL_DEVICE_TYPE_DISCRETE_GPU`] - the device is typically a
///separate processor connected to the host via an interlink.
/// - [`PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU`] - the device is typically a
///virtual node in a virtualization environment.
/// - [`PHYSICAL_DEVICE_TYPE_CPU`] - the device is typically running on
///the same processors as the host.The physical device type is advertised for informational
/// purposes only, and
///does not directly affect the operation of the system.
///However, the device type **may** correlate with other advertised properties or
///capabilities of the system, such as how many memory heaps there are.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PhysicalDeviceProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkPhysicalDeviceType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct PhysicalDeviceType(i32);
impl const Default for PhysicalDeviceType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for PhysicalDeviceType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("PhysicalDeviceType")
            .field(match *self {
                Self::PHYSICAL_DEVICE_TYPE_OTHER => &"PHYSICAL_DEVICE_TYPE_OTHER",
                Self::PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU => &"PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU",
                Self::PHYSICAL_DEVICE_TYPE_DISCRETE_GPU => &"PHYSICAL_DEVICE_TYPE_DISCRETE_GPU",
                Self::PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU => &"PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU",
                Self::PHYSICAL_DEVICE_TYPE_CPU => &"PHYSICAL_DEVICE_TYPE_CPU",
                other => unreachable!("invalid value for `PhysicalDeviceType`: {:?}", other),
            })
            .finish()
    }
}
impl PhysicalDeviceType {
    ///[`PHYSICAL_DEVICE_TYPE_OTHER`] - the device does not match any
    ///other available types.
    pub const PHYSICAL_DEVICE_TYPE_OTHER: Self = Self(0);
    ///[`PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU`] - the device is typically
    ///one embedded in or tightly coupled with the host.
    pub const PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: Self = Self(1);
    ///[`PHYSICAL_DEVICE_TYPE_DISCRETE_GPU`] - the device is typically a
    ///separate processor connected to the host via an interlink.
    pub const PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: Self = Self(2);
    ///[`PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU`] - the device is typically a
    ///virtual node in a virtualization environment.
    pub const PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: Self = Self(3);
    ///[`PHYSICAL_DEVICE_TYPE_CPU`] - the device is typically running on
    ///the same processors as the host.
    pub const PHYSICAL_DEVICE_TYPE_CPU: Self = Self(4);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkVertexInputRate](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVertexInputRate.html) - Specify rate at which vertex attributes are pulled from buffers
///# C Specifications
///Possible values of [`VertexInputBindingDescription::input_rate`],
///specifying the rate at which vertex attributes are pulled from buffers, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkVertexInputRate {
///    VK_VERTEX_INPUT_RATE_VERTEX = 0,
///    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
///} VkVertexInputRate;
///```
///# Description
/// - [`VERTEX_INPUT_RATE_VERTEX`] specifies that vertex attribute
///addressing is a function of the vertex index.
/// - [`VERTEX_INPUT_RATE_INSTANCE`] specifies that vertex attribute
///addressing is a function of the instance index.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`VertexInputBindingDescription`]
/// - [`VertexInputBindingDescription2EXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkVertexInputRate")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct VertexInputRate(i32);
impl const Default for VertexInputRate {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for VertexInputRate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("VertexInputRate")
            .field(match *self {
                Self::VERTEX_INPUT_RATE_VERTEX => &"VERTEX_INPUT_RATE_VERTEX",
                Self::VERTEX_INPUT_RATE_INSTANCE => &"VERTEX_INPUT_RATE_INSTANCE",
                other => unreachable!("invalid value for `VertexInputRate`: {:?}", other),
            })
            .finish()
    }
}
impl VertexInputRate {
    ///[`VERTEX_INPUT_RATE_VERTEX`] specifies that vertex attribute
    ///addressing is a function of the vertex index.
    pub const VERTEX_INPUT_RATE_VERTEX: Self = Self(0);
    ///[`VERTEX_INPUT_RATE_INSTANCE`] specifies that vertex attribute
    ///addressing is a function of the instance index.
    pub const VERTEX_INPUT_RATE_INSTANCE: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkFormat](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFormat.html) - Available image formats
///# C Specifications
///The following image formats **can** be passed to, and **may** be returned from
///Vulkan commands.
///The memory required to store each format is discussed with that format, and
///also summarized in the [Representation and Texel Block
///Size](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#texel-block-size) section and the [Compatible formats](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#formats-compatibility) table.
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkFormat {
///    VK_FORMAT_UNDEFINED = 0,
///    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
///    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
///    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
///    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
///    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
///    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
///    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
///    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
///    VK_FORMAT_R8_UNORM = 9,
///    VK_FORMAT_R8_SNORM = 10,
///    VK_FORMAT_R8_USCALED = 11,
///    VK_FORMAT_R8_SSCALED = 12,
///    VK_FORMAT_R8_UINT = 13,
///    VK_FORMAT_R8_SINT = 14,
///    VK_FORMAT_R8_SRGB = 15,
///    VK_FORMAT_R8G8_UNORM = 16,
///    VK_FORMAT_R8G8_SNORM = 17,
///    VK_FORMAT_R8G8_USCALED = 18,
///    VK_FORMAT_R8G8_SSCALED = 19,
///    VK_FORMAT_R8G8_UINT = 20,
///    VK_FORMAT_R8G8_SINT = 21,
///    VK_FORMAT_R8G8_SRGB = 22,
///    VK_FORMAT_R8G8B8_UNORM = 23,
///    VK_FORMAT_R8G8B8_SNORM = 24,
///    VK_FORMAT_R8G8B8_USCALED = 25,
///    VK_FORMAT_R8G8B8_SSCALED = 26,
///    VK_FORMAT_R8G8B8_UINT = 27,
///    VK_FORMAT_R8G8B8_SINT = 28,
///    VK_FORMAT_R8G8B8_SRGB = 29,
///    VK_FORMAT_B8G8R8_UNORM = 30,
///    VK_FORMAT_B8G8R8_SNORM = 31,
///    VK_FORMAT_B8G8R8_USCALED = 32,
///    VK_FORMAT_B8G8R8_SSCALED = 33,
///    VK_FORMAT_B8G8R8_UINT = 34,
///    VK_FORMAT_B8G8R8_SINT = 35,
///    VK_FORMAT_B8G8R8_SRGB = 36,
///    VK_FORMAT_R8G8B8A8_UNORM = 37,
///    VK_FORMAT_R8G8B8A8_SNORM = 38,
///    VK_FORMAT_R8G8B8A8_USCALED = 39,
///    VK_FORMAT_R8G8B8A8_SSCALED = 40,
///    VK_FORMAT_R8G8B8A8_UINT = 41,
///    VK_FORMAT_R8G8B8A8_SINT = 42,
///    VK_FORMAT_R8G8B8A8_SRGB = 43,
///    VK_FORMAT_B8G8R8A8_UNORM = 44,
///    VK_FORMAT_B8G8R8A8_SNORM = 45,
///    VK_FORMAT_B8G8R8A8_USCALED = 46,
///    VK_FORMAT_B8G8R8A8_SSCALED = 47,
///    VK_FORMAT_B8G8R8A8_UINT = 48,
///    VK_FORMAT_B8G8R8A8_SINT = 49,
///    VK_FORMAT_B8G8R8A8_SRGB = 50,
///    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
///    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
///    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
///    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
///    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
///    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
///    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
///    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
///    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
///    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
///    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
///    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
///    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
///    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
///    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
///    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
///    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
///    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
///    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
///    VK_FORMAT_R16_UNORM = 70,
///    VK_FORMAT_R16_SNORM = 71,
///    VK_FORMAT_R16_USCALED = 72,
///    VK_FORMAT_R16_SSCALED = 73,
///    VK_FORMAT_R16_UINT = 74,
///    VK_FORMAT_R16_SINT = 75,
///    VK_FORMAT_R16_SFLOAT = 76,
///    VK_FORMAT_R16G16_UNORM = 77,
///    VK_FORMAT_R16G16_SNORM = 78,
///    VK_FORMAT_R16G16_USCALED = 79,
///    VK_FORMAT_R16G16_SSCALED = 80,
///    VK_FORMAT_R16G16_UINT = 81,
///    VK_FORMAT_R16G16_SINT = 82,
///    VK_FORMAT_R16G16_SFLOAT = 83,
///    VK_FORMAT_R16G16B16_UNORM = 84,
///    VK_FORMAT_R16G16B16_SNORM = 85,
///    VK_FORMAT_R16G16B16_USCALED = 86,
///    VK_FORMAT_R16G16B16_SSCALED = 87,
///    VK_FORMAT_R16G16B16_UINT = 88,
///    VK_FORMAT_R16G16B16_SINT = 89,
///    VK_FORMAT_R16G16B16_SFLOAT = 90,
///    VK_FORMAT_R16G16B16A16_UNORM = 91,
///    VK_FORMAT_R16G16B16A16_SNORM = 92,
///    VK_FORMAT_R16G16B16A16_USCALED = 93,
///    VK_FORMAT_R16G16B16A16_SSCALED = 94,
///    VK_FORMAT_R16G16B16A16_UINT = 95,
///    VK_FORMAT_R16G16B16A16_SINT = 96,
///    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
///    VK_FORMAT_R32_UINT = 98,
///    VK_FORMAT_R32_SINT = 99,
///    VK_FORMAT_R32_SFLOAT = 100,
///    VK_FORMAT_R32G32_UINT = 101,
///    VK_FORMAT_R32G32_SINT = 102,
///    VK_FORMAT_R32G32_SFLOAT = 103,
///    VK_FORMAT_R32G32B32_UINT = 104,
///    VK_FORMAT_R32G32B32_SINT = 105,
///    VK_FORMAT_R32G32B32_SFLOAT = 106,
///    VK_FORMAT_R32G32B32A32_UINT = 107,
///    VK_FORMAT_R32G32B32A32_SINT = 108,
///    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
///    VK_FORMAT_R64_UINT = 110,
///    VK_FORMAT_R64_SINT = 111,
///    VK_FORMAT_R64_SFLOAT = 112,
///    VK_FORMAT_R64G64_UINT = 113,
///    VK_FORMAT_R64G64_SINT = 114,
///    VK_FORMAT_R64G64_SFLOAT = 115,
///    VK_FORMAT_R64G64B64_UINT = 116,
///    VK_FORMAT_R64G64B64_SINT = 117,
///    VK_FORMAT_R64G64B64_SFLOAT = 118,
///    VK_FORMAT_R64G64B64A64_UINT = 119,
///    VK_FORMAT_R64G64B64A64_SINT = 120,
///    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
///    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
///    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
///    VK_FORMAT_D16_UNORM = 124,
///    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
///    VK_FORMAT_D32_SFLOAT = 126,
///    VK_FORMAT_S8_UINT = 127,
///    VK_FORMAT_D16_UNORM_S8_UINT = 128,
///    VK_FORMAT_D24_UNORM_S8_UINT = 129,
///    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
///    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
///    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
///    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
///    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
///    VK_FORMAT_BC2_UNORM_BLOCK = 135,
///    VK_FORMAT_BC2_SRGB_BLOCK = 136,
///    VK_FORMAT_BC3_UNORM_BLOCK = 137,
///    VK_FORMAT_BC3_SRGB_BLOCK = 138,
///    VK_FORMAT_BC4_UNORM_BLOCK = 139,
///    VK_FORMAT_BC4_SNORM_BLOCK = 140,
///    VK_FORMAT_BC5_UNORM_BLOCK = 141,
///    VK_FORMAT_BC5_SNORM_BLOCK = 142,
///    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
///    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
///    VK_FORMAT_BC7_UNORM_BLOCK = 145,
///    VK_FORMAT_BC7_SRGB_BLOCK = 146,
///    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
///    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
///    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
///    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
///    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
///    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
///    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
///    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
///    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
///    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
///    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
///    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
///    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
///    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
///    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
///    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
///    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
///    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
///    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
///    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
///    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
///    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
///    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
///    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
///    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
///    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
///    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
///    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
///    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
///    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
///    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
///    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
///    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
///    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
///    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
///    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
///    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
///    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
///  // Provided by VK_VERSION_1_1
///    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
///  // Provided by VK_VERSION_1_3
///    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
///  // Provided by VK_IMG_format_pvrtc
///    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR =
/// VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR =
/// VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR =
/// VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR =
/// VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR =
/// VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT =
/// VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT =
/// VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
///  // Provided by VK_EXT_4444_formats
///    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
///  // Provided by VK_EXT_4444_formats
///    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
///} VkFormat;
///```
///# Description
/// - [`FORMAT_UNDEFINED`] specifies that the format is not specified.
/// - [`FORMAT_R4G4_UNORM_PACK8`] specifies a two-component, 8-bit packed
///unsigned normalized format that has a 4-bit R component in bits 4..7,
///and a 4-bit G component in bits 0..3.
/// - [`FORMAT_R4G4B4A4_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 4-bit R component in bits
///12..15, a 4-bit G component in bits 8..11, a 4-bit B component in bits
///4..7, and a 4-bit A component in bits 0..3.
/// - [`FORMAT_B4G4R4A4_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 4-bit B component in bits
///12..15, a 4-bit G component in bits 8..11, a 4-bit R component in bits
///4..7, and a 4-bit A component in bits 0..3.
/// - [`FORMAT_A4R4G4B4_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 4-bit A component in bits
///12..15, a 4-bit R component in bits 8..11, a 4-bit G component in bits
///4..7, and a 4-bit B component in bits 0..3.
/// - [`FORMAT_A4B4G4R4_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 4-bit A component in bits
///12..15, a 4-bit B component in bits 8..11, a 4-bit G component in bits
///4..7, and a 4-bit R component in bits 0..3.
/// - [`FORMAT_R5G6B5_UNORM_PACK16`] specifies a three-component, 16-bit
///packed unsigned normalized format that has a 5-bit R component in bits
///11..15, a 6-bit G component in bits 5..10, and a 5-bit B component in
///bits 0..4.
/// - [`FORMAT_B5G6R5_UNORM_PACK16`] specifies a three-component, 16-bit
///packed unsigned normalized format that has a 5-bit B component in bits
///11..15, a 6-bit G component in bits 5..10, and a 5-bit R component in
///bits 0..4.
/// - [`FORMAT_R5G5B5A1_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 5-bit R component in bits
///11..15, a 5-bit G component in bits 6..10, a 5-bit B component in bits
///1..5, and a 1-bit A component in bit 0.
/// - [`FORMAT_B5G5R5A1_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 5-bit B component in bits
///11..15, a 5-bit G component in bits 6..10, a 5-bit R component in bits
///1..5, and a 1-bit A component in bit 0.
/// - [`FORMAT_A1R5G5B5_UNORM_PACK16`] specifies a four-component, 16-bit
///packed unsigned normalized format that has a 1-bit A component in bit
///15, a 5-bit R component in bits 10..14, a 5-bit G component in bits
///5..9, and a 5-bit B component in bits 0..4.
/// - [`FORMAT_R8_UNORM`] specifies a one-component, 8-bit unsigned
///normalized format that has a single 8-bit R component.
/// - [`FORMAT_R8_SNORM`] specifies a one-component, 8-bit signed
///normalized format that has a single 8-bit R component.
/// - [`FORMAT_R8_USCALED`] specifies a one-component, 8-bit unsigned
///scaled integer format that has a single 8-bit R component.
/// - [`FORMAT_R8_SSCALED`] specifies a one-component, 8-bit signed
///scaled integer format that has a single 8-bit R component.
/// - [`FORMAT_R8_UINT`] specifies a one-component, 8-bit unsigned
///integer format that has a single 8-bit R component.
/// - [`FORMAT_R8_SINT`] specifies a one-component, 8-bit signed integer
///format that has a single 8-bit R component.
/// - [`FORMAT_R8_SRGB`] specifies a one-component, 8-bit unsigned
///normalized format that has a single 8-bit R component stored with sRGB
///nonlinear encoding.
/// - [`FORMAT_R8G8_UNORM`] specifies a two-component, 16-bit unsigned
///normalized format that has an 8-bit R component in byte 0, and an 8-bit
///G component in byte 1.
/// - [`FORMAT_R8G8_SNORM`] specifies a two-component, 16-bit signed
///normalized format that has an 8-bit R component in byte 0, and an 8-bit
///G component in byte 1.
/// - [`FORMAT_R8G8_USCALED`] specifies a two-component, 16-bit unsigned
///scaled integer format that has an 8-bit R component in byte 0, and an
///8-bit G component in byte 1.
/// - [`FORMAT_R8G8_SSCALED`] specifies a two-component, 16-bit signed
///scaled integer format that has an 8-bit R component in byte 0, and an
///8-bit G component in byte 1.
/// - [`FORMAT_R8G8_UINT`] specifies a two-component, 16-bit unsigned
///integer format that has an 8-bit R component in byte 0, and an 8-bit G
///component in byte 1.
/// - [`FORMAT_R8G8_SINT`] specifies a two-component, 16-bit signed
///integer format that has an 8-bit R component in byte 0, and an 8-bit G
///component in byte 1.
/// - [`FORMAT_R8G8_SRGB`] specifies a two-component, 16-bit unsigned
///normalized format that has an 8-bit R component stored with sRGB
///nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB
///nonlinear encoding in byte 1.
/// - [`FORMAT_R8G8B8_UNORM`] specifies a three-component, 24-bit
///unsigned normalized format that has an 8-bit R component in byte 0, an
///8-bit G component in byte 1, and an 8-bit B component in byte 2.
/// - [`FORMAT_R8G8B8_SNORM`] specifies a three-component, 24-bit signed
///normalized format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit B component in byte 2.
/// - [`FORMAT_R8G8B8_USCALED`] specifies a three-component, 24-bit
///unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
///G component in byte 1, and an 8-bit B component in byte 2.
/// - [`FORMAT_R8G8B8_SSCALED`] specifies a three-component, 24-bit
///signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit B component in byte 2.
/// - [`FORMAT_R8G8B8_UINT`] specifies a three-component, 24-bit unsigned
///integer format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit B component in byte 2.
/// - [`FORMAT_R8G8B8_SINT`] specifies a three-component, 24-bit signed
///integer format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit B component in byte 2.
/// - [`FORMAT_R8G8B8_SRGB`] specifies a three-component, 24-bit unsigned
///normalized format that has an 8-bit R component stored with sRGB
///nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
///nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB
///nonlinear encoding in byte 2.
/// - [`FORMAT_B8G8R8_UNORM`] specifies a three-component, 24-bit
///unsigned normalized format that has an 8-bit B component in byte 0, an
///8-bit G component in byte 1, and an 8-bit R component in byte 2.
/// - [`FORMAT_B8G8R8_SNORM`] specifies a three-component, 24-bit signed
///normalized format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit R component in byte 2.
/// - [`FORMAT_B8G8R8_USCALED`] specifies a three-component, 24-bit
///unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
///G component in byte 1, and an 8-bit R component in byte 2.
/// - [`FORMAT_B8G8R8_SSCALED`] specifies a three-component, 24-bit
///signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit R component in byte 2.
/// - [`FORMAT_B8G8R8_UINT`] specifies a three-component, 24-bit unsigned
///integer format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit R component in byte 2.
/// - [`FORMAT_B8G8R8_SINT`] specifies a three-component, 24-bit signed
///integer format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, and an 8-bit R component in byte 2.
/// - [`FORMAT_B8G8R8_SRGB`] specifies a three-component, 24-bit unsigned
///normalized format that has an 8-bit B component stored with sRGB
///nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
///nonlinear encoding in byte 1, and an 8-bit R component stored with sRGB
///nonlinear encoding in byte 2.
/// - [`FORMAT_R8G8B8A8_UNORM`] specifies a four-component, 32-bit
///unsigned normalized format that has an 8-bit R component in byte 0, an
///8-bit G component in byte 1, an 8-bit B component in byte 2, and an
///8-bit A component in byte 3.
/// - [`FORMAT_R8G8B8A8_SNORM`] specifies a four-component, 32-bit signed
///normalized format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_R8G8B8A8_USCALED`] specifies a four-component, 32-bit
///unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
///G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_R8G8B8A8_SSCALED`] specifies a four-component, 32-bit
///signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_R8G8B8A8_UINT`] specifies a four-component, 32-bit
///unsigned integer format that has an 8-bit R component in byte 0, an
///8-bit G component in byte 1, an 8-bit B component in byte 2, and an
///8-bit A component in byte 3.
/// - [`FORMAT_R8G8B8A8_SINT`] specifies a four-component, 32-bit signed
///integer format that has an 8-bit R component in byte 0, an 8-bit G
///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_R8G8B8A8_SRGB`] specifies a four-component, 32-bit
///unsigned normalized format that has an 8-bit R component stored with
///sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
///nonlinear encoding in byte 1, an 8-bit B component stored with sRGB
///nonlinear encoding in byte 2, and an 8-bit A component in byte 3.
/// - [`FORMAT_B8G8R8A8_UNORM`] specifies a four-component, 32-bit
///unsigned normalized format that has an 8-bit B component in byte 0, an
///8-bit G component in byte 1, an 8-bit R component in byte 2, and an
///8-bit A component in byte 3.
/// - [`FORMAT_B8G8R8A8_SNORM`] specifies a four-component, 32-bit signed
///normalized format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_B8G8R8A8_USCALED`] specifies a four-component, 32-bit
///unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
///G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_B8G8R8A8_SSCALED`] specifies a four-component, 32-bit
///signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_B8G8R8A8_UINT`] specifies a four-component, 32-bit
///unsigned integer format that has an 8-bit B component in byte 0, an
///8-bit G component in byte 1, an 8-bit R component in byte 2, and an
///8-bit A component in byte 3.
/// - [`FORMAT_B8G8R8A8_SINT`] specifies a four-component, 32-bit signed
///integer format that has an 8-bit B component in byte 0, an 8-bit G
///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
///component in byte 3.
/// - [`FORMAT_B8G8R8A8_SRGB`] specifies a four-component, 32-bit
///unsigned normalized format that has an 8-bit B component stored with
///sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
///nonlinear encoding in byte 1, an 8-bit R component stored with sRGB
///nonlinear encoding in byte 2, and an 8-bit A component in byte 3.
/// - [`FORMAT_A8B8G8R8_UNORM_PACK32`] specifies a four-component, 32-bit
///packed unsigned normalized format that has an 8-bit A component in bits
///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
///bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`FORMAT_A8B8G8R8_SNORM_PACK32`] specifies a four-component, 32-bit
///packed signed normalized format that has an 8-bit A component in bits
///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
///bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`FORMAT_A8B8G8R8_USCALED_PACK32`] specifies a four-component,
///32-bit packed unsigned scaled integer format that has an 8-bit A
///component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit
///G component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`FORMAT_A8B8G8R8_SSCALED_PACK32`] specifies a four-component,
///32-bit packed signed scaled integer format that has an 8-bit A component
///in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
///component in bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`FORMAT_A8B8G8R8_UINT_PACK32`] specifies a four-component, 32-bit
///packed unsigned integer format that has an 8-bit A component in bits
///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
///bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`FORMAT_A8B8G8R8_SINT_PACK32`] specifies a four-component, 32-bit
///packed signed integer format that has an 8-bit A component in bits
///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
///bits 8..15, and an 8-bit R component in bits 0..7.
/// - [`FORMAT_A8B8G8R8_SRGB_PACK32`] specifies a four-component, 32-bit
///packed unsigned normalized format that has an 8-bit A component in bits
///24..31, an 8-bit B component stored with sRGB nonlinear encoding in bits
///16..23, an 8-bit G component stored with sRGB nonlinear encoding in bits
///8..15, and an 8-bit R component stored with sRGB nonlinear encoding in
///bits 0..7.
/// - [`FORMAT_A2R10G10B10_UNORM_PACK32`] specifies a four-component,
///32-bit packed unsigned normalized format that has a 2-bit A component in
///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
///in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`FORMAT_A2R10G10B10_SNORM_PACK32`] specifies a four-component,
///32-bit packed signed normalized format that has a 2-bit A component in
///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
///in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`FORMAT_A2R10G10B10_USCALED_PACK32`] specifies a four-component,
///32-bit packed unsigned scaled integer format that has a 2-bit A
///component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit
///G component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`FORMAT_A2R10G10B10_SSCALED_PACK32`] specifies a four-component,
///32-bit packed signed scaled integer format that has a 2-bit A component
///in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
///component in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`FORMAT_A2R10G10B10_UINT_PACK32`] specifies a four-component,
///32-bit packed unsigned integer format that has a 2-bit A component in
///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
///in bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`FORMAT_A2R10G10B10_SINT_PACK32`] specifies a four-component,
///32-bit packed signed integer format that has a 2-bit A component in bits
///30..31, a 10-bit R component in bits 20..29, a 10-bit G component in
///bits 10..19, and a 10-bit B component in bits 0..9.
/// - [`FORMAT_A2B10G10R10_UNORM_PACK32`] specifies a four-component,
///32-bit packed unsigned normalized format that has a 2-bit A component in
///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
///in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`FORMAT_A2B10G10R10_SNORM_PACK32`] specifies a four-component,
///32-bit packed signed normalized format that has a 2-bit A component in
///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
///in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`FORMAT_A2B10G10R10_USCALED_PACK32`] specifies a four-component,
///32-bit packed unsigned scaled integer format that has a 2-bit A
///component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit
///G component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`FORMAT_A2B10G10R10_SSCALED_PACK32`] specifies a four-component,
///32-bit packed signed scaled integer format that has a 2-bit A component
///in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
///component in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`FORMAT_A2B10G10R10_UINT_PACK32`] specifies a four-component,
///32-bit packed unsigned integer format that has a 2-bit A component in
///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
///in bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`FORMAT_A2B10G10R10_SINT_PACK32`] specifies a four-component,
///32-bit packed signed integer format that has a 2-bit A component in bits
///30..31, a 10-bit B component in bits 20..29, a 10-bit G component in
///bits 10..19, and a 10-bit R component in bits 0..9.
/// - [`FORMAT_R16_UNORM`] specifies a one-component, 16-bit unsigned
///normalized format that has a single 16-bit R component.
/// - [`FORMAT_R16_SNORM`] specifies a one-component, 16-bit signed
///normalized format that has a single 16-bit R component.
/// - [`FORMAT_R16_USCALED`] specifies a one-component, 16-bit unsigned
///scaled integer format that has a single 16-bit R component.
/// - [`FORMAT_R16_SSCALED`] specifies a one-component, 16-bit signed
///scaled integer format that has a single 16-bit R component.
/// - [`FORMAT_R16_UINT`] specifies a one-component, 16-bit unsigned
///integer format that has a single 16-bit R component.
/// - [`FORMAT_R16_SINT`] specifies a one-component, 16-bit signed
///integer format that has a single 16-bit R component.
/// - [`FORMAT_R16_SFLOAT`] specifies a one-component, 16-bit signed
///floating-point format that has a single 16-bit R component.
/// - [`FORMAT_R16G16_UNORM`] specifies a two-component, 32-bit unsigned
///normalized format that has a 16-bit R component in bytes 0..1, and a
///16-bit G component in bytes 2..3.
/// - [`FORMAT_R16G16_SNORM`] specifies a two-component, 32-bit signed
///normalized format that has a 16-bit R component in bytes 0..1, and a
///16-bit G component in bytes 2..3.
/// - [`FORMAT_R16G16_USCALED`] specifies a two-component, 32-bit
///unsigned scaled integer format that has a 16-bit R component in bytes
///0..1, and a 16-bit G component in bytes 2..3.
/// - [`FORMAT_R16G16_SSCALED`] specifies a two-component, 32-bit signed
///scaled integer format that has a 16-bit R component in bytes 0..1, and a
///16-bit G component in bytes 2..3.
/// - [`FORMAT_R16G16_UINT`] specifies a two-component, 32-bit unsigned
///integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
///G component in bytes 2..3.
/// - [`FORMAT_R16G16_SINT`] specifies a two-component, 32-bit signed
///integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
///G component in bytes 2..3.
/// - [`FORMAT_R16G16_SFLOAT`] specifies a two-component, 32-bit signed
///floating-point format that has a 16-bit R component in bytes 0..1, and a
///16-bit G component in bytes 2..3.
/// - [`FORMAT_R16G16B16_UNORM`] specifies a three-component, 48-bit
///unsigned normalized format that has a 16-bit R component in bytes 0..1,
///a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes
///4..5.
/// - [`FORMAT_R16G16B16_SNORM`] specifies a three-component, 48-bit
///signed normalized format that has a 16-bit R component in bytes 0..1, a
///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
///4..5.
/// - [`FORMAT_R16G16B16_USCALED`] specifies a three-component, 48-bit
///unsigned scaled integer format that has a 16-bit R component in bytes
///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
///bytes 4..5.
/// - [`FORMAT_R16G16B16_SSCALED`] specifies a three-component, 48-bit
///signed scaled integer format that has a 16-bit R component in bytes
///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
///bytes 4..5.
/// - [`FORMAT_R16G16B16_UINT`] specifies a three-component, 48-bit
///unsigned integer format that has a 16-bit R component in bytes 0..1, a
///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
///4..5.
/// - [`FORMAT_R16G16B16_SINT`] specifies a three-component, 48-bit
///signed integer format that has a 16-bit R component in bytes 0..1, a
///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
///4..5.
/// - [`FORMAT_R16G16B16_SFLOAT`] specifies a three-component, 48-bit
///signed floating-point format that has a 16-bit R component in bytes
///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
///bytes 4..5.
/// - [`FORMAT_R16G16B16A16_UNORM`] specifies a four-component, 64-bit
///unsigned normalized format that has a 16-bit R component in bytes 0..1,
///a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
///and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R16G16B16A16_SNORM`] specifies a four-component, 64-bit
///signed normalized format that has a 16-bit R component in bytes 0..1, a
///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
///and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R16G16B16A16_USCALED`] specifies a four-component, 64-bit
///unsigned scaled integer format that has a 16-bit R component in bytes
///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
///4..5, and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R16G16B16A16_SSCALED`] specifies a four-component, 64-bit
///signed scaled integer format that has a 16-bit R component in bytes
///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
///4..5, and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R16G16B16A16_UINT`] specifies a four-component, 64-bit
///unsigned integer format that has a 16-bit R component in bytes 0..1, a
///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
///and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R16G16B16A16_SINT`] specifies a four-component, 64-bit
///signed integer format that has a 16-bit R component in bytes 0..1, a
///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
///and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R16G16B16A16_SFLOAT`] specifies a four-component, 64-bit
///signed floating-point format that has a 16-bit R component in bytes
///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
///4..5, and a 16-bit A component in bytes 6..7.
/// - [`FORMAT_R32_UINT`] specifies a one-component, 32-bit unsigned
///integer format that has a single 32-bit R component.
/// - [`FORMAT_R32_SINT`] specifies a one-component, 32-bit signed
///integer format that has a single 32-bit R component.
/// - [`FORMAT_R32_SFLOAT`] specifies a one-component, 32-bit signed
///floating-point format that has a single 32-bit R component.
/// - [`FORMAT_R32G32_UINT`] specifies a two-component, 64-bit unsigned
///integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
///G component in bytes 4..7.
/// - [`FORMAT_R32G32_SINT`] specifies a two-component, 64-bit signed
///integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
///G component in bytes 4..7.
/// - [`FORMAT_R32G32_SFLOAT`] specifies a two-component, 64-bit signed
///floating-point format that has a 32-bit R component in bytes 0..3, and a
///32-bit G component in bytes 4..7.
/// - [`FORMAT_R32G32B32_UINT`] specifies a three-component, 96-bit
///unsigned integer format that has a 32-bit R component in bytes 0..3, a
///32-bit G component in bytes 4..7, and a 32-bit B component in bytes
///8..11.
/// - [`FORMAT_R32G32B32_SINT`] specifies a three-component, 96-bit
///signed integer format that has a 32-bit R component in bytes 0..3, a
///32-bit G component in bytes 4..7, and a 32-bit B component in bytes
///8..11.
/// - [`FORMAT_R32G32B32_SFLOAT`] specifies a three-component, 96-bit
///signed floating-point format that has a 32-bit R component in bytes
///0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in
///bytes 8..11.
/// - [`FORMAT_R32G32B32A32_UINT`] specifies a four-component, 128-bit
///unsigned integer format that has a 32-bit R component in bytes 0..3, a
///32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
///and a 32-bit A component in bytes 12..15.
/// - [`FORMAT_R32G32B32A32_SINT`] specifies a four-component, 128-bit
///signed integer format that has a 32-bit R component in bytes 0..3, a
///32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
///and a 32-bit A component in bytes 12..15.
/// - [`FORMAT_R32G32B32A32_SFLOAT`] specifies a four-component, 128-bit
///signed floating-point format that has a 32-bit R component in bytes
///0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes
///8..11, and a 32-bit A component in bytes 12..15.
/// - [`FORMAT_R64_UINT`] specifies a one-component, 64-bit unsigned
///integer format that has a single 64-bit R component.
/// - [`FORMAT_R64_SINT`] specifies a one-component, 64-bit signed
///integer format that has a single 64-bit R component.
/// - [`FORMAT_R64_SFLOAT`] specifies a one-component, 64-bit signed
///floating-point format that has a single 64-bit R component.
/// - [`FORMAT_R64G64_UINT`] specifies a two-component, 128-bit unsigned
///integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
///G component in bytes 8..15.
/// - [`FORMAT_R64G64_SINT`] specifies a two-component, 128-bit signed
///integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
///G component in bytes 8..15.
/// - [`FORMAT_R64G64_SFLOAT`] specifies a two-component, 128-bit signed
///floating-point format that has a 64-bit R component in bytes 0..7, and a
///64-bit G component in bytes 8..15.
/// - [`FORMAT_R64G64B64_UINT`] specifies a three-component, 192-bit
///unsigned integer format that has a 64-bit R component in bytes 0..7, a
///64-bit G component in bytes 8..15, and a 64-bit B component in bytes
///16..23.
/// - [`FORMAT_R64G64B64_SINT`] specifies a three-component, 192-bit
///signed integer format that has a 64-bit R component in bytes 0..7, a
///64-bit G component in bytes 8..15, and a 64-bit B component in bytes
///16..23.
/// - [`FORMAT_R64G64B64_SFLOAT`] specifies a three-component, 192-bit
///signed floating-point format that has a 64-bit R component in bytes
///0..7, a 64-bit G component in bytes 8..15, and a 64-bit B component in
///bytes 16..23.
/// - [`FORMAT_R64G64B64A64_UINT`] specifies a four-component, 256-bit
///unsigned integer format that has a 64-bit R component in bytes 0..7, a
///64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
///and a 64-bit A component in bytes 24..31.
/// - [`FORMAT_R64G64B64A64_SINT`] specifies a four-component, 256-bit
///signed integer format that has a 64-bit R component in bytes 0..7, a
///64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
///and a 64-bit A component in bytes 24..31.
/// - [`FORMAT_R64G64B64A64_SFLOAT`] specifies a four-component, 256-bit
///signed floating-point format that has a 64-bit R component in bytes
///0..7, a 64-bit G component in bytes 8..15, a 64-bit B component in bytes
///16..23, and a 64-bit A component in bytes 24..31.
/// - [`FORMAT_B10G11R11_UFLOAT_PACK32`] specifies a three-component,
///32-bit packed unsigned floating-point format that has a 10-bit B
///component in bits 22..31, an 11-bit G component in bits 11..21, an
///11-bit R component in bits 0..10.
///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11).
/// - [`FORMAT_E5B9G9R9_UFLOAT_PACK32`] specifies a three-component,
///32-bit packed unsigned floating-point format that has a 5-bit shared
///exponent in bits 27..31, a 9-bit B component mantissa in bits 18..26, a
///9-bit G component mantissa in bits 9..17, and a 9-bit R component
///mantissa in bits 0..8.
/// - [`FORMAT_D16_UNORM`] specifies a one-component, 16-bit unsigned
///normalized format that has a single 16-bit depth component.
/// - [`FORMAT_X8_D24_UNORM_PACK32`] specifies a two-component, 32-bit
///format that has 24 unsigned normalized bits in the depth component and,
///**optionally**, 8 bits that are unused.
/// - [`FORMAT_D32_SFLOAT`] specifies a one-component, 32-bit signed
///floating-point format that has 32 bits in the depth component.
/// - [`FORMAT_S8_UINT`] specifies a one-component, 8-bit unsigned
///integer format that has 8 bits in the stencil component.
/// - [`FORMAT_D16_UNORM_S8_UINT`] specifies a two-component, 24-bit
///format that has 16 unsigned normalized bits in the depth component and 8
///unsigned integer bits in the stencil component.
/// - [`FORMAT_D24_UNORM_S8_UINT`] specifies a two-component, 32-bit
///packed format that has 8 unsigned integer bits in the stencil component,
///and 24 unsigned normalized bits in the depth component.
/// - [`FORMAT_D32_SFLOAT_S8_UINT`] specifies a two-component format that
///has 32 signed float bits in the depth component and 8 unsigned integer
///bits in the stencil component.
///There are **optionally** 24 bits that are unused.
/// - [`FORMAT_BC1_RGB_UNORM_BLOCK`] specifies a three-component,
///block-compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data.
///This format has no alpha and is considered opaque.
/// - [`FORMAT_BC1_RGB_SRGB_BLOCK`] specifies a three-component,
///block-compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///nonlinear encoding.
///This format has no alpha and is considered opaque.
/// - [`FORMAT_BC1_RGBA_UNORM_BLOCK`] specifies a four-component,
///block-compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data, and
///provides 1 bit of alpha.
/// - [`FORMAT_BC1_RGBA_SRGB_BLOCK`] specifies a four-component,
///block-compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///nonlinear encoding, and provides 1 bit of alpha.
/// - [`FORMAT_BC2_UNORM_BLOCK`] specifies a four-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///with the first 64 bits encoding alpha values followed by 64 bits
///encoding RGB values.
/// - [`FORMAT_BC2_SRGB_BLOCK`] specifies a four-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///with the first 64 bits encoding alpha values followed by 64 bits
///encoding RGB values with sRGB nonlinear encoding.
/// - [`FORMAT_BC3_UNORM_BLOCK`] specifies a four-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///with the first 64 bits encoding alpha values followed by 64 bits
///encoding RGB values.
/// - [`FORMAT_BC3_SRGB_BLOCK`] specifies a four-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///with the first 64 bits encoding alpha values followed by 64 bits
///encoding RGB values with sRGB nonlinear encoding.
/// - [`FORMAT_BC4_UNORM_BLOCK`] specifies a one-component,
///block-compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized red texel data.
/// - [`FORMAT_BC4_SNORM_BLOCK`] specifies a one-component,
///block-compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of signed normalized red texel data.
/// - [`FORMAT_BC5_UNORM_BLOCK`] specifies a two-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RG texel data with
///the first 64 bits encoding red values followed by 64 bits encoding green
///values.
/// - [`FORMAT_BC5_SNORM_BLOCK`] specifies a two-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of signed normalized RG texel data with
///the first 64 bits encoding red values followed by 64 bits encoding green
///values.
/// - [`FORMAT_BC6H_UFLOAT_BLOCK`] specifies a three-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned floating-point RGB texel data.
/// - [`FORMAT_BC6H_SFLOAT_BLOCK`] specifies a three-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of signed floating-point RGB texel data.
/// - [`FORMAT_BC7_UNORM_BLOCK`] specifies a four-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_BC7_SRGB_BLOCK`] specifies a four-component,
///block-compressed format where each 128-bit compressed texel block
///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
///with sRGB nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ETC2_R8G8B8_UNORM_BLOCK`] specifies a three-component,
///ETC2 compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data.
///This format has no alpha and is considered opaque.
/// - [`FORMAT_ETC2_R8G8B8_SRGB_BLOCK`] specifies a three-component, ETC2
///compressed format where each 64-bit compressed texel block encodes a
///4×4 rectangle of unsigned normalized RGB texel data with sRGB
///nonlinear encoding.
///This format has no alpha and is considered opaque.
/// - [`FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK`] specifies a four-component,
///ETC2 compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data, and
///provides 1 bit of alpha.
/// - [`FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK`] specifies a four-component,
///ETC2 compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
///nonlinear encoding, and provides 1 bit of alpha.
/// - [`FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK`] specifies a four-component,
///ETC2 compressed format where each 128-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGBA texel data with the
///first 64 bits encoding alpha values followed by 64 bits encoding RGB
///values.
/// - [`FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK`] specifies a four-component,
///ETC2 compressed format where each 128-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGBA texel data with the
///first 64 bits encoding alpha values followed by 64 bits encoding RGB
///values with sRGB nonlinear encoding applied.
/// - [`FORMAT_EAC_R11_UNORM_BLOCK`] specifies a one-component, ETC2
///compressed format where each 64-bit compressed texel block encodes a
///4×4 rectangle of unsigned normalized red texel data.
/// - [`FORMAT_EAC_R11_SNORM_BLOCK`] specifies a one-component, ETC2
///compressed format where each 64-bit compressed texel block encodes a
///4×4 rectangle of signed normalized red texel data.
/// - [`FORMAT_EAC_R11G11_UNORM_BLOCK`] specifies a two-component, ETC2
///compressed format where each 128-bit compressed texel block encodes a
///4×4 rectangle of unsigned normalized RG texel data with the first
///64 bits encoding red values followed by 64 bits encoding green values.
/// - [`FORMAT_EAC_R11G11_SNORM_BLOCK`] specifies a two-component, ETC2
///compressed format where each 128-bit compressed texel block encodes a
///4×4 rectangle of signed normalized RG texel data with the first 64
///bits encoding red values followed by 64 bits encoding green values.
/// - [`FORMAT_ASTC_4x4_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_4x4_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///4×4 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_4x4_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///4×4 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_5x4_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///5×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_5x4_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///5×4 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_5x4_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///5×4 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_5x5_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///5×5 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_5x5_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///5×5 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_5x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///5×5 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_6x5_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///6×5 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_6x5_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///6×5 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_6x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///6×5 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_6x6_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///6×6 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_6x6_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///6×6 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_6x6_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///6×6 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_8x5_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes an
///8×5 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_8x5_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes an
///8×5 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_8x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///8×5 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_8x6_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes an
///8×6 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_8x6_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes an
///8×6 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_8x6_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///8×6 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_8x8_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes an
///8×8 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_8x8_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes an
///8×8 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_8x8_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///8×8 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_10x5_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×5 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_10x5_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×5 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_10x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×5 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_10x6_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×6 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_10x6_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×6 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_10x6_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×6 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_10x8_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×8 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_10x8_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×8 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_10x8_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×8 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_10x10_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×10 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_10x10_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×10 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_10x10_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///10×10 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_12x10_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///12×10 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_12x10_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///12×10 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_12x10_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///12×10 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_ASTC_12x12_UNORM_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///12×12 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_ASTC_12x12_SRGB_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///12×12 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_ASTC_12x12_SFLOAT_BLOCK`] specifies a four-component, ASTC
///compressed format where each 128-bit compressed texel block encodes a
///12×12 rectangle of signed floating-point RGBA texel data.
/// - [`FORMAT_G8B8G8R8_422_UNORM`] specifies a four-component, 32-bit
///format containing a pair of G components, an R component, and a B
///component, collectively encoding a 2×1 rectangle of unsigned
///normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has an 8-bit G component for the even *i* coordinate in byte
///0, an 8-bit B component in byte 1, an 8-bit G component for the odd *i*
///coordinate in byte 2, and an 8-bit R component in byte 3.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_B8G8R8G8_422_UNORM`] specifies a four-component, 32-bit
///format containing a pair of G components, an R component, and a B
///component, collectively encoding a 2×1 rectangle of unsigned
///normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has an 8-bit B component in byte 0, an 8-bit G component for
///the even *i* coordinate in byte 1, an 8-bit R component in byte 2, and
///an 8-bit G component for the odd *i* coordinate in byte 3.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_G8_B8_R8_3PLANE_420_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has an 8-bit G component in plane
///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
///The horizontal and vertical dimensions of the R and B planes are halved
///relative to the image dimensions, and each R and B component is shared
///with the G components for which <span class="katex"><span class="katex-html"
/// aria-hidden="true"><span class="base"><span class="strut"
/// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
/// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
/// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
/// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.05017em;" class="mord mathdefault
/// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
/// class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
/// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
/// class="mord">5</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.05017em;" class="mord mathdefault
/// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
/// class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G8_B8R8_2PLANE_420_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has an 8-bit G component in plane
///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
///component in byte 0 and an 8-bit R component in byte 1.
///The horizontal and vertical dimensions of the BR plane are halved
///relative to the image dimensions, and each R and B value is shared with
///the G components for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
/// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
/// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
/// style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
/// class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
/// class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
/// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
/// class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G8_B8_R8_3PLANE_422_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has an 8-bit G component in plane
///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
///The horizontal dimension of the R and B plane is halved relative to the
///image dimensions, and each R and B value is shared with the G components
///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
/// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
/// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
/// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
/// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G8_B8R8_2PLANE_422_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has an 8-bit G component in plane
///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
///component in byte 0 and an 8-bit R component in byte 1.
///The horizontal dimension of the BR plane is halved relative to the image
///dimensions, and each R and B value is shared with the G components for
///which <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
/// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
/// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G8_B8_R8_3PLANE_444_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has an 8-bit G component in plane
///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
///Each plane has the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
/// - [`FORMAT_R10X6_UNORM_PACK16`] specifies a one-component, 16-bit
///unsigned normalized format that has a single 10-bit R component in the
///top 10 bits of a 16-bit word, with the bottom 6 bits unused.
/// - [`FORMAT_R10X6G10X6_UNORM_2PACK16`] specifies a two-component,
///32-bit unsigned normalized format that has a 10-bit R component in the
///top 10 bits of the word in bytes 0..1, and a 10-bit G component in the
///top 10 bits of the word in bytes 2..3, with the bottom 6 bits of each
///word unused.
/// - [`FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16`] specifies a
///four-component, 64-bit unsigned normalized format that has a 10-bit R
///component in the top 10 bits of the word in bytes 0..1, a 10-bit G
///component in the top 10 bits of the word in bytes 2..3, a 10-bit B
///component in the top 10 bits of the word in bytes 4..5, and a 10-bit A
///component in the top 10 bits of the word in bytes 6..7, with the bottom
///6 bits of each word unused.
/// - [`FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16`] specifies a
///four-component, 64-bit format containing a pair of G components, an R
///component, and a B component, collectively encoding a 2×1
///rectangle of unsigned normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has a 10-bit G component for the even *i* coordinate in the
///top 10 bits of the word in bytes 0..1, a 10-bit B component in the top
///10 bits of the word in bytes 2..3, a 10-bit G component for the odd *i*
///coordinate in the top 10 bits of the word in bytes 4..5, and a 10-bit R
///component in the top 10 bits of the word in bytes 6..7, with the bottom
///6 bits of each word unused.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16`] specifies a
///four-component, 64-bit format containing a pair of G components, an R
///component, and a B component, collectively encoding a 2×1
///rectangle of unsigned normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has a 10-bit B component in the top 10 bits of the word in
///bytes 0..1, a 10-bit G component for the even *i* coordinate in the top
///10 bits of the word in bytes 2..3, a 10-bit R component in the top 10
///bits of the word in bytes 4..5, and a 10-bit G component for the odd *i*
///coordinate in the top 10 bits of the word in bytes 6..7, with the bottom
///6 bits of each word unused.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 10-bit G component
///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
///component in the top 10 bits of each 16-bit word of plane 2, with the
///bottom 6 bits of each word unused.
///The horizontal and vertical dimensions of the R and B planes are halved
///relative to the image dimensions, and each R and B component is shared
///with the G components for which <span class="katex"><span class="katex-html"
/// aria-hidden="true"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
/// class="strut"></span><span class="minner"><span class="mopen delimcenter"
/// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.00773em;" class="mord mathdefault
/// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and
/// <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span><span class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
/// class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.00773em;" class="mord mathdefault
/// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 10-bit G component
///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
///of the word in bytes 2..3, with the bottom 6 bits of each word unused.
///The horizontal and vertical dimensions of the BR plane are halved
///relative to the image dimensions, and each R and B value is shared with
///the G components for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
/// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.05017em;" class="mord mathdefault
/// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
/// class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"
/// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span style="top:0em;"
/// class="mopen delimcenter">⌊</span><span class="mord"><span class="mord mathdefault"
/// style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
/// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
/// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
/// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 10-bit G component
///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
///component in the top 10 bits of each 16-bit word of plane 2, with the
///bottom 6 bits of each word unused.
///The horizontal dimension of the R and B plane is halved relative to the
///image dimensions, and each R and B value is shared with the G components
///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
/// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
/// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span><span class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.05017em;" class="mord mathdefault
/// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.00773em;" class="mord mathdefault
/// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 10-bit G component
///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
///of the word in bytes 2..3, with the bottom 6 bits of each word unused.
///The horizontal dimension of the BR plane is halved relative to the image
///dimensions, and each R and B value is shared with the G components for
///which <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
/// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
/// style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 10-bit G component
///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
///component in the top 10 bits of each 16-bit word of plane 2, with the
///bottom 6 bits of each word unused.
///Each plane has the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
/// - [`FORMAT_R12X4_UNORM_PACK16`] specifies a one-component, 16-bit
///unsigned normalized format that has a single 12-bit R component in the
///top 12 bits of a 16-bit word, with the bottom 4 bits unused.
/// - [`FORMAT_R12X4G12X4_UNORM_2PACK16`] specifies a two-component,
///32-bit unsigned normalized format that has a 12-bit R component in the
///top 12 bits of the word in bytes 0..1, and a 12-bit G component in the
///top 12 bits of the word in bytes 2..3, with the bottom 4 bits of each
///word unused.
/// - [`FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16`] specifies a
///four-component, 64-bit unsigned normalized format that has a 12-bit R
///component in the top 12 bits of the word in bytes 0..1, a 12-bit G
///component in the top 12 bits of the word in bytes 2..3, a 12-bit B
///component in the top 12 bits of the word in bytes 4..5, and a 12-bit A
///component in the top 12 bits of the word in bytes 6..7, with the bottom
///4 bits of each word unused.
/// - [`FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16`] specifies a
///four-component, 64-bit format containing a pair of G components, an R
///component, and a B component, collectively encoding a 2×1
///rectangle of unsigned normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has a 12-bit G component for the even *i* coordinate in the
///top 12 bits of the word in bytes 0..1, a 12-bit B component in the top
///12 bits of the word in bytes 2..3, a 12-bit G component for the odd *i*
///coordinate in the top 12 bits of the word in bytes 4..5, and a 12-bit R
///component in the top 12 bits of the word in bytes 6..7, with the bottom
///4 bits of each word unused.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16`] specifies a
///four-component, 64-bit format containing a pair of G components, an R
///component, and a B component, collectively encoding a 2×1
///rectangle of unsigned normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has a 12-bit B component in the top 12 bits of the word in
///bytes 0..1, a 12-bit G component for the even *i* coordinate in the top
///12 bits of the word in bytes 2..3, a 12-bit R component in the top 12
///bits of the word in bytes 4..5, and a 12-bit G component for the odd *i*
///coordinate in the top 12 bits of the word in bytes 6..7, with the bottom
///4 bits of each word unused.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 12-bit G component
///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
///component in the top 12 bits of each 16-bit word of plane 2, with the
///bottom 4 bits of each word unused.
///The horizontal and vertical dimensions of the R and B planes are halved
///relative to the image dimensions, and each R and B component is shared
///with the G components for which <span class="katex"><span aria-hidden="true"
/// class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
/// class="strut"></span><span class="minner"><span class="mopen delimcenter"
/// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span><span class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and
/// <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
/// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
/// class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
/// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
/// style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 12-bit G component
///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
///of the word in bytes 2..3, with the bottom 4 bits of each word unused.
///The horizontal and vertical dimensions of the BR plane are halved
///relative to the image dimensions, and each R and B value is shared with
///the G components for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
/// class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
/// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and
/// <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
/// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
/// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
/// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
/// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
/// style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.00773em;" class="mord mathdefault
/// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 12-bit G component
///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
///component in the top 12 bits of each 16-bit word of plane 2, with the
///bottom 4 bits of each word unused.
///The horizontal dimension of the R and B plane is halved relative to the
///image dimensions, and each R and B value is shared with the G components
///for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
/// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.00773em;" class="mord mathdefault
/// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 12-bit G component
///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
///of the word in bytes 2..3, with the bottom 4 bits of each word unused.
///The horizontal dimension of the BR plane is halved relative to the image
///dimensions, and each R and B value is shared with the G components for
///which <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
/// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.05017em;" class="mord mathdefault
/// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 12-bit G component
///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
///component in the top 12 bits of each 16-bit word of plane 2, with the
///bottom 4 bits of each word unused.
///Each plane has the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
/// - [`FORMAT_G16B16G16R16_422_UNORM`] specifies a four-component,
///64-bit format containing a pair of G components, an R component, and a B
///component, collectively encoding a 2×1 rectangle of unsigned
///normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has a 16-bit G component for the even *i* coordinate in the
///word in bytes 0..1, a 16-bit B component in the word in bytes 2..3, a
///16-bit G component for the odd *i* coordinate in the word in bytes 4..5,
///and a 16-bit R component in the word in bytes 6..7.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_B16G16R16G16_422_UNORM`] specifies a four-component,
///64-bit format containing a pair of G components, an R component, and a B
///component, collectively encoding a 2×1 rectangle of unsigned
///normalized RGB texel data.
///One G value is present at each *i* coordinate, with the B and R values
///shared across both G values and thus recorded at half the horizontal
///resolution of the image.
///This format has a 16-bit B component in the word in bytes 0..1, a 16-bit
///G component for the even *i* coordinate in the word in bytes 2..3, a
///16-bit R component in the word in bytes 4..5, and a 16-bit G component
///for the odd *i* coordinate in the word in bytes 6..7.
///This format only supports images with a width that is a multiple of two.
///For the purposes of the constraints on copy extents, this format is
///treated as a compressed format with a 2×1 compressed texel block.
/// - [`FORMAT_G16_B16_R16_3PLANE_420_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has a 16-bit G component in each
///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
///The horizontal and vertical dimensions of the R and B planes are halved
///relative to the image dimensions, and each R and B component is shared
///with the G components for which <span class="katex"><span aria-hidden="true"
/// class="katex-html"><span class="base"><span class="strut"
/// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
/// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
/// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span class="strut"
/// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.05017em;" class="mord mathdefault
/// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// style="margin-right:0.00773em;" class="mord mathdefault
/// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
/// class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span> and <span
/// class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
/// class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
/// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
/// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
/// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
/// style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G16_B16R16_2PLANE_420_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has a 16-bit G component in each
///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
///consisting of a 16-bit B component in the word in bytes 0..1, and a
///16-bit R component in the word in bytes 2..3.
///The horizontal and vertical dimensions of the BR plane are halved
///relative to the image dimensions, and each R and B value is shared with
///the G components for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
/// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
/// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose
/// delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and
/// <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
/// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
/// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
/// class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
/// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
/// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span></span><span class="base"><span class="strut"
/// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord
/// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t
/// vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
/// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
/// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
/// style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width and height that is a
///multiple of two.
/// - [`FORMAT_G16_B16_R16_3PLANE_422_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has a 16-bit G component in each
///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
///The horizontal dimension of the R and B plane is halved relative to the
///image dimensions, and each R and B value is shared with the G components
///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
/// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
/// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span
/// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
/// class="mbin">×</span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
/// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
/// style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
/// class="mspace"></span><span class="mrel">=</span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
/// class="vlist"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G16_B16R16_2PLANE_422_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has a 16-bit G component in each
///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
///consisting of a 16-bit B component in the word in bytes 0..1, and a
///16-bit R component in the word in bytes 2..3.
///The horizontal dimension of the BR plane is halved relative to the image
///dimensions, and each R and B value is shared with the G components for
///which <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
/// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
/// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
/// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight">G</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
/// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
/// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
/// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
/// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
/// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
/// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
/// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
/// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span
/// class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
/// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
/// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
/// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span
/// class="mord mathdefault mtight"
/// style="margin-right:0.00773em;">R</span></span></span></span><span
/// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
/// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
///This format only supports images with a width that is a multiple of two.
/// - [`FORMAT_G16_B16_R16_3PLANE_444_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has a 16-bit G component in each
///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
///Each plane has the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
/// - [`FORMAT_G8_B8R8_2PLANE_444_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has an 8-bit G component in plane
///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
///component in byte 0 and an 8-bit R component in byte 1.
///Both planes have the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
/// - [`FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 10-bit G component
///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
///of the word in bytes 2..3, the bottom 6 bits of each word unused.
///Both planes have the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
/// - [`FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16`] specifies an
///unsigned normalized *multi-planar format* that has a 12-bit G component
///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
///of the word in bytes 2..3, the bottom 4 bits of each word unused.
///Both planes have the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
/// - [`FORMAT_G16_B16R16_2PLANE_444_UNORM`] specifies an unsigned
///normalized *multi-planar format* that has a 16-bit G component in each
///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
///consisting of a 16-bit B component in the word in bytes 0..1, and a
///16-bit R component in the word in bytes 2..3.
///Both planes have the same dimensions and each R, G and B component
///contributes to a single texel.
///The location of each plane when this image is in linear layout can be
///determined via [`GetImageSubresourceLayout`], using
///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
/// - [`FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///an 8×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///an 8×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGBA texel data.
/// - [`FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///an 8×4 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///an 8×4 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
/// - [`FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG`] specifies a four-component,
///PVRTC compressed format where each 64-bit compressed texel block encodes
///a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB
///nonlinear encoding applied to the RGB components.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`AndroidHardwareBufferFormatProperties2ANDROID`]
/// - [`AndroidHardwareBufferFormatPropertiesANDROID`]
/// - [`AttachmentDescription`]
/// - [`AttachmentDescription2`]
/// - [`BufferViewCreateInfo`]
/// - [`CommandBufferInheritanceRenderingInfo`]
/// - [`FramebufferAttachmentImageInfo`]
/// - [`GeometryTrianglesNV`]
/// - [`ImageCreateInfo`]
/// - [`ImageFormatListCreateInfo`]
/// - [`ImageViewAstcDecodeModeEXT`]
/// - [`ImageViewCreateInfo`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`PipelineRenderingCreateInfo`]
/// - [`SamplerCustomBorderColorCreateInfoEXT`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`SurfaceFormatKHR`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`VertexInputAttributeDescription`]
/// - [`VertexInputAttributeDescription2EXT`]
/// - [`VideoFormatPropertiesKHR`]
/// - [`VideoSessionCreateInfoKHR`]
/// - [`GetPhysicalDeviceExternalImageFormatPropertiesNV`]
/// - [`GetPhysicalDeviceFormatProperties`]
/// - [`GetPhysicalDeviceFormatProperties2`]
/// - [`GetPhysicalDeviceFormatProperties2KHR`]
/// - [`GetPhysicalDeviceImageFormatProperties`]
/// - [`GetPhysicalDeviceSparseImageFormatProperties`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkFormat")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct Format(i32);
impl const Default for Format {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for Format {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("Format")
            .field(match *self {
                Self::FORMAT_UNDEFINED => &"FORMAT_UNDEFINED",
                Self::FORMAT_R4G4_UNORM_PACK8 => &"FORMAT_R4G4_UNORM_PACK8",
                Self::FORMAT_R4G4B4A4_UNORM_PACK16 => &"FORMAT_R4G4B4A4_UNORM_PACK16",
                Self::FORMAT_B4G4R4A4_UNORM_PACK16 => &"FORMAT_B4G4R4A4_UNORM_PACK16",
                Self::FORMAT_R5G6B5_UNORM_PACK16 => &"FORMAT_R5G6B5_UNORM_PACK16",
                Self::FORMAT_B5G6R5_UNORM_PACK16 => &"FORMAT_B5G6R5_UNORM_PACK16",
                Self::FORMAT_R5G5B5A1_UNORM_PACK16 => &"FORMAT_R5G5B5A1_UNORM_PACK16",
                Self::FORMAT_B5G5R5A1_UNORM_PACK16 => &"FORMAT_B5G5R5A1_UNORM_PACK16",
                Self::FORMAT_A1R5G5B5_UNORM_PACK16 => &"FORMAT_A1R5G5B5_UNORM_PACK16",
                Self::FORMAT_R8_UNORM => &"FORMAT_R8_UNORM",
                Self::FORMAT_R8_SNORM => &"FORMAT_R8_SNORM",
                Self::FORMAT_R8_USCALED => &"FORMAT_R8_USCALED",
                Self::FORMAT_R8_SSCALED => &"FORMAT_R8_SSCALED",
                Self::FORMAT_R8_UINT => &"FORMAT_R8_UINT",
                Self::FORMAT_R8_SINT => &"FORMAT_R8_SINT",
                Self::FORMAT_R8_SRGB => &"FORMAT_R8_SRGB",
                Self::FORMAT_R8G8_UNORM => &"FORMAT_R8G8_UNORM",
                Self::FORMAT_R8G8_SNORM => &"FORMAT_R8G8_SNORM",
                Self::FORMAT_R8G8_USCALED => &"FORMAT_R8G8_USCALED",
                Self::FORMAT_R8G8_SSCALED => &"FORMAT_R8G8_SSCALED",
                Self::FORMAT_R8G8_UINT => &"FORMAT_R8G8_UINT",
                Self::FORMAT_R8G8_SINT => &"FORMAT_R8G8_SINT",
                Self::FORMAT_R8G8_SRGB => &"FORMAT_R8G8_SRGB",
                Self::FORMAT_R8G8B8_UNORM => &"FORMAT_R8G8B8_UNORM",
                Self::FORMAT_R8G8B8_SNORM => &"FORMAT_R8G8B8_SNORM",
                Self::FORMAT_R8G8B8_USCALED => &"FORMAT_R8G8B8_USCALED",
                Self::FORMAT_R8G8B8_SSCALED => &"FORMAT_R8G8B8_SSCALED",
                Self::FORMAT_R8G8B8_UINT => &"FORMAT_R8G8B8_UINT",
                Self::FORMAT_R8G8B8_SINT => &"FORMAT_R8G8B8_SINT",
                Self::FORMAT_R8G8B8_SRGB => &"FORMAT_R8G8B8_SRGB",
                Self::FORMAT_B8G8R8_UNORM => &"FORMAT_B8G8R8_UNORM",
                Self::FORMAT_B8G8R8_SNORM => &"FORMAT_B8G8R8_SNORM",
                Self::FORMAT_B8G8R8_USCALED => &"FORMAT_B8G8R8_USCALED",
                Self::FORMAT_B8G8R8_SSCALED => &"FORMAT_B8G8R8_SSCALED",
                Self::FORMAT_B8G8R8_UINT => &"FORMAT_B8G8R8_UINT",
                Self::FORMAT_B8G8R8_SINT => &"FORMAT_B8G8R8_SINT",
                Self::FORMAT_B8G8R8_SRGB => &"FORMAT_B8G8R8_SRGB",
                Self::FORMAT_R8G8B8A8_UNORM => &"FORMAT_R8G8B8A8_UNORM",
                Self::FORMAT_R8G8B8A8_SNORM => &"FORMAT_R8G8B8A8_SNORM",
                Self::FORMAT_R8G8B8A8_USCALED => &"FORMAT_R8G8B8A8_USCALED",
                Self::FORMAT_R8G8B8A8_SSCALED => &"FORMAT_R8G8B8A8_SSCALED",
                Self::FORMAT_R8G8B8A8_UINT => &"FORMAT_R8G8B8A8_UINT",
                Self::FORMAT_R8G8B8A8_SINT => &"FORMAT_R8G8B8A8_SINT",
                Self::FORMAT_R8G8B8A8_SRGB => &"FORMAT_R8G8B8A8_SRGB",
                Self::FORMAT_B8G8R8A8_UNORM => &"FORMAT_B8G8R8A8_UNORM",
                Self::FORMAT_B8G8R8A8_SNORM => &"FORMAT_B8G8R8A8_SNORM",
                Self::FORMAT_B8G8R8A8_USCALED => &"FORMAT_B8G8R8A8_USCALED",
                Self::FORMAT_B8G8R8A8_SSCALED => &"FORMAT_B8G8R8A8_SSCALED",
                Self::FORMAT_B8G8R8A8_UINT => &"FORMAT_B8G8R8A8_UINT",
                Self::FORMAT_B8G8R8A8_SINT => &"FORMAT_B8G8R8A8_SINT",
                Self::FORMAT_B8G8R8A8_SRGB => &"FORMAT_B8G8R8A8_SRGB",
                Self::FORMAT_A8B8G8R8_UNORM_PACK32 => &"FORMAT_A8B8G8R8_UNORM_PACK32",
                Self::FORMAT_A8B8G8R8_SNORM_PACK32 => &"FORMAT_A8B8G8R8_SNORM_PACK32",
                Self::FORMAT_A8B8G8R8_USCALED_PACK32 => &"FORMAT_A8B8G8R8_USCALED_PACK32",
                Self::FORMAT_A8B8G8R8_SSCALED_PACK32 => &"FORMAT_A8B8G8R8_SSCALED_PACK32",
                Self::FORMAT_A8B8G8R8_UINT_PACK32 => &"FORMAT_A8B8G8R8_UINT_PACK32",
                Self::FORMAT_A8B8G8R8_SINT_PACK32 => &"FORMAT_A8B8G8R8_SINT_PACK32",
                Self::FORMAT_A8B8G8R8_SRGB_PACK32 => &"FORMAT_A8B8G8R8_SRGB_PACK32",
                Self::FORMAT_A2R10G10B10_UNORM_PACK32 => &"FORMAT_A2R10G10B10_UNORM_PACK32",
                Self::FORMAT_A2R10G10B10_SNORM_PACK32 => &"FORMAT_A2R10G10B10_SNORM_PACK32",
                Self::FORMAT_A2R10G10B10_USCALED_PACK32 => &"FORMAT_A2R10G10B10_USCALED_PACK32",
                Self::FORMAT_A2R10G10B10_SSCALED_PACK32 => &"FORMAT_A2R10G10B10_SSCALED_PACK32",
                Self::FORMAT_A2R10G10B10_UINT_PACK32 => &"FORMAT_A2R10G10B10_UINT_PACK32",
                Self::FORMAT_A2R10G10B10_SINT_PACK32 => &"FORMAT_A2R10G10B10_SINT_PACK32",
                Self::FORMAT_A2B10G10R10_UNORM_PACK32 => &"FORMAT_A2B10G10R10_UNORM_PACK32",
                Self::FORMAT_A2B10G10R10_SNORM_PACK32 => &"FORMAT_A2B10G10R10_SNORM_PACK32",
                Self::FORMAT_A2B10G10R10_USCALED_PACK32 => &"FORMAT_A2B10G10R10_USCALED_PACK32",
                Self::FORMAT_A2B10G10R10_SSCALED_PACK32 => &"FORMAT_A2B10G10R10_SSCALED_PACK32",
                Self::FORMAT_A2B10G10R10_UINT_PACK32 => &"FORMAT_A2B10G10R10_UINT_PACK32",
                Self::FORMAT_A2B10G10R10_SINT_PACK32 => &"FORMAT_A2B10G10R10_SINT_PACK32",
                Self::FORMAT_R16_UNORM => &"FORMAT_R16_UNORM",
                Self::FORMAT_R16_SNORM => &"FORMAT_R16_SNORM",
                Self::FORMAT_R16_USCALED => &"FORMAT_R16_USCALED",
                Self::FORMAT_R16_SSCALED => &"FORMAT_R16_SSCALED",
                Self::FORMAT_R16_UINT => &"FORMAT_R16_UINT",
                Self::FORMAT_R16_SINT => &"FORMAT_R16_SINT",
                Self::FORMAT_R16_SFLOAT => &"FORMAT_R16_SFLOAT",
                Self::FORMAT_R16G16_UNORM => &"FORMAT_R16G16_UNORM",
                Self::FORMAT_R16G16_SNORM => &"FORMAT_R16G16_SNORM",
                Self::FORMAT_R16G16_USCALED => &"FORMAT_R16G16_USCALED",
                Self::FORMAT_R16G16_SSCALED => &"FORMAT_R16G16_SSCALED",
                Self::FORMAT_R16G16_UINT => &"FORMAT_R16G16_UINT",
                Self::FORMAT_R16G16_SINT => &"FORMAT_R16G16_SINT",
                Self::FORMAT_R16G16_SFLOAT => &"FORMAT_R16G16_SFLOAT",
                Self::FORMAT_R16G16B16_UNORM => &"FORMAT_R16G16B16_UNORM",
                Self::FORMAT_R16G16B16_SNORM => &"FORMAT_R16G16B16_SNORM",
                Self::FORMAT_R16G16B16_USCALED => &"FORMAT_R16G16B16_USCALED",
                Self::FORMAT_R16G16B16_SSCALED => &"FORMAT_R16G16B16_SSCALED",
                Self::FORMAT_R16G16B16_UINT => &"FORMAT_R16G16B16_UINT",
                Self::FORMAT_R16G16B16_SINT => &"FORMAT_R16G16B16_SINT",
                Self::FORMAT_R16G16B16_SFLOAT => &"FORMAT_R16G16B16_SFLOAT",
                Self::FORMAT_R16G16B16A16_UNORM => &"FORMAT_R16G16B16A16_UNORM",
                Self::FORMAT_R16G16B16A16_SNORM => &"FORMAT_R16G16B16A16_SNORM",
                Self::FORMAT_R16G16B16A16_USCALED => &"FORMAT_R16G16B16A16_USCALED",
                Self::FORMAT_R16G16B16A16_SSCALED => &"FORMAT_R16G16B16A16_SSCALED",
                Self::FORMAT_R16G16B16A16_UINT => &"FORMAT_R16G16B16A16_UINT",
                Self::FORMAT_R16G16B16A16_SINT => &"FORMAT_R16G16B16A16_SINT",
                Self::FORMAT_R16G16B16A16_SFLOAT => &"FORMAT_R16G16B16A16_SFLOAT",
                Self::FORMAT_R32_UINT => &"FORMAT_R32_UINT",
                Self::FORMAT_R32_SINT => &"FORMAT_R32_SINT",
                Self::FORMAT_R32_SFLOAT => &"FORMAT_R32_SFLOAT",
                Self::FORMAT_R32G32_UINT => &"FORMAT_R32G32_UINT",
                Self::FORMAT_R32G32_SINT => &"FORMAT_R32G32_SINT",
                Self::FORMAT_R32G32_SFLOAT => &"FORMAT_R32G32_SFLOAT",
                Self::FORMAT_R32G32B32_UINT => &"FORMAT_R32G32B32_UINT",
                Self::FORMAT_R32G32B32_SINT => &"FORMAT_R32G32B32_SINT",
                Self::FORMAT_R32G32B32_SFLOAT => &"FORMAT_R32G32B32_SFLOAT",
                Self::FORMAT_R32G32B32A32_UINT => &"FORMAT_R32G32B32A32_UINT",
                Self::FORMAT_R32G32B32A32_SINT => &"FORMAT_R32G32B32A32_SINT",
                Self::FORMAT_R32G32B32A32_SFLOAT => &"FORMAT_R32G32B32A32_SFLOAT",
                Self::FORMAT_R64_UINT => &"FORMAT_R64_UINT",
                Self::FORMAT_R64_SINT => &"FORMAT_R64_SINT",
                Self::FORMAT_R64_SFLOAT => &"FORMAT_R64_SFLOAT",
                Self::FORMAT_R64G64_UINT => &"FORMAT_R64G64_UINT",
                Self::FORMAT_R64G64_SINT => &"FORMAT_R64G64_SINT",
                Self::FORMAT_R64G64_SFLOAT => &"FORMAT_R64G64_SFLOAT",
                Self::FORMAT_R64G64B64_UINT => &"FORMAT_R64G64B64_UINT",
                Self::FORMAT_R64G64B64_SINT => &"FORMAT_R64G64B64_SINT",
                Self::FORMAT_R64G64B64_SFLOAT => &"FORMAT_R64G64B64_SFLOAT",
                Self::FORMAT_R64G64B64A64_UINT => &"FORMAT_R64G64B64A64_UINT",
                Self::FORMAT_R64G64B64A64_SINT => &"FORMAT_R64G64B64A64_SINT",
                Self::FORMAT_R64G64B64A64_SFLOAT => &"FORMAT_R64G64B64A64_SFLOAT",
                Self::FORMAT_B10G11R11_UFLOAT_PACK32 => &"FORMAT_B10G11R11_UFLOAT_PACK32",
                Self::FORMAT_E5B9G9R9_UFLOAT_PACK32 => &"FORMAT_E5B9G9R9_UFLOAT_PACK32",
                Self::FORMAT_D16_UNORM => &"FORMAT_D16_UNORM",
                Self::FORMAT_X8_D24_UNORM_PACK32 => &"FORMAT_X8_D24_UNORM_PACK32",
                Self::FORMAT_D32_SFLOAT => &"FORMAT_D32_SFLOAT",
                Self::FORMAT_S8_UINT => &"FORMAT_S8_UINT",
                Self::FORMAT_D16_UNORM_S8_UINT => &"FORMAT_D16_UNORM_S8_UINT",
                Self::FORMAT_D24_UNORM_S8_UINT => &"FORMAT_D24_UNORM_S8_UINT",
                Self::FORMAT_D32_SFLOAT_S8_UINT => &"FORMAT_D32_SFLOAT_S8_UINT",
                Self::FORMAT_BC1_RGB_UNORM_BLOCK => &"FORMAT_BC1_RGB_UNORM_BLOCK",
                Self::FORMAT_BC1_RGB_SRGB_BLOCK => &"FORMAT_BC1_RGB_SRGB_BLOCK",
                Self::FORMAT_BC1_RGBA_UNORM_BLOCK => &"FORMAT_BC1_RGBA_UNORM_BLOCK",
                Self::FORMAT_BC1_RGBA_SRGB_BLOCK => &"FORMAT_BC1_RGBA_SRGB_BLOCK",
                Self::FORMAT_BC2_UNORM_BLOCK => &"FORMAT_BC2_UNORM_BLOCK",
                Self::FORMAT_BC2_SRGB_BLOCK => &"FORMAT_BC2_SRGB_BLOCK",
                Self::FORMAT_BC3_UNORM_BLOCK => &"FORMAT_BC3_UNORM_BLOCK",
                Self::FORMAT_BC3_SRGB_BLOCK => &"FORMAT_BC3_SRGB_BLOCK",
                Self::FORMAT_BC4_UNORM_BLOCK => &"FORMAT_BC4_UNORM_BLOCK",
                Self::FORMAT_BC4_SNORM_BLOCK => &"FORMAT_BC4_SNORM_BLOCK",
                Self::FORMAT_BC5_UNORM_BLOCK => &"FORMAT_BC5_UNORM_BLOCK",
                Self::FORMAT_BC5_SNORM_BLOCK => &"FORMAT_BC5_SNORM_BLOCK",
                Self::FORMAT_BC6H_UFLOAT_BLOCK => &"FORMAT_BC6H_UFLOAT_BLOCK",
                Self::FORMAT_BC6H_SFLOAT_BLOCK => &"FORMAT_BC6H_SFLOAT_BLOCK",
                Self::FORMAT_BC7_UNORM_BLOCK => &"FORMAT_BC7_UNORM_BLOCK",
                Self::FORMAT_BC7_SRGB_BLOCK => &"FORMAT_BC7_SRGB_BLOCK",
                Self::FORMAT_ETC2_R8G8B8_UNORM_BLOCK => &"FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
                Self::FORMAT_ETC2_R8G8B8_SRGB_BLOCK => &"FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
                Self::FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK => &"FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
                Self::FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK => &"FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
                Self::FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK => &"FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
                Self::FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK => &"FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
                Self::FORMAT_EAC_R11_UNORM_BLOCK => &"FORMAT_EAC_R11_UNORM_BLOCK",
                Self::FORMAT_EAC_R11_SNORM_BLOCK => &"FORMAT_EAC_R11_SNORM_BLOCK",
                Self::FORMAT_EAC_R11G11_UNORM_BLOCK => &"FORMAT_EAC_R11G11_UNORM_BLOCK",
                Self::FORMAT_EAC_R11G11_SNORM_BLOCK => &"FORMAT_EAC_R11G11_SNORM_BLOCK",
                Self::FORMAT_ASTC_4x4_UNORM_BLOCK => &"FORMAT_ASTC_4x4_UNORM_BLOCK",
                Self::FORMAT_ASTC_4x4_SRGB_BLOCK => &"FORMAT_ASTC_4x4_SRGB_BLOCK",
                Self::FORMAT_ASTC_5x4_UNORM_BLOCK => &"FORMAT_ASTC_5x4_UNORM_BLOCK",
                Self::FORMAT_ASTC_5x4_SRGB_BLOCK => &"FORMAT_ASTC_5x4_SRGB_BLOCK",
                Self::FORMAT_ASTC_5x5_UNORM_BLOCK => &"FORMAT_ASTC_5x5_UNORM_BLOCK",
                Self::FORMAT_ASTC_5x5_SRGB_BLOCK => &"FORMAT_ASTC_5x5_SRGB_BLOCK",
                Self::FORMAT_ASTC_6x5_UNORM_BLOCK => &"FORMAT_ASTC_6x5_UNORM_BLOCK",
                Self::FORMAT_ASTC_6x5_SRGB_BLOCK => &"FORMAT_ASTC_6x5_SRGB_BLOCK",
                Self::FORMAT_ASTC_6x6_UNORM_BLOCK => &"FORMAT_ASTC_6x6_UNORM_BLOCK",
                Self::FORMAT_ASTC_6x6_SRGB_BLOCK => &"FORMAT_ASTC_6x6_SRGB_BLOCK",
                Self::FORMAT_ASTC_8x5_UNORM_BLOCK => &"FORMAT_ASTC_8x5_UNORM_BLOCK",
                Self::FORMAT_ASTC_8x5_SRGB_BLOCK => &"FORMAT_ASTC_8x5_SRGB_BLOCK",
                Self::FORMAT_ASTC_8x6_UNORM_BLOCK => &"FORMAT_ASTC_8x6_UNORM_BLOCK",
                Self::FORMAT_ASTC_8x6_SRGB_BLOCK => &"FORMAT_ASTC_8x6_SRGB_BLOCK",
                Self::FORMAT_ASTC_8x8_UNORM_BLOCK => &"FORMAT_ASTC_8x8_UNORM_BLOCK",
                Self::FORMAT_ASTC_8x8_SRGB_BLOCK => &"FORMAT_ASTC_8x8_SRGB_BLOCK",
                Self::FORMAT_ASTC_10x5_UNORM_BLOCK => &"FORMAT_ASTC_10x5_UNORM_BLOCK",
                Self::FORMAT_ASTC_10x5_SRGB_BLOCK => &"FORMAT_ASTC_10x5_SRGB_BLOCK",
                Self::FORMAT_ASTC_10x6_UNORM_BLOCK => &"FORMAT_ASTC_10x6_UNORM_BLOCK",
                Self::FORMAT_ASTC_10x6_SRGB_BLOCK => &"FORMAT_ASTC_10x6_SRGB_BLOCK",
                Self::FORMAT_ASTC_10x8_UNORM_BLOCK => &"FORMAT_ASTC_10x8_UNORM_BLOCK",
                Self::FORMAT_ASTC_10x8_SRGB_BLOCK => &"FORMAT_ASTC_10x8_SRGB_BLOCK",
                Self::FORMAT_ASTC_10x10_UNORM_BLOCK => &"FORMAT_ASTC_10x10_UNORM_BLOCK",
                Self::FORMAT_ASTC_10x10_SRGB_BLOCK => &"FORMAT_ASTC_10x10_SRGB_BLOCK",
                Self::FORMAT_ASTC_12x10_UNORM_BLOCK => &"FORMAT_ASTC_12x10_UNORM_BLOCK",
                Self::FORMAT_ASTC_12x10_SRGB_BLOCK => &"FORMAT_ASTC_12x10_SRGB_BLOCK",
                Self::FORMAT_ASTC_12x12_UNORM_BLOCK => &"FORMAT_ASTC_12x12_UNORM_BLOCK",
                Self::FORMAT_ASTC_12x12_SRGB_BLOCK => &"FORMAT_ASTC_12x12_SRGB_BLOCK",
                Self::FORMAT_G8B8G8R8_422_UNORM => &"FORMAT_G8B8G8R8_422_UNORM",
                Self::FORMAT_B8G8R8G8_422_UNORM => &"FORMAT_B8G8R8G8_422_UNORM",
                Self::FORMAT_G8_B8_R8_3PLANE_420_UNORM => &"FORMAT_G8_B8_R8_3PLANE_420_UNORM",
                Self::FORMAT_G8_B8R8_2PLANE_420_UNORM => &"FORMAT_G8_B8R8_2PLANE_420_UNORM",
                Self::FORMAT_G8_B8_R8_3PLANE_422_UNORM => &"FORMAT_G8_B8_R8_3PLANE_422_UNORM",
                Self::FORMAT_G8_B8R8_2PLANE_422_UNORM => &"FORMAT_G8_B8R8_2PLANE_422_UNORM",
                Self::FORMAT_G8_B8_R8_3PLANE_444_UNORM => &"FORMAT_G8_B8_R8_3PLANE_444_UNORM",
                Self::FORMAT_R10X6_UNORM_PACK16 => &"FORMAT_R10X6_UNORM_PACK16",
                Self::FORMAT_R10X6G10X6_UNORM_2PACK16 => &"FORMAT_R10X6G10X6_UNORM_2PACK16",
                Self::FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 => &"FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
                Self::FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => &"FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
                Self::FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => &"FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
                Self::FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => {
                    &"FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"
                },
                Self::FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => {
                    &"FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"
                },
                Self::FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => {
                    &"FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"
                },
                Self::FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => {
                    &"FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"
                },
                Self::FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 => {
                    &"FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"
                },
                Self::FORMAT_R12X4_UNORM_PACK16 => &"FORMAT_R12X4_UNORM_PACK16",
                Self::FORMAT_R12X4G12X4_UNORM_2PACK16 => &"FORMAT_R12X4G12X4_UNORM_2PACK16",
                Self::FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 => &"FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
                Self::FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => &"FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
                Self::FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => &"FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
                Self::FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => {
                    &"FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"
                },
                Self::FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => {
                    &"FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"
                },
                Self::FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => {
                    &"FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"
                },
                Self::FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => {
                    &"FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"
                },
                Self::FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 => {
                    &"FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"
                },
                Self::FORMAT_G16B16G16R16_422_UNORM => &"FORMAT_G16B16G16R16_422_UNORM",
                Self::FORMAT_B16G16R16G16_422_UNORM => &"FORMAT_B16G16R16G16_422_UNORM",
                Self::FORMAT_G16_B16_R16_3PLANE_420_UNORM => &"FORMAT_G16_B16_R16_3PLANE_420_UNORM",
                Self::FORMAT_G16_B16R16_2PLANE_420_UNORM => &"FORMAT_G16_B16R16_2PLANE_420_UNORM",
                Self::FORMAT_G16_B16_R16_3PLANE_422_UNORM => &"FORMAT_G16_B16_R16_3PLANE_422_UNORM",
                Self::FORMAT_G16_B16R16_2PLANE_422_UNORM => &"FORMAT_G16_B16R16_2PLANE_422_UNORM",
                Self::FORMAT_G16_B16_R16_3PLANE_444_UNORM => &"FORMAT_G16_B16_R16_3PLANE_444_UNORM",
                Self::FORMAT_G8_B8R8_2PLANE_444_UNORM => &"FORMAT_G8_B8R8_2PLANE_444_UNORM",
                Self::FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 => {
                    &"FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16"
                },
                Self::FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 => {
                    &"FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16"
                },
                Self::FORMAT_G16_B16R16_2PLANE_444_UNORM => &"FORMAT_G16_B16R16_2PLANE_444_UNORM",
                Self::FORMAT_A4R4G4B4_UNORM_PACK16 => &"FORMAT_A4R4G4B4_UNORM_PACK16",
                Self::FORMAT_A4B4G4R4_UNORM_PACK16 => &"FORMAT_A4B4G4R4_UNORM_PACK16",
                Self::FORMAT_ASTC_4x4_SFLOAT_BLOCK => &"FORMAT_ASTC_4x4_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_5x4_SFLOAT_BLOCK => &"FORMAT_ASTC_5x4_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_5x5_SFLOAT_BLOCK => &"FORMAT_ASTC_5x5_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_6x5_SFLOAT_BLOCK => &"FORMAT_ASTC_6x5_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_6x6_SFLOAT_BLOCK => &"FORMAT_ASTC_6x6_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_8x5_SFLOAT_BLOCK => &"FORMAT_ASTC_8x5_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_8x6_SFLOAT_BLOCK => &"FORMAT_ASTC_8x6_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_8x8_SFLOAT_BLOCK => &"FORMAT_ASTC_8x8_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_10x5_SFLOAT_BLOCK => &"FORMAT_ASTC_10x5_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_10x6_SFLOAT_BLOCK => &"FORMAT_ASTC_10x6_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_10x8_SFLOAT_BLOCK => &"FORMAT_ASTC_10x8_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_10x10_SFLOAT_BLOCK => &"FORMAT_ASTC_10x10_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_12x10_SFLOAT_BLOCK => &"FORMAT_ASTC_12x10_SFLOAT_BLOCK",
                Self::FORMAT_ASTC_12x12_SFLOAT_BLOCK => &"FORMAT_ASTC_12x12_SFLOAT_BLOCK",
                Self::FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG => &"FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",
                Self::FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG => &"FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",
                Self::FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG => &"FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",
                Self::FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG => &"FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",
                Self::FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG => &"FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",
                Self::FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG => &"FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",
                Self::FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG => &"FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",
                Self::FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG => &"FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",
                other => unreachable!("invalid value for `Format`: {:?}", other),
            })
            .finish()
    }
}
impl Format {
    ///[`FORMAT_UNDEFINED`] specifies that the format is not specified.
    pub const FORMAT_UNDEFINED: Self = Self(0);
    ///[`FORMAT_R4G4_UNORM_PACK8`] specifies a two-component, 8-bit packed
    ///unsigned normalized format that has a 4-bit R component in bits 4..7,
    ///and a 4-bit G component in bits 0..3.
    pub const FORMAT_R4G4_UNORM_PACK8: Self = Self(1);
    ///[`FORMAT_R4G4B4A4_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit R component in bits
    ///12..15, a 4-bit G component in bits 8..11, a 4-bit B component in bits
    ///4..7, and a 4-bit A component in bits 0..3.
    pub const FORMAT_R4G4B4A4_UNORM_PACK16: Self = Self(2);
    ///[`FORMAT_B4G4R4A4_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit B component in bits
    ///12..15, a 4-bit G component in bits 8..11, a 4-bit R component in bits
    ///4..7, and a 4-bit A component in bits 0..3.
    pub const FORMAT_B4G4R4A4_UNORM_PACK16: Self = Self(3);
    ///[`FORMAT_R5G6B5_UNORM_PACK16`] specifies a three-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit R component in bits
    ///11..15, a 6-bit G component in bits 5..10, and a 5-bit B component in
    ///bits 0..4.
    pub const FORMAT_R5G6B5_UNORM_PACK16: Self = Self(4);
    ///[`FORMAT_B5G6R5_UNORM_PACK16`] specifies a three-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit B component in bits
    ///11..15, a 6-bit G component in bits 5..10, and a 5-bit R component in
    ///bits 0..4.
    pub const FORMAT_B5G6R5_UNORM_PACK16: Self = Self(5);
    ///[`FORMAT_R5G5B5A1_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit R component in bits
    ///11..15, a 5-bit G component in bits 6..10, a 5-bit B component in bits
    ///1..5, and a 1-bit A component in bit 0.
    pub const FORMAT_R5G5B5A1_UNORM_PACK16: Self = Self(6);
    ///[`FORMAT_B5G5R5A1_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 5-bit B component in bits
    ///11..15, a 5-bit G component in bits 6..10, a 5-bit R component in bits
    ///1..5, and a 1-bit A component in bit 0.
    pub const FORMAT_B5G5R5A1_UNORM_PACK16: Self = Self(7);
    ///[`FORMAT_A1R5G5B5_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 1-bit A component in bit
    ///15, a 5-bit R component in bits 10..14, a 5-bit G component in bits
    ///5..9, and a 5-bit B component in bits 0..4.
    pub const FORMAT_A1R5G5B5_UNORM_PACK16: Self = Self(8);
    ///[`FORMAT_R8_UNORM`] specifies a one-component, 8-bit unsigned
    ///normalized format that has a single 8-bit R component.
    pub const FORMAT_R8_UNORM: Self = Self(9);
    ///[`FORMAT_R8_SNORM`] specifies a one-component, 8-bit signed
    ///normalized format that has a single 8-bit R component.
    pub const FORMAT_R8_SNORM: Self = Self(10);
    ///[`FORMAT_R8_USCALED`] specifies a one-component, 8-bit unsigned
    ///scaled integer format that has a single 8-bit R component.
    pub const FORMAT_R8_USCALED: Self = Self(11);
    ///[`FORMAT_R8_SSCALED`] specifies a one-component, 8-bit signed
    ///scaled integer format that has a single 8-bit R component.
    pub const FORMAT_R8_SSCALED: Self = Self(12);
    ///[`FORMAT_R8_UINT`] specifies a one-component, 8-bit unsigned
    ///integer format that has a single 8-bit R component.
    pub const FORMAT_R8_UINT: Self = Self(13);
    ///[`FORMAT_R8_SINT`] specifies a one-component, 8-bit signed integer
    ///format that has a single 8-bit R component.
    pub const FORMAT_R8_SINT: Self = Self(14);
    ///[`FORMAT_R8_SRGB`] specifies a one-component, 8-bit unsigned
    ///normalized format that has a single 8-bit R component stored with sRGB
    ///nonlinear encoding.
    pub const FORMAT_R8_SRGB: Self = Self(15);
    ///[`FORMAT_R8G8_UNORM`] specifies a two-component, 16-bit unsigned
    ///normalized format that has an 8-bit R component in byte 0, and an 8-bit
    ///G component in byte 1.
    pub const FORMAT_R8G8_UNORM: Self = Self(16);
    ///[`FORMAT_R8G8_SNORM`] specifies a two-component, 16-bit signed
    ///normalized format that has an 8-bit R component in byte 0, and an 8-bit
    ///G component in byte 1.
    pub const FORMAT_R8G8_SNORM: Self = Self(17);
    ///[`FORMAT_R8G8_USCALED`] specifies a two-component, 16-bit unsigned
    ///scaled integer format that has an 8-bit R component in byte 0, and an
    ///8-bit G component in byte 1.
    pub const FORMAT_R8G8_USCALED: Self = Self(18);
    ///[`FORMAT_R8G8_SSCALED`] specifies a two-component, 16-bit signed
    ///scaled integer format that has an 8-bit R component in byte 0, and an
    ///8-bit G component in byte 1.
    pub const FORMAT_R8G8_SSCALED: Self = Self(19);
    ///[`FORMAT_R8G8_UINT`] specifies a two-component, 16-bit unsigned
    ///integer format that has an 8-bit R component in byte 0, and an 8-bit G
    ///component in byte 1.
    pub const FORMAT_R8G8_UINT: Self = Self(20);
    ///[`FORMAT_R8G8_SINT`] specifies a two-component, 16-bit signed
    ///integer format that has an 8-bit R component in byte 0, and an 8-bit G
    ///component in byte 1.
    pub const FORMAT_R8G8_SINT: Self = Self(21);
    ///[`FORMAT_R8G8_SRGB`] specifies a two-component, 16-bit unsigned
    ///normalized format that has an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1.
    pub const FORMAT_R8G8_SRGB: Self = Self(22);
    ///[`FORMAT_R8G8B8_UNORM`] specifies a three-component, 24-bit
    ///unsigned normalized format that has an 8-bit R component in byte 0, an
    ///8-bit G component in byte 1, and an 8-bit B component in byte 2.
    pub const FORMAT_R8G8B8_UNORM: Self = Self(23);
    ///[`FORMAT_R8G8B8_SNORM`] specifies a three-component, 24-bit signed
    ///normalized format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    pub const FORMAT_R8G8B8_SNORM: Self = Self(24);
    ///[`FORMAT_R8G8B8_USCALED`] specifies a three-component, 24-bit
    ///unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
    ///G component in byte 1, and an 8-bit B component in byte 2.
    pub const FORMAT_R8G8B8_USCALED: Self = Self(25);
    ///[`FORMAT_R8G8B8_SSCALED`] specifies a three-component, 24-bit
    ///signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    pub const FORMAT_R8G8B8_SSCALED: Self = Self(26);
    ///[`FORMAT_R8G8B8_UINT`] specifies a three-component, 24-bit unsigned
    ///integer format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    pub const FORMAT_R8G8B8_UINT: Self = Self(27);
    ///[`FORMAT_R8G8B8_SINT`] specifies a three-component, 24-bit signed
    ///integer format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit B component in byte 2.
    pub const FORMAT_R8G8B8_SINT: Self = Self(28);
    ///[`FORMAT_R8G8B8_SRGB`] specifies a three-component, 24-bit unsigned
    ///normalized format that has an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB
    ///nonlinear encoding in byte 2.
    pub const FORMAT_R8G8B8_SRGB: Self = Self(29);
    ///[`FORMAT_B8G8R8_UNORM`] specifies a three-component, 24-bit
    ///unsigned normalized format that has an 8-bit B component in byte 0, an
    ///8-bit G component in byte 1, and an 8-bit R component in byte 2.
    pub const FORMAT_B8G8R8_UNORM: Self = Self(30);
    ///[`FORMAT_B8G8R8_SNORM`] specifies a three-component, 24-bit signed
    ///normalized format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    pub const FORMAT_B8G8R8_SNORM: Self = Self(31);
    ///[`FORMAT_B8G8R8_USCALED`] specifies a three-component, 24-bit
    ///unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
    ///G component in byte 1, and an 8-bit R component in byte 2.
    pub const FORMAT_B8G8R8_USCALED: Self = Self(32);
    ///[`FORMAT_B8G8R8_SSCALED`] specifies a three-component, 24-bit
    ///signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    pub const FORMAT_B8G8R8_SSCALED: Self = Self(33);
    ///[`FORMAT_B8G8R8_UINT`] specifies a three-component, 24-bit unsigned
    ///integer format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    pub const FORMAT_B8G8R8_UINT: Self = Self(34);
    ///[`FORMAT_B8G8R8_SINT`] specifies a three-component, 24-bit signed
    ///integer format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, and an 8-bit R component in byte 2.
    pub const FORMAT_B8G8R8_SINT: Self = Self(35);
    ///[`FORMAT_B8G8R8_SRGB`] specifies a three-component, 24-bit unsigned
    ///normalized format that has an 8-bit B component stored with sRGB
    ///nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, and an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 2.
    pub const FORMAT_B8G8R8_SRGB: Self = Self(36);
    ///[`FORMAT_R8G8B8A8_UNORM`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit R component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit B component in byte 2, and an
    ///8-bit A component in byte 3.
    pub const FORMAT_R8G8B8A8_UNORM: Self = Self(37);
    ///[`FORMAT_R8G8B8A8_SNORM`] specifies a four-component, 32-bit signed
    ///normalized format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_R8G8B8A8_SNORM: Self = Self(38);
    ///[`FORMAT_R8G8B8A8_USCALED`] specifies a four-component, 32-bit
    ///unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
    ///G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_R8G8B8A8_USCALED: Self = Self(39);
    ///[`FORMAT_R8G8B8A8_SSCALED`] specifies a four-component, 32-bit
    ///signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_R8G8B8A8_SSCALED: Self = Self(40);
    ///[`FORMAT_R8G8B8A8_UINT`] specifies a four-component, 32-bit
    ///unsigned integer format that has an 8-bit R component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit B component in byte 2, and an
    ///8-bit A component in byte 3.
    pub const FORMAT_R8G8B8A8_UINT: Self = Self(41);
    ///[`FORMAT_R8G8B8A8_SINT`] specifies a four-component, 32-bit signed
    ///integer format that has an 8-bit R component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_R8G8B8A8_SINT: Self = Self(42);
    ///[`FORMAT_R8G8B8A8_SRGB`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit R component stored with
    ///sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, an 8-bit B component stored with sRGB
    ///nonlinear encoding in byte 2, and an 8-bit A component in byte 3.
    pub const FORMAT_R8G8B8A8_SRGB: Self = Self(43);
    ///[`FORMAT_B8G8R8A8_UNORM`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit B component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit R component in byte 2, and an
    ///8-bit A component in byte 3.
    pub const FORMAT_B8G8R8A8_UNORM: Self = Self(44);
    ///[`FORMAT_B8G8R8A8_SNORM`] specifies a four-component, 32-bit signed
    ///normalized format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_B8G8R8A8_SNORM: Self = Self(45);
    ///[`FORMAT_B8G8R8A8_USCALED`] specifies a four-component, 32-bit
    ///unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
    ///G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_B8G8R8A8_USCALED: Self = Self(46);
    ///[`FORMAT_B8G8R8A8_SSCALED`] specifies a four-component, 32-bit
    ///signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_B8G8R8A8_SSCALED: Self = Self(47);
    ///[`FORMAT_B8G8R8A8_UINT`] specifies a four-component, 32-bit
    ///unsigned integer format that has an 8-bit B component in byte 0, an
    ///8-bit G component in byte 1, an 8-bit R component in byte 2, and an
    ///8-bit A component in byte 3.
    pub const FORMAT_B8G8R8A8_UINT: Self = Self(48);
    ///[`FORMAT_B8G8R8A8_SINT`] specifies a four-component, 32-bit signed
    ///integer format that has an 8-bit B component in byte 0, an 8-bit G
    ///component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
    ///component in byte 3.
    pub const FORMAT_B8G8R8A8_SINT: Self = Self(49);
    ///[`FORMAT_B8G8R8A8_SRGB`] specifies a four-component, 32-bit
    ///unsigned normalized format that has an 8-bit B component stored with
    ///sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
    ///nonlinear encoding in byte 1, an 8-bit R component stored with sRGB
    ///nonlinear encoding in byte 2, and an 8-bit A component in byte 3.
    pub const FORMAT_B8G8R8A8_SRGB: Self = Self(50);
    ///[`FORMAT_A8B8G8R8_UNORM_PACK32`] specifies a four-component, 32-bit
    ///packed unsigned normalized format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    pub const FORMAT_A8B8G8R8_UNORM_PACK32: Self = Self(51);
    ///[`FORMAT_A8B8G8R8_SNORM_PACK32`] specifies a four-component, 32-bit
    ///packed signed normalized format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    pub const FORMAT_A8B8G8R8_SNORM_PACK32: Self = Self(52);
    ///[`FORMAT_A8B8G8R8_USCALED_PACK32`] specifies a four-component,
    ///32-bit packed unsigned scaled integer format that has an 8-bit A
    ///component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit
    ///G component in bits 8..15, and an 8-bit R component in bits 0..7.
    pub const FORMAT_A8B8G8R8_USCALED_PACK32: Self = Self(53);
    ///[`FORMAT_A8B8G8R8_SSCALED_PACK32`] specifies a four-component,
    ///32-bit packed signed scaled integer format that has an 8-bit A component
    ///in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
    ///component in bits 8..15, and an 8-bit R component in bits 0..7.
    pub const FORMAT_A8B8G8R8_SSCALED_PACK32: Self = Self(54);
    ///[`FORMAT_A8B8G8R8_UINT_PACK32`] specifies a four-component, 32-bit
    ///packed unsigned integer format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    pub const FORMAT_A8B8G8R8_UINT_PACK32: Self = Self(55);
    ///[`FORMAT_A8B8G8R8_SINT_PACK32`] specifies a four-component, 32-bit
    ///packed signed integer format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
    ///bits 8..15, and an 8-bit R component in bits 0..7.
    pub const FORMAT_A8B8G8R8_SINT_PACK32: Self = Self(56);
    ///[`FORMAT_A8B8G8R8_SRGB_PACK32`] specifies a four-component, 32-bit
    ///packed unsigned normalized format that has an 8-bit A component in bits
    ///24..31, an 8-bit B component stored with sRGB nonlinear encoding in bits
    ///16..23, an 8-bit G component stored with sRGB nonlinear encoding in bits
    ///8..15, and an 8-bit R component stored with sRGB nonlinear encoding in
    ///bits 0..7.
    pub const FORMAT_A8B8G8R8_SRGB_PACK32: Self = Self(57);
    ///[`FORMAT_A2R10G10B10_UNORM_PACK32`] specifies a four-component,
    ///32-bit packed unsigned normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit B component in bits 0..9.
    pub const FORMAT_A2R10G10B10_UNORM_PACK32: Self = Self(58);
    ///[`FORMAT_A2R10G10B10_SNORM_PACK32`] specifies a four-component,
    ///32-bit packed signed normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit B component in bits 0..9.
    pub const FORMAT_A2R10G10B10_SNORM_PACK32: Self = Self(59);
    ///[`FORMAT_A2R10G10B10_USCALED_PACK32`] specifies a four-component,
    ///32-bit packed unsigned scaled integer format that has a 2-bit A
    ///component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit
    ///G component in bits 10..19, and a 10-bit B component in bits 0..9.
    pub const FORMAT_A2R10G10B10_USCALED_PACK32: Self = Self(60);
    ///[`FORMAT_A2R10G10B10_SSCALED_PACK32`] specifies a four-component,
    ///32-bit packed signed scaled integer format that has a 2-bit A component
    ///in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
    ///component in bits 10..19, and a 10-bit B component in bits 0..9.
    pub const FORMAT_A2R10G10B10_SSCALED_PACK32: Self = Self(61);
    ///[`FORMAT_A2R10G10B10_UINT_PACK32`] specifies a four-component,
    ///32-bit packed unsigned integer format that has a 2-bit A component in
    ///bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit B component in bits 0..9.
    pub const FORMAT_A2R10G10B10_UINT_PACK32: Self = Self(62);
    ///[`FORMAT_A2R10G10B10_SINT_PACK32`] specifies a four-component,
    ///32-bit packed signed integer format that has a 2-bit A component in bits
    ///30..31, a 10-bit R component in bits 20..29, a 10-bit G component in
    ///bits 10..19, and a 10-bit B component in bits 0..9.
    pub const FORMAT_A2R10G10B10_SINT_PACK32: Self = Self(63);
    ///[`FORMAT_A2B10G10R10_UNORM_PACK32`] specifies a four-component,
    ///32-bit packed unsigned normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit R component in bits 0..9.
    pub const FORMAT_A2B10G10R10_UNORM_PACK32: Self = Self(64);
    ///[`FORMAT_A2B10G10R10_SNORM_PACK32`] specifies a four-component,
    ///32-bit packed signed normalized format that has a 2-bit A component in
    ///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit R component in bits 0..9.
    pub const FORMAT_A2B10G10R10_SNORM_PACK32: Self = Self(65);
    ///[`FORMAT_A2B10G10R10_USCALED_PACK32`] specifies a four-component,
    ///32-bit packed unsigned scaled integer format that has a 2-bit A
    ///component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit
    ///G component in bits 10..19, and a 10-bit R component in bits 0..9.
    pub const FORMAT_A2B10G10R10_USCALED_PACK32: Self = Self(66);
    ///[`FORMAT_A2B10G10R10_SSCALED_PACK32`] specifies a four-component,
    ///32-bit packed signed scaled integer format that has a 2-bit A component
    ///in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
    ///component in bits 10..19, and a 10-bit R component in bits 0..9.
    pub const FORMAT_A2B10G10R10_SSCALED_PACK32: Self = Self(67);
    ///[`FORMAT_A2B10G10R10_UINT_PACK32`] specifies a four-component,
    ///32-bit packed unsigned integer format that has a 2-bit A component in
    ///bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
    ///in bits 10..19, and a 10-bit R component in bits 0..9.
    pub const FORMAT_A2B10G10R10_UINT_PACK32: Self = Self(68);
    ///[`FORMAT_A2B10G10R10_SINT_PACK32`] specifies a four-component,
    ///32-bit packed signed integer format that has a 2-bit A component in bits
    ///30..31, a 10-bit B component in bits 20..29, a 10-bit G component in
    ///bits 10..19, and a 10-bit R component in bits 0..9.
    pub const FORMAT_A2B10G10R10_SINT_PACK32: Self = Self(69);
    ///[`FORMAT_R16_UNORM`] specifies a one-component, 16-bit unsigned
    ///normalized format that has a single 16-bit R component.
    pub const FORMAT_R16_UNORM: Self = Self(70);
    ///[`FORMAT_R16_SNORM`] specifies a one-component, 16-bit signed
    ///normalized format that has a single 16-bit R component.
    pub const FORMAT_R16_SNORM: Self = Self(71);
    ///[`FORMAT_R16_USCALED`] specifies a one-component, 16-bit unsigned
    ///scaled integer format that has a single 16-bit R component.
    pub const FORMAT_R16_USCALED: Self = Self(72);
    ///[`FORMAT_R16_SSCALED`] specifies a one-component, 16-bit signed
    ///scaled integer format that has a single 16-bit R component.
    pub const FORMAT_R16_SSCALED: Self = Self(73);
    ///[`FORMAT_R16_UINT`] specifies a one-component, 16-bit unsigned
    ///integer format that has a single 16-bit R component.
    pub const FORMAT_R16_UINT: Self = Self(74);
    ///[`FORMAT_R16_SINT`] specifies a one-component, 16-bit signed
    ///integer format that has a single 16-bit R component.
    pub const FORMAT_R16_SINT: Self = Self(75);
    ///[`FORMAT_R16_SFLOAT`] specifies a one-component, 16-bit signed
    ///floating-point format that has a single 16-bit R component.
    pub const FORMAT_R16_SFLOAT: Self = Self(76);
    ///[`FORMAT_R16G16_UNORM`] specifies a two-component, 32-bit unsigned
    ///normalized format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    pub const FORMAT_R16G16_UNORM: Self = Self(77);
    ///[`FORMAT_R16G16_SNORM`] specifies a two-component, 32-bit signed
    ///normalized format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    pub const FORMAT_R16G16_SNORM: Self = Self(78);
    ///[`FORMAT_R16G16_USCALED`] specifies a two-component, 32-bit
    ///unsigned scaled integer format that has a 16-bit R component in bytes
    ///0..1, and a 16-bit G component in bytes 2..3.
    pub const FORMAT_R16G16_USCALED: Self = Self(79);
    ///[`FORMAT_R16G16_SSCALED`] specifies a two-component, 32-bit signed
    ///scaled integer format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    pub const FORMAT_R16G16_SSCALED: Self = Self(80);
    ///[`FORMAT_R16G16_UINT`] specifies a two-component, 32-bit unsigned
    ///integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
    ///G component in bytes 2..3.
    pub const FORMAT_R16G16_UINT: Self = Self(81);
    ///[`FORMAT_R16G16_SINT`] specifies a two-component, 32-bit signed
    ///integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
    ///G component in bytes 2..3.
    pub const FORMAT_R16G16_SINT: Self = Self(82);
    ///[`FORMAT_R16G16_SFLOAT`] specifies a two-component, 32-bit signed
    ///floating-point format that has a 16-bit R component in bytes 0..1, and a
    ///16-bit G component in bytes 2..3.
    pub const FORMAT_R16G16_SFLOAT: Self = Self(83);
    ///[`FORMAT_R16G16B16_UNORM`] specifies a three-component, 48-bit
    ///unsigned normalized format that has a 16-bit R component in bytes 0..1,
    ///a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    pub const FORMAT_R16G16B16_UNORM: Self = Self(84);
    ///[`FORMAT_R16G16B16_SNORM`] specifies a three-component, 48-bit
    ///signed normalized format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    pub const FORMAT_R16G16B16_SNORM: Self = Self(85);
    ///[`FORMAT_R16G16B16_USCALED`] specifies a three-component, 48-bit
    ///unsigned scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
    ///bytes 4..5.
    pub const FORMAT_R16G16B16_USCALED: Self = Self(86);
    ///[`FORMAT_R16G16B16_SSCALED`] specifies a three-component, 48-bit
    ///signed scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
    ///bytes 4..5.
    pub const FORMAT_R16G16B16_SSCALED: Self = Self(87);
    ///[`FORMAT_R16G16B16_UINT`] specifies a three-component, 48-bit
    ///unsigned integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    pub const FORMAT_R16G16B16_UINT: Self = Self(88);
    ///[`FORMAT_R16G16B16_SINT`] specifies a three-component, 48-bit
    ///signed integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, and a 16-bit B component in bytes
    ///4..5.
    pub const FORMAT_R16G16B16_SINT: Self = Self(89);
    ///[`FORMAT_R16G16B16_SFLOAT`] specifies a three-component, 48-bit
    ///signed floating-point format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
    ///bytes 4..5.
    pub const FORMAT_R16G16B16_SFLOAT: Self = Self(90);
    ///[`FORMAT_R16G16B16A16_UNORM`] specifies a four-component, 64-bit
    ///unsigned normalized format that has a 16-bit R component in bytes 0..1,
    ///a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_UNORM: Self = Self(91);
    ///[`FORMAT_R16G16B16A16_SNORM`] specifies a four-component, 64-bit
    ///signed normalized format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_SNORM: Self = Self(92);
    ///[`FORMAT_R16G16B16A16_USCALED`] specifies a four-component, 64-bit
    ///unsigned scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
    ///4..5, and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_USCALED: Self = Self(93);
    ///[`FORMAT_R16G16B16A16_SSCALED`] specifies a four-component, 64-bit
    ///signed scaled integer format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
    ///4..5, and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_SSCALED: Self = Self(94);
    ///[`FORMAT_R16G16B16A16_UINT`] specifies a four-component, 64-bit
    ///unsigned integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_UINT: Self = Self(95);
    ///[`FORMAT_R16G16B16A16_SINT`] specifies a four-component, 64-bit
    ///signed integer format that has a 16-bit R component in bytes 0..1, a
    ///16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
    ///and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_SINT: Self = Self(96);
    ///[`FORMAT_R16G16B16A16_SFLOAT`] specifies a four-component, 64-bit
    ///signed floating-point format that has a 16-bit R component in bytes
    ///0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
    ///4..5, and a 16-bit A component in bytes 6..7.
    pub const FORMAT_R16G16B16A16_SFLOAT: Self = Self(97);
    ///[`FORMAT_R32_UINT`] specifies a one-component, 32-bit unsigned
    ///integer format that has a single 32-bit R component.
    pub const FORMAT_R32_UINT: Self = Self(98);
    ///[`FORMAT_R32_SINT`] specifies a one-component, 32-bit signed
    ///integer format that has a single 32-bit R component.
    pub const FORMAT_R32_SINT: Self = Self(99);
    ///[`FORMAT_R32_SFLOAT`] specifies a one-component, 32-bit signed
    ///floating-point format that has a single 32-bit R component.
    pub const FORMAT_R32_SFLOAT: Self = Self(100);
    ///[`FORMAT_R32G32_UINT`] specifies a two-component, 64-bit unsigned
    ///integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
    ///G component in bytes 4..7.
    pub const FORMAT_R32G32_UINT: Self = Self(101);
    ///[`FORMAT_R32G32_SINT`] specifies a two-component, 64-bit signed
    ///integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
    ///G component in bytes 4..7.
    pub const FORMAT_R32G32_SINT: Self = Self(102);
    ///[`FORMAT_R32G32_SFLOAT`] specifies a two-component, 64-bit signed
    ///floating-point format that has a 32-bit R component in bytes 0..3, and a
    ///32-bit G component in bytes 4..7.
    pub const FORMAT_R32G32_SFLOAT: Self = Self(103);
    ///[`FORMAT_R32G32B32_UINT`] specifies a three-component, 96-bit
    ///unsigned integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, and a 32-bit B component in bytes
    ///8..11.
    pub const FORMAT_R32G32B32_UINT: Self = Self(104);
    ///[`FORMAT_R32G32B32_SINT`] specifies a three-component, 96-bit
    ///signed integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, and a 32-bit B component in bytes
    ///8..11.
    pub const FORMAT_R32G32B32_SINT: Self = Self(105);
    ///[`FORMAT_R32G32B32_SFLOAT`] specifies a three-component, 96-bit
    ///signed floating-point format that has a 32-bit R component in bytes
    ///0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in
    ///bytes 8..11.
    pub const FORMAT_R32G32B32_SFLOAT: Self = Self(106);
    ///[`FORMAT_R32G32B32A32_UINT`] specifies a four-component, 128-bit
    ///unsigned integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
    ///and a 32-bit A component in bytes 12..15.
    pub const FORMAT_R32G32B32A32_UINT: Self = Self(107);
    ///[`FORMAT_R32G32B32A32_SINT`] specifies a four-component, 128-bit
    ///signed integer format that has a 32-bit R component in bytes 0..3, a
    ///32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
    ///and a 32-bit A component in bytes 12..15.
    pub const FORMAT_R32G32B32A32_SINT: Self = Self(108);
    ///[`FORMAT_R32G32B32A32_SFLOAT`] specifies a four-component, 128-bit
    ///signed floating-point format that has a 32-bit R component in bytes
    ///0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes
    ///8..11, and a 32-bit A component in bytes 12..15.
    pub const FORMAT_R32G32B32A32_SFLOAT: Self = Self(109);
    ///[`FORMAT_R64_UINT`] specifies a one-component, 64-bit unsigned
    ///integer format that has a single 64-bit R component.
    pub const FORMAT_R64_UINT: Self = Self(110);
    ///[`FORMAT_R64_SINT`] specifies a one-component, 64-bit signed
    ///integer format that has a single 64-bit R component.
    pub const FORMAT_R64_SINT: Self = Self(111);
    ///[`FORMAT_R64_SFLOAT`] specifies a one-component, 64-bit signed
    ///floating-point format that has a single 64-bit R component.
    pub const FORMAT_R64_SFLOAT: Self = Self(112);
    ///[`FORMAT_R64G64_UINT`] specifies a two-component, 128-bit unsigned
    ///integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
    ///G component in bytes 8..15.
    pub const FORMAT_R64G64_UINT: Self = Self(113);
    ///[`FORMAT_R64G64_SINT`] specifies a two-component, 128-bit signed
    ///integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
    ///G component in bytes 8..15.
    pub const FORMAT_R64G64_SINT: Self = Self(114);
    ///[`FORMAT_R64G64_SFLOAT`] specifies a two-component, 128-bit signed
    ///floating-point format that has a 64-bit R component in bytes 0..7, and a
    ///64-bit G component in bytes 8..15.
    pub const FORMAT_R64G64_SFLOAT: Self = Self(115);
    ///[`FORMAT_R64G64B64_UINT`] specifies a three-component, 192-bit
    ///unsigned integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, and a 64-bit B component in bytes
    ///16..23.
    pub const FORMAT_R64G64B64_UINT: Self = Self(116);
    ///[`FORMAT_R64G64B64_SINT`] specifies a three-component, 192-bit
    ///signed integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, and a 64-bit B component in bytes
    ///16..23.
    pub const FORMAT_R64G64B64_SINT: Self = Self(117);
    ///[`FORMAT_R64G64B64_SFLOAT`] specifies a three-component, 192-bit
    ///signed floating-point format that has a 64-bit R component in bytes
    ///0..7, a 64-bit G component in bytes 8..15, and a 64-bit B component in
    ///bytes 16..23.
    pub const FORMAT_R64G64B64_SFLOAT: Self = Self(118);
    ///[`FORMAT_R64G64B64A64_UINT`] specifies a four-component, 256-bit
    ///unsigned integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
    ///and a 64-bit A component in bytes 24..31.
    pub const FORMAT_R64G64B64A64_UINT: Self = Self(119);
    ///[`FORMAT_R64G64B64A64_SINT`] specifies a four-component, 256-bit
    ///signed integer format that has a 64-bit R component in bytes 0..7, a
    ///64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
    ///and a 64-bit A component in bytes 24..31.
    pub const FORMAT_R64G64B64A64_SINT: Self = Self(120);
    ///[`FORMAT_R64G64B64A64_SFLOAT`] specifies a four-component, 256-bit
    ///signed floating-point format that has a 64-bit R component in bytes
    ///0..7, a 64-bit G component in bytes 8..15, a 64-bit B component in bytes
    ///16..23, and a 64-bit A component in bytes 24..31.
    pub const FORMAT_R64G64B64A64_SFLOAT: Self = Self(121);
    ///[`FORMAT_B10G11R11_UFLOAT_PACK32`] specifies a three-component,
    ///32-bit packed unsigned floating-point format that has a 10-bit B
    ///component in bits 22..31, an 11-bit G component in bits 11..21, an
    ///11-bit R component in bits 0..10.
    ///See [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp10) and [https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#fundamentals-fp11).
    pub const FORMAT_B10G11R11_UFLOAT_PACK32: Self = Self(122);
    ///[`FORMAT_E5B9G9R9_UFLOAT_PACK32`] specifies a three-component,
    ///32-bit packed unsigned floating-point format that has a 5-bit shared
    ///exponent in bits 27..31, a 9-bit B component mantissa in bits 18..26, a
    ///9-bit G component mantissa in bits 9..17, and a 9-bit R component
    ///mantissa in bits 0..8.
    pub const FORMAT_E5B9G9R9_UFLOAT_PACK32: Self = Self(123);
    ///[`FORMAT_D16_UNORM`] specifies a one-component, 16-bit unsigned
    ///normalized format that has a single 16-bit depth component.
    pub const FORMAT_D16_UNORM: Self = Self(124);
    ///[`FORMAT_X8_D24_UNORM_PACK32`] specifies a two-component, 32-bit
    ///format that has 24 unsigned normalized bits in the depth component and,
    ///**optionally**, 8 bits that are unused.
    pub const FORMAT_X8_D24_UNORM_PACK32: Self = Self(125);
    ///[`FORMAT_D32_SFLOAT`] specifies a one-component, 32-bit signed
    ///floating-point format that has 32 bits in the depth component.
    pub const FORMAT_D32_SFLOAT: Self = Self(126);
    ///[`FORMAT_S8_UINT`] specifies a one-component, 8-bit unsigned
    ///integer format that has 8 bits in the stencil component.
    pub const FORMAT_S8_UINT: Self = Self(127);
    ///[`FORMAT_D16_UNORM_S8_UINT`] specifies a two-component, 24-bit
    ///format that has 16 unsigned normalized bits in the depth component and 8
    ///unsigned integer bits in the stencil component.
    pub const FORMAT_D16_UNORM_S8_UINT: Self = Self(128);
    ///[`FORMAT_D24_UNORM_S8_UINT`] specifies a two-component, 32-bit
    ///packed format that has 8 unsigned integer bits in the stencil component,
    ///and 24 unsigned normalized bits in the depth component.
    pub const FORMAT_D24_UNORM_S8_UINT: Self = Self(129);
    ///[`FORMAT_D32_SFLOAT_S8_UINT`] specifies a two-component format that
    ///has 32 signed float bits in the depth component and 8 unsigned integer
    ///bits in the stencil component.
    ///There are **optionally** 24 bits that are unused.
    pub const FORMAT_D32_SFLOAT_S8_UINT: Self = Self(130);
    ///[`FORMAT_BC1_RGB_UNORM_BLOCK`] specifies a three-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data.
    ///This format has no alpha and is considered opaque.
    pub const FORMAT_BC1_RGB_UNORM_BLOCK: Self = Self(131);
    ///[`FORMAT_BC1_RGB_SRGB_BLOCK`] specifies a three-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding.
    ///This format has no alpha and is considered opaque.
    pub const FORMAT_BC1_RGB_SRGB_BLOCK: Self = Self(132);
    ///[`FORMAT_BC1_RGBA_UNORM_BLOCK`] specifies a four-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data, and
    ///provides 1 bit of alpha.
    pub const FORMAT_BC1_RGBA_UNORM_BLOCK: Self = Self(133);
    ///[`FORMAT_BC1_RGBA_SRGB_BLOCK`] specifies a four-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding, and provides 1 bit of alpha.
    pub const FORMAT_BC1_RGBA_SRGB_BLOCK: Self = Self(134);
    ///[`FORMAT_BC2_UNORM_BLOCK`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values.
    pub const FORMAT_BC2_UNORM_BLOCK: Self = Self(135);
    ///[`FORMAT_BC2_SRGB_BLOCK`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values with sRGB nonlinear encoding.
    pub const FORMAT_BC2_SRGB_BLOCK: Self = Self(136);
    ///[`FORMAT_BC3_UNORM_BLOCK`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values.
    pub const FORMAT_BC3_UNORM_BLOCK: Self = Self(137);
    ///[`FORMAT_BC3_SRGB_BLOCK`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with the first 64 bits encoding alpha values followed by 64 bits
    ///encoding RGB values with sRGB nonlinear encoding.
    pub const FORMAT_BC3_SRGB_BLOCK: Self = Self(138);
    ///[`FORMAT_BC4_UNORM_BLOCK`] specifies a one-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized red texel data.
    pub const FORMAT_BC4_UNORM_BLOCK: Self = Self(139);
    ///[`FORMAT_BC4_SNORM_BLOCK`] specifies a one-component,
    ///block-compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of signed normalized red texel data.
    pub const FORMAT_BC4_SNORM_BLOCK: Self = Self(140);
    ///[`FORMAT_BC5_UNORM_BLOCK`] specifies a two-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RG texel data with
    ///the first 64 bits encoding red values followed by 64 bits encoding green
    ///values.
    pub const FORMAT_BC5_UNORM_BLOCK: Self = Self(141);
    ///[`FORMAT_BC5_SNORM_BLOCK`] specifies a two-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of signed normalized RG texel data with
    ///the first 64 bits encoding red values followed by 64 bits encoding green
    ///values.
    pub const FORMAT_BC5_SNORM_BLOCK: Self = Self(142);
    ///[`FORMAT_BC6H_UFLOAT_BLOCK`] specifies a three-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned floating-point RGB texel data.
    pub const FORMAT_BC6H_UFLOAT_BLOCK: Self = Self(143);
    ///[`FORMAT_BC6H_SFLOAT_BLOCK`] specifies a three-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of signed floating-point RGB texel data.
    pub const FORMAT_BC6H_SFLOAT_BLOCK: Self = Self(144);
    ///[`FORMAT_BC7_UNORM_BLOCK`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_BC7_UNORM_BLOCK: Self = Self(145);
    ///[`FORMAT_BC7_SRGB_BLOCK`] specifies a four-component,
    ///block-compressed format where each 128-bit compressed texel block
    ///encodes a 4×4 rectangle of unsigned normalized RGBA texel data
    ///with sRGB nonlinear encoding applied to the RGB components.
    pub const FORMAT_BC7_SRGB_BLOCK: Self = Self(146);
    ///[`FORMAT_ETC2_R8G8B8_UNORM_BLOCK`] specifies a three-component,
    ///ETC2 compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data.
    ///This format has no alpha and is considered opaque.
    pub const FORMAT_ETC2_R8G8B8_UNORM_BLOCK: Self = Self(147);
    ///[`FORMAT_ETC2_R8G8B8_SRGB_BLOCK`] specifies a three-component, ETC2
    ///compressed format where each 64-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding.
    ///This format has no alpha and is considered opaque.
    pub const FORMAT_ETC2_R8G8B8_SRGB_BLOCK: Self = Self(148);
    ///[`FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK`] specifies a four-component,
    ///ETC2 compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data, and
    ///provides 1 bit of alpha.
    pub const FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: Self = Self(149);
    ///[`FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK`] specifies a four-component,
    ///ETC2 compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
    ///nonlinear encoding, and provides 1 bit of alpha.
    pub const FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: Self = Self(150);
    ///[`FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK`] specifies a four-component,
    ///ETC2 compressed format where each 128-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with the
    ///first 64 bits encoding alpha values followed by 64 bits encoding RGB
    ///values.
    pub const FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: Self = Self(151);
    ///[`FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK`] specifies a four-component,
    ///ETC2 compressed format where each 128-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with the
    ///first 64 bits encoding alpha values followed by 64 bits encoding RGB
    ///values with sRGB nonlinear encoding applied.
    pub const FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: Self = Self(152);
    ///[`FORMAT_EAC_R11_UNORM_BLOCK`] specifies a one-component, ETC2
    ///compressed format where each 64-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized red texel data.
    pub const FORMAT_EAC_R11_UNORM_BLOCK: Self = Self(153);
    ///[`FORMAT_EAC_R11_SNORM_BLOCK`] specifies a one-component, ETC2
    ///compressed format where each 64-bit compressed texel block encodes a
    ///4×4 rectangle of signed normalized red texel data.
    pub const FORMAT_EAC_R11_SNORM_BLOCK: Self = Self(154);
    ///[`FORMAT_EAC_R11G11_UNORM_BLOCK`] specifies a two-component, ETC2
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RG texel data with the first
    ///64 bits encoding red values followed by 64 bits encoding green values.
    pub const FORMAT_EAC_R11G11_UNORM_BLOCK: Self = Self(155);
    ///[`FORMAT_EAC_R11G11_SNORM_BLOCK`] specifies a two-component, ETC2
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of signed normalized RG texel data with the first 64
    ///bits encoding red values followed by 64 bits encoding green values.
    pub const FORMAT_EAC_R11G11_SNORM_BLOCK: Self = Self(156);
    ///[`FORMAT_ASTC_4x4_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_4x4_UNORM_BLOCK: Self = Self(157);
    ///[`FORMAT_ASTC_4x4_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_4x4_SRGB_BLOCK: Self = Self(158);
    ///[`FORMAT_ASTC_5x4_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×4 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_5x4_UNORM_BLOCK: Self = Self(159);
    ///[`FORMAT_ASTC_5x4_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_5x4_SRGB_BLOCK: Self = Self(160);
    ///[`FORMAT_ASTC_5x5_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×5 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_5x5_UNORM_BLOCK: Self = Self(161);
    ///[`FORMAT_ASTC_5x5_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_5x5_SRGB_BLOCK: Self = Self(162);
    ///[`FORMAT_ASTC_6x5_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×5 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_6x5_UNORM_BLOCK: Self = Self(163);
    ///[`FORMAT_ASTC_6x5_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_6x5_SRGB_BLOCK: Self = Self(164);
    ///[`FORMAT_ASTC_6x6_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×6 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_6x6_UNORM_BLOCK: Self = Self(165);
    ///[`FORMAT_ASTC_6x6_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×6 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_6x6_SRGB_BLOCK: Self = Self(166);
    ///[`FORMAT_ASTC_8x5_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×5 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_8x5_UNORM_BLOCK: Self = Self(167);
    ///[`FORMAT_ASTC_8x5_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_8x5_SRGB_BLOCK: Self = Self(168);
    ///[`FORMAT_ASTC_8x6_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×6 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_8x6_UNORM_BLOCK: Self = Self(169);
    ///[`FORMAT_ASTC_8x6_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×6 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_8x6_SRGB_BLOCK: Self = Self(170);
    ///[`FORMAT_ASTC_8x8_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×8 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_8x8_UNORM_BLOCK: Self = Self(171);
    ///[`FORMAT_ASTC_8x8_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes an
    ///8×8 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_8x8_SRGB_BLOCK: Self = Self(172);
    ///[`FORMAT_ASTC_10x5_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×5 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_10x5_UNORM_BLOCK: Self = Self(173);
    ///[`FORMAT_ASTC_10x5_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×5 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_10x5_SRGB_BLOCK: Self = Self(174);
    ///[`FORMAT_ASTC_10x6_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×6 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_10x6_UNORM_BLOCK: Self = Self(175);
    ///[`FORMAT_ASTC_10x6_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×6 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_10x6_SRGB_BLOCK: Self = Self(176);
    ///[`FORMAT_ASTC_10x8_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×8 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_10x8_UNORM_BLOCK: Self = Self(177);
    ///[`FORMAT_ASTC_10x8_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×8 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_10x8_SRGB_BLOCK: Self = Self(178);
    ///[`FORMAT_ASTC_10x10_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×10 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_10x10_UNORM_BLOCK: Self = Self(179);
    ///[`FORMAT_ASTC_10x10_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×10 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_10x10_SRGB_BLOCK: Self = Self(180);
    ///[`FORMAT_ASTC_12x10_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×10 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_12x10_UNORM_BLOCK: Self = Self(181);
    ///[`FORMAT_ASTC_12x10_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×10 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_12x10_SRGB_BLOCK: Self = Self(182);
    ///[`FORMAT_ASTC_12x12_UNORM_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×12 rectangle of unsigned normalized RGBA texel data.
    pub const FORMAT_ASTC_12x12_UNORM_BLOCK: Self = Self(183);
    ///[`FORMAT_ASTC_12x12_SRGB_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×12 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    pub const FORMAT_ASTC_12x12_SRGB_BLOCK: Self = Self(184);
    ///[`FORMAT_G8B8G8R8_422_UNORM`] specifies a four-component, 32-bit
    ///format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has an 8-bit G component for the even *i* coordinate in byte
    ///0, an 8-bit B component in byte 1, an 8-bit G component for the odd *i*
    ///coordinate in byte 2, and an 8-bit R component in byte 3.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G8B8G8R8_422_UNORM: Self = Self(1000156000);
    ///[`FORMAT_B8G8R8G8_422_UNORM`] specifies a four-component, 32-bit
    ///format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has an 8-bit B component in byte 0, an 8-bit G component for
    ///the even *i* coordinate in byte 1, an 8-bit R component in byte 2, and
    ///an 8-bit G component for the odd *i* coordinate in byte 3.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_B8G8R8G8_422_UNORM: Self = Self(1000156001);
    ///[`FORMAT_G8_B8_R8_3PLANE_420_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G8_B8_R8_3PLANE_420_UNORM: Self = Self(1000156002);
    ///[`FORMAT_G8_B8R8_2PLANE_420_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
    ///component in byte 0 and an 8-bit R component in byte 1.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
    /// style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G8_B8R8_2PLANE_420_UNORM: Self = Self(1000156003);
    ///[`FORMAT_G8_B8_R8_3PLANE_422_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G8_B8_R8_3PLANE_422_UNORM: Self = Self(1000156004);
    ///[`FORMAT_G8_B8R8_2PLANE_422_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
    ///component in byte 0 and an 8-bit R component in byte 1.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G8_B8R8_2PLANE_422_UNORM: Self = Self(1000156005);
    ///[`FORMAT_G8_B8_R8_3PLANE_444_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G8_B8_R8_3PLANE_444_UNORM: Self = Self(1000156006);
    ///[`FORMAT_R10X6_UNORM_PACK16`] specifies a one-component, 16-bit
    ///unsigned normalized format that has a single 10-bit R component in the
    ///top 10 bits of a 16-bit word, with the bottom 6 bits unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_R10X6_UNORM_PACK16: Self = Self(1000156007);
    ///[`FORMAT_R10X6G10X6_UNORM_2PACK16`] specifies a two-component,
    ///32-bit unsigned normalized format that has a 10-bit R component in the
    ///top 10 bits of the word in bytes 0..1, and a 10-bit G component in the
    ///top 10 bits of the word in bytes 2..3, with the bottom 6 bits of each
    ///word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_R10X6G10X6_UNORM_2PACK16: Self = Self(1000156008);
    ///[`FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16`] specifies a
    ///four-component, 64-bit unsigned normalized format that has a 10-bit R
    ///component in the top 10 bits of the word in bytes 0..1, a 10-bit G
    ///component in the top 10 bits of the word in bytes 2..3, a 10-bit B
    ///component in the top 10 bits of the word in bytes 4..5, and a 10-bit A
    ///component in the top 10 bits of the word in bytes 6..7, with the bottom
    ///6 bits of each word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: Self = Self(1000156009);
    ///[`FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 10-bit G component for the even *i* coordinate in the
    ///top 10 bits of the word in bytes 0..1, a 10-bit B component in the top
    ///10 bits of the word in bytes 2..3, a 10-bit G component for the odd *i*
    ///coordinate in the top 10 bits of the word in bytes 4..5, and a 10-bit R
    ///component in the top 10 bits of the word in bytes 6..7, with the bottom
    ///6 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: Self = Self(1000156010);
    ///[`FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 10-bit B component in the top 10 bits of the word in
    ///bytes 0..1, a 10-bit G component for the even *i* coordinate in the top
    ///10 bits of the word in bytes 2..3, a 10-bit R component in the top 10
    ///bits of the word in bytes 4..5, and a 10-bit G component for the odd *i*
    ///coordinate in the top 10 bits of the word in bytes 6..7, with the bottom
    ///6 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: Self = Self(1000156011);
    ///[`FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
    ///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
    ///component in the top 10 bits of each 16-bit word of plane 2, with the
    ///bottom 6 bits of each word unused.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span class="mopen delimcenter"
    /// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: Self = Self(1000156012);
    ///[`FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
    ///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
    ///of the word in bytes 2..3, with the bottom 6 bits of each word unused.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: Self = Self(1000156013);
    ///[`FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
    ///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
    ///component in the top 10 bits of each 16-bit word of plane 2, with the
    ///bottom 6 bits of each word unused.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: Self = Self(1000156014);
    ///[`FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
    ///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
    ///of the word in bytes 2..3, with the bottom 6 bits of each word unused.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
    /// style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: Self = Self(1000156015);
    ///[`FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
    ///in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
    ///component in the top 10 bits of each 16-bit word of plane 2, with the
    ///bottom 6 bits of each word unused.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: Self = Self(1000156016);
    ///[`FORMAT_R12X4_UNORM_PACK16`] specifies a one-component, 16-bit
    ///unsigned normalized format that has a single 12-bit R component in the
    ///top 12 bits of a 16-bit word, with the bottom 4 bits unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_R12X4_UNORM_PACK16: Self = Self(1000156017);
    ///[`FORMAT_R12X4G12X4_UNORM_2PACK16`] specifies a two-component,
    ///32-bit unsigned normalized format that has a 12-bit R component in the
    ///top 12 bits of the word in bytes 0..1, and a 12-bit G component in the
    ///top 12 bits of the word in bytes 2..3, with the bottom 4 bits of each
    ///word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_R12X4G12X4_UNORM_2PACK16: Self = Self(1000156018);
    ///[`FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16`] specifies a
    ///four-component, 64-bit unsigned normalized format that has a 12-bit R
    ///component in the top 12 bits of the word in bytes 0..1, a 12-bit G
    ///component in the top 12 bits of the word in bytes 2..3, a 12-bit B
    ///component in the top 12 bits of the word in bytes 4..5, and a 12-bit A
    ///component in the top 12 bits of the word in bytes 6..7, with the bottom
    ///4 bits of each word unused.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: Self = Self(1000156019);
    ///[`FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 12-bit G component for the even *i* coordinate in the
    ///top 12 bits of the word in bytes 0..1, a 12-bit B component in the top
    ///12 bits of the word in bytes 2..3, a 12-bit G component for the odd *i*
    ///coordinate in the top 12 bits of the word in bytes 4..5, and a 12-bit R
    ///component in the top 12 bits of the word in bytes 6..7, with the bottom
    ///4 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: Self = Self(1000156020);
    ///[`FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16`] specifies a
    ///four-component, 64-bit format containing a pair of G components, an R
    ///component, and a B component, collectively encoding a 2×1
    ///rectangle of unsigned normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 12-bit B component in the top 12 bits of the word in
    ///bytes 0..1, a 12-bit G component for the even *i* coordinate in the top
    ///12 bits of the word in bytes 2..3, a 12-bit R component in the top 12
    ///bits of the word in bytes 4..5, and a 12-bit G component for the odd *i*
    ///coordinate in the top 12 bits of the word in bytes 6..7, with the bottom
    ///4 bits of each word unused.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: Self = Self(1000156021);
    ///[`FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
    ///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
    ///component in the top 12 bits of each 16-bit word of plane 2, with the
    ///bottom 4 bits of each word unused.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span aria-hidden="true"
    /// class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span class="mopen delimcenter"
    /// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: Self = Self(1000156022);
    ///[`FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
    ///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
    ///of the word in bytes 2..3, with the bottom 4 bits of each word unused.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span style="height:1em;vertical-align:-0.25em;"
    /// class="strut"></span><span class="minner"><span class="mopen delimcenter"
    /// style="top:0em;">⌊</span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: Self = Self(1000156023);
    ///[`FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
    ///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
    ///component in the top 12 bits of each 16-bit word of plane 2, with the
    ///bottom 4 bits of each word unused.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: Self = Self(1000156024);
    ///[`FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
    ///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
    ///of the word in bytes 2..3, with the bottom 4 bits of each word unused.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: Self = Self(1000156025);
    ///[`FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
    ///in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
    ///component in the top 12 bits of each 16-bit word of plane 2, with the
    ///bottom 4 bits of each word unused.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: Self = Self(1000156026);
    ///[`FORMAT_G16B16G16R16_422_UNORM`] specifies a four-component,
    ///64-bit format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 16-bit G component for the even *i* coordinate in the
    ///word in bytes 0..1, a 16-bit B component in the word in bytes 2..3, a
    ///16-bit G component for the odd *i* coordinate in the word in bytes 4..5,
    ///and a 16-bit R component in the word in bytes 6..7.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G16B16G16R16_422_UNORM: Self = Self(1000156027);
    ///[`FORMAT_B16G16R16G16_422_UNORM`] specifies a four-component,
    ///64-bit format containing a pair of G components, an R component, and a B
    ///component, collectively encoding a 2×1 rectangle of unsigned
    ///normalized RGB texel data.
    ///One G value is present at each *i* coordinate, with the B and R values
    ///shared across both G values and thus recorded at half the horizontal
    ///resolution of the image.
    ///This format has a 16-bit B component in the word in bytes 0..1, a 16-bit
    ///G component for the even *i* coordinate in the word in bytes 2..3, a
    ///16-bit R component in the word in bytes 4..5, and a 16-bit G component
    ///for the odd *i* coordinate in the word in bytes 6..7.
    ///This format only supports images with a width that is a multiple of two.
    ///For the purposes of the constraints on copy extents, this format is
    ///treated as a compressed format with a 2×1 compressed texel block.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_B16G16R16G16_422_UNORM: Self = Self(1000156028);
    ///[`FORMAT_G16_B16_R16_3PLANE_420_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
    ///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
    ///The horizontal and vertical dimensions of the R and B planes are halved
    ///relative to the image dimensions, and each R and B component is shared
    ///with the G components for which <span class="katex"><span aria-hidden="true"
    /// class="katex-html"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen
    /// delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span
    /// style="margin-right:0.05017em;" class="mord mathdefault
    /// mtight">B</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span style="margin-right:0.00773em;" class="mord mathdefault
    /// mtight">R</span></span></span></span><span class="vlist-s">​</span></span><span
    /// class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span> and
    /// <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span
    /// style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span
    /// class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord"><span class="mord
    /// mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span style="margin-right:0.2222222222222222em;"
    /// class="mspace"></span><span class="mord">0</span><span class="mord">.</span><span
    /// class="mord">5</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.85396em;vertical-align:-0.19444em;" class="strut"></span><span
    /// class="mord"><span style="margin-right:0.05724em;" class="mord mathdefault">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span
    /// class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G16_B16_R16_3PLANE_420_UNORM: Self = Self(1000156029);
    ///[`FORMAT_G16_B16R16_2PLANE_420_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
    ///consisting of a 16-bit B component in the word in bytes 0..1, and a
    ///16-bit R component in the word in bytes 2..3.
    ///The horizontal and vertical dimensions of the BR plane are halved
    ///relative to the image dimensions, and each R and B value is shared with
    ///the G components for which <span class="katex"><span class="katex-html"
    /// aria-hidden="true"><span class="base"><span class="strut"
    /// style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span class="strut"
    /// style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord
    /// mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
    /// and <span class="katex"><span aria-hidden="true" class="katex-html"><span class="base"><span
    /// class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span
    /// style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord"><span
    /// style="margin-right:0.05724em;" class="mord mathdefault">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span><span
    /// class="mrel">=</span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span></span><span class="base"><span class="strut"
    /// style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span
    /// class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.85396em;vertical-align:-0.19444em;"
    /// class="strut"></span><span class="mord"><span style="margin-right:0.05724em;" class="mord
    /// mathdefault">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span
    /// class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width and height that is a
    ///multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G16_B16R16_2PLANE_420_UNORM: Self = Self(1000156030);
    ///[`FORMAT_G16_B16_R16_3PLANE_422_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
    ///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
    ///The horizontal dimension of the R and B plane is halved relative to the
    ///image dimensions, and each R and B value is shared with the G components
    ///for which <span class="katex"><span aria-hidden="true" class="katex-html"><span
    /// class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span
    /// style="margin-right:0.2222222222222222em;" class="mspace"></span><span
    /// class="mbin">×</span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span
    /// class="mord">.</span><span class="mord">5</span><span class="mclose delimcenter"
    /// style="top:0em;">⌋</span></span><span style="margin-right:0.2777777777777778em;"
    /// class="mspace"></span><span class="mrel">=</span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span
    /// style="height:0.80952em;vertical-align:-0.15em;" class="strut"></span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;"
    /// class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span
    /// style="height:0.32833099999999993em;" class="vlist"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;"
    /// class="vlist"><span></span></span></span></span></span></span></span></span></span>. The
    /// location of each plane when this image is in linear layout can be determined via
    /// [`GetImageSubresourceLayout`], using `VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G16_B16_R16_3PLANE_422_UNORM: Self = Self(1000156031);
    ///[`FORMAT_G16_B16R16_2PLANE_422_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
    ///consisting of a 16-bit B component in the word in bytes 0..1, and a
    ///16-bit R component in the word in bytes 2..3.
    ///The horizontal dimension of the BR plane is halved relative to the image
    ///dimensions, and each R and B value is shared with the G components for
    ///which <span class="katex"><span class="katex-html" aria-hidden="true"><span
    /// class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span
    /// class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span
    /// class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span
    /// class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span
    /// class="mspace" style="margin-right:0.2222222222222222em;"></span><span
    /// class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span
    /// style="top:0em;" class="mclose delimcenter">⌋</span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut"
    /// style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord
    /// mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"
    /// style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span
    /// class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span
    /// class="base"><span style="height:0.80952em;vertical-align:-0.15em;"
    /// class="strut"></span><span class="mord"><span class="mord mathdefault">i</span><span
    /// class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"
    /// style="height:0.32833099999999993em;"><span
    /// style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span
    /// style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3
    /// mtight"><span class="mord mathdefault mtight"
    /// style="margin-right:0.00773em;">R</span></span></span></span><span
    /// class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"
    /// style="height:0.15em;"><span></span></span></span></span></span></span></span></span></
    /// span>. The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///This format only supports images with a width that is a multiple of two.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G16_B16R16_2PLANE_422_UNORM: Self = Self(1000156032);
    ///[`FORMAT_G16_B16_R16_3PLANE_444_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, a 16-bit B component in each 16-bit word of
    ///plane 1, and a 16-bit R component in each 16-bit word of plane 2.
    ///Each plane has the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane,
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the B plane, and
    ///`VK_IMAGE_ASPECT_PLANE_2_BIT` for the R plane.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const FORMAT_G16_B16_R16_3PLANE_444_UNORM: Self = Self(1000156033);
    ///[`FORMAT_G8_B8R8_2PLANE_444_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has an 8-bit G component in plane
    ///0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
    ///component in byte 0 and an 8-bit R component in byte 1.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_G8_B8R8_2PLANE_444_UNORM: Self = Self(1000330000);
    ///[`FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 10-bit G component
    ///in the top 10 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
    ///of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
    ///of the word in bytes 2..3, the bottom 6 bits of each word unused.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: Self = Self(1000330001);
    ///[`FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16`] specifies an
    ///unsigned normalized *multi-planar format* that has a 12-bit G component
    ///in the top 12 bits of each 16-bit word of plane 0, and a two-component,
    ///32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
    ///of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
    ///of the word in bytes 2..3, the bottom 4 bits of each word unused.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: Self = Self(1000330002);
    ///[`FORMAT_G16_B16R16_2PLANE_444_UNORM`] specifies an unsigned
    ///normalized *multi-planar format* that has a 16-bit G component in each
    ///16-bit word of plane 0, and a two-component, 32-bit BR plane 1
    ///consisting of a 16-bit B component in the word in bytes 0..1, and a
    ///16-bit R component in the word in bytes 2..3.
    ///Both planes have the same dimensions and each R, G and B component
    ///contributes to a single texel.
    ///The location of each plane when this image is in linear layout can be
    ///determined via [`GetImageSubresourceLayout`], using
    ///`VK_IMAGE_ASPECT_PLANE_0_BIT` for the G plane, and
    ///`VK_IMAGE_ASPECT_PLANE_1_BIT` for the BR plane.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_G16_B16R16_2PLANE_444_UNORM: Self = Self(1000330003);
    ///[`FORMAT_A4R4G4B4_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit A component in bits
    ///12..15, a 4-bit R component in bits 8..11, a 4-bit G component in bits
    ///4..7, and a 4-bit B component in bits 0..3.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_A4R4G4B4_UNORM_PACK16: Self = Self(1000340000);
    ///[`FORMAT_A4B4G4R4_UNORM_PACK16`] specifies a four-component, 16-bit
    ///packed unsigned normalized format that has a 4-bit A component in bits
    ///12..15, a 4-bit B component in bits 8..11, a 4-bit G component in bits
    ///4..7, and a 4-bit R component in bits 0..3.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_A4B4G4R4_UNORM_PACK16: Self = Self(1000340001);
    ///[`FORMAT_ASTC_4x4_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///4×4 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_4x4_SFLOAT_BLOCK: Self = Self(1000066000);
    ///[`FORMAT_ASTC_5x4_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×4 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_5x4_SFLOAT_BLOCK: Self = Self(1000066001);
    ///[`FORMAT_ASTC_5x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///5×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_5x5_SFLOAT_BLOCK: Self = Self(1000066002);
    ///[`FORMAT_ASTC_6x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_6x5_SFLOAT_BLOCK: Self = Self(1000066003);
    ///[`FORMAT_ASTC_6x6_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///6×6 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_6x6_SFLOAT_BLOCK: Self = Self(1000066004);
    ///[`FORMAT_ASTC_8x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///8×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_8x5_SFLOAT_BLOCK: Self = Self(1000066005);
    ///[`FORMAT_ASTC_8x6_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///8×6 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_8x6_SFLOAT_BLOCK: Self = Self(1000066006);
    ///[`FORMAT_ASTC_8x8_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///8×8 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_8x8_SFLOAT_BLOCK: Self = Self(1000066007);
    ///[`FORMAT_ASTC_10x5_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×5 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_10x5_SFLOAT_BLOCK: Self = Self(1000066008);
    ///[`FORMAT_ASTC_10x6_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×6 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_10x6_SFLOAT_BLOCK: Self = Self(1000066009);
    ///[`FORMAT_ASTC_10x8_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×8 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_10x8_SFLOAT_BLOCK: Self = Self(1000066010);
    ///[`FORMAT_ASTC_10x10_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///10×10 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_10x10_SFLOAT_BLOCK: Self = Self(1000066011);
    ///[`FORMAT_ASTC_12x10_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×10 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_12x10_SFLOAT_BLOCK: Self = Self(1000066012);
    ///[`FORMAT_ASTC_12x12_SFLOAT_BLOCK`] specifies a four-component, ASTC
    ///compressed format where each 128-bit compressed texel block encodes a
    ///12×12 rectangle of signed floating-point RGBA texel data.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const FORMAT_ASTC_12x12_SFLOAT_BLOCK: Self = Self(1000066013);
    ///[`FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: Self = Self(1000054000);
    ///[`FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: Self = Self(1000054001);
    ///[`FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: Self = Self(1000054002);
    ///[`FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: Self = Self(1000054003);
    ///[`FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: Self = Self(1000054004);
    ///[`FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: Self = Self(1000054005);
    ///[`FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///an 8×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: Self = Self(1000054006);
    ///[`FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG`] specifies a four-component,
    ///PVRTC compressed format where each 64-bit compressed texel block encodes
    ///a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB
    ///nonlinear encoding applied to the RGB components.
    ///
    ///Provided by [`crate::extensions::img_format_pvrtc`]
    pub const FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: Self = Self(1000054007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_4x4_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_5x4_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_5x5_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_6x5_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_6x6_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_8x5_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_8x6_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_8x8_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_10x5_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_10x6_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_10x8_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_10x10_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_12x10_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: Self = Self::FORMAT_ASTC_12x12_SFLOAT_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G8B8G8R8_422_UNORM_KHR: Self = Self::FORMAT_G8B8G8R8_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_B8G8R8G8_422_UNORM_KHR: Self = Self::FORMAT_B8G8R8G8_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: Self = Self::FORMAT_G8_B8_R8_3PLANE_420_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: Self = Self::FORMAT_G8_B8R8_2PLANE_420_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: Self = Self::FORMAT_G8_B8_R8_3PLANE_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: Self = Self::FORMAT_G8_B8R8_2PLANE_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: Self = Self::FORMAT_G8_B8_R8_3PLANE_444_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_R10X6_UNORM_PACK16_KHR: Self = Self::FORMAT_R10X6_UNORM_PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: Self = Self::FORMAT_R10X6G10X6_UNORM_2PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: Self = Self::FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: Self =
        Self::FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: Self =
        Self::FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_R12X4_UNORM_PACK16_KHR: Self = Self::FORMAT_R12X4_UNORM_PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: Self = Self::FORMAT_R12X4G12X4_UNORM_2PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: Self = Self::FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: Self =
        Self::FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: Self =
        Self::FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: Self =
        Self::FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G16B16G16R16_422_UNORM_KHR: Self = Self::FORMAT_G16B16G16R16_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_B16G16R16G16_422_UNORM_KHR: Self = Self::FORMAT_B16G16R16G16_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: Self = Self::FORMAT_G16_B16_R16_3PLANE_420_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: Self = Self::FORMAT_G16_B16R16_2PLANE_420_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: Self = Self::FORMAT_G16_B16_R16_3PLANE_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: Self = Self::FORMAT_G16_B16R16_2PLANE_422_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: Self = Self::FORMAT_G16_B16_R16_3PLANE_444_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_2_plane_444_formats`]
    pub const FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: Self = Self::FORMAT_G8_B8R8_2PLANE_444_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_2_plane_444_formats`]
    pub const FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: Self =
        Self::FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_2_plane_444_formats`]
    pub const FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: Self =
        Self::FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_2_plane_444_formats`]
    pub const FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: Self = Self::FORMAT_G16_B16R16_2PLANE_444_UNORM;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_4444_formats`]
    pub const FORMAT_A4R4G4B4_UNORM_PACK16_EXT: Self = Self::FORMAT_A4R4G4B4_UNORM_PACK16;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_4444_formats`]
    pub const FORMAT_A4B4G4R4_UNORM_PACK16_EXT: Self = Self::FORMAT_A4B4G4R4_UNORM_PACK16;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkStructureType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkStructureType.html) - Vulkan structure types (pname:sType)
///# C Specifications
///Each value corresponds to a particular structure with a `sType` member
///with a matching name.
///As a general rule, the name of each [`StructureType`] value is obtained
///by taking the name of the structure, stripping the leading `Vk`,
///prefixing each capital letter with `_`, converting the entire resulting
///string to upper case, and prefixing it with `VK_STRUCTURE_TYPE_`.
///For example, structures of type [`ImageCreateInfo`] correspond to a
///[`StructureType`] of [`STRUCTURE_TYPE_IMAGE_CREATE_INFO`], and thus
///its `sType` member **must** equal that when it is passed to the API.The values
/// [`STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO`] and
///[`STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO`] are reserved for internal
///use by the loader, and do not have corresponding Vulkan structures in this
///Specification.Structure types supported by the Vulkan API include:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkStructureType {
///    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
///    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
///    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
///    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
///    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
///    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
///    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
///    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
///    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
///    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
///    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
///    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
///    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
///    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
///    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
///    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
///    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
///    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
///    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
///    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
///    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
///    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
///    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
///    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
///    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
///    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
///    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
///    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
///    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
///    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
///    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
///    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
///    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
///    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
///    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
///    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
///  // Provided by VK_VERSION_1_2
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
///  // Provided by VK_VERSION_1_3
///    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
///  // Provided by VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
///  // Provided by VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_surface
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
///  // Provided by VK_VERSION_1_1 with VK_KHR_swapchain, VK_KHR_device_group with VK_KHR_swapchain
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
///  // Provided by VK_KHR_display
///    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
///  // Provided by VK_KHR_display
///    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
///  // Provided by VK_KHR_display_swapchain
///    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
///  // Provided by VK_KHR_xlib_surface
///    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
///  // Provided by VK_KHR_xcb_surface
///    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
///  // Provided by VK_KHR_wayland_surface
///    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
///  // Provided by VK_KHR_android_surface
///    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
///  // Provided by VK_KHR_win32_surface
///    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
///  // Provided by VK_EXT_debug_report
///    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
///  // Provided by VK_AMD_rasterization_order
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
///  // Provided by VK_EXT_debug_marker
///    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
///  // Provided by VK_EXT_debug_marker
///    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
///  // Provided by VK_EXT_debug_marker
///    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR = 1000023000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR = 1000023002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR = 1000023003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR = 1000023004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR = 1000023011,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000023012,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR = 1000023013,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR = 1000023016,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_decode_queue
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
///#endif
///  // Provided by VK_NV_dedicated_allocation
///    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
///  // Provided by VK_NV_dedicated_allocation
///    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
///  // Provided by VK_NV_dedicated_allocation
///    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
///  // Provided by VK_EXT_transform_feedback
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
///  // Provided by VK_EXT_transform_feedback
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
///  // Provided by VK_EXT_transform_feedback
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
///  // Provided by VK_NVX_binary_import
///    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
///  // Provided by VK_NVX_binary_import
///    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
///  // Provided by VK_NVX_binary_import
///    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
///  // Provided by VK_NVX_image_view_handle
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
///  // Provided by VK_NVX_image_view_handle
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = 1000038001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT = 1000038004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT = 1000038006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT = 1000038007,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT = 1000038008,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = 1000038009,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h264
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = 1000038010,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT = 1000039000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT = 1000039001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000039002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000039003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT = 1000039004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = 1000039005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_EXT = 1000039006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT = 1000039007,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT = 1000039008,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT = 1000039009,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = 1000039010,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_encode_h265
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = 1000039011,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT = 1000040000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT = 1000040001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT = 1000040002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT = 1000040003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT = 1000040004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000040005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000040006,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h264
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT = 1000040007,
///#endif
///  // Provided by VK_AMD_texture_gather_bias_lod
///    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
///  // Provided by VK_KHR_dynamic_rendering with VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
///  // Provided by VK_KHR_dynamic_rendering with VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
///  // Provided by VK_KHR_dynamic_rendering with VK_AMD_mixed_attachment_samples
///    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
///  // Provided by VK_KHR_dynamic_rendering with VK_NVX_multiview_per_view_attributes
///    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
///  // Provided by VK_GGP_stream_descriptor_surface
///    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
///  // Provided by VK_NV_corner_sampled_image
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
///  // Provided by VK_NV_external_memory
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
///  // Provided by VK_NV_external_memory
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
///  // Provided by VK_NV_external_memory_win32
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
///  // Provided by VK_NV_external_memory_win32
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
///  // Provided by VK_NV_win32_keyed_mutex
///    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
///  // Provided by VK_EXT_validation_flags
///    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
///  // Provided by VK_NN_vi_surface
///    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
///  // Provided by VK_EXT_astc_decode_mode
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
///  // Provided by VK_EXT_astc_decode_mode
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
///  // Provided by VK_KHR_external_memory_win32
///    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
///  // Provided by VK_KHR_external_memory_fd
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
///  // Provided by VK_KHR_external_memory_fd
///    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
///  // Provided by VK_KHR_external_memory_fd
///    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
///  // Provided by VK_KHR_win32_keyed_mutex
///    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
///  // Provided by VK_KHR_external_semaphore_win32
///    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
///  // Provided by VK_KHR_external_semaphore_fd
///    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
///  // Provided by VK_KHR_external_semaphore_fd
///    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
///  // Provided by VK_KHR_push_descriptor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
///  // Provided by VK_EXT_conditional_rendering
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
///  // Provided by VK_EXT_conditional_rendering
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
///  // Provided by VK_EXT_conditional_rendering
///    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
///  // Provided by VK_KHR_incremental_present
///    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
///  // Provided by VK_NV_clip_space_w_scaling
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
///  // Provided by VK_EXT_display_surface_counter
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
///  // Provided by VK_EXT_display_control
///    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
///  // Provided by VK_GOOGLE_display_timing
///    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
///  // Provided by VK_NVX_multiview_per_view_attributes
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
///  // Provided by VK_NV_viewport_swizzle
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
///  // Provided by VK_EXT_discard_rectangles
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
///  // Provided by VK_EXT_discard_rectangles
///    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
///  // Provided by VK_EXT_conservative_rasterization
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
///  // Provided by VK_EXT_conservative_rasterization
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
///  // Provided by VK_EXT_depth_clip_enable
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
///  // Provided by VK_EXT_depth_clip_enable
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
///  // Provided by VK_EXT_hdr_metadata
///    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
///  // Provided by VK_KHR_shared_presentable_image
///    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
///  // Provided by VK_KHR_external_fence_win32
///    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
///  // Provided by VK_KHR_external_fence_win32
///    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
///  // Provided by VK_KHR_external_fence_win32
///    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
///  // Provided by VK_KHR_external_fence_fd
///    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
///  // Provided by VK_KHR_external_fence_fd
///    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
///  // Provided by VK_KHR_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
///  // Provided by VK_KHR_get_surface_capabilities2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
///  // Provided by VK_KHR_get_surface_capabilities2
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
///  // Provided by VK_KHR_get_surface_capabilities2
///    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
///  // Provided by VK_KHR_get_display_properties2
///    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
///  // Provided by VK_MVK_ios_surface
///    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
///  // Provided by VK_MVK_macos_surface
///    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
///  // Provided by VK_EXT_debug_utils
///    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
///  // Provided by VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
///  // Provided by VK_KHR_format_feature_flags2 with
/// VK_ANDROID_external_memory_android_hardware_buffer
///    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
///  // Provided by VK_EXT_sample_locations
///    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
///  // Provided by VK_EXT_blend_operation_advanced
///    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
///  // Provided by VK_NV_fragment_coverage_to_color
///    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
///  // Provided by VK_KHR_acceleration_structure
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
///  // Provided by VK_KHR_ray_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
///  // Provided by VK_NV_framebuffer_mixed_samples
///    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
///  // Provided by VK_NV_shader_sm_builtins
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
///  // Provided by VK_NV_shader_sm_builtins
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
///  // Provided by VK_KHR_format_feature_flags2 with VK_EXT_image_drm_format_modifier
///    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
///  // Provided by VK_EXT_validation_cache
///    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
///  // Provided by VK_EXT_validation_cache
///    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_portability_subset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_portability_subset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
///#endif
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
///  // Provided by VK_NV_shading_rate_image
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
///  // Provided by VK_NV_ray_tracing
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
///  // Provided by VK_NV_representative_fragment_test
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
///  // Provided by VK_NV_representative_fragment_test
///    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
///  // Provided by VK_EXT_filter_cubic
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
///  // Provided by VK_EXT_filter_cubic
///    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
///  // Provided by VK_EXT_external_memory_host
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
///  // Provided by VK_EXT_external_memory_host
///    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
///  // Provided by VK_EXT_external_memory_host
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
///  // Provided by VK_KHR_shader_clock
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
///  // Provided by VK_AMD_pipeline_compiler_control
///    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
///  // Provided by VK_EXT_calibrated_timestamps
///    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
///  // Provided by VK_AMD_shader_core_properties
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT = 1000187000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT = 1000187001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000187002,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000187003,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT = 1000187004,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT = 1000187005,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_EXT_video_decode_h265
///    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT = 1000187006,
///#endif
///  // Provided by VK_KHR_global_priority
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000,
///  // Provided by VK_KHR_global_priority
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000,
///  // Provided by VK_KHR_global_priority
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001,
///  // Provided by VK_AMD_memory_overallocation_behavior
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
///  // Provided by VK_EXT_vertex_attribute_divisor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
///  // Provided by VK_EXT_vertex_attribute_divisor
///    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
///  // Provided by VK_EXT_vertex_attribute_divisor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
///  // Provided by VK_GGP_frame_token
///    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
///  // Provided by VK_NV_compute_shader_derivatives
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
///  // Provided by VK_NV_mesh_shader
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
///  // Provided by VK_NV_mesh_shader
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
///  // Provided by VK_NV_fragment_shader_barycentric
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
///  // Provided by VK_NV_shader_image_footprint
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
///  // Provided by VK_NV_scissor_exclusive
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
///  // Provided by VK_NV_scissor_exclusive
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
///  // Provided by VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
///  // Provided by VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
///  // Provided by VK_INTEL_shader_integer_functions2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
///  // Provided by VK_EXT_pci_bus_info
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
///  // Provided by VK_AMD_display_native_hdr
///    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
///  // Provided by VK_AMD_display_native_hdr
///    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
///  // Provided by VK_FUCHSIA_imagepipe_surface
///    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
///  // Provided by VK_EXT_metal_surface
///    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
///  // Provided by VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
///  // Provided by VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
///  // Provided by VK_EXT_fragment_density_map
///    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
///  // Provided by VK_AMD_shader_core_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
///  // Provided by VK_AMD_device_coherent_memory
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
///  // Provided by VK_EXT_shader_image_atomic_int64
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
///  // Provided by VK_EXT_memory_budget
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
///  // Provided by VK_EXT_memory_priority
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
///  // Provided by VK_EXT_memory_priority
///    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
///  // Provided by VK_KHR_surface_protected_capabilities
///    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
///  // Provided by VK_NV_dedicated_allocation_image_aliasing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV =
/// 1000240000,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
///  // Provided by VK_EXT_validation_features
///    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
///  // Provided by VK_KHR_present_wait
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
///  // Provided by VK_NV_cooperative_matrix
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
///  // Provided by VK_NV_cooperative_matrix
///    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
///  // Provided by VK_NV_cooperative_matrix
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
///  // Provided by VK_NV_coverage_reduction_mode
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
///  // Provided by VK_NV_coverage_reduction_mode
///    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
///  // Provided by VK_NV_coverage_reduction_mode
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
///  // Provided by VK_EXT_fragment_shader_interlock
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
///  // Provided by VK_EXT_ycbcr_image_arrays
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
///  // Provided by VK_EXT_provoking_vertex
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
///  // Provided by VK_EXT_provoking_vertex
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
///  // Provided by VK_EXT_provoking_vertex
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
///  // Provided by VK_EXT_full_screen_exclusive
///    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
///  // Provided by VK_EXT_full_screen_exclusive
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
///  // Provided by VK_KHR_win32_surface with VK_EXT_full_screen_exclusive
///    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
///  // Provided by VK_EXT_headless_surface
///    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
///  // Provided by VK_EXT_line_rasterization
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
///  // Provided by VK_EXT_line_rasterization
///    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
///  // Provided by VK_EXT_line_rasterization
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
///  // Provided by VK_EXT_shader_atomic_float
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
///  // Provided by VK_EXT_index_type_uint8
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
///  // Provided by VK_KHR_pipeline_executable_properties
///    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
///  // Provided by VK_EXT_shader_atomic_float2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
///  // Provided by VK_NV_device_generated_commands
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
///  // Provided by VK_NV_inherited_viewport_scissor
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
///  // Provided by VK_NV_inherited_viewport_scissor
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
///  // Provided by VK_EXT_texel_buffer_alignment
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
///  // Provided by VK_QCOM_render_pass_transform
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
///  // Provided by VK_QCOM_render_pass_transform
///    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
///  // Provided by VK_EXT_device_memory_report
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
///  // Provided by VK_EXT_device_memory_report
///    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
///  // Provided by VK_EXT_device_memory_report
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
///  // Provided by VK_EXT_robustness2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
///  // Provided by VK_EXT_robustness2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
///  // Provided by VK_EXT_custom_border_color
///    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
///  // Provided by VK_EXT_custom_border_color
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
///  // Provided by VK_EXT_custom_border_color
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
///  // Provided by VK_KHR_pipeline_library
///    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
///  // Provided by VK_KHR_present_id
///    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
///  // Provided by VK_KHR_present_id
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_encode_queue
///    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002,
///#endif
///  // Provided by VK_NV_device_diagnostics_config
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
///  // Provided by VK_NV_device_diagnostics_config
///    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
///  // Provided by VK_KHR_synchronization2 with VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
///  // Provided by VK_KHR_synchronization2 with VK_NV_device_diagnostic_checkpoints
///    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
///  // Provided by VK_KHR_shader_subgroup_uniform_control_flow
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR =
/// 1000323000,
///  // Provided by VK_NV_fragment_shading_rate_enums
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
///  // Provided by VK_NV_fragment_shading_rate_enums
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
///  // Provided by VK_NV_fragment_shading_rate_enums
///    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
///  // Provided by VK_NV_ray_tracing_motion_blur
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
///  // Provided by VK_NV_ray_tracing_motion_blur
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
///  // Provided by VK_NV_ray_tracing_motion_blur
///    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
///  // Provided by VK_EXT_ycbcr_2plane_444_formats
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
///  // Provided by VK_EXT_fragment_density_map2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
///  // Provided by VK_EXT_fragment_density_map2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
///  // Provided by VK_QCOM_rotated_copy_commands
///    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
///  // Provided by VK_KHR_workgroup_memory_explicit_layout
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
///  // Provided by VK_EXT_4444_formats
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
///  // Provided by VK_ARM_rasterization_order_attachment_access
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM =
/// 1000342000,
///  // Provided by VK_EXT_rgba10x6_formats
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
///  // Provided by VK_EXT_directfb_surface
///    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
///  // Provided by VK_VALVE_mutable_descriptor_type
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
///  // Provided by VK_VALVE_mutable_descriptor_type
///    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
///  // Provided by VK_EXT_physical_device_drm
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
///  // Provided by VK_EXT_depth_clip_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
///  // Provided by VK_EXT_depth_clip_control
///    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
///  // Provided by VK_EXT_primitive_topology_list_restart
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
///  // Provided by VK_FUCHSIA_external_memory
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
///  // Provided by VK_FUCHSIA_external_memory
///    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
///  // Provided by VK_FUCHSIA_external_memory
///    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
///  // Provided by VK_FUCHSIA_external_semaphore
///    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
///  // Provided by VK_FUCHSIA_external_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
///  // Provided by VK_HUAWEI_subpass_shading
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
///  // Provided by VK_HUAWEI_invocation_mask
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
///  // Provided by VK_NV_external_memory_rdma
///    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
///  // Provided by VK_NV_external_memory_rdma
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
///  // Provided by VK_QNX_screen_surface
///    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
///  // Provided by VK_EXT_color_write_enable
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
///  // Provided by VK_EXT_color_write_enable
///    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
///  // Provided by VK_EXT_image_view_min_lod
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
///  // Provided by VK_EXT_image_view_min_lod
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
///  // Provided by VK_EXT_multi_draw
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
///  // Provided by VK_EXT_multi_draw
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
///  // Provided by VK_EXT_border_color_swizzle
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
///  // Provided by VK_EXT_border_color_swizzle
///    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
///  // Provided by VK_EXT_pageable_device_local_memory
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
///  // Provided by VK_QCOM_fragment_density_map_offset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
///  // Provided by VK_QCOM_fragment_density_map_offset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
///  // Provided by VK_QCOM_fragment_density_map_offset
///    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
///  // Provided by VK_NV_linear_color_attachment
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
///  // Provided by VK_VERSION_1_1
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
///  // Provided by VK_EXT_debug_report
///    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
///  // Provided by VK_KHR_dynamic_rendering
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR =
/// VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
///  // Provided by VK_KHR_dynamic_rendering with VK_NV_framebuffer_mixed_samples
///    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV =
/// VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
///  // Provided by VK_KHR_multiview
///    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
///  // Provided by VK_KHR_multiview
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
///  // Provided by VK_KHR_multiview
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR =
/// VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
///  // Provided by VK_KHR_get_physical_device_properties2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
///  // Provided by VK_KHR_device_group
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
///  // Provided by VK_KHR_bind_memory2 with VK_KHR_device_group
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR =
/// VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
///  // Provided by VK_KHR_bind_memory2 with VK_KHR_device_group
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR =
/// VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
///  // Provided by VK_EXT_texture_compression_astc_hdr
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
///  // Provided by VK_KHR_device_group_creation
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
///  // Provided by VK_KHR_device_group_creation
///    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
///  // Provided by VK_KHR_external_memory_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
///  // Provided by VK_KHR_external_fence_capabilities, VK_KHR_external_memory_capabilities,
/// VK_KHR_external_semaphore_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
///  // Provided by VK_KHR_external_memory
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
///  // Provided by VK_KHR_external_memory
///    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
///  // Provided by VK_KHR_external_memory
///    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
///  // Provided by VK_KHR_external_semaphore_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
///  // Provided by VK_KHR_external_semaphore_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
///  // Provided by VK_KHR_external_semaphore
///    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
///  // Provided by VK_KHR_shader_float16_int8
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
///  // Provided by VK_KHR_shader_float16_int8
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
///  // Provided by VK_KHR_16bit_storage
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
///  // Provided by VK_KHR_descriptor_update_template
///    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
///  // Provided by VK_EXT_display_surface_counter
///    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR =
/// VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
///  // Provided by VK_KHR_imageless_framebuffer
///    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
///  // Provided by VK_KHR_create_renderpass2
///    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
///  // Provided by VK_KHR_external_fence_capabilities
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
///  // Provided by VK_KHR_external_fence_capabilities
///    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
///  // Provided by VK_KHR_external_fence
///    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
///  // Provided by VK_KHR_maintenance2
///    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
///  // Provided by VK_KHR_variable_pointers
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
///  // Provided by VK_KHR_variable_pointers
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
///  // Provided by VK_KHR_dedicated_allocation
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
///  // Provided by VK_KHR_dedicated_allocation
///    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
///  // Provided by VK_EXT_sampler_filter_minmax
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
///  // Provided by VK_EXT_sampler_filter_minmax
///    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT =
/// VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
///  // Provided by VK_EXT_inline_uniform_block
///    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
///  // Provided by VK_KHR_get_memory_requirements2
///    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR =
/// VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
///  // Provided by VK_KHR_image_format_list
///    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR =
/// VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR =
/// VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR =
/// VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
///  // Provided by VK_KHR_bind_memory2
///    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
///  // Provided by VK_KHR_bind_memory2
///    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
///  // Provided by VK_KHR_maintenance3
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
///  // Provided by VK_KHR_maintenance3
///    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR =
/// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
///  // Provided by VK_EXT_global_priority
///    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR,
///  // Provided by VK_KHR_shader_subgroup_extended_types
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
///  // Provided by VK_KHR_8bit_storage
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
///  // Provided by VK_KHR_shader_atomic_int64
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
///  // Provided by VK_EXT_pipeline_creation_feedback
///    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
///  // Provided by VK_KHR_driver_properties
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
///  // Provided by VK_KHR_shader_float_controls
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
///  // Provided by VK_KHR_depth_stencil_resolve
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
///  // Provided by VK_KHR_depth_stencil_resolve
///    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR =
/// VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR =
/// VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
///  // Provided by VK_KHR_timeline_semaphore
///    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
///  // Provided by VK_INTEL_performance_query
///    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL =
/// VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
///  // Provided by VK_KHR_vulkan_memory_model
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
///  // Provided by VK_KHR_shader_terminate_invocation
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
///  // Provided by VK_EXT_scalar_block_layout
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
///  // Provided by VK_EXT_subgroup_size_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
///  // Provided by VK_EXT_subgroup_size_control
///    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
///  // Provided by VK_EXT_subgroup_size_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR =
/// VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
///  // Provided by VK_KHR_separate_depth_stencil_layouts
///    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR =
/// VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
///  // Provided by VK_EXT_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT =
/// VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
///  // Provided by VK_EXT_tooling_info
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
///  // Provided by VK_EXT_separate_stencil_usage
///    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
///  // Provided by VK_KHR_uniform_buffer_standard_layout
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR =
/// VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR =
/// VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
///  // Provided by VK_KHR_buffer_device_address
///    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
///  // Provided by VK_EXT_host_query_reset
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
///  // Provided by VK_EXT_shader_demote_to_helper_invocation
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
///  // Provided by VK_KHR_shader_integer_dot_product
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
///  // Provided by VK_KHR_shader_integer_dot_product
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
///  // Provided by VK_EXT_texel_buffer_alignment
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
///  // Provided by VK_EXT_private_data
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
///  // Provided by VK_EXT_private_data
///    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
///  // Provided by VK_EXT_private_data
///    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT =
/// VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
///  // Provided by VK_EXT_pipeline_creation_cache_control
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR =
/// VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
///  // Provided by VK_KHR_synchronization2
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
///  // Provided by VK_KHR_zero_initialize_workgroup_memory
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
///  // Provided by VK_EXT_image_robustness
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR =
/// VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
///  // Provided by VK_KHR_copy_commands2
///    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
///  // Provided by VK_KHR_format_feature_flags2
///    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
///  // Provided by VK_EXT_global_priority_query
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,
///  // Provided by VK_EXT_global_priority_query
///    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT =
/// VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR =
/// VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
///  // Provided by VK_KHR_maintenance4
///    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR =
/// VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
///} VkStructureType;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`AccelerationStructureBuildGeometryInfoKHR`]
/// - [`AccelerationStructureBuildSizesInfoKHR`]
/// - [`AccelerationStructureCreateInfoKHR`]
/// - [`AccelerationStructureCreateInfoNV`]
/// - [`AccelerationStructureDeviceAddressInfoKHR`]
/// - [`AccelerationStructureGeometryAabbsDataKHR`]
/// - [`AccelerationStructureGeometryInstancesDataKHR`]
/// - [`AccelerationStructureGeometryKHR`]
/// - [`AccelerationStructureGeometryMotionTrianglesDataNV`]
/// - [`AccelerationStructureGeometryTrianglesDataKHR`]
/// - [`AccelerationStructureInfoNV`]
/// - [`AccelerationStructureMemoryRequirementsInfoNV`]
/// - [`AccelerationStructureMotionInfoNV`]
/// - [`AccelerationStructureVersionInfoKHR`]
/// - [`AcquireNextImageInfoKHR`]
/// - [`AcquireProfilingLockInfoKHR`]
/// - [`AndroidHardwareBufferFormatProperties2ANDROID`]
/// - [`AndroidHardwareBufferFormatPropertiesANDROID`]
/// - [`AndroidHardwareBufferPropertiesANDROID`]
/// - [`AndroidHardwareBufferUsageANDROID`]
/// - [`AndroidSurfaceCreateInfoKHR`]
/// - [`ApplicationInfo`]
/// - [`AttachmentDescription2`]
/// - [`AttachmentDescriptionStencilLayout`]
/// - [`AttachmentReference2`]
/// - [`AttachmentReferenceStencilLayout`]
/// - [`AttachmentSampleCountInfoAMD`]
/// - [`BaseInStructure`]
/// - [`BaseOutStructure`]
/// - [`BindAccelerationStructureMemoryInfoNV`]
/// - [`BindBufferMemoryDeviceGroupInfo`]
/// - [`BindBufferMemoryInfo`]
/// - [`BindImageMemoryDeviceGroupInfo`]
/// - [`BindImageMemoryInfo`]
/// - [`BindImageMemorySwapchainInfoKHR`]
/// - [`BindImagePlaneMemoryInfo`]
/// - [`BindSparseInfo`]
/// - [`BlitImageInfo2`]
/// - [`BufferCollectionBufferCreateInfoFUCHSIA`]
/// - [`BufferCollectionConstraintsInfoFUCHSIA`]
/// - [`BufferCollectionCreateInfoFUCHSIA`]
/// - [`BufferCollectionImageCreateInfoFUCHSIA`]
/// - [`BufferCollectionPropertiesFUCHSIA`]
/// - [`BufferConstraintsInfoFUCHSIA`]
/// - [`BufferCopy2`]
/// - [`BufferCreateInfo`]
/// - [`BufferDeviceAddressCreateInfoEXT`]
/// - [`BufferDeviceAddressInfo`]
/// - [`BufferImageCopy2`]
/// - [`BufferMemoryBarrier`]
/// - [`BufferMemoryBarrier2`]
/// - [`BufferMemoryRequirementsInfo2`]
/// - [`BufferOpaqueCaptureAddressCreateInfo`]
/// - [`BufferViewCreateInfo`]
/// - [`CalibratedTimestampInfoEXT`]
/// - [`CheckpointData2NV`]
/// - [`CheckpointDataNV`]
/// - [`CommandBufferAllocateInfo`]
/// - [`CommandBufferBeginInfo`]
/// - [`CommandBufferInheritanceConditionalRenderingInfoEXT`]
/// - [`CommandBufferInheritanceInfo`]
/// - [`CommandBufferInheritanceRenderPassTransformInfoQCOM`]
/// - [`CommandBufferInheritanceRenderingInfo`]
/// - [`CommandBufferInheritanceViewportScissorInfoNV`]
/// - [`CommandBufferSubmitInfo`]
/// - [`CommandPoolCreateInfo`]
/// - [`ComputePipelineCreateInfo`]
/// - [`ConditionalRenderingBeginInfoEXT`]
/// - [`CooperativeMatrixPropertiesNV`]
/// - [`CopyAccelerationStructureInfoKHR`]
/// - [`CopyAccelerationStructureToMemoryInfoKHR`]
/// - [`CopyBufferInfo2`]
/// - [`CopyBufferToImageInfo2`]
/// - [`CopyCommandTransformInfoQCOM`]
/// - [`CopyDescriptorSet`]
/// - [`CopyImageInfo2`]
/// - [`CopyImageToBufferInfo2`]
/// - [`CopyMemoryToAccelerationStructureInfoKHR`]
/// - [`CuFunctionCreateInfoNVX`]
/// - [`CuLaunchInfoNVX`]
/// - [`CuModuleCreateInfoNVX`]
/// - [`D3D12FenceSubmitInfoKHR`]
/// - [`DebugMarkerMarkerInfoEXT`]
/// - [`DebugMarkerObjectNameInfoEXT`]
/// - [`DebugMarkerObjectTagInfoEXT`]
/// - [`DebugReportCallbackCreateInfoEXT`]
/// - [`DebugUtilsLabelEXT`]
/// - [`DebugUtilsMessengerCallbackDataEXT`]
/// - [`DebugUtilsMessengerCreateInfoEXT`]
/// - [`DebugUtilsObjectNameInfoEXT`]
/// - [`DebugUtilsObjectTagInfoEXT`]
/// - [`DedicatedAllocationBufferCreateInfoNV`]
/// - [`DedicatedAllocationImageCreateInfoNV`]
/// - [`DedicatedAllocationMemoryAllocateInfoNV`]
/// - [`DependencyInfo`]
/// - [`DescriptorPoolCreateInfo`]
/// - [`DescriptorPoolInlineUniformBlockCreateInfo`]
/// - [`DescriptorSetAllocateInfo`]
/// - [`DescriptorSetLayoutBindingFlagsCreateInfo`]
/// - [`DescriptorSetLayoutCreateInfo`]
/// - [`DescriptorSetLayoutSupport`]
/// - [`DescriptorSetVariableDescriptorCountAllocateInfo`]
/// - [`DescriptorSetVariableDescriptorCountLayoutSupport`]
/// - [`DescriptorUpdateTemplateCreateInfo`]
/// - [`DeviceBufferMemoryRequirements`]
/// - [`DeviceCreateInfo`]
/// - [`DeviceDeviceMemoryReportCreateInfoEXT`]
/// - [`DeviceDiagnosticsConfigCreateInfoNV`]
/// - [`DeviceEventInfoEXT`]
/// - [`DeviceGroupBindSparseInfo`]
/// - [`DeviceGroupCommandBufferBeginInfo`]
/// - [`DeviceGroupDeviceCreateInfo`]
/// - [`DeviceGroupPresentCapabilitiesKHR`]
/// - [`DeviceGroupPresentInfoKHR`]
/// - [`DeviceGroupRenderPassBeginInfo`]
/// - [`DeviceGroupSubmitInfo`]
/// - [`DeviceGroupSwapchainCreateInfoKHR`]
/// - [`DeviceImageMemoryRequirements`]
/// - [`DeviceMemoryOpaqueCaptureAddressInfo`]
/// - [`DeviceMemoryOverallocationCreateInfoAMD`]
/// - [`DeviceMemoryReportCallbackDataEXT`]
/// - [`DevicePrivateDataCreateInfo`]
/// - [`DeviceQueueCreateInfo`]
/// - [`DeviceQueueGlobalPriorityCreateInfoKHR`]
/// - [`DeviceQueueInfo2`]
/// - [`DirectFBSurfaceCreateInfoEXT`]
/// - [`DisplayEventInfoEXT`]
/// - [`DisplayModeCreateInfoKHR`]
/// - [`DisplayModeProperties2KHR`]
/// - [`DisplayNativeHdrSurfaceCapabilitiesAMD`]
/// - [`DisplayPlaneCapabilities2KHR`]
/// - [`DisplayPlaneInfo2KHR`]
/// - [`DisplayPlaneProperties2KHR`]
/// - [`DisplayPowerInfoEXT`]
/// - [`DisplayPresentInfoKHR`]
/// - [`DisplayProperties2KHR`]
/// - [`DisplaySurfaceCreateInfoKHR`]
/// - [`DrmFormatModifierPropertiesList2EXT`]
/// - [`DrmFormatModifierPropertiesListEXT`]
/// - [`EventCreateInfo`]
/// - [`ExportFenceCreateInfo`]
/// - [`ExportFenceWin32HandleInfoKHR`]
/// - [`ExportMemoryAllocateInfo`]
/// - [`ExportMemoryAllocateInfoNV`]
/// - [`ExportMemoryWin32HandleInfoKHR`]
/// - [`ExportMemoryWin32HandleInfoNV`]
/// - [`ExportSemaphoreCreateInfo`]
/// - [`ExportSemaphoreWin32HandleInfoKHR`]
/// - [`ExternalBufferProperties`]
/// - [`ExternalFenceProperties`]
/// - [`ExternalFormatANDROID`]
/// - [`ExternalImageFormatProperties`]
/// - [`ExternalMemoryBufferCreateInfo`]
/// - [`ExternalMemoryImageCreateInfo`]
/// - [`ExternalMemoryImageCreateInfoNV`]
/// - [`ExternalSemaphoreProperties`]
/// - [`FenceCreateInfo`]
/// - [`FenceGetFdInfoKHR`]
/// - [`FenceGetWin32HandleInfoKHR`]
/// - [`FilterCubicImageViewImageFormatPropertiesEXT`]
/// - [`FormatProperties2`]
/// - [`FormatProperties3`]
/// - [`FragmentShadingRateAttachmentInfoKHR`]
/// - [`FramebufferAttachmentImageInfo`]
/// - [`FramebufferAttachmentsCreateInfo`]
/// - [`FramebufferCreateInfo`]
/// - [`FramebufferMixedSamplesCombinationNV`]
/// - [`GeneratedCommandsInfoNV`]
/// - [`GeneratedCommandsMemoryRequirementsInfoNV`]
/// - [`GeometryAabbNV`]
/// - [`GeometryNV`]
/// - [`GeometryTrianglesNV`]
/// - [`GraphicsPipelineCreateInfo`]
/// - [`GraphicsPipelineShaderGroupsCreateInfoNV`]
/// - [`GraphicsShaderGroupCreateInfoNV`]
/// - [`HdrMetadataEXT`]
/// - [`HeadlessSurfaceCreateInfoEXT`]
/// - [`IosSurfaceCreateInfoMVK`]
/// - [`ImageBlit2`]
/// - [`ImageConstraintsInfoFUCHSIA`]
/// - [`ImageCopy2`]
/// - [`ImageCreateInfo`]
/// - [`ImageDrmFormatModifierExplicitCreateInfoEXT`]
/// - [`ImageDrmFormatModifierListCreateInfoEXT`]
/// - [`ImageDrmFormatModifierPropertiesEXT`]
/// - [`ImageFormatConstraintsInfoFUCHSIA`]
/// - [`ImageFormatListCreateInfo`]
/// - [`ImageFormatProperties2`]
/// - [`ImageMemoryBarrier`]
/// - [`ImageMemoryBarrier2`]
/// - [`ImageMemoryRequirementsInfo2`]
/// - [`ImagePipeSurfaceCreateInfoFUCHSIA`]
/// - [`ImagePlaneMemoryRequirementsInfo`]
/// - [`ImageResolve2`]
/// - [`ImageSparseMemoryRequirementsInfo2`]
/// - [`ImageStencilUsageCreateInfo`]
/// - [`ImageSwapchainCreateInfoKHR`]
/// - [`ImageViewAstcDecodeModeEXT`]
/// - [`ImageViewAddressPropertiesNVX`]
/// - [`ImageViewCreateInfo`]
/// - [`ImageViewHandleInfoNVX`]
/// - [`ImageViewMinLodCreateInfoEXT`]
/// - [`ImageViewUsageCreateInfo`]
/// - [`ImportAndroidHardwareBufferInfoANDROID`]
/// - [`ImportFenceFdInfoKHR`]
/// - [`ImportFenceWin32HandleInfoKHR`]
/// - [`ImportMemoryBufferCollectionFUCHSIA`]
/// - [`ImportMemoryFdInfoKHR`]
/// - [`ImportMemoryHostPointerInfoEXT`]
/// - [`ImportMemoryWin32HandleInfoKHR`]
/// - [`ImportMemoryWin32HandleInfoNV`]
/// - [`ImportMemoryZirconHandleInfoFUCHSIA`]
/// - [`ImportSemaphoreFdInfoKHR`]
/// - [`ImportSemaphoreWin32HandleInfoKHR`]
/// - [`ImportSemaphoreZirconHandleInfoFUCHSIA`]
/// - [`IndirectCommandsLayoutCreateInfoNV`]
/// - [`IndirectCommandsLayoutTokenNV`]
/// - [`InitializePerformanceApiInfoINTEL`]
/// - [`InstanceCreateInfo`]
/// - [`MacOsSurfaceCreateInfoMVK`]
/// - [`MappedMemoryRange`]
/// - [`MemoryAllocateFlagsInfo`]
/// - [`MemoryAllocateInfo`]
/// - [`MemoryBarrier`]
/// - [`MemoryBarrier2`]
/// - [`MemoryDedicatedAllocateInfo`]
/// - [`MemoryDedicatedRequirements`]
/// - [`MemoryFdPropertiesKHR`]
/// - [`MemoryGetAndroidHardwareBufferInfoANDROID`]
/// - [`MemoryGetFdInfoKHR`]
/// - [`MemoryGetRemoteAddressInfoNV`]
/// - [`MemoryGetWin32HandleInfoKHR`]
/// - [`MemoryGetZirconHandleInfoFUCHSIA`]
/// - [`MemoryHostPointerPropertiesEXT`]
/// - [`MemoryOpaqueCaptureAddressAllocateInfo`]
/// - [`MemoryPriorityAllocateInfoEXT`]
/// - [`MemoryRequirements2`]
/// - [`MemoryWin32HandlePropertiesKHR`]
/// - [`MemoryZirconHandlePropertiesFUCHSIA`]
/// - [`MetalSurfaceCreateInfoEXT`]
/// - [`MultisamplePropertiesEXT`]
/// - [`MultiviewPerViewAttributesInfoNVX`]
/// - [`MutableDescriptorTypeCreateInfoVALVE`]
/// - [`PerformanceConfigurationAcquireInfoINTEL`]
/// - [`PerformanceCounterDescriptionKHR`]
/// - [`PerformanceCounterKHR`]
/// - [`PerformanceMarkerInfoINTEL`]
/// - [`PerformanceOverrideInfoINTEL`]
/// - [`PerformanceQuerySubmitInfoKHR`]
/// - [`PerformanceStreamMarkerInfoINTEL`]
/// - [`PhysicalDevice16BitStorageFeatures`]
/// - [`PhysicalDevice4444FormatsFeaturesEXT`]
/// - [`PhysicalDevice8BitStorageFeatures`]
/// - [`PhysicalDeviceAstcDecodeFeaturesEXT`]
/// - [`PhysicalDeviceAccelerationStructureFeaturesKHR`]
/// - [`PhysicalDeviceAccelerationStructurePropertiesKHR`]
/// - [`PhysicalDeviceBlendOperationAdvancedFeaturesEXT`]
/// - [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT`]
/// - [`PhysicalDeviceBorderColorSwizzleFeaturesEXT`]
/// - [`PhysicalDeviceBufferDeviceAddressFeatures`]
/// - [`PhysicalDeviceBufferDeviceAddressFeaturesEXT`]
/// - [`PhysicalDeviceCoherentMemoryFeaturesAMD`]
/// - [`PhysicalDeviceColorWriteEnableFeaturesEXT`]
/// - [`PhysicalDeviceComputeShaderDerivativesFeaturesNV`]
/// - [`PhysicalDeviceConditionalRenderingFeaturesEXT`]
/// - [`PhysicalDeviceConservativeRasterizationPropertiesEXT`]
/// - [`PhysicalDeviceCooperativeMatrixFeaturesNV`]
/// - [`PhysicalDeviceCooperativeMatrixPropertiesNV`]
/// - [`PhysicalDeviceCornerSampledImageFeaturesNV`]
/// - [`PhysicalDeviceCoverageReductionModeFeaturesNV`]
/// - [`PhysicalDeviceCustomBorderColorFeaturesEXT`]
/// - [`PhysicalDeviceCustomBorderColorPropertiesEXT`]
/// - [`PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV`]
/// - [`PhysicalDeviceDepthClipControlFeaturesEXT`]
/// - [`PhysicalDeviceDepthClipEnableFeaturesEXT`]
/// - [`PhysicalDeviceDepthStencilResolveProperties`]
/// - [`PhysicalDeviceDescriptorIndexingFeatures`]
/// - [`PhysicalDeviceDescriptorIndexingProperties`]
/// - [`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV`]
/// - [`PhysicalDeviceDeviceGeneratedCommandsPropertiesNV`]
/// - [`PhysicalDeviceDeviceMemoryReportFeaturesEXT`]
/// - [`PhysicalDeviceDiagnosticsConfigFeaturesNV`]
/// - [`PhysicalDeviceDiscardRectanglePropertiesEXT`]
/// - [`PhysicalDeviceDriverProperties`]
/// - [`PhysicalDeviceDrmPropertiesEXT`]
/// - [`PhysicalDeviceDynamicRenderingFeatures`]
/// - [`PhysicalDeviceExclusiveScissorFeaturesNV`]
/// - [`PhysicalDeviceExtendedDynamicState2FeaturesEXT`]
/// - [`PhysicalDeviceExtendedDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceExternalBufferInfo`]
/// - [`PhysicalDeviceExternalFenceInfo`]
/// - [`PhysicalDeviceExternalImageFormatInfo`]
/// - [`PhysicalDeviceExternalMemoryHostPropertiesEXT`]
/// - [`PhysicalDeviceExternalMemoryRdmaFeaturesNV`]
/// - [`PhysicalDeviceExternalSemaphoreInfo`]
/// - [`PhysicalDeviceFeatures2`]
/// - [`PhysicalDeviceFloatControlsProperties`]
/// - [`PhysicalDeviceFragmentDensityMap2FeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMap2PropertiesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapFeaturesEXT`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM`]
/// - [`PhysicalDeviceFragmentDensityMapPropertiesEXT`]
/// - [`PhysicalDeviceFragmentShaderBarycentricFeaturesNV`]
/// - [`PhysicalDeviceFragmentShaderInterlockFeaturesEXT`]
/// - [`PhysicalDeviceFragmentShadingRateEnumsFeaturesNV`]
/// - [`PhysicalDeviceFragmentShadingRateEnumsPropertiesNV`]
/// - [`PhysicalDeviceFragmentShadingRateFeaturesKHR`]
/// - [`PhysicalDeviceFragmentShadingRateKHR`]
/// - [`PhysicalDeviceFragmentShadingRatePropertiesKHR`]
/// - [`PhysicalDeviceGlobalPriorityQueryFeaturesKHR`]
/// - [`PhysicalDeviceGroupProperties`]
/// - [`PhysicalDeviceHostQueryResetFeatures`]
/// - [`PhysicalDeviceIdProperties`]
/// - [`PhysicalDeviceImageDrmFormatModifierInfoEXT`]
/// - [`PhysicalDeviceImageFormatInfo2`]
/// - [`PhysicalDeviceImageRobustnessFeatures`]
/// - [`PhysicalDeviceImageViewImageFormatInfoEXT`]
/// - [`PhysicalDeviceImageViewMinLodFeaturesEXT`]
/// - [`PhysicalDeviceImagelessFramebufferFeatures`]
/// - [`PhysicalDeviceIndexTypeUint8FeaturesEXT`]
/// - [`PhysicalDeviceInheritedViewportScissorFeaturesNV`]
/// - [`PhysicalDeviceInlineUniformBlockFeatures`]
/// - [`PhysicalDeviceInlineUniformBlockProperties`]
/// - [`PhysicalDeviceInvocationMaskFeaturesHUAWEI`]
/// - [`PhysicalDeviceLineRasterizationFeaturesEXT`]
/// - [`PhysicalDeviceLineRasterizationPropertiesEXT`]
/// - [`PhysicalDeviceLinearColorAttachmentFeaturesNV`]
/// - [`PhysicalDeviceMaintenance3Properties`]
/// - [`PhysicalDeviceMaintenance4Features`]
/// - [`PhysicalDeviceMaintenance4Properties`]
/// - [`PhysicalDeviceMemoryBudgetPropertiesEXT`]
/// - [`PhysicalDeviceMemoryPriorityFeaturesEXT`]
/// - [`PhysicalDeviceMemoryProperties2`]
/// - [`PhysicalDeviceMeshShaderFeaturesNV`]
/// - [`PhysicalDeviceMeshShaderPropertiesNV`]
/// - [`PhysicalDeviceMultiDrawFeaturesEXT`]
/// - [`PhysicalDeviceMultiDrawPropertiesEXT`]
/// - [`PhysicalDeviceMultiviewFeatures`]
/// - [`PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX`]
/// - [`PhysicalDeviceMultiviewProperties`]
/// - [`PhysicalDeviceMutableDescriptorTypeFeaturesVALVE`]
/// - [`PhysicalDevicePciBusInfoPropertiesEXT`]
/// - [`PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT`]
/// - [`PhysicalDevicePerformanceQueryFeaturesKHR`]
/// - [`PhysicalDevicePerformanceQueryPropertiesKHR`]
/// - [`PhysicalDevicePipelineCreationCacheControlFeatures`]
/// - [`PhysicalDevicePipelineExecutablePropertiesFeaturesKHR`]
/// - [`PhysicalDevicePointClippingProperties`]
/// - [`PhysicalDevicePortabilitySubsetFeaturesKHR`]
/// - [`PhysicalDevicePortabilitySubsetPropertiesKHR`]
/// - [`PhysicalDevicePresentIdFeaturesKHR`]
/// - [`PhysicalDevicePresentWaitFeaturesKHR`]
/// - [`PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT`]
/// - [`PhysicalDevicePrivateDataFeatures`]
/// - [`PhysicalDeviceProperties2`]
/// - [`PhysicalDeviceProtectedMemoryFeatures`]
/// - [`PhysicalDeviceProtectedMemoryProperties`]
/// - [`PhysicalDeviceProvokingVertexFeaturesEXT`]
/// - [`PhysicalDeviceProvokingVertexPropertiesEXT`]
/// - [`PhysicalDevicePushDescriptorPropertiesKHR`]
/// - [`PhysicalDeviceRgba10X6FormatsFeaturesEXT`]
/// - [`PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM`]
/// - [`PhysicalDeviceRayQueryFeaturesKHR`]
/// - [`PhysicalDeviceRayTracingMotionBlurFeaturesNV`]
/// - [`PhysicalDeviceRayTracingPipelineFeaturesKHR`]
/// - [`PhysicalDeviceRayTracingPipelinePropertiesKHR`]
/// - [`PhysicalDeviceRayTracingPropertiesNV`]
/// - [`PhysicalDeviceRepresentativeFragmentTestFeaturesNV`]
/// - [`PhysicalDeviceRobustness2FeaturesEXT`]
/// - [`PhysicalDeviceRobustness2PropertiesEXT`]
/// - [`PhysicalDeviceSampleLocationsPropertiesEXT`]
/// - [`PhysicalDeviceSamplerFilterMinmaxProperties`]
/// - [`PhysicalDeviceSamplerYcbcrConversionFeatures`]
/// - [`PhysicalDeviceScalarBlockLayoutFeatures`]
/// - [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`]
/// - [`PhysicalDeviceShaderAtomicFloat2FeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicFloatFeaturesEXT`]
/// - [`PhysicalDeviceShaderAtomicInt64Features`]
/// - [`PhysicalDeviceShaderClockFeaturesKHR`]
/// - [`PhysicalDeviceShaderCoreProperties2AMD`]
/// - [`PhysicalDeviceShaderCorePropertiesAMD`]
/// - [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`]
/// - [`PhysicalDeviceShaderDrawParametersFeatures`]
/// - [`PhysicalDeviceShaderFloat16Int8Features`]
/// - [`PhysicalDeviceShaderImageAtomicInt64FeaturesEXT`]
/// - [`PhysicalDeviceShaderImageFootprintFeaturesNV`]
/// - [`PhysicalDeviceShaderIntegerDotProductFeatures`]
/// - [`PhysicalDeviceShaderIntegerDotProductProperties`]
/// - [`PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL`]
/// - [`PhysicalDeviceShaderSmBuiltinsFeaturesNV`]
/// - [`PhysicalDeviceShaderSmBuiltinsPropertiesNV`]
/// - [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`]
/// - [`PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR`]
/// - [`PhysicalDeviceShaderTerminateInvocationFeatures`]
/// - [`PhysicalDeviceShadingRateImageFeaturesNV`]
/// - [`PhysicalDeviceShadingRateImagePropertiesNV`]
/// - [`PhysicalDeviceSparseImageFormatInfo2`]
/// - [`PhysicalDeviceSubgroupProperties`]
/// - [`PhysicalDeviceSubgroupSizeControlFeatures`]
/// - [`PhysicalDeviceSubgroupSizeControlProperties`]
/// - [`PhysicalDeviceSubpassShadingFeaturesHUAWEI`]
/// - [`PhysicalDeviceSubpassShadingPropertiesHUAWEI`]
/// - [`PhysicalDeviceSurfaceInfo2KHR`]
/// - [`PhysicalDeviceSynchronization2Features`]
/// - [`PhysicalDeviceTexelBufferAlignmentFeaturesEXT`]
/// - [`PhysicalDeviceTexelBufferAlignmentProperties`]
/// - [`PhysicalDeviceTextureCompressionAstchdrFeatures`]
/// - [`PhysicalDeviceTimelineSemaphoreFeatures`]
/// - [`PhysicalDeviceTimelineSemaphoreProperties`]
/// - [`PhysicalDeviceToolProperties`]
/// - [`PhysicalDeviceTransformFeedbackFeaturesEXT`]
/// - [`PhysicalDeviceTransformFeedbackPropertiesEXT`]
/// - [`PhysicalDeviceUniformBufferStandardLayoutFeatures`]
/// - [`PhysicalDeviceVariablePointersFeatures`]
/// - [`PhysicalDeviceVertexAttributeDivisorFeaturesEXT`]
/// - [`PhysicalDeviceVertexAttributeDivisorPropertiesEXT`]
/// - [`PhysicalDeviceVertexInputDynamicStateFeaturesEXT`]
/// - [`PhysicalDeviceVideoFormatInfoKHR`]
/// - [`PhysicalDeviceVulkan11Features`]
/// - [`PhysicalDeviceVulkan11Properties`]
/// - [`PhysicalDeviceVulkan12Features`]
/// - [`PhysicalDeviceVulkan12Properties`]
/// - [`PhysicalDeviceVulkan13Features`]
/// - [`PhysicalDeviceVulkan13Properties`]
/// - [`PhysicalDeviceVulkanMemoryModelFeatures`]
/// - [`PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR`]
/// - [`PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT`]
/// - [`PhysicalDeviceYcbcrImageArraysFeaturesEXT`]
/// - [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`]
/// - [`PipelineCacheCreateInfo`]
/// - [`PipelineColorBlendAdvancedStateCreateInfoEXT`]
/// - [`PipelineColorBlendStateCreateInfo`]
/// - [`PipelineColorWriteCreateInfoEXT`]
/// - [`PipelineCompilerControlCreateInfoAMD`]
/// - [`PipelineCoverageModulationStateCreateInfoNV`]
/// - [`PipelineCoverageReductionStateCreateInfoNV`]
/// - [`PipelineCoverageToColorStateCreateInfoNV`]
/// - [`PipelineCreationFeedbackCreateInfo`]
/// - [`PipelineDepthStencilStateCreateInfo`]
/// - [`PipelineDiscardRectangleStateCreateInfoEXT`]
/// - [`PipelineDynamicStateCreateInfo`]
/// - [`PipelineExecutableInfoKHR`]
/// - [`PipelineExecutableInternalRepresentationKHR`]
/// - [`PipelineExecutablePropertiesKHR`]
/// - [`PipelineExecutableStatisticKHR`]
/// - [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
/// - [`PipelineFragmentShadingRateStateCreateInfoKHR`]
/// - [`PipelineInfoKHR`]
/// - [`PipelineInputAssemblyStateCreateInfo`]
/// - [`PipelineLayoutCreateInfo`]
/// - [`PipelineLibraryCreateInfoKHR`]
/// - [`PipelineMultisampleStateCreateInfo`]
/// - [`PipelineRasterizationConservativeStateCreateInfoEXT`]
/// - [`PipelineRasterizationDepthClipStateCreateInfoEXT`]
/// - [`PipelineRasterizationLineStateCreateInfoEXT`]
/// - [`PipelineRasterizationProvokingVertexStateCreateInfoEXT`]
/// - [`PipelineRasterizationStateCreateInfo`]
/// - [`PipelineRasterizationStateRasterizationOrderAMD`]
/// - [`PipelineRasterizationStateStreamCreateInfoEXT`]
/// - [`PipelineRenderingCreateInfo`]
/// - [`PipelineRepresentativeFragmentTestStateCreateInfoNV`]
/// - [`PipelineSampleLocationsStateCreateInfoEXT`]
/// - [`PipelineShaderStageCreateInfo`]
/// - [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`]
/// - [`PipelineTessellationDomainOriginStateCreateInfo`]
/// - [`PipelineTessellationStateCreateInfo`]
/// - [`PipelineVertexInputDivisorStateCreateInfoEXT`]
/// - [`PipelineVertexInputStateCreateInfo`]
/// - [`PipelineViewportCoarseSampleOrderStateCreateInfoNV`]
/// - [`PipelineViewportDepthClipControlCreateInfoEXT`]
/// - [`PipelineViewportExclusiveScissorStateCreateInfoNV`]
/// - [`PipelineViewportShadingRateImageStateCreateInfoNV`]
/// - [`PipelineViewportStateCreateInfo`]
/// - [`PipelineViewportSwizzleStateCreateInfoNV`]
/// - [`PipelineViewportWScalingStateCreateInfoNV`]
/// - [`PresentFrameTokenGGP`]
/// - [`PresentIdKHR`]
/// - [`PresentInfoKHR`]
/// - [`PresentRegionsKHR`]
/// - [`PresentTimesInfoGOOGLE`]
/// - [`PrivateDataSlotCreateInfo`]
/// - [`ProtectedSubmitInfo`]
/// - [`QueryPoolCreateInfo`]
/// - [`QueryPoolPerformanceCreateInfoKHR`]
/// - [`QueryPoolPerformanceQueryCreateInfoINTEL`]
/// - [`QueueFamilyCheckpointProperties2NV`]
/// - [`QueueFamilyCheckpointPropertiesNV`]
/// - [`QueueFamilyGlobalPriorityPropertiesKHR`]
/// - [`QueueFamilyProperties2`]
/// - [`QueueFamilyQueryResultStatusProperties2KHR`]
/// - [`RayTracingPipelineCreateInfoKHR`]
/// - [`RayTracingPipelineCreateInfoNV`]
/// - [`RayTracingPipelineInterfaceCreateInfoKHR`]
/// - [`RayTracingShaderGroupCreateInfoKHR`]
/// - [`RayTracingShaderGroupCreateInfoNV`]
/// - [`RenderPassAttachmentBeginInfo`]
/// - [`RenderPassBeginInfo`]
/// - [`RenderPassCreateInfo`]
/// - [`RenderPassCreateInfo2`]
/// - [`RenderPassFragmentDensityMapCreateInfoEXT`]
/// - [`RenderPassInputAttachmentAspectCreateInfo`]
/// - [`RenderPassMultiviewCreateInfo`]
/// - [`RenderPassSampleLocationsBeginInfoEXT`]
/// - [`RenderPassTransformBeginInfoQCOM`]
/// - [`RenderingAttachmentInfo`]
/// - [`RenderingFragmentDensityMapAttachmentInfoEXT`]
/// - [`RenderingFragmentShadingRateAttachmentInfoKHR`]
/// - [`RenderingInfo`]
/// - [`ResolveImageInfo2`]
/// - [`SampleLocationsInfoEXT`]
/// - [`SamplerBorderColorComponentMappingCreateInfoEXT`]
/// - [`SamplerCreateInfo`]
/// - [`SamplerCustomBorderColorCreateInfoEXT`]
/// - [`SamplerReductionModeCreateInfo`]
/// - [`SamplerYcbcrConversionCreateInfo`]
/// - [`SamplerYcbcrConversionImageFormatProperties`]
/// - [`SamplerYcbcrConversionInfo`]
/// - [`ScreenSurfaceCreateInfoQNX`]
/// - [`SemaphoreCreateInfo`]
/// - [`SemaphoreGetFdInfoKHR`]
/// - [`SemaphoreGetWin32HandleInfoKHR`]
/// - [`SemaphoreGetZirconHandleInfoFUCHSIA`]
/// - [`SemaphoreSignalInfo`]
/// - [`SemaphoreSubmitInfo`]
/// - [`SemaphoreTypeCreateInfo`]
/// - [`SemaphoreWaitInfo`]
/// - [`ShaderModuleCreateInfo`]
/// - [`ShaderModuleValidationCacheCreateInfoEXT`]
/// - [`SharedPresentSurfaceCapabilitiesKHR`]
/// - [`SparseImageFormatProperties2`]
/// - [`SparseImageMemoryRequirements2`]
/// - [`StreamDescriptorSurfaceCreateInfoGGP`]
/// - [`SubmitInfo`]
/// - [`SubmitInfo2`]
/// - [`SubpassBeginInfo`]
/// - [`SubpassDependency2`]
/// - [`SubpassDescription2`]
/// - [`SubpassDescriptionDepthStencilResolve`]
/// - [`SubpassEndInfo`]
/// - [`SubpassFragmentDensityMapOffsetEndInfoQCOM`]
/// - [`SubpassShadingPipelineCreateInfoHUAWEI`]
/// - [`SurfaceCapabilities2EXT`]
/// - [`SurfaceCapabilities2KHR`]
/// - [`SurfaceCapabilitiesFullScreenExclusiveEXT`]
/// - [`SurfaceFormat2KHR`]
/// - [`SurfaceFullScreenExclusiveInfoEXT`]
/// - [`SurfaceFullScreenExclusiveWin32InfoEXT`]
/// - [`SurfaceProtectedCapabilitiesKHR`]
/// - [`SwapchainCounterCreateInfoEXT`]
/// - [`SwapchainCreateInfoKHR`]
/// - [`SwapchainDisplayNativeHdrCreateInfoAMD`]
/// - [`SysmemColorSpaceFUCHSIA`]
/// - [`TextureLodGatherFormatPropertiesAMD`]
/// - [`TimelineSemaphoreSubmitInfo`]
/// - [`ValidationCacheCreateInfoEXT`]
/// - [`ValidationFeaturesEXT`]
/// - [`ValidationFlagsEXT`]
/// - [`VertexInputAttributeDescription2EXT`]
/// - [`VertexInputBindingDescription2EXT`]
/// - [`ViSurfaceCreateInfoNN`]
/// - [`VideoBeginCodingInfoKHR`]
/// - [`VideoBindMemoryKHR`]
/// - [`VideoCapabilitiesKHR`]
/// - [`VideoCodingControlInfoKHR`]
/// - [`VideoDecodeH264CapabilitiesEXT`]
/// - [`VideoDecodeH264DpbSlotInfoEXT`]
/// - [`VideoDecodeH264MvcEXT`]
/// - [`VideoDecodeH264PictureInfoEXT`]
/// - [`VideoDecodeH264ProfileEXT`]
/// - [`VideoDecodeH264SessionCreateInfoEXT`]
/// - [`VideoDecodeH264SessionParametersAddInfoEXT`]
/// - [`VideoDecodeH264SessionParametersCreateInfoEXT`]
/// - [`VideoDecodeH265CapabilitiesEXT`]
/// - [`VideoDecodeH265DpbSlotInfoEXT`]
/// - [`VideoDecodeH265PictureInfoEXT`]
/// - [`VideoDecodeH265ProfileEXT`]
/// - [`VideoDecodeH265SessionCreateInfoEXT`]
/// - [`VideoDecodeH265SessionParametersAddInfoEXT`]
/// - [`VideoDecodeH265SessionParametersCreateInfoEXT`]
/// - [`VideoDecodeInfoKHR`]
/// - [`VideoEncodeH264CapabilitiesEXT`]
/// - [`VideoEncodeH264DpbSlotInfoEXT`]
/// - [`VideoEncodeH264EmitPictureParametersEXT`]
/// - [`VideoEncodeH264NaluSliceEXT`]
/// - [`VideoEncodeH264ProfileEXT`]
/// - [`VideoEncodeH264RateControlInfoEXT`]
/// - [`VideoEncodeH264RateControlLayerInfoEXT`]
/// - [`VideoEncodeH264SessionCreateInfoEXT`]
/// - [`VideoEncodeH264SessionParametersAddInfoEXT`]
/// - [`VideoEncodeH264SessionParametersCreateInfoEXT`]
/// - [`VideoEncodeH264VclFrameInfoEXT`]
/// - [`VideoEncodeH265CapabilitiesEXT`]
/// - [`VideoEncodeH265DpbSlotInfoEXT`]
/// - [`VideoEncodeH265EmitPictureParametersEXT`]
/// - [`VideoEncodeH265NaluSliceEXT`]
/// - [`VideoEncodeH265ProfileEXT`]
/// - [`VideoEncodeH265RateControlInfoEXT`]
/// - [`VideoEncodeH265RateControlLayerInfoEXT`]
/// - [`VideoEncodeH265ReferenceListsEXT`]
/// - [`VideoEncodeH265SessionCreateInfoEXT`]
/// - [`VideoEncodeH265SessionParametersAddInfoEXT`]
/// - [`VideoEncodeH265SessionParametersCreateInfoEXT`]
/// - [`VideoEncodeH265VclFrameInfoEXT`]
/// - [`VideoEncodeInfoKHR`]
/// - [`VideoEncodeRateControlInfoKHR`]
/// - [`VideoEncodeRateControlLayerInfoKHR`]
/// - [`VideoEndCodingInfoKHR`]
/// - [`VideoFormatPropertiesKHR`]
/// - [`VideoGetMemoryPropertiesKHR`]
/// - [`VideoPictureResourceKHR`]
/// - [`VideoProfileKHR`]
/// - [`VideoProfilesKHR`]
/// - [`VideoQueueFamilyProperties2KHR`]
/// - [`VideoReferenceSlotKHR`]
/// - [`VideoSessionCreateInfoKHR`]
/// - [`VideoSessionParametersCreateInfoKHR`]
/// - [`VideoSessionParametersUpdateInfoKHR`]
/// - [`WaylandSurfaceCreateInfoKHR`]
/// - [`Win32KeyedMutexAcquireReleaseInfoKHR`]
/// - [`Win32KeyedMutexAcquireReleaseInfoNV`]
/// - [`Win32SurfaceCreateInfoKHR`]
/// - [`WriteDescriptorSet`]
/// - [`WriteDescriptorSetAccelerationStructureKHR`]
/// - [`WriteDescriptorSetAccelerationStructureNV`]
/// - [`WriteDescriptorSetInlineUniformBlock`]
/// - [`XcbSurfaceCreateInfoKHR`]
/// - [`XlibSurfaceCreateInfoKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkStructureType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct StructureType(i32);
impl const Default for StructureType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for StructureType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("StructureType")
            .field(match *self {
                Self::STRUCTURE_TYPE_APPLICATION_INFO => &"STRUCTURE_TYPE_APPLICATION_INFO",
                Self::STRUCTURE_TYPE_INSTANCE_CREATE_INFO => &"STRUCTURE_TYPE_INSTANCE_CREATE_INFO",
                Self::STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO => &"STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO",
                Self::STRUCTURE_TYPE_DEVICE_CREATE_INFO => &"STRUCTURE_TYPE_DEVICE_CREATE_INFO",
                Self::STRUCTURE_TYPE_SUBMIT_INFO => &"STRUCTURE_TYPE_SUBMIT_INFO",
                Self::STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO => &"STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO",
                Self::STRUCTURE_TYPE_MAPPED_MEMORY_RANGE => &"STRUCTURE_TYPE_MAPPED_MEMORY_RANGE",
                Self::STRUCTURE_TYPE_BIND_SPARSE_INFO => &"STRUCTURE_TYPE_BIND_SPARSE_INFO",
                Self::STRUCTURE_TYPE_FENCE_CREATE_INFO => &"STRUCTURE_TYPE_FENCE_CREATE_INFO",
                Self::STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO => &"STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO",
                Self::STRUCTURE_TYPE_EVENT_CREATE_INFO => &"STRUCTURE_TYPE_EVENT_CREATE_INFO",
                Self::STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO => &"STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO",
                Self::STRUCTURE_TYPE_BUFFER_CREATE_INFO => &"STRUCTURE_TYPE_BUFFER_CREATE_INFO",
                Self::STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO => &"STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO",
                Self::STRUCTURE_TYPE_IMAGE_CREATE_INFO => &"STRUCTURE_TYPE_IMAGE_CREATE_INFO",
                Self::STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO => &"STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO",
                Self::STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO => &"STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO",
                Self::STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO => &"STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO",
                Self::STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO => &"STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO",
                Self::STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO => &"STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO",
                Self::STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO => &"STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO",
                Self::STRUCTURE_TYPE_SAMPLER_CREATE_INFO => &"STRUCTURE_TYPE_SAMPLER_CREATE_INFO",
                Self::STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO => {
                    &"STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO => &"STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO",
                Self::STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO => &"STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO",
                Self::STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET => &"STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET",
                Self::STRUCTURE_TYPE_COPY_DESCRIPTOR_SET => &"STRUCTURE_TYPE_COPY_DESCRIPTOR_SET",
                Self::STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO => &"STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO",
                Self::STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO => &"STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO",
                Self::STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO => &"STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO",
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO => &"STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO",
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO => {
                    &"STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"
                },
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO => &"STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO",
                Self::STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO => &"STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO",
                Self::STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER => &"STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER",
                Self::STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER => &"STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER",
                Self::STRUCTURE_TYPE_MEMORY_BARRIER => &"STRUCTURE_TYPE_MEMORY_BARRIER",
                Self::STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO => &"STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO",
                Self::STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO => &"STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO => &"STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO",
                Self::STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO => &"STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"
                },
                Self::STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS => &"STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS",
                Self::STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO => &"STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO",
                Self::STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO => &"STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO",
                Self::STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO => {
                    &"STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"
                },
                Self::STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO => {
                    &"STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"
                },
                Self::STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO => &"STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO",
                Self::STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO => &"STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO",
                Self::STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO => {
                    &"STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"
                },
                Self::STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO => {
                    &"STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 => {
                    &"STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"
                },
                Self::STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 => {
                    &"STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"
                },
                Self::STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 => {
                    &"STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"
                },
                Self::STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 => &"STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2",
                Self::STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 => {
                    &"STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 => &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 => &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2",
                Self::STRUCTURE_TYPE_FORMAT_PROPERTIES_2 => &"STRUCTURE_TYPE_FORMAT_PROPERTIES_2",
                Self::STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 => &"STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"
                },
                Self::STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 => &"STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"
                },
                Self::STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 => {
                    &"STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO => {
                    &"STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO => &"STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO",
                Self::STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO => {
                    &"STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"
                },
                Self::STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO => &"STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 => &"STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2",
                Self::STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO => {
                    &"STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO => &"STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO",
                Self::STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO => &"STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO",
                Self::STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO => {
                    &"STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"
                },
                Self::STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES => {
                    &"STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES => {
                    &"STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES => &"STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES => &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
                Self::STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO => {
                    &"STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO => &"STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES => &"STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES",
                Self::STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO => &"STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO",
                Self::STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO => &"STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES => &"STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT => &"STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO => &"STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO",
                Self::STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 => &"STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2",
                Self::STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 => &"STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2",
                Self::STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 => &"STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2",
                Self::STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 => &"STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2",
                Self::STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 => &"STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2",
                Self::STRUCTURE_TYPE_SUBPASS_BEGIN_INFO => &"STRUCTURE_TYPE_SUBPASS_BEGIN_INFO",
                Self::STRUCTURE_TYPE_SUBPASS_END_INFO => &"STRUCTURE_TYPE_SUBPASS_END_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO => {
                    &"STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO => {
                    &"STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT => {
                    &"STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE => {
                    &"STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"
                },
                Self::STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"
                },
                Self::STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO => {
                    &"STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO => {
                    &"STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"
                },
                Self::STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO => {
                    &"STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"
                },
                Self::STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT => {
                    &"STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"
                },
                Self::STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT => {
                    &"STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO => &"STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO",
                Self::STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO => &"STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO",
                Self::STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO => &"STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO",
                Self::STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO => &"STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"
                },
                Self::STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO => &"STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO",
                Self::STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO => {
                    &"STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO => {
                    &"STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"
                },
                Self::STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO => {
                    &"STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"
                },
                Self::STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO => {
                    &"STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO => &"STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"
                },
                Self::STRUCTURE_TYPE_MEMORY_BARRIER_2 => &"STRUCTURE_TYPE_MEMORY_BARRIER_2",
                Self::STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 => &"STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2",
                Self::STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 => &"STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2",
                Self::STRUCTURE_TYPE_DEPENDENCY_INFO => &"STRUCTURE_TYPE_DEPENDENCY_INFO",
                Self::STRUCTURE_TYPE_SUBMIT_INFO_2 => &"STRUCTURE_TYPE_SUBMIT_INFO_2",
                Self::STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO => &"STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO",
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO => &"STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"
                },
                Self::STRUCTURE_TYPE_COPY_BUFFER_INFO_2 => &"STRUCTURE_TYPE_COPY_BUFFER_INFO_2",
                Self::STRUCTURE_TYPE_COPY_IMAGE_INFO_2 => &"STRUCTURE_TYPE_COPY_IMAGE_INFO_2",
                Self::STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 => &"STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2",
                Self::STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 => &"STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2",
                Self::STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 => &"STRUCTURE_TYPE_BLIT_IMAGE_INFO_2",
                Self::STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 => &"STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2",
                Self::STRUCTURE_TYPE_BUFFER_COPY_2 => &"STRUCTURE_TYPE_BUFFER_COPY_2",
                Self::STRUCTURE_TYPE_IMAGE_COPY_2 => &"STRUCTURE_TYPE_IMAGE_COPY_2",
                Self::STRUCTURE_TYPE_IMAGE_BLIT_2 => &"STRUCTURE_TYPE_IMAGE_BLIT_2",
                Self::STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 => &"STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2",
                Self::STRUCTURE_TYPE_IMAGE_RESOLVE_2 => &"STRUCTURE_TYPE_IMAGE_RESOLVE_2",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO => {
                    &"STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK => {
                    &"STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"
                },
                Self::STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO => {
                    &"STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"
                },
                Self::STRUCTURE_TYPE_RENDERING_INFO => &"STRUCTURE_TYPE_RENDERING_INFO",
                Self::STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO => &"STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO",
                Self::STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO => &"STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"
                },
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO => {
                    &"STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_FORMAT_PROPERTIES_3 => &"STRUCTURE_TYPE_FORMAT_PROPERTIES_3",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"
                },
                Self::STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS => {
                    &"STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"
                },
                Self::STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS => {
                    &"STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"
                },
                Self::STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR => &"STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR",
                Self::STRUCTURE_TYPE_PRESENT_INFO_KHR => &"STRUCTURE_TYPE_PRESENT_INFO_KHR",
                Self::STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR => {
                    &"STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"
                },
                Self::STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR => {
                    &"STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR => &"STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR",
                Self::STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR => &"STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR",
                Self::STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR => &"STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR",
                Self::STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR => &"STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR",
                Self::STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR => &"STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR",
                Self::STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR => &"STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR",
                Self::STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR => &"STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR",
                Self::STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"
                },
                Self::STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT => &"STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT",
                Self::STRUCTURE_TYPE_VIDEO_PROFILE_KHR => &"STRUCTURE_TYPE_VIDEO_PROFILE_KHR",
                Self::STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR => &"STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR",
                Self::STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR => &"STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR",
                Self::STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR => &"STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR",
                Self::STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR => &"STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR",
                Self::STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR => &"STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR",
                Self::STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR => &"STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR",
                Self::STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR => &"STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR",
                Self::STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR => &"STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR",
                Self::STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR => {
                    &"STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_PROFILES_KHR => &"STRUCTURE_TYPE_VIDEO_PROFILES_KHR",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR => &"STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR",
                Self::STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR => {
                    &"STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR => &"STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR",
                Self::STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV => {
                    &"STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX => &"STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX",
                Self::STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX => &"STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX",
                Self::STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX => &"STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX",
                Self::STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX => &"STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX",
                Self::STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX => {
                    &"STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT => &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT",
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT => &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT",
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT => &"STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT",
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT => &"STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT",
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD => {
                    &"STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"
                },
                Self::STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR => {
                    &"STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT => {
                    &"STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD => {
                    &"STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"
                },
                Self::STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX => {
                    &"STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX"
                },
                Self::STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP => {
                    &"STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV => &"STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV",
                Self::STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV => {
                    &"STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV => {
                    &"STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV => {
                    &"STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_VALIDATION_FLAGS_EXT => &"STRUCTURE_TYPE_VALIDATION_FLAGS_EXT",
                Self::STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN => &"STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN",
                Self::STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT => {
                    &"STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR => &"STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR",
                Self::STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR => &"STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR",
                Self::STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR => &"STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR",
                Self::STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR => {
                    &"STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR => &"STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR",
                Self::STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR => &"STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR",
                Self::STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR => &"STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT => {
                    &"STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT => {
                    &"STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PRESENT_REGIONS_KHR => &"STRUCTURE_TYPE_PRESENT_REGIONS_KHR",
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT => &"STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT",
                Self::STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT => &"STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT",
                Self::STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT => &"STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT",
                Self::STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT => &"STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT",
                Self::STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE => &"STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_HDR_METADATA_EXT => &"STRUCTURE_TYPE_HDR_METADATA_EXT",
                Self::STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR => {
                    &"STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"
                },
                Self::STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR => {
                    &"STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR => &"STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR",
                Self::STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR => &"STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR => {
                    &"STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR => {
                    &"STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR => &"STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR",
                Self::STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR => {
                    &"STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"
                },
                Self::STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR => &"STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR",
                Self::STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR => &"STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR",
                Self::STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR => &"STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR",
                Self::STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR => &"STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR",
                Self::STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR => &"STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR",
                Self::STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR => &"STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR",
                Self::STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR => {
                    &"STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"
                },
                Self::STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK => &"STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK",
                Self::STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK => &"STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK",
                Self::STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT => &"STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT",
                Self::STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"
                },
                Self::STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID => {
                    &"STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"
                },
                Self::STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID => {
                    &"STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID"
                },
                Self::STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID => {
                    &"STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"
                },
                Self::STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID => {
                    &"STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
                },
                Self::STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID => {
                    &"STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
                },
                Self::STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID => &"STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID",
                Self::STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID => {
                    &"STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID"
                },
                Self::STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT => &"STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT",
                Self::STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT => {
                    &"STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT => &"STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR => {
                    &"STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR => {
                    &"STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR => {
                    &"STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR => {
                    &"STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT => {
                    &"STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT => {
                    &"STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT"
                },
                Self::STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_GEOMETRY_NV => &"STRUCTURE_TYPE_GEOMETRY_NV",
                Self::STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV => &"STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV",
                Self::STRUCTURE_TYPE_GEOMETRY_AABB_NV => &"STRUCTURE_TYPE_GEOMETRY_AABB_NV",
                Self::STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV => {
                    &"STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV"
                },
                Self::STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV => {
                    &"STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV => &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT => {
                    &"STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD => {
                    &"STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD"
                },
                Self::STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT => &"STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT => &"STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT",
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT => {
                    &"STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD => {
                    &"STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP => &"STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_CHECKPOINT_DATA_NV => &"STRUCTURE_TYPE_CHECKPOINT_DATA_NV",
                Self::STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL"
                },
                Self::STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL => {
                    &"STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL"
                },
                Self::STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL => {
                    &"STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL"
                },
                Self::STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL => &"STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL",
                Self::STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL => {
                    &"STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL"
                },
                Self::STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL => {
                    &"STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL"
                },
                Self::STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL => {
                    &"STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD => {
                    &"STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD"
                },
                Self::STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD => {
                    &"STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD"
                },
                Self::STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT => &"STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR => {
                    &"STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR => {
                    &"STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_VALIDATION_FEATURES_EXT => &"STRUCTURE_TYPE_VALIDATION_FEATURES_EXT",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV => {
                    &"STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT => {
                    &"STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT => {
                    &"STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT"
                },
                Self::STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT => {
                    &"STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_INFO_KHR => &"STRUCTURE_TYPE_PIPELINE_INFO_KHR",
                Self::STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR => {
                    &"STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR => &"STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR",
                Self::STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR => {
                    &"STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR"
                },
                Self::STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR => {
                    &"STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV => {
                    &"STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV"
                },
                Self::STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV => &"STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV",
                Self::STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV => {
                    &"STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV => {
                    &"STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM => {
                    &"STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM"
                },
                Self::STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM => {
                    &"STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT => {
                    &"STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR => {
                    &"STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PRESENT_ID_KHR => &"STRUCTURE_TYPE_PRESENT_ID_KHR",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR => &"STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR",
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR => {
                    &"STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV => {
                    &"STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV"
                },
                Self::STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV => &"STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV => {
                    &"STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV => {
                    &"STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM => {
                    &"STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE"
                },
                Self::STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE => {
                    &"STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT => {
                    &"STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT"
                },
                Self::STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT => {
                    &"STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA => {
                    &"STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA => {
                    &"STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA => {
                    &"STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA => &"STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA",
                Self::STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA => &"STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA",
                Self::STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA => {
                    &"STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA"
                },
                Self::STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI => {
                    &"STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI"
                },
                Self::STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV => {
                    &"STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX => &"STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX",
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT => {
                    &"STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM"
                },
                Self::STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM => {
                    &"STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM"
                },
                Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV => {
                    &"STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV"
                },
                other => unreachable!("invalid value for `StructureType`: {:?}", other),
            })
            .finish()
    }
}
impl StructureType {
    ///No documentation found
    pub const STRUCTURE_TYPE_APPLICATION_INFO: Self = Self(0);
    ///No documentation found
    pub const STRUCTURE_TYPE_INSTANCE_CREATE_INFO: Self = Self(1);
    ///No documentation found
    pub const STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: Self = Self(2);
    ///No documentation found
    pub const STRUCTURE_TYPE_DEVICE_CREATE_INFO: Self = Self(3);
    ///No documentation found
    pub const STRUCTURE_TYPE_SUBMIT_INFO: Self = Self(4);
    ///No documentation found
    pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: Self = Self(5);
    ///No documentation found
    pub const STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: Self = Self(6);
    ///No documentation found
    pub const STRUCTURE_TYPE_BIND_SPARSE_INFO: Self = Self(7);
    ///No documentation found
    pub const STRUCTURE_TYPE_FENCE_CREATE_INFO: Self = Self(8);
    ///No documentation found
    pub const STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: Self = Self(9);
    ///No documentation found
    pub const STRUCTURE_TYPE_EVENT_CREATE_INFO: Self = Self(10);
    ///No documentation found
    pub const STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: Self = Self(11);
    ///No documentation found
    pub const STRUCTURE_TYPE_BUFFER_CREATE_INFO: Self = Self(12);
    ///No documentation found
    pub const STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: Self = Self(13);
    ///No documentation found
    pub const STRUCTURE_TYPE_IMAGE_CREATE_INFO: Self = Self(14);
    ///No documentation found
    pub const STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: Self = Self(15);
    ///No documentation found
    pub const STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: Self = Self(16);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: Self = Self(17);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: Self = Self(18);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: Self = Self(19);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: Self = Self(20);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: Self = Self(21);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: Self = Self(22);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: Self = Self(23);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: Self = Self(24);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: Self = Self(25);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: Self = Self(26);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: Self = Self(27);
    ///No documentation found
    pub const STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: Self = Self(28);
    ///No documentation found
    pub const STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: Self = Self(29);
    ///No documentation found
    pub const STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: Self = Self(30);
    ///No documentation found
    pub const STRUCTURE_TYPE_SAMPLER_CREATE_INFO: Self = Self(31);
    ///No documentation found
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: Self = Self(32);
    ///No documentation found
    pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: Self = Self(33);
    ///No documentation found
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: Self = Self(34);
    ///No documentation found
    pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: Self = Self(35);
    ///No documentation found
    pub const STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: Self = Self(36);
    ///No documentation found
    pub const STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: Self = Self(37);
    ///No documentation found
    pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: Self = Self(38);
    ///No documentation found
    pub const STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: Self = Self(39);
    ///No documentation found
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: Self = Self(40);
    ///No documentation found
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: Self = Self(41);
    ///No documentation found
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: Self = Self(42);
    ///No documentation found
    pub const STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: Self = Self(43);
    ///No documentation found
    pub const STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: Self = Self(44);
    ///No documentation found
    pub const STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: Self = Self(45);
    ///No documentation found
    pub const STRUCTURE_TYPE_MEMORY_BARRIER: Self = Self(46);
    ///No documentation found
    pub const STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: Self = Self(47);
    ///No documentation found
    pub const STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: Self = Self(48);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: Self = Self(1000094000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: Self = Self(1000157000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: Self = Self(1000157001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: Self = Self(1000083000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: Self = Self(1000127000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: Self = Self(1000127001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: Self = Self(1000060000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: Self = Self(1000060003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: Self = Self(1000060004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: Self = Self(1000060005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: Self = Self(1000060006);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: Self = Self(1000060013);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: Self = Self(1000060014);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: Self = Self(1000070000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: Self = Self(1000070001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: Self = Self(1000146000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: Self = Self(1000146001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: Self = Self(1000146002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: Self = Self(1000146003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: Self = Self(1000146004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: Self = Self(1000059000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: Self = Self(1000059001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_2: Self = Self(1000059002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: Self = Self(1000059003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: Self = Self(1000059004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: Self = Self(1000059005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: Self = Self(1000059006);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: Self = Self(1000059007);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: Self = Self(1000059008);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: Self = Self(1000117000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: Self = Self(1000117001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: Self = Self(1000117002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: Self = Self(1000117003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: Self = Self(1000053000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: Self = Self(1000053001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: Self = Self(1000053002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: Self = Self(1000120000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: Self = Self(1000145000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: Self = Self(1000145001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: Self = Self(1000145002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: Self = Self(1000145003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: Self = Self(1000156000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: Self = Self(1000156001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: Self = Self(1000156002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: Self = Self(1000156003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: Self = Self(1000156004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: Self = Self(1000156005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: Self = Self(1000085000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: Self = Self(1000071000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: Self = Self(1000071001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: Self = Self(1000071002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: Self = Self(1000071003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: Self = Self(1000071004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: Self = Self(1000072000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: Self = Self(1000072001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: Self = Self(1000072002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: Self = Self(1000112000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: Self = Self(1000112001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: Self = Self(1000113000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: Self = Self(1000077000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: Self = Self(1000076000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: Self = Self(1000076001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: Self = Self(1000168000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: Self = Self(1000168001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: Self = Self(1000063000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: Self = Self(49);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: Self = Self(50);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: Self = Self(51);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: Self = Self(52);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: Self = Self(1000147000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: Self = Self(1000109000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: Self = Self(1000109001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: Self = Self(1000109002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: Self = Self(1000109003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: Self = Self(1000109004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: Self = Self(1000109005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SUBPASS_END_INFO: Self = Self(1000109006);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: Self = Self(1000177000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: Self = Self(1000196000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: Self = Self(1000180000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: Self = Self(1000082000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: Self = Self(1000197000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: Self = Self(1000161000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: Self = Self(1000161001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: Self = Self(1000161002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: Self = Self(1000161003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: Self = Self(1000161004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: Self = Self(1000199000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: Self = Self(1000199001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: Self = Self(1000221000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: Self = Self(1000246000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: Self = Self(1000130000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: Self = Self(1000130001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: Self = Self(1000211000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: Self = Self(1000108000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: Self = Self(1000108001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: Self = Self(1000108002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: Self = Self(1000108003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: Self = Self(1000253000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: Self = Self(1000175000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: Self = Self(1000241000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: Self = Self(1000241001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: Self = Self(1000241002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: Self = Self(1000261000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: Self = Self(1000207000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: Self = Self(1000207001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: Self = Self(1000207002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: Self = Self(1000207003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: Self = Self(1000207004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: Self = Self(1000207005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: Self = Self(1000257000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: Self = Self(1000244001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: Self = Self(1000257002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: Self = Self(1000257003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: Self = Self(1000257004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: Self = Self(53);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: Self = Self(54);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO: Self = Self(1000192000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES: Self = Self(1000215000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: Self = Self(1000245000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES: Self = Self(1000276000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: Self = Self(1000295000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: Self = Self(1000295001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: Self = Self(1000295002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES: Self = Self(1000297000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_MEMORY_BARRIER_2: Self = Self(1000314000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: Self = Self(1000314001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: Self = Self(1000314002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_DEPENDENCY_INFO: Self = Self(1000314003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_SUBMIT_INFO_2: Self = Self(1000314004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: Self = Self(1000314005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: Self = Self(1000314006);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES: Self = Self(1000314007);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES: Self = Self(1000325000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES: Self = Self(1000335000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_COPY_BUFFER_INFO_2: Self = Self(1000337000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_COPY_IMAGE_INFO_2: Self = Self(1000337001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: Self = Self(1000337002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: Self = Self(1000337003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: Self = Self(1000337004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: Self = Self(1000337005);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_BUFFER_COPY_2: Self = Self(1000337006);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_IMAGE_COPY_2: Self = Self(1000337007);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_IMAGE_BLIT_2: Self = Self(1000337008);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: Self = Self(1000337009);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_IMAGE_RESOLVE_2: Self = Self(1000337010);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES: Self = Self(1000225000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO: Self = Self(1000225001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES: Self = Self(1000225002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES: Self = Self(1000138000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES: Self = Self(1000138001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK: Self = Self(1000138002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO: Self = Self(1000138003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES: Self = Self(1000066000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_RENDERING_INFO: Self = Self(1000044000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: Self = Self(1000044001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: Self = Self(1000044002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES: Self = Self(1000044003);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO: Self = Self(1000044004);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES: Self = Self(1000280000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES: Self = Self(1000280001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES: Self = Self(1000281001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_3: Self = Self(1000360000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES: Self = Self(1000413000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES: Self = Self(1000413001);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: Self = Self(1000413002);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: Self = Self(1000413003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    pub const STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: Self = Self(1000001000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    pub const STRUCTURE_TYPE_PRESENT_INFO_KHR: Self = Self(1000001001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: Self = Self(1000060007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: Self = Self(1000060008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: Self = Self(1000060009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: Self = Self(1000060010);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: Self = Self(1000060011);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: Self = Self(1000060012);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    pub const STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: Self = Self(1000002000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    pub const STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: Self = Self(1000002001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display_swapchain`]
    pub const STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: Self = Self(1000003000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_xlib_surface`]
    pub const STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: Self = Self(1000004000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_xcb_surface`]
    pub const STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: Self = Self(1000005000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_wayland_surface`]
    pub const STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: Self = Self(1000006000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_android_surface`]
    pub const STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: Self = Self(1000008000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_win_32_surface`]
    pub const STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: Self = Self(1000009000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    pub const STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: Self = Self(1000011000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_rasterization_order`]
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: Self = Self(1000018000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_marker`]
    pub const STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: Self = Self(1000022000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_marker`]
    pub const STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: Self = Self(1000022001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_marker`]
    pub const STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: Self = Self(1000022002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_PROFILE_KHR: Self = Self(1000023000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: Self = Self(1000023001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR: Self = Self(1000023002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR: Self = Self(1000023003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR: Self = Self(1000023004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: Self = Self(1000023005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR: Self = Self(1000023006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR: Self = Self(1000023007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: Self = Self(1000023008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: Self = Self(1000023009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: Self = Self(1000023010);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR: Self = Self(1000023011);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR: Self = Self(1000023012);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_PROFILES_KHR: Self = Self(1000023013);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: Self = Self(1000023014);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: Self = Self(1000023015);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR: Self = Self(1000023016);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_decode_queue`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: Self = Self(1000024000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation`]
    pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: Self = Self(1000026000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation`]
    pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: Self = Self(1000026001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation`]
    pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: Self = Self(1000026002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: Self = Self(1000028000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: Self = Self(1000028001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_transform_feedback`]
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: Self = Self(1000028002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    pub const STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: Self = Self(1000029000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    pub const STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: Self = Self(1000029001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    pub const STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: Self = Self(1000029002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_image_view_handle`]
    pub const STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: Self = Self(1000030000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_image_view_handle`]
    pub const STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: Self = Self(1000030001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT: Self = Self(1000038000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT: Self = Self(1000038001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT: Self = Self(1000038002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT: Self = Self(1000038003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT: Self = Self(1000038004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT: Self = Self(1000038005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT: Self = Self(1000038006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT: Self = Self(1000038007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT: Self = Self(1000038008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT: Self = Self(1000038009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT: Self = Self(1000038010);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT: Self = Self(1000039000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT: Self = Self(1000039001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT: Self = Self(1000039002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT: Self = Self(1000039003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT: Self = Self(1000039004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT: Self = Self(1000039005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_EXT: Self = Self(1000039006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT: Self = Self(1000039007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT: Self = Self(1000039008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT: Self = Self(1000039009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT: Self = Self(1000039010);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_encode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT: Self = Self(1000039011);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT: Self = Self(1000040000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT: Self = Self(1000040001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT: Self = Self(1000040002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT: Self = Self(1000040003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT: Self = Self(1000040004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT: Self = Self(1000040005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT: Self = Self(1000040006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_264`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT: Self = Self(1000040007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_texture_gather_bias_lod`]
    pub const STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: Self = Self(1000041000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: Self = Self(1000044006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: Self = Self(1000044007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: Self = Self(1000044008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: Self = Self(1000044009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ggp_stream_descriptor_surface`]
    pub const STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: Self = Self(1000049000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_corner_sampled_image`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: Self = Self(1000050000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory`]
    pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: Self = Self(1000056000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory`]
    pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: Self = Self(1000056001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_win_32`]
    pub const STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: Self = Self(1000057000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_win_32`]
    pub const STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: Self = Self(1000057001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_win_32_keyed_mutex`]
    pub const STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: Self = Self(1000058000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_flags`]
    pub const STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: Self = Self(1000061000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nn_vi_surface`]
    pub const STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: Self = Self(1000062000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_astc_decode_mode`]
    pub const STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: Self = Self(1000067000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_astc_decode_mode`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: Self = Self(1000067001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    pub const STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: Self = Self(1000073000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    pub const STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: Self = Self(1000073001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    pub const STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: Self = Self(1000073002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_win_32`]
    pub const STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: Self = Self(1000073003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_fd`]
    pub const STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: Self = Self(1000074000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_fd`]
    pub const STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: Self = Self(1000074001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_fd`]
    pub const STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: Self = Self(1000074002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_win_32_keyed_mutex`]
    pub const STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: Self = Self(1000075000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: Self = Self(1000078000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: Self = Self(1000078001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    pub const STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: Self = Self(1000078002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_win_32`]
    pub const STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: Self = Self(1000078003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_fd`]
    pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: Self = Self(1000079000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_fd`]
    pub const STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: Self = Self(1000079001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_push_descriptor`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: Self = Self(1000080000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conditional_rendering`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: Self = Self(1000081000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conditional_rendering`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: Self = Self(1000081001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conditional_rendering`]
    pub const STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: Self = Self(1000081002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_incremental_present`]
    pub const STRUCTURE_TYPE_PRESENT_REGIONS_KHR: Self = Self(1000084000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_clip_space_w_scaling`]
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: Self = Self(1000087000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_surface_counter`]
    pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: Self = Self(1000090000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    pub const STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: Self = Self(1000091000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    pub const STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: Self = Self(1000091001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    pub const STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: Self = Self(1000091002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_control`]
    pub const STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: Self = Self(1000091003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::google_display_timing`]
    pub const STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: Self = Self(1000092000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_multiview_per_view_attributes`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: Self = Self(1000097000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_viewport_swizzle`]
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: Self = Self(1000098000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_discard_rectangles`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: Self = Self(1000099000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_discard_rectangles`]
    pub const STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: Self = Self(1000099001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conservative_rasterization`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: Self = Self(1000101000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_conservative_rasterization`]
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: Self = Self(1000101001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_enable`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: Self = Self(1000102000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_enable`]
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: Self = Self(1000102001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_hdr_metadata`]
    pub const STRUCTURE_TYPE_HDR_METADATA_EXT: Self = Self(1000105000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shared_presentable_image`]
    pub const STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: Self = Self(1000111000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_win_32`]
    pub const STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: Self = Self(1000114000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_win_32`]
    pub const STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: Self = Self(1000114001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_win_32`]
    pub const STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: Self = Self(1000114002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_fd`]
    pub const STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: Self = Self(1000115000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_fd`]
    pub const STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: Self = Self(1000115001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: Self = Self(1000116000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: Self = Self(1000116001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: Self = Self(1000116002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: Self = Self(1000116003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: Self = Self(1000116004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: Self = Self(1000116005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: Self = Self(1000116006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_surface_capabilities_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: Self = Self(1000119000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_surface_capabilities_2`]
    pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: Self = Self(1000119001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_surface_capabilities_2`]
    pub const STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: Self = Self(1000119002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    pub const STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: Self = Self(1000121000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    pub const STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: Self = Self(1000121001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    pub const STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: Self = Self(1000121002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    pub const STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: Self = Self(1000121003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_display_properties_2`]
    pub const STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: Self = Self(1000121004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::mvk_ios_surface`]
    pub const STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: Self = Self(1000122000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::mvk_macos_surface`]
    pub const STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: Self = Self(1000123000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    pub const STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: Self = Self(1000128000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    pub const STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: Self = Self(1000128001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    pub const STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: Self = Self(1000128002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    pub const STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: Self = Self(1000128003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    pub const STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: Self = Self(1000128004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: Self = Self(1000129000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: Self = Self(1000129001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: Self = Self(1000129002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: Self = Self(1000129003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: Self = Self(1000129004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: Self = Self(1000129005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::android_external_memory_android_hardware_buffer`]
    pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID: Self = Self(1000129006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    pub const STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: Self = Self(1000143000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    pub const STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: Self = Self(1000143001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    pub const STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: Self = Self(1000143002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: Self = Self(1000143003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    pub const STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: Self = Self(1000143004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: Self = Self(1000148000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: Self = Self(1000148001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_blend_operation_advanced`]
    pub const STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: Self = Self(1000148002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_coverage_to_color`]
    pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: Self = Self(1000149000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: Self = Self(1000150007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: Self = Self(1000150000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: Self = Self(1000150002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: Self = Self(1000150003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: Self = Self(1000150004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: Self = Self(1000150005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: Self = Self(1000150006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: Self = Self(1000150009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: Self = Self(1000150010);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: Self = Self(1000150011);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: Self = Self(1000150012);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: Self = Self(1000150013);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: Self = Self(1000150014);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: Self = Self(1000150017);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: Self = Self(1000150020);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: Self = Self(1000347000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: Self = Self(1000347001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: Self = Self(1000150015);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: Self = Self(1000150016);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: Self = Self(1000150018);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_ray_query`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: Self = Self(1000348013);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_framebuffer_mixed_samples`]
    pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: Self = Self(1000152000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shader_sm_builtins`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: Self = Self(1000154000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shader_sm_builtins`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: Self = Self(1000154001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: Self = Self(1000158000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: Self = Self(1000158002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: Self = Self(1000158003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: Self = Self(1000158004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: Self = Self(1000158005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT: Self = Self(1000158006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_cache`]
    pub const STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: Self = Self(1000160000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_cache`]
    pub const STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: Self = Self(1000160001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_portability_subset`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR: Self = Self(1000163000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_portability_subset`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR: Self = Self(1000163001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: Self = Self(1000164000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: Self = Self(1000164001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: Self = Self(1000164002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: Self = Self(1000164005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: Self = Self(1000165000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: Self = Self(1000165001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_GEOMETRY_NV: Self = Self(1000165003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: Self = Self(1000165004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_GEOMETRY_AABB_NV: Self = Self(1000165005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: Self = Self(1000165006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: Self = Self(1000165007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: Self = Self(1000165008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: Self = Self(1000165009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: Self = Self(1000165011);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: Self = Self(1000165012);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_representative_fragment_test`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: Self = Self(1000166000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_representative_fragment_test`]
    pub const STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: Self = Self(1000166001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_filter_cubic`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: Self = Self(1000170000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_filter_cubic`]
    pub const STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: Self = Self(1000170001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_external_memory_host`]
    pub const STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: Self = Self(1000178000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_external_memory_host`]
    pub const STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: Self = Self(1000178001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_external_memory_host`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: Self = Self(1000178002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_clock`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: Self = Self(1000181000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_pipeline_compiler_control`]
    pub const STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: Self = Self(1000183000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_calibrated_timestamps`]
    pub const STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: Self = Self(1000184000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_shader_core_properties`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: Self = Self(1000185000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT: Self = Self(1000187000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT: Self = Self(1000187001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT: Self = Self(1000187002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT: Self = Self(1000187003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT: Self = Self(1000187004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT: Self = Self(1000187005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_video_decode_h_265`]
    pub const STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT: Self = Self(1000187006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    pub const STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR: Self = Self(1000174000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR: Self = Self(1000388000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR: Self = Self(1000388001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_memory_overallocation_behavior`]
    pub const STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: Self = Self(1000189000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_attribute_divisor`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: Self = Self(1000190000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_attribute_divisor`]
    pub const STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: Self = Self(1000190001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_attribute_divisor`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: Self = Self(1000190002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ggp_frame_token`]
    pub const STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: Self = Self(1000191000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_compute_shader_derivatives`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: Self = Self(1000201000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_mesh_shader`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: Self = Self(1000202000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_mesh_shader`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: Self = Self(1000202001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shader_barycentric`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: Self = Self(1000203000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_shader_image_footprint`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: Self = Self(1000204000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_scissor_exclusive`]
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: Self = Self(1000205000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_scissor_exclusive`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: Self = Self(1000205002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostic_checkpoints`]
    pub const STRUCTURE_TYPE_CHECKPOINT_DATA_NV: Self = Self(1000206000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostic_checkpoints`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: Self = Self(1000206001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_shader_integer_functions_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: Self = Self(1000209000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: Self = Self(1000210000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: Self = Self(1000210001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: Self = Self(1000210002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: Self = Self(1000210003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: Self = Self(1000210004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: Self = Self(1000210005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pci_bus_info`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: Self = Self(1000212000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_display_native_hdr`]
    pub const STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: Self = Self(1000213000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_display_native_hdr`]
    pub const STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: Self = Self(1000213001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_imagepipe_surface`]
    pub const STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: Self = Self(1000214000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_metal_surface`]
    pub const STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: Self = Self(1000217000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: Self = Self(1000218000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: Self = Self(1000218001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map`]
    pub const STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: Self = Self(1000218002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: Self = Self(1000226000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: Self = Self(1000226001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: Self = Self(1000226002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: Self = Self(1000226003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: Self = Self(1000226004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_shader_core_properties_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: Self = Self(1000227000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::amd_device_coherent_memory`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: Self = Self(1000229000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_image_atomic_int_64`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: Self = Self(1000234000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_memory_budget`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: Self = Self(1000237000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_memory_priority`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: Self = Self(1000238000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_memory_priority`]
    pub const STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: Self = Self(1000238001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_surface_protected_capabilities`]
    pub const STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: Self = Self(1000239000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_dedicated_allocation_image_aliasing`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: Self = Self(1000240000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: Self = Self(1000244000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: Self = Self(1000244002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_features`]
    pub const STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: Self = Self(1000247000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_present_wait`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR: Self = Self(1000248000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_cooperative_matrix`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: Self = Self(1000249000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_cooperative_matrix`]
    pub const STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: Self = Self(1000249001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_cooperative_matrix`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: Self = Self(1000249002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_coverage_reduction_mode`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: Self = Self(1000250000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_coverage_reduction_mode`]
    pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: Self = Self(1000250001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_coverage_reduction_mode`]
    pub const STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: Self = Self(1000250002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_shader_interlock`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: Self = Self(1000251000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_image_arrays`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: Self = Self(1000252000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_provoking_vertex`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT: Self = Self(1000254000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_provoking_vertex`]
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT: Self = Self(1000254001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_provoking_vertex`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT: Self = Self(1000254002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    pub const STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: Self = Self(1000255000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: Self = Self(1000255002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    pub const STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: Self = Self(1000255001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_headless_surface`]
    pub const STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: Self = Self(1000256000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: Self = Self(1000259000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: Self = Self(1000259001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: Self = Self(1000259002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_atomic_float`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: Self = Self(1000260000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_index_type_uint_8`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: Self = Self(1000265000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: Self = Self(1000267000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: Self = Self(1000269000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    pub const STRUCTURE_TYPE_PIPELINE_INFO_KHR: Self = Self(1000269001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: Self = Self(1000269002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: Self = Self(1000269003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: Self = Self(1000269004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_executable_properties`]
    pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: Self = Self(1000269005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_atomic_float_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT: Self = Self(1000273000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: Self = Self(1000277000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: Self = Self(1000277001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: Self = Self(1000277002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: Self = Self(1000277003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: Self = Self(1000277004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: Self = Self(1000277005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: Self = Self(1000277006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: Self = Self(1000277007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_inherited_viewport_scissor`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV: Self = Self(1000278000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_inherited_viewport_scissor`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV: Self = Self(1000278001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texel_buffer_alignment`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: Self = Self(1000281000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_render_pass_transform`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: Self = Self(1000282000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_render_pass_transform`]
    pub const STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: Self = Self(1000282001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_device_memory_report`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: Self = Self(1000284000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_device_memory_report`]
    pub const STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: Self = Self(1000284001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_device_memory_report`]
    pub const STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: Self = Self(1000284002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_robustness_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: Self = Self(1000286000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_robustness_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: Self = Self(1000286001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    pub const STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: Self = Self(1000287000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: Self = Self(1000287001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_custom_border_color`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: Self = Self(1000287002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_pipeline_library`]
    pub const STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: Self = Self(1000290000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_present_id`]
    pub const STRUCTURE_TYPE_PRESENT_ID_KHR: Self = Self(1000294000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_present_id`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR: Self = Self(1000294001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: Self = Self(1000299000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: Self = Self(1000299001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_encode_queue`]
    pub const STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR: Self = Self(1000299002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostics_config`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: Self = Self(1000300000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_diagnostics_config`]
    pub const STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: Self = Self(1000300001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV: Self = Self(1000314008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: Self = Self(1000314009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_subgroup_uniform_control_flow`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR: Self = Self(1000323000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shading_rate_enums`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: Self = Self(1000326000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shading_rate_enums`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: Self = Self(1000326001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_fragment_shading_rate_enums`]
    pub const STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: Self = Self(1000326002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing_motion_blur`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV: Self = Self(1000327000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing_motion_blur`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV: Self = Self(1000327001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing_motion_blur`]
    pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: Self = Self(1000327002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_ycbcr_2_plane_444_formats`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT: Self = Self(1000330000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: Self = Self(1000332000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_fragment_density_map_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: Self = Self(1000332001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_rotated_copy_commands`]
    pub const STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: Self = Self(1000333000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_workgroup_memory_explicit_layout`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR: Self = Self(1000336000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_4444_formats`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: Self = Self(1000340000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::arm_rasterization_order_attachment_access`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM: Self =
        Self(1000342000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_rgba_10_x_6_formats`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT: Self = Self(1000344000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_directfb_surface`]
    pub const STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: Self = Self(1000346000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_mutable_descriptor_type`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE: Self = Self(1000351000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::valve_mutable_descriptor_type`]
    pub const STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: Self = Self(1000351002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT: Self = Self(1000352000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    pub const STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT: Self = Self(1000352001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    pub const STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT: Self = Self(1000352002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_physical_device_drm`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: Self = Self(1000353000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_control`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT: Self = Self(1000355000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_depth_clip_control`]
    pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT: Self = Self(1000355001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_primitive_topology_list_restart`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT: Self = Self(1000356000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_memory`]
    pub const STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA: Self = Self(1000364000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_memory`]
    pub const STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA: Self = Self(1000364001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_memory`]
    pub const STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: Self = Self(1000364002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_semaphore`]
    pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA: Self = Self(1000365000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_external_semaphore`]
    pub const STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA: Self = Self(1000365001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: Self = Self(1000366000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA: Self = Self(1000366001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA: Self = Self(1000366002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: Self = Self(1000366003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: Self = Self(1000366004);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA: Self = Self(1000366005);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: Self = Self(1000366006);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: Self = Self(1000366007);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: Self = Self(1000366008);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA: Self = Self(1000366009);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    pub const STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI: Self = Self(1000369000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI: Self = Self(1000369001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_subpass_shading`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI: Self = Self(1000369002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::huawei_invocation_mask`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI: Self = Self(1000370000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_rdma`]
    pub const STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: Self = Self(1000371000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_external_memory_rdma`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV: Self = Self(1000371001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: Self = Self(1000377000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qnx_screen_surface`]
    pub const STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: Self = Self(1000378000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_color_write_enable`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT: Self = Self(1000381000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_color_write_enable`]
    pub const STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: Self = Self(1000381001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_view_min_lod`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT: Self = Self(1000391000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_view_min_lod`]
    pub const STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: Self = Self(1000391001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_multi_draw`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT: Self = Self(1000392000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_multi_draw`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT: Self = Self(1000392001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_border_color_swizzle`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT: Self = Self(1000411000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_border_color_swizzle`]
    pub const STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT: Self = Self(1000411001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pageable_device_local_memory`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT: Self = Self(1000412000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_fragment_density_map_offset`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM: Self = Self(1000425000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_fragment_density_map_offset`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM: Self = Self(1000425001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::qcom_fragment_density_map_offset`]
    pub const STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM: Self = Self(1000425002);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_linear_color_attachment`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV: Self = Self(1000430000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    pub const STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_RENDERING_INFO_KHR: Self = Self::STRUCTURE_TYPE_RENDERING_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: Self = Self::STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dynamic_rendering`]
    pub const STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: Self =
        Self::STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_multiview`]
    pub const STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_multiview`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_multiview`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: Self = Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: Self = Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: Self = Self::STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: Self = Self::STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: Self = Self::STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: Self =
        Self::STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_physical_device_properties_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: Self = Self::STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: Self = Self::STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texture_compression_astc_hdr`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group_creation`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_device_group_creation`]
    pub const STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_capabilities`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_capabilities`]
    pub const STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_capabilities`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory_capabilities`]
    pub const STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: Self = Self::STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_capabilities`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory`]
    pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory`]
    pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory`]
    pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: Self = Self::STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_capabilities`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore_capabilities`]
    pub const STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_semaphore`]
    pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: Self = Self::STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_float_16_int_8`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_float_16_int_8`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_16_bit_storage`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_descriptor_update_template`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_display_surface_counter`]
    pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: Self = Self::STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_imageless_framebuffer`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_imageless_framebuffer`]
    pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_imageless_framebuffer`]
    pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_imageless_framebuffer`]
    pub const STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: Self = Self::STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: Self = Self::STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: Self = Self::STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: Self = Self::STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: Self = Self::STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_create_renderpass_2`]
    pub const STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: Self = Self::STRUCTURE_TYPE_SUBPASS_END_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_capabilities`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence_capabilities`]
    pub const STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: Self = Self::STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_fence`]
    pub const STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: Self = Self::STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_2`]
    pub const STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_2`]
    pub const STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: Self = Self::STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_2`]
    pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_variable_pointers`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_variable_pointers`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dedicated_allocation`]
    pub const STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: Self =
        Self::STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_dedicated_allocation`]
    pub const STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sampler_filter_minmax`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_sampler_filter_minmax`]
    pub const STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_inline_uniform_block`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_inline_uniform_block`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_inline_uniform_block`]
    pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: Self =
        Self::STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_inline_uniform_block`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_memory_requirements_2`]
    pub const STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: Self =
        Self::STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_memory_requirements_2`]
    pub const STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: Self =
        Self::STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_memory_requirements_2`]
    pub const STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: Self =
        Self::STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_memory_requirements_2`]
    pub const STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: Self = Self::STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_get_memory_requirements_2`]
    pub const STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: Self =
        Self::STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_image_format_list`]
    pub const STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: Self = Self::STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_bind_memory_2`]
    pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: Self = Self::STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_bind_memory_2`]
    pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: Self = Self::STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_descriptor_indexing`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_descriptor_indexing`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_descriptor_indexing`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_descriptor_indexing`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_descriptor_indexing`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: Self =
        Self::STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_3`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_3`]
    pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: Self =
        Self::STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_global_priority`]
    pub const STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_subgroup_extended_types`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_8_bit_storage`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_atomic_int_64`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pipeline_creation_feedback`]
    pub const STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_driver_properties`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_float_controls`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_depth_stencil_resolve`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_depth_stencil_resolve`]
    pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: Self =
        Self::STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_timeline_semaphore`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_timeline_semaphore`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_timeline_semaphore`]
    pub const STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: Self = Self::STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_timeline_semaphore`]
    pub const STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_timeline_semaphore`]
    pub const STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: Self = Self::STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_timeline_semaphore`]
    pub const STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: Self = Self::STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: Self =
        Self::STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_vulkan_memory_model`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_terminate_invocation`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_scalar_block_layout`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_subgroup_size_control`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_subgroup_size_control`]
    pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_subgroup_size_control`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: Self =
        Self::STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_separate_depth_stencil_layouts`]
    pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: Self =
        Self::STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: Self = Self::STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_tooling_info`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_separate_stencil_usage`]
    pub const STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_uniform_buffer_standard_layout`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_buffer_device_address`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_buffer_device_address`]
    pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: Self = Self::STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_buffer_device_address`]
    pub const STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_buffer_device_address`]
    pub const STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_buffer_device_address`]
    pub const STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_host_query_reset`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_shader_demote_to_helper_invocation`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_integer_dot_product`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_shader_integer_dot_product`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_texel_buffer_alignment`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_private_data`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_private_data`]
    pub const STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_private_data`]
    pub const STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: Self =
        Self::STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pipeline_creation_cache_control`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: Self = Self::STRUCTURE_TYPE_MEMORY_BARRIER_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: Self = Self::STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: Self = Self::STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: Self = Self::STRUCTURE_TYPE_DEPENDENCY_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_SUBMIT_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: Self = Self::STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: Self = Self::STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_synchronization_2`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_zero_initialize_workgroup_memory`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_robustness`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_COPY_BUFFER_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_COPY_IMAGE_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_BLIT_IMAGE_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: Self = Self::STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_BUFFER_COPY_2_KHR: Self = Self::STRUCTURE_TYPE_BUFFER_COPY_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_IMAGE_COPY_2_KHR: Self = Self::STRUCTURE_TYPE_IMAGE_COPY_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: Self = Self::STRUCTURE_TYPE_IMAGE_BLIT_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: Self = Self::STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_copy_commands_2`]
    pub const STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: Self = Self::STRUCTURE_TYPE_IMAGE_RESOLVE_2;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_format_feature_flags_2`]
    pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: Self = Self::STRUCTURE_TYPE_FORMAT_PROPERTIES_3;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_global_priority_query`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_global_priority_query`]
    pub const STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: Self =
        Self::STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_4`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_4`]
    pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: Self =
        Self::STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_4`]
    pub const STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_4`]
    pub const STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: Self =
        Self::STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkSubpassContents](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubpassContents.html) - Specify how commands in the first subpass of a render pass are provided
///# C Specifications
///Possible values of [`CmdBeginRenderPass`]`::contents`, specifying
///how the commands in the first subpass will be provided, are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkSubpassContents {
///    VK_SUBPASS_CONTENTS_INLINE = 0,
///    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
///} VkSubpassContents;
///```
///# Description
/// - [`SUBPASS_CONTENTS_INLINE`] specifies that the contents of the
///subpass will be recorded inline in the primary command buffer, and
///secondary command buffers **must** not be executed within the subpass.
/// - [`SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS`] specifies that the
///contents are recorded in secondary command buffers that will be called
///from the primary command buffer, and [`CmdExecuteCommands`] is the
///only valid command on the command buffer until [`CmdNextSubpass`] or
///[`CmdEndRenderPass`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`SubpassBeginInfo`]
/// - [`CmdBeginRenderPass`]
/// - [`CmdNextSubpass`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkSubpassContents")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct SubpassContents(i32);
impl const Default for SubpassContents {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for SubpassContents {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("SubpassContents")
            .field(match *self {
                Self::SUBPASS_CONTENTS_INLINE => &"SUBPASS_CONTENTS_INLINE",
                Self::SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS => &"SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS",
                other => unreachable!("invalid value for `SubpassContents`: {:?}", other),
            })
            .finish()
    }
}
impl SubpassContents {
    ///[`SUBPASS_CONTENTS_INLINE`] specifies that the contents of the
    ///subpass will be recorded inline in the primary command buffer, and
    ///secondary command buffers **must** not be executed within the subpass.
    pub const SUBPASS_CONTENTS_INLINE: Self = Self(0);
    ///[`SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS`] specifies that the
    ///contents are recorded in secondary command buffers that will be called
    ///from the primary command buffer, and [`CmdExecuteCommands`] is the
    ///only valid command on the command buffer until [`CmdNextSubpass`] or
    ///[`CmdEndRenderPass`].
    pub const SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: Self = Self(1);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkResult](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkResult.html) - Vulkan command return codes
///# C Specifications
///While the core Vulkan API is not designed to capture incorrect usage, some
///circumstances still require return codes.
///Commands in Vulkan return their status via return codes that are in one of
///two categories:
/// - Successful completion codes are returned when a command needs to
///communicate success or status information.
///All successful completion codes are non-negative values.
/// - Run time error codes are returned when a command needs to communicate a
///failure that could only be detected at runtime.
///All runtime error codes are negative values.All return codes in Vulkan are reported via
/// [`VulkanResultCodes`] return values.
///The possible codes are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkResult {
///    VK_SUCCESS = 0,
///    VK_NOT_READY = 1,
///    VK_TIMEOUT = 2,
///    VK_EVENT_SET = 3,
///    VK_EVENT_RESET = 4,
///    VK_INCOMPLETE = 5,
///    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
///    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
///    VK_ERROR_INITIALIZATION_FAILED = -3,
///    VK_ERROR_DEVICE_LOST = -4,
///    VK_ERROR_MEMORY_MAP_FAILED = -5,
///    VK_ERROR_LAYER_NOT_PRESENT = -6,
///    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
///    VK_ERROR_FEATURE_NOT_PRESENT = -8,
///    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
///    VK_ERROR_TOO_MANY_OBJECTS = -10,
///    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
///    VK_ERROR_FRAGMENTED_POOL = -12,
///    VK_ERROR_UNKNOWN = -13,
///  // Provided by VK_VERSION_1_1
///    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
///  // Provided by VK_VERSION_1_1
///    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
///  // Provided by VK_VERSION_1_2
///    VK_ERROR_FRAGMENTATION = -1000161000,
///  // Provided by VK_VERSION_1_2
///    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
///  // Provided by VK_VERSION_1_3
///    VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
///  // Provided by VK_KHR_surface
///    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
///  // Provided by VK_KHR_surface
///    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
///  // Provided by VK_KHR_swapchain
///    VK_SUBOPTIMAL_KHR = 1000001003,
///  // Provided by VK_KHR_swapchain
///    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
///  // Provided by VK_KHR_display_swapchain
///    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
///  // Provided by VK_EXT_debug_report
///    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
///  // Provided by VK_NV_glsl_shader
///    VK_ERROR_INVALID_SHADER_NV = -1000012000,
///  // Provided by VK_EXT_image_drm_format_modifier
///    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
///  // Provided by VK_KHR_global_priority
///    VK_ERROR_NOT_PERMITTED_KHR = -1000174001,
///  // Provided by VK_EXT_full_screen_exclusive
///    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_THREAD_IDLE_KHR = 1000268000,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_THREAD_DONE_KHR = 1000268001,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_OPERATION_DEFERRED_KHR = 1000268002,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
///  // Provided by VK_KHR_maintenance1
///    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
///  // Provided by VK_KHR_external_memory
///    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
///  // Provided by VK_EXT_descriptor_indexing
///    VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
///  // Provided by VK_EXT_global_priority
///    VK_ERROR_NOT_PERMITTED_EXT = VK_ERROR_NOT_PERMITTED_KHR,
///  // Provided by VK_EXT_buffer_device_address
///    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
///  // Provided by VK_KHR_buffer_device_address
///    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
///  // Provided by VK_EXT_pipeline_creation_cache_control
///    VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
///  // Provided by VK_EXT_pipeline_creation_cache_control
///    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
///} VkResult;
///```
///# Description
/// - [`SUCCESS`] Command successfully completed
/// - [`NOT_READY`] A fence or query has not yet completed
/// - [`TIMEOUT`] A wait operation has not completed in the specified
///time
/// - [`EVENT_SET`] An event is signaled
/// - [`EVENT_RESET`] An event is unsignaled
/// - [`INCOMPLETE`] A return array was too small for the result
/// - [`SUBOPTIMAL_KHR`] A swapchain no longer matches the surface
///properties exactly, but **can** still be used to present to the surface
///successfully.
/// - [`THREAD_IDLE_KHR`] A deferred operation is not complete but there
///is currently no work for this thread to do at the time of this call.
/// - [`THREAD_DONE_KHR`] A deferred operation is not complete but there
///is no work remaining to assign to additional threads.
/// - [`OPERATION_DEFERRED_KHR`] A deferred operation was requested and
///at least some of the work was deferred.
/// - [`OPERATION_NOT_DEFERRED_KHR`] A deferred operation was requested
///and no operations were deferred.
/// - [`PIPELINE_COMPILE_REQUIRED`] A requested pipeline creation would
///have required compilation, but the application requested compilation to
///not be performed.
/// - [`ERROR_OUT_OF_HOST_MEMORY`] A host memory allocation has failed.
/// - [`ERROR_OUT_OF_DEVICE_MEMORY`] A device memory allocation has
///failed.
/// - [`ERROR_INITIALIZATION_FAILED`] Initialization of an object could
///not be completed for implementation-specific reasons.
/// - [`ERROR_DEVICE_LOST`] The logical or physical device has been lost.
///See [Lost Device](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-lost-device)
/// - [`ERROR_MEMORY_MAP_FAILED`] Mapping of a memory object has failed.
/// - [`ERROR_LAYER_NOT_PRESENT`] A requested layer is not present or
///could not be loaded.
/// - [`ERROR_EXTENSION_NOT_PRESENT`] A requested extension is not
///supported.
/// - [`ERROR_FEATURE_NOT_PRESENT`] A requested feature is not supported.
/// - [`ERROR_INCOMPATIBLE_DRIVER`] The requested version of Vulkan is
///not supported by the driver or is otherwise incompatible for
///implementation-specific reasons.
/// - [`ERROR_TOO_MANY_OBJECTS`] Too many objects of the type have
///already been created.
/// - [`ERROR_FORMAT_NOT_SUPPORTED`] A requested format is not supported
///on this device.
/// - [`ERROR_FRAGMENTED_POOL`] A pool allocation has failed due to
///fragmentation of the pool’s memory.
///This **must** only be returned if no attempt to allocate host or device
///memory was made to accommodate the new allocation.
///This **should** be returned in preference to
///[`ERROR_OUT_OF_POOL_MEMORY`], but only if the implementation is
///certain that the pool allocation failure was due to fragmentation.
/// - [`ERROR_SURFACE_LOST_KHR`] A surface is no longer available.
/// - [`ERROR_NATIVE_WINDOW_IN_USE_KHR`] The requested window is already
///in use by Vulkan or another API in a manner which prevents it from being
///used again.
/// - [`ERROR_OUT_OF_DATE_KHR`] A surface has changed in such a way that
///it is no longer compatible with the swapchain, and further presentation
///requests using the swapchain will fail.
///Applications **must** query the new surface properties and recreate their
///swapchain if they wish to continue presenting to the surface.
/// - [`ERROR_INCOMPATIBLE_DISPLAY_KHR`] The display used by a swapchain
///does not use the same presentable image layout, or is incompatible in a
///way that prevents sharing an image.
/// - [`ERROR_INVALID_SHADER_NV`] One or more shaders failed to compile
///or link.
///More details are reported back to the application via
///`[`VK_EXT_debug_report`]` if enabled.
/// - [`ERROR_OUT_OF_POOL_MEMORY`] A pool memory allocation has failed.
///This **must** only be returned if no attempt to allocate host or device
///memory was made to accommodate the new allocation.
///If the failure was definitely due to fragmentation of the pool,
///[`ERROR_FRAGMENTED_POOL`]**should** be returned instead.
/// - [`ERROR_INVALID_EXTERNAL_HANDLE`] An external handle is not a valid
///handle of the specified type.
/// - [`ERROR_FRAGMENTATION`] A descriptor pool creation has failed due
///to fragmentation.
/// - [`ERROR_INVALID_DEVICE_ADDRESS_EXT`] A buffer creation failed
///because the requested address is not available.
/// - [`ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS`] A buffer creation
///or memory allocation
///failed because the requested address is not available.
///A shader group handle assignment failed because the requested shader
///group handle information is no longer valid.
/// - [`ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`] An operation on a
///swapchain created with
///`VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT` failed as it
///did not have exlusive full-screen access.
///This **may** occur due to implementation-dependent reasons, outside of the
///application’s control.
/// - [`ERROR_UNKNOWN`] An unknown error has occurred; either the
///application has provided invalid input, or an implementation failure has
///occurred.If a command returns a runtime error, unless otherwise specified any output
///parameters will have undefined contents, except that if the output
///parameter is a structure with `sType` and `pNext` fields, those
///fields will be unmodified.
///Any structures chained from `pNext` will also have undefined contents,
///except that `sType` and `pNext` will be unmodified.`VK_ERROR_OUT_OF_*_MEMORY` errors do not
/// modify any currently existing
///Vulkan objects.
///Objects that have already been successfully created **can** still be used by
///the application.[`ERROR_UNKNOWN`] will be returned by an implementation when an
///unexpected error occurs that cannot be attributed to valid behavior of the
///application and implementation.
///Under these conditions, it **may** be returned from any command returning a
///[`VulkanResultCodes`].Performance-critical commands generally do not have return codes.
///If a runtime error occurs in such commands, the implementation will defer
///reporting the error until a specified point.
///For commands that record into command buffers (`vkCmd*`) runtime errors
///are reported by [`EndCommandBuffer`].
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PresentInfoKHR`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkResult")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct VulkanResultCodes(i32);
impl const Default for VulkanResultCodes {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for VulkanResultCodes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("VulkanResultCodes")
            .field(match *self {
                Self::SUCCESS => &"SUCCESS",
                Self::NOT_READY => &"NOT_READY",
                Self::TIMEOUT => &"TIMEOUT",
                Self::EVENT_SET => &"EVENT_SET",
                Self::EVENT_RESET => &"EVENT_RESET",
                Self::INCOMPLETE => &"INCOMPLETE",
                Self::ERROR_OUT_OF_HOST_MEMORY => &"ERROR_OUT_OF_HOST_MEMORY",
                Self::ERROR_OUT_OF_DEVICE_MEMORY => &"ERROR_OUT_OF_DEVICE_MEMORY",
                Self::ERROR_INITIALIZATION_FAILED => &"ERROR_INITIALIZATION_FAILED",
                Self::ERROR_DEVICE_LOST => &"ERROR_DEVICE_LOST",
                Self::ERROR_MEMORY_MAP_FAILED => &"ERROR_MEMORY_MAP_FAILED",
                Self::ERROR_LAYER_NOT_PRESENT => &"ERROR_LAYER_NOT_PRESENT",
                Self::ERROR_EXTENSION_NOT_PRESENT => &"ERROR_EXTENSION_NOT_PRESENT",
                Self::ERROR_FEATURE_NOT_PRESENT => &"ERROR_FEATURE_NOT_PRESENT",
                Self::ERROR_INCOMPATIBLE_DRIVER => &"ERROR_INCOMPATIBLE_DRIVER",
                Self::ERROR_TOO_MANY_OBJECTS => &"ERROR_TOO_MANY_OBJECTS",
                Self::ERROR_FORMAT_NOT_SUPPORTED => &"ERROR_FORMAT_NOT_SUPPORTED",
                Self::ERROR_FRAGMENTED_POOL => &"ERROR_FRAGMENTED_POOL",
                Self::ERROR_UNKNOWN => &"ERROR_UNKNOWN",
                Self::ERROR_OUT_OF_POOL_MEMORY => &"ERROR_OUT_OF_POOL_MEMORY",
                Self::ERROR_INVALID_EXTERNAL_HANDLE => &"ERROR_INVALID_EXTERNAL_HANDLE",
                Self::ERROR_FRAGMENTATION => &"ERROR_FRAGMENTATION",
                Self::ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS => &"ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
                Self::PIPELINE_COMPILE_REQUIRED => &"PIPELINE_COMPILE_REQUIRED",
                Self::ERROR_SURFACE_LOST_KHR => &"ERROR_SURFACE_LOST_KHR",
                Self::ERROR_NATIVE_WINDOW_IN_USE_KHR => &"ERROR_NATIVE_WINDOW_IN_USE_KHR",
                Self::SUBOPTIMAL_KHR => &"SUBOPTIMAL_KHR",
                Self::ERROR_OUT_OF_DATE_KHR => &"ERROR_OUT_OF_DATE_KHR",
                Self::ERROR_INCOMPATIBLE_DISPLAY_KHR => &"ERROR_INCOMPATIBLE_DISPLAY_KHR",
                Self::ERROR_VALIDATION_FAILED_EXT => &"ERROR_VALIDATION_FAILED_EXT",
                Self::ERROR_INVALID_SHADER_NV => &"ERROR_INVALID_SHADER_NV",
                Self::ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT => {
                    &"ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"
                },
                Self::ERROR_NOT_PERMITTED_KHR => &"ERROR_NOT_PERMITTED_KHR",
                Self::ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT => &"ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
                Self::THREAD_IDLE_KHR => &"THREAD_IDLE_KHR",
                Self::THREAD_DONE_KHR => &"THREAD_DONE_KHR",
                Self::OPERATION_DEFERRED_KHR => &"OPERATION_DEFERRED_KHR",
                Self::OPERATION_NOT_DEFERRED_KHR => &"OPERATION_NOT_DEFERRED_KHR",
                other => unreachable!("invalid value for `VulkanResultCodes`: {:?}", other),
            })
            .finish()
    }
}
impl VulkanResultCodes {
    ///[`SUCCESS`] Command successfully completed
    pub const SUCCESS: Self = Self(0);
    ///[`NOT_READY`] A fence or query has not yet completed
    pub const NOT_READY: Self = Self(1);
    ///[`TIMEOUT`] A wait operation has not completed in the specified
    ///time
    pub const TIMEOUT: Self = Self(2);
    ///[`EVENT_SET`] An event is signaled
    pub const EVENT_SET: Self = Self(3);
    ///[`EVENT_RESET`] An event is unsignaled
    pub const EVENT_RESET: Self = Self(4);
    ///[`INCOMPLETE`] A return array was too small for the result
    pub const INCOMPLETE: Self = Self(5);
    ///[`ERROR_OUT_OF_HOST_MEMORY`] A host memory allocation has failed.
    pub const ERROR_OUT_OF_HOST_MEMORY: Self = Self(-1);
    ///[`ERROR_OUT_OF_DEVICE_MEMORY`] A device memory allocation has
    ///failed.
    pub const ERROR_OUT_OF_DEVICE_MEMORY: Self = Self(-2);
    ///[`ERROR_INITIALIZATION_FAILED`] Initialization of an object could
    ///not be completed for implementation-specific reasons.
    pub const ERROR_INITIALIZATION_FAILED: Self = Self(-3);
    ///[`ERROR_DEVICE_LOST`] The logical or physical device has been lost.
    ///See [Lost Device](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#devsandqueues-lost-device)
    pub const ERROR_DEVICE_LOST: Self = Self(-4);
    ///[`ERROR_MEMORY_MAP_FAILED`] Mapping of a memory object has failed.
    pub const ERROR_MEMORY_MAP_FAILED: Self = Self(-5);
    ///[`ERROR_LAYER_NOT_PRESENT`] A requested layer is not present or
    ///could not be loaded.
    pub const ERROR_LAYER_NOT_PRESENT: Self = Self(-6);
    ///[`ERROR_EXTENSION_NOT_PRESENT`] A requested extension is not
    ///supported.
    pub const ERROR_EXTENSION_NOT_PRESENT: Self = Self(-7);
    ///[`ERROR_FEATURE_NOT_PRESENT`] A requested feature is not supported.
    pub const ERROR_FEATURE_NOT_PRESENT: Self = Self(-8);
    ///[`ERROR_INCOMPATIBLE_DRIVER`] The requested version of Vulkan is
    ///not supported by the driver or is otherwise incompatible for
    ///implementation-specific reasons.
    pub const ERROR_INCOMPATIBLE_DRIVER: Self = Self(-9);
    ///[`ERROR_TOO_MANY_OBJECTS`] Too many objects of the type have
    ///already been created.
    pub const ERROR_TOO_MANY_OBJECTS: Self = Self(-10);
    ///[`ERROR_FORMAT_NOT_SUPPORTED`] A requested format is not supported
    ///on this device.
    pub const ERROR_FORMAT_NOT_SUPPORTED: Self = Self(-11);
    ///[`ERROR_FRAGMENTED_POOL`] A pool allocation has failed due to
    ///fragmentation of the pool’s memory.
    ///This **must** only be returned if no attempt to allocate host or device
    ///memory was made to accommodate the new allocation.
    ///This **should** be returned in preference to
    ///[`ERROR_OUT_OF_POOL_MEMORY`], but only if the implementation is
    ///certain that the pool allocation failure was due to fragmentation.
    pub const ERROR_FRAGMENTED_POOL: Self = Self(-12);
    ///[`ERROR_UNKNOWN`] An unknown error has occurred; either the
    ///application has provided invalid input, or an implementation failure has
    ///occurred.
    pub const ERROR_UNKNOWN: Self = Self(-13);
    ///[`ERROR_OUT_OF_POOL_MEMORY`] A pool memory allocation has failed.
    ///This **must** only be returned if no attempt to allocate host or device
    ///memory was made to accommodate the new allocation.
    ///If the failure was definitely due to fragmentation of the pool,
    ///[`ERROR_FRAGMENTED_POOL`]**should** be returned instead.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const ERROR_OUT_OF_POOL_MEMORY: Self = Self(-1000069000);
    ///[`ERROR_INVALID_EXTERNAL_HANDLE`] An external handle is not a valid
    ///handle of the specified type.
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const ERROR_INVALID_EXTERNAL_HANDLE: Self = Self(-1000072003);
    ///[`ERROR_FRAGMENTATION`] A descriptor pool creation has failed due
    ///to fragmentation.
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const ERROR_FRAGMENTATION: Self = Self(-1000161000);
    ///[`ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS`] A buffer creation
    ///or memory allocation
    ///failed because the requested address is not available.
    ///A shader group handle assignment failed because the requested shader
    ///group handle information is no longer valid.
    ///
    ///Provided by [`crate::vulkan1_2`]
    pub const ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: Self = Self(-1000257000);
    ///[`PIPELINE_COMPILE_REQUIRED`] A requested pipeline creation would
    ///have required compilation, but the application requested compilation to
    ///not be performed.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const PIPELINE_COMPILE_REQUIRED: Self = Self(1000297000);
    ///[`ERROR_SURFACE_LOST_KHR`] A surface is no longer available.
    ///
    ///Provided by [`crate::extensions::khr_surface`]
    pub const ERROR_SURFACE_LOST_KHR: Self = Self(-1000000000);
    ///[`ERROR_NATIVE_WINDOW_IN_USE_KHR`] The requested window is already
    ///in use by Vulkan or another API in a manner which prevents it from being
    ///used again.
    ///
    ///Provided by [`crate::extensions::khr_surface`]
    pub const ERROR_NATIVE_WINDOW_IN_USE_KHR: Self = Self(-1000000001);
    ///[`SUBOPTIMAL_KHR`] A swapchain no longer matches the surface
    ///properties exactly, but **can** still be used to present to the surface
    ///successfully.
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    pub const SUBOPTIMAL_KHR: Self = Self(1000001003);
    ///[`ERROR_OUT_OF_DATE_KHR`] A surface has changed in such a way that
    ///it is no longer compatible with the swapchain, and further presentation
    ///requests using the swapchain will fail.
    ///Applications **must** query the new surface properties and recreate their
    ///swapchain if they wish to continue presenting to the surface.
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    pub const ERROR_OUT_OF_DATE_KHR: Self = Self(-1000001004);
    ///[`ERROR_INCOMPATIBLE_DISPLAY_KHR`] The display used by a swapchain
    ///does not use the same presentable image layout, or is incompatible in a
    ///way that prevents sharing an image.
    ///
    ///Provided by [`crate::extensions::khr_display_swapchain`]
    pub const ERROR_INCOMPATIBLE_DISPLAY_KHR: Self = Self(-1000003001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    pub const ERROR_VALIDATION_FAILED_EXT: Self = Self(-1000011001);
    ///[`ERROR_INVALID_SHADER_NV`] One or more shaders failed to compile
    ///or link.
    ///More details are reported back to the application via
    ///`[`VK_EXT_debug_report`]` if enabled.
    ///
    ///Provided by [`crate::extensions::nv_glsl_shader`]
    pub const ERROR_INVALID_SHADER_NV: Self = Self(-1000012000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_image_drm_format_modifier`]
    pub const ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: Self = Self(-1000158000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_global_priority`]
    pub const ERROR_NOT_PERMITTED_KHR: Self = Self(-1000174001);
    ///[`ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`] An operation on a
    ///swapchain created with
    ///`VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT` failed as it
    ///did not have exlusive full-screen access.
    ///This **may** occur due to implementation-dependent reasons, outside of the
    ///application’s control.
    ///
    ///Provided by [`crate::extensions::ext_full_screen_exclusive`]
    pub const ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: Self = Self(-1000255000);
    ///[`THREAD_IDLE_KHR`] A deferred operation is not complete but there
    ///is currently no work for this thread to do at the time of this call.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    pub const THREAD_IDLE_KHR: Self = Self(1000268000);
    ///[`THREAD_DONE_KHR`] A deferred operation is not complete but there
    ///is no work remaining to assign to additional threads.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    pub const THREAD_DONE_KHR: Self = Self(1000268001);
    ///[`OPERATION_DEFERRED_KHR`] A deferred operation was requested and
    ///at least some of the work was deferred.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    pub const OPERATION_DEFERRED_KHR: Self = Self(1000268002);
    ///[`OPERATION_NOT_DEFERRED_KHR`] A deferred operation was requested
    ///and no operations were deferred.
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    pub const OPERATION_NOT_DEFERRED_KHR: Self = Self(1000268003);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_maintenance_1`]
    pub const ERROR_OUT_OF_POOL_MEMORY_KHR: Self = Self::ERROR_OUT_OF_POOL_MEMORY;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_external_memory`]
    pub const ERROR_INVALID_EXTERNAL_HANDLE_KHR: Self = Self::ERROR_INVALID_EXTERNAL_HANDLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_descriptor_indexing`]
    pub const ERROR_FRAGMENTATION_EXT: Self = Self::ERROR_FRAGMENTATION;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_global_priority`]
    pub const ERROR_NOT_PERMITTED_EXT: Self = Self::ERROR_NOT_PERMITTED_KHR;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_buffer_device_address`]
    pub const ERROR_INVALID_DEVICE_ADDRESS_EXT: Self = Self::ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_buffer_device_address`]
    pub const ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: Self = Self::ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pipeline_creation_cache_control`]
    pub const PIPELINE_COMPILE_REQUIRED_EXT: Self = Self::PIPELINE_COMPILE_REQUIRED;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_pipeline_creation_cache_control`]
    pub const ERROR_PIPELINE_COMPILE_REQUIRED_EXT: Self = Self::PIPELINE_COMPILE_REQUIRED;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkDynamicState](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDynamicState.html) - Indicate which dynamic state is taken from dynamic state commands
///# C Specifications
///The source of different pieces of dynamic state is specified by the
///[`PipelineDynamicStateCreateInfo::p_dynamic_states`] property of the
///currently active pipeline, each of whose elements **must** be one of the
///values:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkDynamicState {
///    VK_DYNAMIC_STATE_VIEWPORT = 0,
///    VK_DYNAMIC_STATE_SCISSOR = 1,
///    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
///    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
///    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
///    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
///    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
///    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
///    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
///  // Provided by VK_VERSION_1_3
///    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
///  // Provided by VK_NV_clip_space_w_scaling
///    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
///  // Provided by VK_EXT_discard_rectangles
///    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
///  // Provided by VK_EXT_sample_locations
///    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
///  // Provided by VK_KHR_ray_tracing_pipeline
///    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
///  // Provided by VK_NV_shading_rate_image
///    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
///  // Provided by VK_NV_shading_rate_image
///    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
///  // Provided by VK_NV_scissor_exclusive
///    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
///  // Provided by VK_KHR_fragment_shading_rate
///    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
///  // Provided by VK_EXT_line_rasterization
///    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
///  // Provided by VK_EXT_vertex_input_dynamic_state
///    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
///  // Provided by VK_EXT_color_write_enable
///    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT =
/// VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state
///    VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
///  // Provided by VK_EXT_extended_dynamic_state2
///    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
///} VkDynamicState;
///```
///# Description
/// - [`DYNAMIC_STATE_VIEWPORT`] specifies that the `pViewports`
///state in [`PipelineViewportStateCreateInfo`] will be ignored and
///**must** be set dynamically with [`CmdSetViewport`] before any drawing
///commands.
///The number of viewports used by a pipeline is still specified by the
///`viewportCount` member of [`PipelineViewportStateCreateInfo`].
/// - [`DYNAMIC_STATE_SCISSOR`] specifies that the `pScissors` state
///in [`PipelineViewportStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetScissor`] before any drawing commands.
///The number of scissor rectangles used by a pipeline is still specified
///by the `scissorCount` member of
///[`PipelineViewportStateCreateInfo`].
/// - [`DYNAMIC_STATE_LINE_WIDTH`] specifies that the `lineWidth`
///state in [`PipelineRasterizationStateCreateInfo`] will be ignored
///and **must** be set dynamically with [`CmdSetLineWidth`] before any
///drawing commands that generate line primitives for the rasterizer.
/// - [`DYNAMIC_STATE_DEPTH_BIAS`] specifies that the
///`depthBiasConstantFactor`, `depthBiasClamp` and
///`depthBiasSlopeFactor` states in
///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
///be set dynamically with [`CmdSetDepthBias`] before any draws are
///performed with `depthBiasEnable` in
///[`PipelineRasterizationStateCreateInfo`] set to [`TRUE`].
/// - [`DYNAMIC_STATE_BLEND_CONSTANTS`] specifies that the
///`blendConstants` state in [`PipelineColorBlendStateCreateInfo`]
///will be ignored and **must** be set dynamically with
///[`CmdSetBlendConstants`] before any draws are performed with a
///pipeline state with [`PipelineColorBlendAttachmentState`] member
///`blendEnable` set to [`TRUE`] and any of the blend functions
///using a constant blend color.
/// - [`DYNAMIC_STATE_DEPTH_BOUNDS`] specifies that the
///`minDepthBounds` and `maxDepthBounds` states of
///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetDepthBounds`] before any draws are
///performed with a pipeline state with
///[`PipelineDepthStencilStateCreateInfo`] member
///`depthBoundsTestEnable` set to [`TRUE`].
/// - [`DYNAMIC_STATE_STENCIL_COMPARE_MASK`] specifies that the
///`compareMask` state in [`PipelineDepthStencilStateCreateInfo`]
///for both `front` and `back` will be ignored and **must** be set
///dynamically with [`CmdSetStencilCompareMask`] before any draws are
///performed with a pipeline state with
///[`PipelineDepthStencilStateCreateInfo`] member
///`stencilTestEnable` set to [`TRUE`]
/// - [`DYNAMIC_STATE_STENCIL_WRITE_MASK`] specifies that the
///`writeMask` state in [`PipelineDepthStencilStateCreateInfo`] for
///both `front` and `back` will be ignored and **must** be set
///dynamically with [`CmdSetStencilWriteMask`] before any draws are
///performed with a pipeline state with
///[`PipelineDepthStencilStateCreateInfo`] member
///`stencilTestEnable` set to [`TRUE`]
/// - [`DYNAMIC_STATE_STENCIL_REFERENCE`] specifies that the
///`reference` state in [`PipelineDepthStencilStateCreateInfo`] for
///both `front` and `back` will be ignored and **must** be set
///dynamically with [`CmdSetStencilReference`] before any draws are
///performed with a pipeline state with
///[`PipelineDepthStencilStateCreateInfo`] member
///`stencilTestEnable` set to [`TRUE`]
/// - [`DYNAMIC_STATE_VIEWPORT_W_SCALING_NV`] specifies that the
///`pViewportScalings` state in
///[`PipelineViewportWScalingStateCreateInfoNV`] will be ignored and
///**must** be set dynamically with [`CmdSetViewportWScalingNV`] before
///any draws are performed with a pipeline state with
///[`PipelineViewportWScalingStateCreateInfoNV`] member
///`viewportScalingEnable` set to [`TRUE`]
/// - [`DYNAMIC_STATE_DISCARD_RECTANGLE_EXT`] specifies that the
///`pDiscardRectangles` state in
///[`PipelineDiscardRectangleStateCreateInfoEXT`] will be ignored and
///**must** be set dynamically with [`CmdSetDiscardRectangleEXT`] before
///any draw or clear commands.
///The [`DiscardRectangleModeEXT`] and the number of active discard
///rectangles is still specified by the `discardRectangleMode` and
///`discardRectangleCount` members of
///[`PipelineDiscardRectangleStateCreateInfoEXT`].
/// - [`DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT`] specifies that the
///`sampleLocationsInfo` state in
///[`PipelineSampleLocationsStateCreateInfoEXT`] will be ignored and
///**must** be set dynamically with [`CmdSetSampleLocationsEXT`] before
///any draw or clear commands.
///Enabling custom sample locations is still indicated by the
///`sampleLocationsEnable` member of
///[`PipelineSampleLocationsStateCreateInfoEXT`].
/// - [`DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV`] specifies that the
///`pExclusiveScissors` state in
///[`PipelineViewportExclusiveScissorStateCreateInfoNV`] will be
///ignored and **must** be set dynamically with
///[`CmdSetExclusiveScissorNV`] before any drawing commands.
///The number of exclusive scissor rectangles used by a pipeline is still
///specified by the `exclusiveScissorCount` member of
///[`PipelineViewportExclusiveScissorStateCreateInfoNV`].
/// - [`DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV`] specifies that
///the `pShadingRatePalettes` state in
///[`PipelineViewportShadingRateImageStateCreateInfoNV`] will be
///ignored and **must** be set dynamically with
///[`CmdSetViewportShadingRatePaletteNV`] before any drawing commands.
/// - [`DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV`] specifies that
///the coarse sample order state in
///[`PipelineViewportCoarseSampleOrderStateCreateInfoNV`] will be
///ignored and **must** be set dynamically with
///[`CmdSetCoarseSampleOrderNV`] before any drawing commands.
/// - [`DYNAMIC_STATE_LINE_STIPPLE_EXT`] specifies that the
///`lineStippleFactor` and `lineStipplePattern` state in
///[`PipelineRasterizationLineStateCreateInfoEXT`] will be ignored and
///**must** be set dynamically with [`CmdSetLineStippleEXT`] before any
///draws are performed with a pipeline state with
///[`PipelineRasterizationLineStateCreateInfoEXT`] member
///`stippledLineEnable` set to [`TRUE`].
/// - [`DYNAMIC_STATE_CULL_MODE`] specifies that the `cullMode` state
///in [`PipelineRasterizationStateCreateInfo`] will be ignored and
///**must** be set dynamically with [`CmdSetCullMode`] before any drawing
///commands.
/// - [`DYNAMIC_STATE_FRONT_FACE`] specifies that the `frontFace`
///state in [`PipelineRasterizationStateCreateInfo`] will be ignored
///and **must** be set dynamically with [`CmdSetFrontFace`] before any
///drawing commands.
/// - [`DYNAMIC_STATE_PRIMITIVE_TOPOLOGY`] specifies that the
///`topology` state in [`PipelineInputAssemblyStateCreateInfo`]
///only specifies the [topology class](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-primitive-topology-class),
///and the specific topology order and adjacency **must** be set dynamically
///with [`CmdSetPrimitiveTopology`] before any drawing commands.
/// - [`DYNAMIC_STATE_VIEWPORT_WITH_COUNT`] specifies that the
///`viewportCount` and `pViewports` state in
///[`PipelineViewportStateCreateInfo`] will be ignored and **must** be set
///dynamically with [`CmdSetViewportWithCount`] before any draw call.
/// - [`DYNAMIC_STATE_SCISSOR_WITH_COUNT`] specifies that the
///`scissorCount` and `pScissors` state in
///[`PipelineViewportStateCreateInfo`] will be ignored and **must** be set
///dynamically with [`CmdSetScissorWithCount`] before any draw call.
/// - [`DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE`] specifies that the
///`stride` state in [`VertexInputBindingDescription`] will be
///ignored and **must** be set dynamically with [`CmdBindVertexBuffers2`]
///before any draw call.
/// - [`DYNAMIC_STATE_DEPTH_TEST_ENABLE`] specifies that the
///`depthTestEnable` state in
///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetDepthTestEnable`] before any draw call.
/// - [`DYNAMIC_STATE_DEPTH_WRITE_ENABLE`] specifies that the
///`depthWriteEnable` state in
///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetDepthWriteEnable`] before any draw
///call.
/// - [`DYNAMIC_STATE_DEPTH_COMPARE_OP`] specifies that the
///`depthCompareOp` state in
///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetDepthCompareOp`] before any draw call.
/// - [`DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE`] specifies that the
///`depthBoundsTestEnable` state in
///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetDepthBoundsTestEnable`] before any draw
///call.
/// - [`DYNAMIC_STATE_STENCIL_TEST_ENABLE`] specifies that the
///`stencilTestEnable` state in
///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetStencilTestEnable`] before any draw
///call.
/// - [`DYNAMIC_STATE_STENCIL_OP`] specifies that the `failOp`,
///`passOp`, `depthFailOp`, and `compareOp` states in
///[`PipelineDepthStencilStateCreateInfo`] for both `front` and
///`back` will be ignored and **must** be set dynamically with
///[`CmdSetStencilOp`] before any draws are performed with a pipeline
///state with [`PipelineDepthStencilStateCreateInfo`] member
///`stencilTestEnable` set to [`TRUE`]
/// - [`DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT`] specifies that the
///`patchControlPoints` state in
///[`PipelineTessellationStateCreateInfo`] will be ignored and **must** be
///set dynamically with [`CmdSetPatchControlPointsEXT`] before any
///drawing commands.
/// - [`DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE`] specifies that the
///`rasterizerDiscardEnable` state in
///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
///be set dynamically with [`CmdSetRasterizerDiscardEnable`] before any
///drawing commands.
/// - [`DYNAMIC_STATE_DEPTH_BIAS_ENABLE`] specifies that the
///`depthBiasEnable` state in
///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
///be set dynamically with [`CmdSetDepthBiasEnable`] before any drawing
///commands.
/// - [`DYNAMIC_STATE_LOGIC_OP_EXT`] specifies that the `logicOp`
///state in [`PipelineColorBlendStateCreateInfo`] will be ignored and
///**must** be set dynamically with [`CmdSetLogicOpEXT`] before any
///drawing commands.
/// - [`DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE`] specifies that the
///`primitiveRestartEnable` state in
///[`PipelineInputAssemblyStateCreateInfo`] will be ignored and **must**
///be set dynamically with [`CmdSetPrimitiveRestartEnable`] before any
///drawing commands.
/// - [`DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR`] specifies that state in
///[`PipelineFragmentShadingRateStateCreateInfoKHR`]
///and [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
///will be ignored and **must** be set dynamically with
///[`CmdSetFragmentShadingRateKHR`]
///or [`CmdSetFragmentShadingRateEnumNV`]
///before any drawing commands.
/// - [`DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR`] specifies
///that the default stack size computation for the pipeline will be ignored
///and **must** be set dynamically with
///[`CmdSetRayTracingPipelineStackSizeKHR`] before any ray tracing
///calls are performed.
/// - [`DYNAMIC_STATE_VERTEX_INPUT_EXT`] specifies that the
///`pVertexInputState` state will be ignored and **must** be set
///dynamically with [`CmdSetVertexInputEXT`] before any drawing
///commands
/// - [`DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT`] specifies that the
///`pColorWriteEnables` state in
///[`PipelineColorWriteCreateInfoEXT`] will be ignored and **must** be set
///dynamically with [`CmdSetColorWriteEnableEXT`] before any draw call.
///# Related
/// - [`crate::vulkan1_0`]
/// - [`PipelineDynamicStateCreateInfo`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkDynamicState")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct DynamicState(i32);
impl const Default for DynamicState {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for DynamicState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("DynamicState")
            .field(match *self {
                Self::DYNAMIC_STATE_VIEWPORT => &"DYNAMIC_STATE_VIEWPORT",
                Self::DYNAMIC_STATE_SCISSOR => &"DYNAMIC_STATE_SCISSOR",
                Self::DYNAMIC_STATE_LINE_WIDTH => &"DYNAMIC_STATE_LINE_WIDTH",
                Self::DYNAMIC_STATE_DEPTH_BIAS => &"DYNAMIC_STATE_DEPTH_BIAS",
                Self::DYNAMIC_STATE_BLEND_CONSTANTS => &"DYNAMIC_STATE_BLEND_CONSTANTS",
                Self::DYNAMIC_STATE_DEPTH_BOUNDS => &"DYNAMIC_STATE_DEPTH_BOUNDS",
                Self::DYNAMIC_STATE_STENCIL_COMPARE_MASK => &"DYNAMIC_STATE_STENCIL_COMPARE_MASK",
                Self::DYNAMIC_STATE_STENCIL_WRITE_MASK => &"DYNAMIC_STATE_STENCIL_WRITE_MASK",
                Self::DYNAMIC_STATE_STENCIL_REFERENCE => &"DYNAMIC_STATE_STENCIL_REFERENCE",
                Self::DYNAMIC_STATE_CULL_MODE => &"DYNAMIC_STATE_CULL_MODE",
                Self::DYNAMIC_STATE_FRONT_FACE => &"DYNAMIC_STATE_FRONT_FACE",
                Self::DYNAMIC_STATE_PRIMITIVE_TOPOLOGY => &"DYNAMIC_STATE_PRIMITIVE_TOPOLOGY",
                Self::DYNAMIC_STATE_VIEWPORT_WITH_COUNT => &"DYNAMIC_STATE_VIEWPORT_WITH_COUNT",
                Self::DYNAMIC_STATE_SCISSOR_WITH_COUNT => &"DYNAMIC_STATE_SCISSOR_WITH_COUNT",
                Self::DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE => &"DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE",
                Self::DYNAMIC_STATE_DEPTH_TEST_ENABLE => &"DYNAMIC_STATE_DEPTH_TEST_ENABLE",
                Self::DYNAMIC_STATE_DEPTH_WRITE_ENABLE => &"DYNAMIC_STATE_DEPTH_WRITE_ENABLE",
                Self::DYNAMIC_STATE_DEPTH_COMPARE_OP => &"DYNAMIC_STATE_DEPTH_COMPARE_OP",
                Self::DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE => &"DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE",
                Self::DYNAMIC_STATE_STENCIL_TEST_ENABLE => &"DYNAMIC_STATE_STENCIL_TEST_ENABLE",
                Self::DYNAMIC_STATE_STENCIL_OP => &"DYNAMIC_STATE_STENCIL_OP",
                Self::DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE => &"DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE",
                Self::DYNAMIC_STATE_DEPTH_BIAS_ENABLE => &"DYNAMIC_STATE_DEPTH_BIAS_ENABLE",
                Self::DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE => &"DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE",
                Self::DYNAMIC_STATE_VIEWPORT_W_SCALING_NV => &"DYNAMIC_STATE_VIEWPORT_W_SCALING_NV",
                Self::DYNAMIC_STATE_DISCARD_RECTANGLE_EXT => &"DYNAMIC_STATE_DISCARD_RECTANGLE_EXT",
                Self::DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT => &"DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT",
                Self::DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR => {
                    &"DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR"
                },
                Self::DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV => {
                    &"DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV"
                },
                Self::DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV => &"DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV",
                Self::DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV => &"DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV",
                Self::DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR => &"DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR",
                Self::DYNAMIC_STATE_LINE_STIPPLE_EXT => &"DYNAMIC_STATE_LINE_STIPPLE_EXT",
                Self::DYNAMIC_STATE_VERTEX_INPUT_EXT => &"DYNAMIC_STATE_VERTEX_INPUT_EXT",
                Self::DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT => &"DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT",
                Self::DYNAMIC_STATE_LOGIC_OP_EXT => &"DYNAMIC_STATE_LOGIC_OP_EXT",
                Self::DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT => &"DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT",
                other => unreachable!("invalid value for `DynamicState`: {:?}", other),
            })
            .finish()
    }
}
impl DynamicState {
    ///[`DYNAMIC_STATE_VIEWPORT`] specifies that the `pViewports`
    ///state in [`PipelineViewportStateCreateInfo`] will be ignored and
    ///**must** be set dynamically with [`CmdSetViewport`] before any drawing
    ///commands.
    ///The number of viewports used by a pipeline is still specified by the
    ///`viewportCount` member of [`PipelineViewportStateCreateInfo`].
    pub const DYNAMIC_STATE_VIEWPORT: Self = Self(0);
    ///[`DYNAMIC_STATE_SCISSOR`] specifies that the `pScissors` state
    ///in [`PipelineViewportStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetScissor`] before any drawing commands.
    ///The number of scissor rectangles used by a pipeline is still specified
    ///by the `scissorCount` member of
    ///[`PipelineViewportStateCreateInfo`].
    pub const DYNAMIC_STATE_SCISSOR: Self = Self(1);
    ///[`DYNAMIC_STATE_LINE_WIDTH`] specifies that the `lineWidth`
    ///state in [`PipelineRasterizationStateCreateInfo`] will be ignored
    ///and **must** be set dynamically with [`CmdSetLineWidth`] before any
    ///drawing commands that generate line primitives for the rasterizer.
    pub const DYNAMIC_STATE_LINE_WIDTH: Self = Self(2);
    ///[`DYNAMIC_STATE_DEPTH_BIAS`] specifies that the
    ///`depthBiasConstantFactor`, `depthBiasClamp` and
    ///`depthBiasSlopeFactor` states in
    ///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetDepthBias`] before any draws are
    ///performed with `depthBiasEnable` in
    ///[`PipelineRasterizationStateCreateInfo`] set to [`TRUE`].
    pub const DYNAMIC_STATE_DEPTH_BIAS: Self = Self(3);
    ///[`DYNAMIC_STATE_BLEND_CONSTANTS`] specifies that the
    ///`blendConstants` state in [`PipelineColorBlendStateCreateInfo`]
    ///will be ignored and **must** be set dynamically with
    ///[`CmdSetBlendConstants`] before any draws are performed with a
    ///pipeline state with [`PipelineColorBlendAttachmentState`] member
    ///`blendEnable` set to [`TRUE`] and any of the blend functions
    ///using a constant blend color.
    pub const DYNAMIC_STATE_BLEND_CONSTANTS: Self = Self(4);
    ///[`DYNAMIC_STATE_DEPTH_BOUNDS`] specifies that the
    ///`minDepthBounds` and `maxDepthBounds` states of
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthBounds`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`depthBoundsTestEnable` set to [`TRUE`].
    pub const DYNAMIC_STATE_DEPTH_BOUNDS: Self = Self(5);
    ///[`DYNAMIC_STATE_STENCIL_COMPARE_MASK`] specifies that the
    ///`compareMask` state in [`PipelineDepthStencilStateCreateInfo`]
    ///for both `front` and `back` will be ignored and **must** be set
    ///dynamically with [`CmdSetStencilCompareMask`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    pub const DYNAMIC_STATE_STENCIL_COMPARE_MASK: Self = Self(6);
    ///[`DYNAMIC_STATE_STENCIL_WRITE_MASK`] specifies that the
    ///`writeMask` state in [`PipelineDepthStencilStateCreateInfo`] for
    ///both `front` and `back` will be ignored and **must** be set
    ///dynamically with [`CmdSetStencilWriteMask`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    pub const DYNAMIC_STATE_STENCIL_WRITE_MASK: Self = Self(7);
    ///[`DYNAMIC_STATE_STENCIL_REFERENCE`] specifies that the
    ///`reference` state in [`PipelineDepthStencilStateCreateInfo`] for
    ///both `front` and `back` will be ignored and **must** be set
    ///dynamically with [`CmdSetStencilReference`] before any draws are
    ///performed with a pipeline state with
    ///[`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    pub const DYNAMIC_STATE_STENCIL_REFERENCE: Self = Self(8);
    ///[`DYNAMIC_STATE_CULL_MODE`] specifies that the `cullMode` state
    ///in [`PipelineRasterizationStateCreateInfo`] will be ignored and
    ///**must** be set dynamically with [`CmdSetCullMode`] before any drawing
    ///commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_CULL_MODE: Self = Self(1000267000);
    ///[`DYNAMIC_STATE_FRONT_FACE`] specifies that the `frontFace`
    ///state in [`PipelineRasterizationStateCreateInfo`] will be ignored
    ///and **must** be set dynamically with [`CmdSetFrontFace`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_FRONT_FACE: Self = Self(1000267001);
    ///[`DYNAMIC_STATE_PRIMITIVE_TOPOLOGY`] specifies that the
    ///`topology` state in [`PipelineInputAssemblyStateCreateInfo`]
    ///only specifies the [topology class](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-primitive-topology-class),
    ///and the specific topology order and adjacency **must** be set dynamically
    ///with [`CmdSetPrimitiveTopology`] before any drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: Self = Self(1000267002);
    ///[`DYNAMIC_STATE_VIEWPORT_WITH_COUNT`] specifies that the
    ///`viewportCount` and `pViewports` state in
    ///[`PipelineViewportStateCreateInfo`] will be ignored and **must** be set
    ///dynamically with [`CmdSetViewportWithCount`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_VIEWPORT_WITH_COUNT: Self = Self(1000267003);
    ///[`DYNAMIC_STATE_SCISSOR_WITH_COUNT`] specifies that the
    ///`scissorCount` and `pScissors` state in
    ///[`PipelineViewportStateCreateInfo`] will be ignored and **must** be set
    ///dynamically with [`CmdSetScissorWithCount`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_SCISSOR_WITH_COUNT: Self = Self(1000267004);
    ///[`DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE`] specifies that the
    ///`stride` state in [`VertexInputBindingDescription`] will be
    ///ignored and **must** be set dynamically with [`CmdBindVertexBuffers2`]
    ///before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: Self = Self(1000267005);
    ///[`DYNAMIC_STATE_DEPTH_TEST_ENABLE`] specifies that the
    ///`depthTestEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthTestEnable`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_DEPTH_TEST_ENABLE: Self = Self(1000267006);
    ///[`DYNAMIC_STATE_DEPTH_WRITE_ENABLE`] specifies that the
    ///`depthWriteEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthWriteEnable`] before any draw
    ///call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_DEPTH_WRITE_ENABLE: Self = Self(1000267007);
    ///[`DYNAMIC_STATE_DEPTH_COMPARE_OP`] specifies that the
    ///`depthCompareOp` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthCompareOp`] before any draw call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_DEPTH_COMPARE_OP: Self = Self(1000267008);
    ///[`DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE`] specifies that the
    ///`depthBoundsTestEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetDepthBoundsTestEnable`] before any draw
    ///call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: Self = Self(1000267009);
    ///[`DYNAMIC_STATE_STENCIL_TEST_ENABLE`] specifies that the
    ///`stencilTestEnable` state in
    ///[`PipelineDepthStencilStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetStencilTestEnable`] before any draw
    ///call.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_STENCIL_TEST_ENABLE: Self = Self(1000267010);
    ///[`DYNAMIC_STATE_STENCIL_OP`] specifies that the `failOp`,
    ///`passOp`, `depthFailOp`, and `compareOp` states in
    ///[`PipelineDepthStencilStateCreateInfo`] for both `front` and
    ///`back` will be ignored and **must** be set dynamically with
    ///[`CmdSetStencilOp`] before any draws are performed with a pipeline
    ///state with [`PipelineDepthStencilStateCreateInfo`] member
    ///`stencilTestEnable` set to [`TRUE`]
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_STENCIL_OP: Self = Self(1000267011);
    ///[`DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE`] specifies that the
    ///`rasterizerDiscardEnable` state in
    ///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetRasterizerDiscardEnable`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: Self = Self(1000377001);
    ///[`DYNAMIC_STATE_DEPTH_BIAS_ENABLE`] specifies that the
    ///`depthBiasEnable` state in
    ///[`PipelineRasterizationStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetDepthBiasEnable`] before any drawing
    ///commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_DEPTH_BIAS_ENABLE: Self = Self(1000377002);
    ///[`DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE`] specifies that the
    ///`primitiveRestartEnable` state in
    ///[`PipelineInputAssemblyStateCreateInfo`] will be ignored and **must**
    ///be set dynamically with [`CmdSetPrimitiveRestartEnable`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: Self = Self(1000377004);
    ///[`DYNAMIC_STATE_VIEWPORT_W_SCALING_NV`] specifies that the
    ///`pViewportScalings` state in
    ///[`PipelineViewportWScalingStateCreateInfoNV`] will be ignored and
    ///**must** be set dynamically with [`CmdSetViewportWScalingNV`] before
    ///any draws are performed with a pipeline state with
    ///[`PipelineViewportWScalingStateCreateInfoNV`] member
    ///`viewportScalingEnable` set to [`TRUE`]
    ///
    ///Provided by [`crate::extensions::nv_clip_space_w_scaling`]
    pub const DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: Self = Self(1000087000);
    ///[`DYNAMIC_STATE_DISCARD_RECTANGLE_EXT`] specifies that the
    ///`pDiscardRectangles` state in
    ///[`PipelineDiscardRectangleStateCreateInfoEXT`] will be ignored and
    ///**must** be set dynamically with [`CmdSetDiscardRectangleEXT`] before
    ///any draw or clear commands.
    ///The [`DiscardRectangleModeEXT`] and the number of active discard
    ///rectangles is still specified by the `discardRectangleMode` and
    ///`discardRectangleCount` members of
    ///[`PipelineDiscardRectangleStateCreateInfoEXT`].
    ///
    ///Provided by [`crate::extensions::ext_discard_rectangles`]
    pub const DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: Self = Self(1000099000);
    ///[`DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT`] specifies that the
    ///`sampleLocationsInfo` state in
    ///[`PipelineSampleLocationsStateCreateInfoEXT`] will be ignored and
    ///**must** be set dynamically with [`CmdSetSampleLocationsEXT`] before
    ///any draw or clear commands.
    ///Enabling custom sample locations is still indicated by the
    ///`sampleLocationsEnable` member of
    ///[`PipelineSampleLocationsStateCreateInfoEXT`].
    ///
    ///Provided by [`crate::extensions::ext_sample_locations`]
    pub const DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: Self = Self(1000143000);
    ///[`DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR`] specifies
    ///that the default stack size computation for the pipeline will be ignored
    ///and **must** be set dynamically with
    ///[`CmdSetRayTracingPipelineStackSizeKHR`] before any ray tracing
    ///calls are performed.
    ///
    ///Provided by [`crate::extensions::khr_ray_tracing_pipeline`]
    pub const DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: Self = Self(1000347000);
    ///[`DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV`] specifies that
    ///the `pShadingRatePalettes` state in
    ///[`PipelineViewportShadingRateImageStateCreateInfoNV`] will be
    ///ignored and **must** be set dynamically with
    ///[`CmdSetViewportShadingRatePaletteNV`] before any drawing commands.
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: Self = Self(1000164004);
    ///[`DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV`] specifies that
    ///the coarse sample order state in
    ///[`PipelineViewportCoarseSampleOrderStateCreateInfoNV`] will be
    ///ignored and **must** be set dynamically with
    ///[`CmdSetCoarseSampleOrderNV`] before any drawing commands.
    ///
    ///Provided by [`crate::extensions::nv_shading_rate_image`]
    pub const DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: Self = Self(1000164006);
    ///[`DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV`] specifies that the
    ///`pExclusiveScissors` state in
    ///[`PipelineViewportExclusiveScissorStateCreateInfoNV`] will be
    ///ignored and **must** be set dynamically with
    ///[`CmdSetExclusiveScissorNV`] before any drawing commands.
    ///The number of exclusive scissor rectangles used by a pipeline is still
    ///specified by the `exclusiveScissorCount` member of
    ///[`PipelineViewportExclusiveScissorStateCreateInfoNV`].
    ///
    ///Provided by [`crate::extensions::nv_scissor_exclusive`]
    pub const DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: Self = Self(1000205001);
    ///[`DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR`] specifies that state in
    ///[`PipelineFragmentShadingRateStateCreateInfoKHR`]
    ///and [`PipelineFragmentShadingRateEnumStateCreateInfoNV`]
    ///will be ignored and **must** be set dynamically with
    ///[`CmdSetFragmentShadingRateKHR`]
    ///or [`CmdSetFragmentShadingRateEnumNV`]
    ///before any drawing commands.
    ///
    ///Provided by [`crate::extensions::khr_fragment_shading_rate`]
    pub const DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: Self = Self(1000226000);
    ///[`DYNAMIC_STATE_LINE_STIPPLE_EXT`] specifies that the
    ///`lineStippleFactor` and `lineStipplePattern` state in
    ///[`PipelineRasterizationLineStateCreateInfoEXT`] will be ignored and
    ///**must** be set dynamically with [`CmdSetLineStippleEXT`] before any
    ///draws are performed with a pipeline state with
    ///[`PipelineRasterizationLineStateCreateInfoEXT`] member
    ///`stippledLineEnable` set to [`TRUE`].
    ///
    ///Provided by [`crate::extensions::ext_line_rasterization`]
    pub const DYNAMIC_STATE_LINE_STIPPLE_EXT: Self = Self(1000259000);
    ///[`DYNAMIC_STATE_VERTEX_INPUT_EXT`] specifies that the
    ///`pVertexInputState` state will be ignored and **must** be set
    ///dynamically with [`CmdSetVertexInputEXT`] before any drawing
    ///commands
    ///
    ///Provided by [`crate::extensions::ext_vertex_input_dynamic_state`]
    pub const DYNAMIC_STATE_VERTEX_INPUT_EXT: Self = Self(1000352000);
    ///[`DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT`] specifies that the
    ///`patchControlPoints` state in
    ///[`PipelineTessellationStateCreateInfo`] will be ignored and **must** be
    ///set dynamically with [`CmdSetPatchControlPointsEXT`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    pub const DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: Self = Self(1000377000);
    ///[`DYNAMIC_STATE_LOGIC_OP_EXT`] specifies that the `logicOp`
    ///state in [`PipelineColorBlendStateCreateInfo`] will be ignored and
    ///**must** be set dynamically with [`CmdSetLogicOpEXT`] before any
    ///drawing commands.
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    pub const DYNAMIC_STATE_LOGIC_OP_EXT: Self = Self(1000377003);
    ///[`DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT`] specifies that the
    ///`pColorWriteEnables` state in
    ///[`PipelineColorWriteCreateInfoEXT`] will be ignored and **must** be set
    ///dynamically with [`CmdSetColorWriteEnableEXT`] before any draw call.
    ///
    ///Provided by [`crate::extensions::ext_color_write_enable`]
    pub const DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: Self = Self(1000381000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_CULL_MODE_EXT: Self = Self::DYNAMIC_STATE_CULL_MODE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_FRONT_FACE_EXT: Self = Self::DYNAMIC_STATE_FRONT_FACE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: Self = Self::DYNAMIC_STATE_PRIMITIVE_TOPOLOGY;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: Self = Self::DYNAMIC_STATE_VIEWPORT_WITH_COUNT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: Self = Self::DYNAMIC_STATE_SCISSOR_WITH_COUNT;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: Self = Self::DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: Self = Self::DYNAMIC_STATE_DEPTH_TEST_ENABLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: Self = Self::DYNAMIC_STATE_DEPTH_WRITE_ENABLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: Self = Self::DYNAMIC_STATE_DEPTH_COMPARE_OP;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: Self = Self::DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: Self = Self::DYNAMIC_STATE_STENCIL_TEST_ENABLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state`]
    pub const DYNAMIC_STATE_STENCIL_OP_EXT: Self = Self::DYNAMIC_STATE_STENCIL_OP;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    pub const DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: Self = Self::DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    pub const DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: Self = Self::DYNAMIC_STATE_DEPTH_BIAS_ENABLE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_extended_dynamic_state_2`]
    pub const DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: Self = Self::DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkObjectType](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkObjectType.html) - Specify an enumeration to track object handle types
///# C Specifications
///The [`ObjectType`] enumeration defines values, each of which corresponds
///to a specific Vulkan handle type.
///These values **can** be used to associate debug information with a particular
///type of object through one or more extensions.
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkObjectType {
///    VK_OBJECT_TYPE_UNKNOWN = 0,
///    VK_OBJECT_TYPE_INSTANCE = 1,
///    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
///    VK_OBJECT_TYPE_DEVICE = 3,
///    VK_OBJECT_TYPE_QUEUE = 4,
///    VK_OBJECT_TYPE_SEMAPHORE = 5,
///    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
///    VK_OBJECT_TYPE_FENCE = 7,
///    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
///    VK_OBJECT_TYPE_BUFFER = 9,
///    VK_OBJECT_TYPE_IMAGE = 10,
///    VK_OBJECT_TYPE_EVENT = 11,
///    VK_OBJECT_TYPE_QUERY_POOL = 12,
///    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
///    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
///    VK_OBJECT_TYPE_SHADER_MODULE = 15,
///    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
///    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
///    VK_OBJECT_TYPE_RENDER_PASS = 18,
///    VK_OBJECT_TYPE_PIPELINE = 19,
///    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
///    VK_OBJECT_TYPE_SAMPLER = 21,
///    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
///    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
///    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
///    VK_OBJECT_TYPE_COMMAND_POOL = 25,
///  // Provided by VK_VERSION_1_1
///    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
///  // Provided by VK_VERSION_1_1
///    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
///  // Provided by VK_VERSION_1_3
///    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
///  // Provided by VK_KHR_surface
///    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
///  // Provided by VK_KHR_swapchain
///    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
///  // Provided by VK_KHR_display
///    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
///  // Provided by VK_KHR_display
///    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
///  // Provided by VK_EXT_debug_report
///    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
///#endif
///#ifdef VK_ENABLE_BETA_EXTENSIONS
///  // Provided by VK_KHR_video_queue
///    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
///#endif
///  // Provided by VK_NVX_binary_import
///    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
///  // Provided by VK_NVX_binary_import
///    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
///  // Provided by VK_EXT_debug_utils
///    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
///  // Provided by VK_KHR_acceleration_structure
///    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
///  // Provided by VK_EXT_validation_cache
///    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
///  // Provided by VK_NV_ray_tracing
///    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
///  // Provided by VK_INTEL_performance_query
///    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
///  // Provided by VK_KHR_deferred_host_operations
///    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
///  // Provided by VK_NV_device_generated_commands
///    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
///  // Provided by VK_FUCHSIA_buffer_collection
///    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
///  // Provided by VK_KHR_descriptor_update_template
///    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
///  // Provided by VK_KHR_sampler_ycbcr_conversion
///    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
///  // Provided by VK_EXT_private_data
///    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
///} VkObjectType;
///```
///# Related
/// - [`crate::vulkan1_0`]
/// - [`DebugUtilsObjectNameInfoEXT`]
/// - [`DebugUtilsObjectTagInfoEXT`]
/// - [`DeviceMemoryReportCallbackDataEXT`]
/// - [`GetPrivateData`]
/// - [`GetPrivateDataEXT`]
/// - [`SetPrivateData`]
/// - [`SetPrivateDataEXT`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkObjectType")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct ObjectType(i32);
impl const Default for ObjectType {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for ObjectType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("ObjectType")
            .field(match *self {
                Self::OBJECT_TYPE_UNKNOWN => &"OBJECT_TYPE_UNKNOWN",
                Self::OBJECT_TYPE_INSTANCE => &"OBJECT_TYPE_INSTANCE",
                Self::OBJECT_TYPE_PHYSICAL_DEVICE => &"OBJECT_TYPE_PHYSICAL_DEVICE",
                Self::OBJECT_TYPE_DEVICE => &"OBJECT_TYPE_DEVICE",
                Self::OBJECT_TYPE_QUEUE => &"OBJECT_TYPE_QUEUE",
                Self::OBJECT_TYPE_SEMAPHORE => &"OBJECT_TYPE_SEMAPHORE",
                Self::OBJECT_TYPE_COMMAND_BUFFER => &"OBJECT_TYPE_COMMAND_BUFFER",
                Self::OBJECT_TYPE_FENCE => &"OBJECT_TYPE_FENCE",
                Self::OBJECT_TYPE_DEVICE_MEMORY => &"OBJECT_TYPE_DEVICE_MEMORY",
                Self::OBJECT_TYPE_BUFFER => &"OBJECT_TYPE_BUFFER",
                Self::OBJECT_TYPE_IMAGE => &"OBJECT_TYPE_IMAGE",
                Self::OBJECT_TYPE_EVENT => &"OBJECT_TYPE_EVENT",
                Self::OBJECT_TYPE_QUERY_POOL => &"OBJECT_TYPE_QUERY_POOL",
                Self::OBJECT_TYPE_BUFFER_VIEW => &"OBJECT_TYPE_BUFFER_VIEW",
                Self::OBJECT_TYPE_IMAGE_VIEW => &"OBJECT_TYPE_IMAGE_VIEW",
                Self::OBJECT_TYPE_SHADER_MODULE => &"OBJECT_TYPE_SHADER_MODULE",
                Self::OBJECT_TYPE_PIPELINE_CACHE => &"OBJECT_TYPE_PIPELINE_CACHE",
                Self::OBJECT_TYPE_PIPELINE_LAYOUT => &"OBJECT_TYPE_PIPELINE_LAYOUT",
                Self::OBJECT_TYPE_RENDER_PASS => &"OBJECT_TYPE_RENDER_PASS",
                Self::OBJECT_TYPE_PIPELINE => &"OBJECT_TYPE_PIPELINE",
                Self::OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT => &"OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT",
                Self::OBJECT_TYPE_SAMPLER => &"OBJECT_TYPE_SAMPLER",
                Self::OBJECT_TYPE_DESCRIPTOR_POOL => &"OBJECT_TYPE_DESCRIPTOR_POOL",
                Self::OBJECT_TYPE_DESCRIPTOR_SET => &"OBJECT_TYPE_DESCRIPTOR_SET",
                Self::OBJECT_TYPE_FRAMEBUFFER => &"OBJECT_TYPE_FRAMEBUFFER",
                Self::OBJECT_TYPE_COMMAND_POOL => &"OBJECT_TYPE_COMMAND_POOL",
                Self::OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION => &"OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION",
                Self::OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE => &"OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE",
                Self::OBJECT_TYPE_PRIVATE_DATA_SLOT => &"OBJECT_TYPE_PRIVATE_DATA_SLOT",
                Self::OBJECT_TYPE_SURFACE_KHR => &"OBJECT_TYPE_SURFACE_KHR",
                Self::OBJECT_TYPE_SWAPCHAIN_KHR => &"OBJECT_TYPE_SWAPCHAIN_KHR",
                Self::OBJECT_TYPE_DISPLAY_KHR => &"OBJECT_TYPE_DISPLAY_KHR",
                Self::OBJECT_TYPE_DISPLAY_MODE_KHR => &"OBJECT_TYPE_DISPLAY_MODE_KHR",
                Self::OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT => &"OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT",
                Self::OBJECT_TYPE_VIDEO_SESSION_KHR => &"OBJECT_TYPE_VIDEO_SESSION_KHR",
                Self::OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR => &"OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR",
                Self::OBJECT_TYPE_CU_MODULE_NVX => &"OBJECT_TYPE_CU_MODULE_NVX",
                Self::OBJECT_TYPE_CU_FUNCTION_NVX => &"OBJECT_TYPE_CU_FUNCTION_NVX",
                Self::OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT => &"OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT",
                Self::OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR => &"OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR",
                Self::OBJECT_TYPE_VALIDATION_CACHE_EXT => &"OBJECT_TYPE_VALIDATION_CACHE_EXT",
                Self::OBJECT_TYPE_ACCELERATION_STRUCTURE_NV => &"OBJECT_TYPE_ACCELERATION_STRUCTURE_NV",
                Self::OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL => &"OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL",
                Self::OBJECT_TYPE_DEFERRED_OPERATION_KHR => &"OBJECT_TYPE_DEFERRED_OPERATION_KHR",
                Self::OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV => &"OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV",
                Self::OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA => &"OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA",
                other => unreachable!("invalid value for `ObjectType`: {:?}", other),
            })
            .finish()
    }
}
impl ObjectType {
    ///No documentation found
    pub const OBJECT_TYPE_UNKNOWN: Self = Self(0);
    ///No documentation found
    pub const OBJECT_TYPE_INSTANCE: Self = Self(1);
    ///No documentation found
    pub const OBJECT_TYPE_PHYSICAL_DEVICE: Self = Self(2);
    ///No documentation found
    pub const OBJECT_TYPE_DEVICE: Self = Self(3);
    ///No documentation found
    pub const OBJECT_TYPE_QUEUE: Self = Self(4);
    ///No documentation found
    pub const OBJECT_TYPE_SEMAPHORE: Self = Self(5);
    ///No documentation found
    pub const OBJECT_TYPE_COMMAND_BUFFER: Self = Self(6);
    ///No documentation found
    pub const OBJECT_TYPE_FENCE: Self = Self(7);
    ///No documentation found
    pub const OBJECT_TYPE_DEVICE_MEMORY: Self = Self(8);
    ///No documentation found
    pub const OBJECT_TYPE_BUFFER: Self = Self(9);
    ///No documentation found
    pub const OBJECT_TYPE_IMAGE: Self = Self(10);
    ///No documentation found
    pub const OBJECT_TYPE_EVENT: Self = Self(11);
    ///No documentation found
    pub const OBJECT_TYPE_QUERY_POOL: Self = Self(12);
    ///No documentation found
    pub const OBJECT_TYPE_BUFFER_VIEW: Self = Self(13);
    ///No documentation found
    pub const OBJECT_TYPE_IMAGE_VIEW: Self = Self(14);
    ///No documentation found
    pub const OBJECT_TYPE_SHADER_MODULE: Self = Self(15);
    ///No documentation found
    pub const OBJECT_TYPE_PIPELINE_CACHE: Self = Self(16);
    ///No documentation found
    pub const OBJECT_TYPE_PIPELINE_LAYOUT: Self = Self(17);
    ///No documentation found
    pub const OBJECT_TYPE_RENDER_PASS: Self = Self(18);
    ///No documentation found
    pub const OBJECT_TYPE_PIPELINE: Self = Self(19);
    ///No documentation found
    pub const OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: Self = Self(20);
    ///No documentation found
    pub const OBJECT_TYPE_SAMPLER: Self = Self(21);
    ///No documentation found
    pub const OBJECT_TYPE_DESCRIPTOR_POOL: Self = Self(22);
    ///No documentation found
    pub const OBJECT_TYPE_DESCRIPTOR_SET: Self = Self(23);
    ///No documentation found
    pub const OBJECT_TYPE_FRAMEBUFFER: Self = Self(24);
    ///No documentation found
    pub const OBJECT_TYPE_COMMAND_POOL: Self = Self(25);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: Self = Self(1000156000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_1`]
    pub const OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: Self = Self(1000085000);
    ///No documentation found
    ///
    ///Provided by [`crate::vulkan1_3`]
    pub const OBJECT_TYPE_PRIVATE_DATA_SLOT: Self = Self(1000295000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_surface`]
    pub const OBJECT_TYPE_SURFACE_KHR: Self = Self(1000000000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_swapchain`]
    pub const OBJECT_TYPE_SWAPCHAIN_KHR: Self = Self(1000001000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    pub const OBJECT_TYPE_DISPLAY_KHR: Self = Self(1000002000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_display`]
    pub const OBJECT_TYPE_DISPLAY_MODE_KHR: Self = Self(1000002001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_report`]
    pub const OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: Self = Self(1000011000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const OBJECT_TYPE_VIDEO_SESSION_KHR: Self = Self(1000023000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_video_queue`]
    pub const OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR: Self = Self(1000023001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    pub const OBJECT_TYPE_CU_MODULE_NVX: Self = Self(1000029000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nvx_binary_import`]
    pub const OBJECT_TYPE_CU_FUNCTION_NVX: Self = Self(1000029001);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_debug_utils`]
    pub const OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: Self = Self(1000128000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_acceleration_structure`]
    pub const OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: Self = Self(1000150000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_validation_cache`]
    pub const OBJECT_TYPE_VALIDATION_CACHE_EXT: Self = Self(1000160000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_ray_tracing`]
    pub const OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: Self = Self(1000165000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::intel_performance_query`]
    pub const OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: Self = Self(1000210000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_deferred_host_operations`]
    pub const OBJECT_TYPE_DEFERRED_OPERATION_KHR: Self = Self(1000268000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::nv_device_generated_commands`]
    pub const OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: Self = Self(1000277000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::fuchsia_buffer_collection`]
    pub const OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: Self = Self(1000366000);
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_descriptor_update_template`]
    pub const OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: Self = Self::OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::khr_sampler_ycbcr_conversion`]
    pub const OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: Self = Self::OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
    ///No documentation found
    ///
    ///Provided by [`crate::extensions::ext_private_data`]
    pub const OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: Self = Self::OBJECT_TYPE_PRIVATE_DATA_SLOT;
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
///[VkVendorId](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVendorId.html) - Khronos vendor IDs
///# C Specifications
///Khronos vendor IDs which **may** be returned in
///[`PhysicalDeviceProperties::vendor_id`] are:
///```c
///// Provided by VK_VERSION_1_0
///typedef enum VkVendorId {
///    VK_VENDOR_ID_VIV = 0x10001,
///    VK_VENDOR_ID_VSI = 0x10002,
///    VK_VENDOR_ID_KAZAN = 0x10003,
///    VK_VENDOR_ID_CODEPLAY = 0x10004,
///    VK_VENDOR_ID_MESA = 0x10005,
///    VK_VENDOR_ID_POCL = 0x10006,
///} VkVendorId;
///```
///# Related
/// - [`crate::vulkan1_0`]
///
///# Notes and documentation
///For more information, see the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html)
///
///This documentation is generated from the Vulkan specification and documentation.
///The documentation is copyrighted by *The Khronos Group Inc.* and is licensed under *Creative
/// Commons Attribution 4.0 International*.
///This license explicitely allows adapting the source material as long as proper credit is given.
#[doc(alias = "VkVendorId")]
#[derive(Clone, Copy, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "bytemuck", derive(Pod, Zeroable))]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[repr(C)]
pub struct VendorId(i32);
impl const Default for VendorId {
    fn default() -> Self {
        Self(0)
    }
}
impl std::fmt::Debug for VendorId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_tuple("VendorId")
            .field(match *self {
                Self::VENDOR_ID_VIV => &"VENDOR_ID_VIV",
                Self::VENDOR_ID_VSI => &"VENDOR_ID_VSI",
                Self::VENDOR_ID_KAZAN => &"VENDOR_ID_KAZAN",
                Self::VENDOR_ID_CODEPLAY => &"VENDOR_ID_CODEPLAY",
                Self::VENDOR_ID_MESA => &"VENDOR_ID_MESA",
                Self::VENDOR_ID_POCL => &"VENDOR_ID_POCL",
                other => unreachable!("invalid value for `VendorId`: {:?}", other),
            })
            .finish()
    }
}
impl VendorId {
    ///No documentation found
    pub const VENDOR_ID_VIV: Self = Self(65537);
    ///No documentation found
    pub const VENDOR_ID_VSI: Self = Self(65538);
    ///No documentation found
    pub const VENDOR_ID_KAZAN: Self = Self(65539);
    ///No documentation found
    pub const VENDOR_ID_CODEPLAY: Self = Self(65540);
    ///No documentation found
    pub const VENDOR_ID_MESA: Self = Self(65541);
    ///No documentation found
    pub const VENDOR_ID_POCL: Self = Self(65542);
    ///Default empty value
    #[inline]
    pub const fn empty() -> Self {
        Self::default()
    }
    ///Gets the raw underlying value
    #[inline]
    pub const fn bits(&self) -> i32 {
        self.0
    }
}
